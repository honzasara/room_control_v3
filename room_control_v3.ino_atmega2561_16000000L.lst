
/tmp/arduino_build_252452/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 e5 30 	jmp	0x61ca	; 0x61ca <__ctors_end>
       4:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
       8:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
       c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      10:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      14:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      18:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      1c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      20:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      24:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      28:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      2c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      30:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      34:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      38:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      3c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      40:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      44:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      48:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      4c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      50:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      54:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      58:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      5c:	0c 94 bd a5 	jmp	0x14b7a	; 0x14b7a <__vector_23>
      60:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      64:	0c 94 e7 a0 	jmp	0x141ce	; 0x141ce <__vector_25>
      68:	0c 94 bd a0 	jmp	0x1417a	; 0x1417a <__vector_26>
      6c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      70:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      74:	0c 94 07 a6 	jmp	0x14c0e	; 0x14c0e <__vector_29>
      78:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      7c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      80:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      84:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      88:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      8c:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      90:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      94:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      98:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      9c:	0c 94 1e a7 	jmp	0x14e3c	; 0x14e3c <__vector_39>
      a0:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      a4:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      a8:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      ac:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      b0:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      b4:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      b8:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      bc:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      c0:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      c4:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>
      c8:	0c 94 16 31 	jmp	0x622c	; 0x622c <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 27 98 	jmp	0x1304e	; 0x1304e <EthernetUDP::remotePort()>
      d0:	0c 94 35 96 	jmp	0x12c6a	; 0x12c6a <HardwareSerial::available()>
      d4:	0c 94 be 6a 	jmp	0xd57c	; 0xd57c <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
      d8:	0c 94 02 67 	jmp	0xce04	; 0xce04 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 2f 31 	jmp	0x625e	; 0x625e <EthernetClient::operator!=(EthernetClient const&)>
      e0:	0c 94 73 78 	jmp	0xf0e6	; 0xf0e6 <mqtt_callback(char*, unsigned char*, unsigned int)>
      e4:	0c 94 3e 69 	jmp	0xd27c	; 0xd27c <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
      e8:	0c 94 e5 49 	jmp	0x93ca	; 0x93ca <EthernetClient::connect(char const*, unsigned int)>
      ec:	0c 94 56 6f 	jmp	0xdeac	; 0xdeac <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      f0:	0c 94 80 44 	jmp	0x8900	; 0x8900 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      f4:	0c 94 e0 74 	jmp	0xe9c0	; 0xe9c0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
      f8:	0c 94 bd 40 	jmp	0x817a	; 0x817a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
      fc:	0c 94 41 a1 	jmp	0x14282	; 0x14282 <turnOffPWM.lto_priv.238+0x48>
     100:	0c 94 9c 37 	jmp	0x6f38	; 0x6f38 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     104:	0c 94 62 96 	jmp	0x12cc4	; 0x12cc4 <HardwareSerial::write(unsigned char)>
     108:	0c 94 21 6b 	jmp	0xd642	; 0xd642 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     10c:	0c 94 40 78 	jmp	0xf080	; 0xf080 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     110:	0c 94 2c 72 	jmp	0xe458	; 0xe458 <menu_tds_save_offset(unsigned int, float, unsigned char)>
     114:	0c 94 ea 66 	jmp	0xcdd4	; 0xcdd4 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     118:	0c 94 e4 67 	jmp	0xcfc8	; 0xcfc8 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>
     11c:	0c 94 64 71 	jmp	0xe2c8	; 0xe2c8 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     120:	0c 94 6f b2 	jmp	0x164de	; 0x164de <EthernetUDP::read()>
     124:	0c 94 46 b3 	jmp	0x1668c	; 0x1668c <EthernetUDP::begin(unsigned int)>
     128:	0c 94 4f 38 	jmp	0x709e	; 0x709e <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 b3 73 	jmp	0xe766	; 0xe766 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     130:	0c 94 c0 66 	jmp	0xcd80	; 0xcd80 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>
     134:	0c 94 ea b2 	jmp	0x165d4	; 0x165d4 <EthernetUDP::peek()>
     138:	0c 94 60 52 	jmp	0xa4c0	; 0xa4c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     13c:	0c 94 36 6d 	jmp	0xda6c	; 0xda6c <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>
     140:	0c 94 45 a1 	jmp	0x1428a	; 0x1428a <turnOffPWM.lto_priv.238+0x50>
     144:	0c 94 35 6b 	jmp	0xd66a	; 0xd66a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     148:	0c 94 03 6d 	jmp	0xda06	; 0xda06 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 0d 98 	jmp	0x1301a	; 0x1301a <EthernetUDP::write(unsigned char)>
     150:	0c 94 81 a1 	jmp	0x14302	; 0x14302 <turnOffPWM.lto_priv.238+0xc8>
     154:	0c 94 d5 70 	jmp	0xe1aa	; 0xe1aa <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     158:	0c 94 3d 6a 	jmp	0xd47a	; 0xd47a <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 50 40 	jmp	0x80a0	; 0x80a0 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 2d 39 	jmp	0x725a	; 0x725a <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 6b a1 	jmp	0x142d6	; 0x142d6 <turnOffPWM.lto_priv.238+0x9c>
     168:	0c 94 bc 37 	jmp	0x6f78	; 0x6f78 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 9f 6b 	jmp	0xd73e	; 0xd73e <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 a5 38 	jmp	0x714a	; 0x714a <display_enable_show(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 84 97 	jmp	0x12f08	; 0x12f08 <TwoWire::flush()>
     178:	0c 94 53 a1 	jmp	0x142a6	; 0x142a6 <turnOffPWM.lto_priv.238+0x6c>
     17c:	0c 94 6f 6b 	jmp	0xd6de	; 0xd6de <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     180:	0c 94 44 3b 	jmp	0x7688	; 0x7688 <EthernetClient::read()>
     184:	0c 94 19 38 	jmp	0x7032	; 0x7032 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 a8 3a 	jmp	0x7550	; 0x7550 <nullfce(unsigned int, unsigned int, unsigned char)>
     18c:	0c 94 1a 3b 	jmp	0x7634	; 0x7634 <EthernetClient::peek()>
     190:	0c 94 21 6a 	jmp	0xd442	; 0xd442 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 6e 38 	jmp	0x70dc	; 0x70dc <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     198:	0c 94 95 38 	jmp	0x712a	; 0x712a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     19c:	0c 94 49 40 	jmp	0x8092	; 0x8092 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 47 31 	jmp	0x628e	; 0x628e <LCDWIKI_KBV::Get_Width() const>
     1a4:	0c 94 a3 38 	jmp	0x7146	; 0x7146 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     1ac:	0c 94 c1 97 	jmp	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
     1b0:	0c 94 fb 40 	jmp	0x81f6	; 0x81f6 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     1b4:	0c 94 80 a1 	jmp	0x14300	; 0x14300 <turnOffPWM.lto_priv.238+0xc6>
     1b8:	0c 94 e2 40 	jmp	0x81c4	; 0x81c4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     1bc:	0c 94 06 45 	jmp	0x8a0c	; 0x8a0c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     1c0:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     1c4:	0c 94 73 66 	jmp	0xcce6	; 0xcce6 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     1c8:	0c 94 21 73 	jmp	0xe642	; 0xe642 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     1cc:	0c 94 4a 46 	jmp	0x8c94	; 0x8c94 <serial_putc(char, __file*)>
     1d0:	0c 94 ea 72 	jmp	0xe5d4	; 0xe5d4 <printf_via_mqtt(char, __file*)>
     1d4:	0c 94 a2 37 	jmp	0x6f44	; 0x6f44 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1d8:	0c 94 70 78 	jmp	0xf0e0	; 0xf0e0 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 bb 67 	jmp	0xcf76	; 0xcf76 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>
     1e0:	0c 94 6f a1 	jmp	0x142de	; 0x142de <turnOffPWM.lto_priv.238+0xa4>
     1e4:	0c 94 74 b3 	jmp	0x166e8	; 0x166e8 <EthernetUDP::stop()>
     1e8:	0c 94 78 3b 	jmp	0x76f0	; 0x76f0 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>
     1ec:	0c 94 99 b2 	jmp	0x16532	; 0x16532 <EthernetUDP::parsePacket()>
     1f0:	0c 94 48 98 	jmp	0x13090	; 0x13090 <EthernetClient::operator bool()>
     1f4:	0c 94 b5 6c 	jmp	0xd96a	; 0xd96a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     1f8:	0c 94 a9 96 	jmp	0x12d52	; 0x12d52 <HardwareSerial::flush()>
     1fc:	0c 94 6b b1 	jmp	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
     200:	0c 94 51 69 	jmp	0xd2a2	; 0xd2a2 <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 0e 42 	jmp	0x841c	; 0x841c <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     208:	0c 94 07 67 	jmp	0xce0e	; 0xce0e <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>
     20c:	0c 94 39 31 	jmp	0x6272	; 0x6272 <Print::availableForWrite()>
     210:	0c 94 e0 3a 	jmp	0x75c0	; 0x75c0 <EthernetClient::stop()>
     214:	0c 94 d8 6c 	jmp	0xd9b0	; 0xd9b0 <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>
     218:	0c 94 d4 4b 	jmp	0x97a8	; 0x97a8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     21c:	0c 94 a9 38 	jmp	0x7152	; 0x7152 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     220:	0c 94 3c 31 	jmp	0x6278	; 0x6278 <EthernetUDP::read(char*, unsigned int)>
     224:	0c 94 59 38 	jmp	0x70b2	; 0x70b2 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     228:	0c 94 c3 71 	jmp	0xe386	; 0xe386 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     22c:	0c 94 8f 6e 	jmp	0xdd1e	; 0xdd1e <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     230:	0c 94 9d 69 	jmp	0xd33a	; 0xd33a <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 61 a1 	jmp	0x142c2	; 0x142c2 <turnOffPWM.lto_priv.238+0x88>
     238:	0c 94 c6 46 	jmp	0x8d8c	; 0x8d8c <EthernetClient::connect(IPAddress, unsigned int)>
     23c:	0c 94 3b 98 	jmp	0x13076	; 0x13076 <UDP::beginMulticast(IPAddress, unsigned int)>
     240:	0c 94 67 a1 	jmp	0x142ce	; 0x142ce <turnOffPWM.lto_priv.238+0x94>
     244:	0c 94 eb 38 	jmp	0x71d6	; 0x71d6 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 a8 40 	jmp	0x8150	; 0x8150 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     24c:	0c 94 88 41 	jmp	0x8310	; 0x8310 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     250:	0c 94 4d 52 	jmp	0xa49a	; 0xa49a <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     254:	0c 94 5f 69 	jmp	0xd2be	; 0xd2be <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     258:	0c 94 3b a1 	jmp	0x14276	; 0x14276 <turnOffPWM.lto_priv.238+0x3c>
     25c:	0c 94 18 31 	jmp	0x6230	; 0x6230 <EthernetClient::flush()>
     260:	0c 94 2b 98 	jmp	0x13056	; 0x13056 <EthernetUDP::remoteIP()>
     264:	0c 94 7d 9a 	jmp	0x134fa	; 0x134fa <EthernetUDP::beginPacket(char const*, unsigned int)>
     268:	0c 94 a7 38 	jmp	0x714e	; 0x714e <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 37 40 	jmp	0x806e	; 0x806e <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>
     270:	0c 94 d9 67 	jmp	0xcfb2	; 0xcfb2 <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>
     274:	0c 94 84 3b 	jmp	0x7708	; 0x7708 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     278:	0c 94 e2 34 	jmp	0x69c4	; 0x69c4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     27c:	0c 94 aa b3 	jmp	0x16754	; 0x16754 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     280:	0c 94 43 31 	jmp	0x6286	; 0x6286 <LCDWIKI_KBV::Get_Height() const>
     284:	0c 94 6b 70 	jmp	0xe0d6	; 0xe0d6 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     288:	0c 94 ea 96 	jmp	0x12dd4	; 0x12dd4 <Print::write(unsigned char const*, unsigned int)>
     28c:	0c 94 00 44 	jmp	0x8800	; 0x8800 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     290:	0c 94 4f a1 	jmp	0x1429e	; 0x1429e <turnOffPWM.lto_priv.238+0x64>
     294:	0c 94 8a 66 	jmp	0xcd14	; 0xcd14 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     298:	0c 94 0e 38 	jmp	0x701c	; 0x701c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 8a 33 	jmp	0x6714	; 0x6714 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     2a0:	0c 94 3d 98 	jmp	0x1307a	; 0x1307a <EthernetClient::operator==(EthernetClient const&)>
     2a4:	0c 94 79 a1 	jmp	0x142f2	; 0x142f2 <turnOffPWM.lto_priv.238+0xb8>
     2a8:	0c 94 d5 95 	jmp	0x12baa	; 0x12baa <TwoWire::read()>
     2ac:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     2b0:	0c 94 6b 38 	jmp	0x70d6	; 0x70d6 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     2b4:	0c 94 fe 32 	jmp	0x65fc	; 0x65fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     2b8:	0c 94 d3 6e 	jmp	0xdda6	; 0xdda6 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     2bc:	0c 94 27 96 	jmp	0x12c4e	; 0x12c4e <HardwareSerial::peek()>
     2c0:	0c 94 7d a1 	jmp	0x142fa	; 0x142fa <turnOffPWM.lto_priv.238+0xc0>
     2c4:	0c 94 23 98 	jmp	0x13046	; 0x13046 <EthernetUDP::available()>
     2c8:	0c 94 29 38 	jmp	0x7052	; 0x7052 <a2d_complete(unsigned char, unsigned int)>
     2cc:	0c 94 7e 73 	jmp	0xe6fc	; 0xe6fc <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     2d0:	0c 94 94 97 	jmp	0x12f28	; 0x12f28 <TwoWire::write(unsigned char const*, unsigned int)>
     2d4:	0c 94 5c 95 	jmp	0x12ab8	; 0x12ab8 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 01 9a 	jmp	0x13402	; 0x13402 <IPAddress::printTo(Print&) const>
     2dc:	0c 94 b4 74 	jmp	0xe968	; 0xe968 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     2e0:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 63 6c 	jmp	0xd8c6	; 0xd8c6 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2e8:	0c 94 fb 95 	jmp	0x12bf6	; 0x12bf6 <TwoWire::available()>
     2ec:	0c 94 f6 75 	jmp	0xebec	; 0xebec <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     2f0:	0c 94 59 a1 	jmp	0x142b2	; 0x142b2 <turnOffPWM.lto_priv.238+0x78>
     2f4:	0c 94 19 31 	jmp	0x6232	; 0x6232 <EthernetClient::write(unsigned char)>
     2f8:	0c 94 64 66 	jmp	0xccc8	; 0xccc8 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     2fc:	0c 94 14 6c 	jmp	0xd828	; 0xd828 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     300:	0c 94 04 96 	jmp	0x12c08	; 0x12c08 <HardwareSerial::availableForWrite()>
     304:	0c 94 65 b5 	jmp	0x16aca	; 0x16aca <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123>
     308:	0c 94 49 a1 	jmp	0x14292	; 0x14292 <turnOffPWM.lto_priv.238+0x58>
     30c:	0c 94 81 b3 	jmp	0x16702	; 0x16702 <EthernetUDP::endPacket()>
     310:	0c 94 f6 71 	jmp	0xe3ec	; 0xe3ec <menu_tds_save_period(unsigned int, float, unsigned char)>
     314:	0c 94 7d 40 	jmp	0x80fa	; 0x80fa <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     318:	0c 94 13 96 	jmp	0x12c26	; 0x12c26 <HardwareSerial::read()>
     31c:	0c 94 02 96 	jmp	0x12c04	; 0x12c04 <TwoWire::onRequestService()>
     320:	0c 94 67 6a 	jmp	0xd4ce	; 0xd4ce <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     324:	0c 94 a1 66 	jmp	0xcd42	; 0xcd42 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     328:	0c 94 03 96 	jmp	0x12c06	; 0x12c06 <TwoWire::onReceiveService(unsigned char*, int)>
     32c:	0c 94 5f 46 	jmp	0x8cbe	; 0x8cbe <EthernetClient::write(unsigned char const*, unsigned int)>
     330:	0c 94 5e 3b 	jmp	0x76bc	; 0x76bc <EthernetClient::available()>
     334:	0c 94 2b 6a 	jmp	0xd456	; 0xd456 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     338:	0c 94 10 71 	jmp	0xe220	; 0xe220 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     33c:	0c 94 fb 97 	jmp	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
     340:	0c 94 40 3b 	jmp	0x7680	; 0x7680 <EthernetClient::read(unsigned char*, unsigned int)>
     344:	0c 94 27 74 	jmp	0xe84e	; 0xe84e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     348:	0c 94 d5 77 	jmp	0xefaa	; 0xefaa <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     350:	0c 94 a9 3a 	jmp	0x7552	; 0x7552 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     354:	0c 94 76 40 	jmp	0x80ec	; 0x80ec <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     358:	0c 94 04 6b 	jmp	0xd608	; 0xd608 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     35c:	0c 94 bd 3a 	jmp	0x757a	; 0x757a <EthernetClient::connected()>
     360:	0c 94 9b 40 	jmp	0x8136	; 0x8136 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     364:	0c 94 41 40 	jmp	0x8082	; 0x8082 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>
     368:	0c 94 75 a1 	jmp	0x142ea	; 0x142ea <turnOffPWM.lto_priv.238+0xb0>
     36c:	0c 94 1a 6d 	jmp	0xda34	; 0xda34 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>
     370:	0c 94 75 38 	jmp	0x70ea	; 0x70ea <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     374:	0c 94 85 97 	jmp	0x12f0a	; 0x12f0a <TwoWire::peek()>
     378:	0c 94 af 37 	jmp	0x6f5e	; 0x6f5e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     37c:	0c 94 49 6b 	jmp	0xd692	; 0xd692 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     380:	0c 94 c8 6e 	jmp	0xdd90	; 0xdd90 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     384:	0c 94 d2 6b 	jmp	0xd7a4	; 0xd7a4 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     388:	0c 94 50 b2 	jmp	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
     38c:	0c 94 da 45 	jmp	0x8bb4	; 0x8bb4 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>
     390:	0c 94 5d a1 	jmp	0x142ba	; 0x142ba <turnOffPWM.lto_priv.238+0x80>

00000394 <__trampolines_end>:
__trampolines_end():
     394:	4e 41       	sbci	r20, 0x1E	; 30
     396:	4e 49       	Address 0x0000000000000396 is out of bounds.
.word	0xffff	; ????

00000397 <pstr_inity>:
     397:	49 4e 49 54 59                                      INITY

0000039c <pstr_inf>:
     39c:	49 4e 46                                            INF

0000039f <pwr_m10>:
     39f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3af:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003b7 <pwr_p10>:
     3b7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3c7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3d7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3e7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3f7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     407:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     417:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     427:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     437:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     447:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     457:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     467:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     477:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     487:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     497:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     4a7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     4b7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4c7:	3d 27                                               ='

000004c9 <char_T>:
     4c9:	54 00                                               T.

000004cb <char_D>:
     4cb:	44 00                                               D.

000004cd <char_I>:
     4cd:	49 00                                               I.

000004cf <char_P>:
     4cf:	50 00                                               P.

000004d1 <nastaveni_deassociate_sensor>:
     4d1:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

000004df <text_select_term_default_ring>:
     4df:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     4ef:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

000004fa <text_select_term_mode>:
     4fa:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     50a:	61 74 6f 72 75 00                                   atoru.

00000510 <text_term_do_deactivate>:
     510:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 75     Deaktivovat regu
     520:	6c 61 74 6f 72 00                                   lator.

00000526 <text_nastavit_pid>:
     526:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

00000530 <text_assocoivat_output>:
     530:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

00000540 <text_assocoivat>:
     540:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

0000054f <ring_text_setup>:
     54f:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000559 <nastaveni_rtds_subscribe>:
     559:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

00000569 <text_rtds_novy>:
     569:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     579:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000584 <text_button_mode_cool>:
     584:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

0000058d <text_button_mode_heat>:
     58d:	54 6f 70 65 6e 69 00                                Topeni.

00000594 <nastaveni_ring_text>:
     594:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     5a4:	74 6f 72 75 00                                      toru.

000005a9 <text_no>:
     5a9:	4e 65 00                                            Ne.

000005ac <text_yes>:
     5ac:	41 6e 6f 00                                         Ano.

000005b0 <text_special_case>:
     5b0:	40 00                                               @.

000005b2 <text_lower_case>:
     5b2:	61 00                                               a.

000005b4 <text_upper_case>:
     5b4:	41 00                                               A.

000005b6 <text_delete_char>:
     5b6:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

000005c0 <text_klavesnice>:
     5c0:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

000005cb <text_ntp_sync_time>:
     5cb:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

000005dc <text_nastaveni_setup_program>:
     5dc:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
     5ec:	6d 75 00                                            mu.

000005ef <nastaveni_deassociate_program>:
     5ef:	55 76 6f 6c 6e 69 74 20 70 72 6f 67 72 61 6d 00     Uvolnit program.

000005ff <text_nastaveni_ring_program>:
     5ff:	56 79 62 65 72 20 70 72 6f 67 72 61 6d 75 00        Vyber programu.

0000060e <text_zrusit>:
     60e:	5a 72 75 73 69 74 00                                Zrusit.

00000615 <text_ulozit>:
     615:	55 6c 6f 7a 69 74 00                                Ulozit.

0000061c <text_upozorneni>:
     61c:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

00000627 <nastaveni_tds_offset>:
     627:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

00000637 <nastaveni_name_sensor>:
     637:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

00000646 <nastaveni_delete_sensor>:
     646:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000654 <text_tds_sensors>:
     654:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     664:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

0000066f <budik_text>:
     66f:	42 75 64 69 6b 00                                   Budik.

00000675 <text_nastaveni_programator>:
     675:	4e 61 73 74 61 76 65 6e 69 20 70 72 6f 67 72 61     Nastaveni progra
     685:	6d 61 74 6f 72 75 00                                matoru.

0000068c <text_select_default_temp>:
     68c:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     69c:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000006a6 <button_zpet>:
     6a6:	5a 70 65 74 00                                      Zpet.

000006ab <nastaveni_default>:
     6ab:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000006bb <nastaveni_nrf>:
     6bb:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000006c9 <nastaveni_site>:
     6c9:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000006d8 <char_NULL>:
	...

000006d9 <nastaveni_text>:
     6d9:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000006e3 <funkce_text>:
     6e3:	46 75 6e 6b 63 65 00                                Funkce.

000006ea <regulator_text>:
     6ea:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

000006f4 <Menu_All>:
     6f4:	0a 06 06 00 be 59 ea 06 22 01 96 00 aa 00 28 00     .....Y..".....(.
     704:	02 05 4d 52 08 a5 38 e3 06 22 01 5a 00 aa 00 28     ..MR..8..".Z...(
     714:	00 02 01 4d 52 08 a5 38 d9 06 22 01 1e 00 aa 00     ...MR..8..".....
     724:	28 00 02 02 4d 52 08 a5 38 00 00 00 00 00 00 00     (...MR..8.......
	...
     7a4:	80 5b 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     .[....R.<.......
     7b4:	21 6b 35 6b 0a a5 38 66 5b 64 00 dc 00 52 00 3c     !k5k..8f[d...R.<
     7c4:	00 03 00 f8 ff ff 01 21 6b 35 6b 0a a5 38 4c 5b     .......!k5k..8L[
     7d4:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 21 6b     ....R.<.......!k
     7e4:	35 6b 0a a5 38 30 5b 18 01 dc 00 52 00 3c 00 03     5k..80[....R.<..
     7f4:	e0 ff ff ff 02 21 6b 35 6b 0a a5 38 18 5b 72 01     .....!k5k..8.[r.
     804:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 21 6b 35 6b     ..R.<.......!k5k
     814:	0a a5 38 0a 00 82 00 00 f6 75 00 00 00 00 0c a8     ..8......u......
     824:	3a a5 38 d8 06 18 01 22 01 00 da 45 00 00 00 00     :.8...."...E....
     834:	0c a8 3a a5 38 d8 06 0a 00 1e 00 00 88 41 00 00     ..:.8........A..
     844:	00 00 09 a8 3a a5 38 d8 06 00 00 00 00 00 00 00     ....:.8.........
	...
     9b4:	00 03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01     ................
     9c4:	40 01 01 ff ff 08 62 38 59 38 50 38 a6 3a d9 06     @.....b8Y8P8.:..
     9d4:	c9 06 0a 00 28 00 be 00 28 00 02 10 4d 52 08 a5     ....(...(...MR..
     9e4:	38 bb 06 0a 00 64 00 be 00 28 00 02 00 a8 3a 08     8....d...(....:.
     9f4:	a5 38 ab 06 0a 00 a0 00 be 00 28 00 02 00 a8 3a     .8........(....:
     a04:	08 a5 38 a6 06 0a 00 dc 00 be 00 28 00 02 00 60     ..8........(...`
     a14:	52 08 a5 38 86 5a 18 01 64 00 be 00 28 00 02 06     R..8.Z..d...(...
     a24:	4d 52 08 a5 38 95 5a 18 01 28 00 be 00 28 00 02     MR..8.Z..(...(..
     a34:	03 4d 52 08 a5 38 8c 06 18 01 a0 00 be 00 28 00     .MR..8........(.
     a44:	01 08 4d 52 08 a5 38 75 06 18 01 dc 00 be 00 28     ..MR..8u.......(
     a54:	00 01 0f 4d 52 08 a5 38 00 00 00 00 00 00 00 00     ...MR..8........
	...
     af0:	00 18 01 22 01 00 da 45 00 00 00 00 0c a8 3a a5     ..."...E......:.
     b00:	38 d8 06 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
     c8c:	00 00 00 08 00 01 00 00 00 00 00 02 00 00 00 00     ................
     c9c:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a     ..@......:.:.:.:
     cac:	e3 06 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     ..........(...`R
     cbc:	08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
     dc8:	00 00 00 18 01 22 01 00 da 45 00 00 00 00 0c a8     ....."...E......
     dd8:	3a a5 38 d8 06 00 00 00 00 00 00 00 00 00 00 00     :.8.............
	...
     e10:	00 00 00 6f 06 0a 00 28 00 be 00 78 00 02 00 00     ...o...(...x....
     e20:	00 00 01 a8 3a a7 38 78 3b 08 00 00 00 00 00 00     ....:.8x;.......
	...
     f68:	00 01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01     ................
     f78:	40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a 95 5a     @......:.:.:.:.Z
     f88:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
     f98:	38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    10a4:	00 18 01 22 01 00 da 45 00 00 00 00 0c a8 3a a5     ..."...E......:.
    10b4:	38 d8 06 9a 01 48 00 00 00 44 28 00 7e 00 08 a8     8....H...D(.~...
    10c4:	3a a5 38 d8 06 dc 00 14 00 00 0e 42 f0 00 f0 00     :.8........B....
    10d4:	08 a8 3a a5 38 d8 06 00 00 00 00 00 00 00 00 00     ..:.8...........
	...
    1130:	00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01     ....#...7..<<...
    1140:	00 01 d3 6e 50 40 af 37 08 00 00 00 00 00 00 00     ...nP@.7........
	...
    1160:	2b 9a 01 1e 00 28 00 28 00 02 00 0e 38 08 a5 38     +....(.(....8..8
    1170:	2d 9a 01 c8 00 28 00 28 00 02 00 19 38 08 a5 38     -....(.(....8..8
	...
    1240:	00 00 00 01 00 03 00 01 02 00 00 03 00 00 00 00     ................
    1250:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a     ..@......:.:.:.:
    1260:	54 06 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     T.........(...`R
    1270:	08 a5 38 46 06 18 01 be 00 be 00 28 00 02 00 c8     ..8F.......(....
    1280:	6e 08 a5 38 0c 5a 18 01 8c 00 be 00 28 00 02 00     n..8.Z......(...
    1290:	10 71 08 a5 38 37 06 18 01 5a 00 be 00 28 00 02     .q..87...Z...(..
    12a0:	00 d5 70 08 a5 38 27 06 18 01 28 00 be 00 28 00     ..p..8'...(...(.
    12b0:	02 00 64 71 08 a5 38 00 00 00 00 00 00 00 00 00     ..dq..8.........
	...
    137c:	00 00 00 18 01 22 01 00 da 45 00 00 00 00 0c a8     ....."...E......
    138c:	3a a5 38 d8 06 14 00 14 00 00 56 6f 00 00 00 00     :.8.......Vo....
    139c:	08 a8 3a a5 38 d8 06 14 00 14 00 00 6b 70 00 00     ..:.8.......kp..
    13ac:	00 00 0c a8 3a a5 38 d8 06 00 00 00 00 00 00 00     ....:.8.........
	...
    151c:	00 05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01     ................
    152c:	40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a 1c 06     @......:.:.:.:..
    153c:	15 06 0a 00 c8 00 82 00 28 00 02 00 7d 40 08 a5     ........(...}@..
    154c:	38 0e 06 96 00 c8 00 82 00 28 00 02 00 60 52 08     8........(...`R.
    155c:	a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
	...
    1658:	00 64 00 2d 00 00 06 45 b4 00 28 00 08 a8 3a a5     .d.-...E..(...:.
    1668:	38 d8 06 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    1714:	2b 3c 00 2d 00 28 00 28 00 02 00 a9 38 08 a5 38     +<.-.(.(....8..8
    1724:	2d 18 01 2d 00 28 00 28 00 02 00 eb 38 08 a5 38     -..-.(.(....8..8
	...
    17f4:	00 00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00     ...........f....
    1804:	cc 01 04 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a     .........:.:.:.:
    1814:	ff 05 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     ..........(...`R
    1824:	08 a5 38 ef 05 d2 00 dc 00 be 00 28 00 02 00 02     ..8........(....
    1834:	67 08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00     g..8............
	...
    1ab0:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    1ac0:	ff 82 3c 02 03 03 ff 00 d8 6c 07 67 03 6d 1a 6d     ..<......l.g.m.m
    1ad0:	08 02 00 00 00 00 00 00 01 0d 0a 00 0a 00 cc 01     ................
    1ae0:	2c 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a dc 05     ,......:.:.:.:..
    1af0:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    1b00:	38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    1da8:	00 00 00 01 00 00 00 00 00 00 00 0e 0a 00 0a 00     ................
    1db8:	cc 01 2c 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a     ..,......:.:.:.:
    1dc8:	75 06 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     u.........(...`R
    1dd8:	08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
    2084:	00 01 00 00 00 00 00 00 00 0f 00 00 00 00 e0 01     ................
    2094:	40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a c9 06     @......:.:.:.:..
    20a4:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    20b4:	38 cb 05 0a 00 28 00 be 00 28 00 01 00 21 73 08     8....(...(...!s.
    20c4:	a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
	...
    235c:	00 00 00 02 00 00 00 00 00 00 00 10 00 00 00 00     ................
    236c:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a     ..@......:.:.:.:
    237c:	c0 05 15 06 0a 00 c8 00 82 00 28 00 02 00 76 40     ..........(...v@
    238c:	08 a5 38 0e 06 96 00 c8 00 82 00 28 00 02 00 60     ..8........(...`
    239c:	52 08 a5 38 b6 05 2c 01 c8 00 82 00 28 00 02 00     R..8..,.....(...
    23ac:	bd 40 08 a5 38 b4 05 40 01 23 00 28 00 28 00 02     .@..8..@.#.(.(..
    23bc:	00 6b 38 08 a5 38 b2 05 6d 01 23 00 28 00 28 00     .k8..8..m.#.(.(.
    23cc:	02 01 6b 38 08 a5 38 b0 05 9a 01 23 00 28 00 28     ..k8..8....#.(.(
    23dc:	00 02 02 6b 38 08 a5 38 00 00 00 00 00 00 00 00     ...k8..8........
	...
    2498:	00 00 00 0a 00 23 00 00 80 44 2c 01 28 00 08 a8     .....#...D,.(...
    24a8:	3a a5 38 d8 06 00 00 00 00 00 00 00 00 00 00 00     :.8.............
	...
    25d4:	00 00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00     ....P......((...
    25e4:	00 03 75 38 e2 40 6e 38 08 00 00 00 00 00 00 00     ..u8.@n8........
	...
    2638:	00 06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01     .........g......
    2648:	04 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a 1c 06     .......:.:.:.:..
    2658:	15 06 0a 00 c8 00 82 00 28 00 02 00 76 40 08 a5     ........(...v@..
    2668:	38 0e 06 96 00 c8 00 82 00 28 00 02 00 60 52 08     8........(...`R.
    2678:	a5 38 b6 05 2c 01 c8 00 82 00 28 00 02 00 bd 40     .8..,.....(....@
    2688:	08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
    2774:	00 0a 00 23 00 00 80 44 2c 01 28 00 08 a8 3a a5     ...#...D,.(...:.
    2784:	38 d8 06 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    28b0:	0a 00 3c 00 1e 00 1e 00 02 28 28 02 09 00 00 02     ..<......((.....
    28c0:	95 38 fb 40 a3 38 08 00 00 00 00 00 00 00 00 00     .8.@.8..........
	...
    2910:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    2920:	cc 01 04 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a     .........:.:.:.:
    2930:	1c 06 ac 05 1e 00 3c 00 64 00 28 00 02 00 9b 40     ......<.d.(....@
    2940:	08 a5 38 a9 05 fa 00 3c 00 64 00 28 00 02 00 60     ..8....<.d.(...`
    2950:	52 08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00     R..8............
	...
    2a4c:	00 00 00 14 00 23 00 00 a8 40 00 00 00 00 08 a8     .....#...@......
    2a5c:	3a a5 38 d8 06 00 00 00 00 00 00 00 00 00 00 00     :.8.............
	...
    2bec:	00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01     .........d2.2.|.
    2bfc:	8c 00 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a ea 06     .......:.:.:.:..
    2c0c:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    2c1c:	38 94 05 0a 00 a0 00 be 00 28 00 01 09 41 40 08     8........(...A@.
    2c2c:	a5 38 ff 05 f0 00 28 00 be 00 28 00 01 0d 4d 52     .8....(...(...MR
    2c3c:	08 21 6a dc 05 f0 00 5a 00 be 00 28 00 01 0e 4d     .!j....Z...(...M
    2c4c:	52 08 21 6a 00 00 00 00 00 00 00 00 00 00 00 00     R.!j............
	...
    2cb4:	00 00 8d 05 f0 00 5a 00 64 00 28 00 01 00 f8 ff     ......Z.d.(.....
    2cc4:	ff 03 04 6b b5 6c 0a 2b 6a 84 05 68 01 5a 00 64     ...k.l.+j..h.Z.d
    2cd4:	00 28 00 01 1f 00 ff ff 05 04 6b b5 6c 0a 2b 6a     .(........k.l.+j
	...
    2d28:	00 18 01 22 01 00 da 45 00 00 00 00 0c a8 3a a5     ..."...E......:.
    2d38:	38 d8 06 8c 00 05 00 00 63 6c 00 00 00 00 08 a8     8.......cl......
    2d48:	3a a5 38 d8 06 18 01 28 00 00 06 45 8c 00 28 00     :.8....(...E..(.
    2d58:	08 a8 3a 2b 6a d8 06 00 00 00 00 00 00 00 00 00     ..:+j...........
	...
    2db4:	00 00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01     ....(...(.......
    2dc4:	00 01 d2 6b 49 40 4f 38 08 0a 00 64 00 be 00 28     ...kI@O8...d...(
    2dd4:	00 01 01 01 00 01 01 00 01 67 6a 37 40 4f 38 08     .........gj7@O8.
    2de4:	2b a4 01 28 00 28 00 28 00 02 00 a9 38 08 2b 6a     +..(.(.(....8.+j
    2df4:	2d f0 00 28 00 28 00 28 00 02 00 eb 38 08 2b 6a     -..(.(.(....8.+j
	...
    2ec4:	00 00 00 04 02 03 00 02 02 00 00 05 00 00 00 00     ................
    2ed4:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a be 6a     ..@......:.:.:.j
    2ee4:	86 5a a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     .Z........(...`R
    2ef4:	08 a5 38 69 05 0a 00 28 00 be 00 28 00 01 00 b3     ..8i...(...(....
    2f04:	73 08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00     s..8............
	...
    3000:	00 00 00 dc 00 14 00 00 0e 42 f0 00 f0 00 08 a8     .........B......
    3010:	3a a5 38 d8 06 18 01 22 01 00 da 45 00 00 00 00     :.8...."...E....
    3020:	0c a8 3a a5 38 d8 06 9a 01 48 00 01 00 44 28 00     ..:.8....H...D(.
    3030:	7e 00 08 a8 3a a5 38 d8 06 00 00 00 00 00 00 00     ~...:.8.........
	...
    3090:	e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01 04     ..#...7..<<.....
    30a0:	b4 74 7e 73 bc 37 08 00 00 00 00 00 00 00 00 00     .t~s.7..........
	...
    30bc:	00 00 2b 9a 01 1e 00 28 00 28 00 02 01 0e 38 08     ..+....(.(....8.
    30cc:	a5 38 2d 9a 01 c8 00 28 00 28 00 02 01 19 38 08     .8-....(.(....8.
    30dc:	a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
	...
    31a0:	00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01     ................
    31b0:	40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a 86 5a     @......:.:.:.:.Z
    31c0:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    31d0:	38 46 06 18 01 5a 00 be 00 28 00 02 00 9d 69 08     8F...Z...(....i.
    31e0:	a5 38 37 06 18 01 28 00 be 00 28 00 02 00 5c 95     .87...(...(...\.
    31f0:	08 a5 38 59 05 18 01 8c 00 be 00 28 00 02 00 70     ..8Y.......(...p
    3200:	78 08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00     x..8............
	...
    32dc:	00 14 00 14 00 00 e0 74 00 00 00 00 0c a8 3a a5     .......t......:.
    32ec:	38 d8 06 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    3478:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    3488:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a     ..@......:.:.:.:
    3498:	8c 06 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     ..........(...`R
    34a8:	08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
    35b4:	00 00 00 18 01 22 01 00 da 45 00 00 00 00 0c a8     ....."...E......
    35c4:	3a a5 38 d8 06 9a 01 48 00 02 00 44 28 00 56 00     :.8....H...D(.V.
    35d4:	08 a8 3a a5 38 d8 06 05 00 1e 00 00 0e 42 cc 01     ..:.8........B..
    35e4:	b4 00 08 a8 3a a5 38 d8 06 00 00 00 00 00 00 00     ....:.8.........
	...
    3670:	00 00 2b 9a 01 1e 00 28 00 28 00 02 02 0e 38 08     ..+....(.(....8.
    3680:	a5 38 2d 9a 01 a0 00 28 00 28 00 02 02 19 38 08     .8-....(.(....8.
    3690:	a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
	...
    3734:	00 00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff     .....(.x.<......
    3744:	ff 82 50 02 03 02 02 00 27 74 5f 69 a2 37 9c 37     ..P.....'t_i.7.7
    3754:	08 01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01     ................
    3764:	40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a 4f 05     @......:.:.:.:O.
    3774:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    3784:	38 37 06 18 01 28 00 be 00 28 00 02 00 9f 6b 08     87...(...(....k.
    3794:	a5 38 40 05 18 01 64 00 be 00 28 00 02 0b 4d 52     .8@...d...(...MR
    37a4:	08 a5 38 30 05 18 01 a0 00 be 00 28 00 01 00 a8     ..80.......(....
    37b4:	3a 08 a5 38 26 05 18 01 dc 00 be 00 28 00 02 0c     :..8&.......(...
    37c4:	4d 52 08 a5 38 10 05 0a 00 28 00 be 00 28 00 01     MR..8....(...(..
    37d4:	00 51 69 08 a5 38 00 00 00 00 00 00 00 00 00 00     .Qi..8..........
	...
    3890:	00 18 01 22 01 00 da 45 00 00 00 00 0c a8 3a a5     ..."...E......:.
    38a0:	38 d8 06 8c 00 05 00 00 63 6c 00 00 00 00 08 a8     8.......cl......
    38b0:	3a a5 38 d8 06 00 00 00 00 00 00 00 00 00 00 00     :.8.............
	...
    3a2c:	00 00 00 06 00 02 00 00 00 00 00 09 00 00 00 00     ................
    3a3c:	e0 01 40 01 01 ff ff 08 a6 3a a6 3a a6 3a a6 3a     ..@......:.:.:.:
    3a4c:	fa 04 a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52     ..........(...`R
    3a5c:	08 a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00     ..8.............
	...
    3ce8:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    3cf8:	ff 01 32 00 05 01 ff 05 84 3b c0 66 4f 38 3d 6a     ..2......;.fO8=j
    3d08:	08 01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01     .........h......
    3d18:	2c 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a df 04     ,......:.:.:.:..
    3d28:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    3d38:	38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    3fc4:	00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82     ...(.x.2........
    3fd4:	3c 02 03 03 ff 05 14 6c 49 6b 4f 38 6f 6b 08 01     <......lIkO8ok..
    3fe4:	00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01     ..............,.
    3ff4:	06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a 40 05 a6 06     .....:.:.:.:@...
    4004:	0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5 38 d1     ......(...`R..8.
    4014:	04 d2 00 dc 00 aa 00 28 00 02 00 d9 67 08 a5 38     .......(....g..8
	...
    411c:	00 00 00 9a 01 52 00 03 00 44 28 00 56 00 08 a8     .....R...D(.V...
    412c:	3a a5 38 d8 06 00 00 00 00 00 00 00 00 00 00 00     :.8.............
	...
    41d8:	00 00 2b 9a 01 28 00 28 00 28 00 02 03 0e 38 08     ..+..(.(.(....8.
    41e8:	a5 38 2d 9a 01 aa 00 28 00 28 00 02 03 19 38 08     .8-....(.(....8.
    41f8:	a5 38 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
	...
    429c:	00 00 00 0a 00 28 00 78 00 32 00 01 01 e0 07 ff     .....(.x.2......
    42ac:	ff 82 3c 02 03 03 03 01 27 74 e4 67 a2 37 36 6d     ..<.....'t.g.76m
    42bc:	08 02 00 01 00 00 02 00 01 0b 0a 00 0a 00 cc 01     ................
    42cc:	2c 01 06 e0 ff 08 a6 3a a6 3a a6 3a a6 3a d5 58     ,......:.:.:.:.X
    42dc:	a6 06 0a 00 dc 00 be 00 28 00 02 00 60 52 08 a5     ........(...`R..
    42ec:	38 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     8...............
	...
    43f8:	00 0e 01 28 00 00 06 45 8c 00 28 00 08 a8 3a a5     ...(...E..(...:.
    4408:	38 cf 04 0e 01 5a 00 01 06 45 8c 00 28 00 08 a8     8....Z...E..(...
    4418:	3a a5 38 cd 04 0e 01 8c 00 02 06 45 8c 00 28 00     :.8........E..(.
    4428:	08 a8 3a a5 38 cb 04 0e 01 be 00 03 06 45 8c 00     ..:.8........E..
    4438:	28 00 08 a8 3a a5 38 c9 04 00 00 00 00 00 00 00     (...:.8.........
	...
    44b4:	2b 9a 01 28 00 28 00 28 00 02 00 a9 38 08 a5 38     +..(.(.(....8..8
    44c4:	2d e6 00 28 00 28 00 28 00 02 00 eb 38 08 a5 38     -..(.(.(....8..8
    44d4:	2b 9a 01 5a 00 28 00 28 00 02 01 a9 38 08 a5 38     +..Z.(.(....8..8
    44e4:	2d e6 00 5a 00 28 00 28 00 02 01 eb 38 08 a5 38     -..Z.(.(....8..8
    44f4:	2b 9a 01 8c 00 28 00 28 00 02 02 a9 38 08 a5 38     +....(.(....8..8
    4504:	2d e6 00 8c 00 28 00 28 00 02 02 eb 38 08 a5 38     -....(.(....8..8
    4514:	2b 9a 01 be 00 28 00 28 00 02 03 a9 38 08 a5 38     +....(.(....8..8
    4524:	2d e6 00 be 00 28 00 28 00 02 03 eb 38 08 a5 38     -....(.(....8..8
	...
    4594:	00 00 00 01 00 04 00 00 08 00 00 0c 0a 00 0a 00     ................
    45a4:	cc 01 2c 01 06 e0 ff 08 a6 3a a6 3a a6 3a 2d 39     ..,......:.:.:-9
	...

000056d0 <keyboad_number_char_special>:
    56d0:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    56e0:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

000056ea <keyboad_number_char_lower>:
    56ea:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    56fa:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00005704 <keyboad_number_char_upper>:
    5704:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    5714:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000571e <network_name>:
    571e:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

0000572b <network_mqtt_key>:
    572b:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

0000573c <network_mqtt_user>:
    573c:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    574c:	72 00                                               r.

0000574e <network_mqtt_port>:
    574e:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    575e:	74 00                                               t.

00005760 <network_mqtt_host>:
    5760:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    5770:	74 00                                               t.

00005772 <network_ntp>:
    5772:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

0000577e <network_dns>:
    577e:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

0000578a <network_gw>:
    578a:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00005795 <network_netmask>:
    5795:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000057a5 <network_mac>:
    57a5:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000057b1 <global_time_offset>:
    57b1:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    57c1:	6f 66 66 73 65 74 00                                offset.

000057c8 <global_time_ntp>:
    57c8:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

000057d8 <global_time_set>:
    57d8:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

000057e8 <termbig_header_out>:
    57e8:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

000057f6 <termbig_subscribe>:
    57f6:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    5806:	73 63 72 69 62 65 00                                scribe.

0000580d <thermctl_subscribe>:
    580d:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    581d:	62 73 63 72 69 62 65 00                             bscribe.

00005825 <lightctl_header_out>:
    5825:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00005834 <thermctl_header_in>:
    5834:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00005842 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    5842:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    5852:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    5862:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    5872:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    5882:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    5892:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    58a2:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

000058ae <text_rtc_cas>:
    58ae:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    58be:	6e 79 00                                            ny.

000058c1 <text_ntp_cas>:
    58c1:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    58d1:	63 61 73 00                                         cas.

000058d5 <text_pid_regulator>:
    58d5:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

000058e3 <text_nrf_rozhrani>:
    58e3:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

000058f0 <text_rest_rozhrani>:
    58f0:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    5900:	69 00                                               i.

00005902 <thermctl_header_out>:
    5902:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00005911 <text_mqtt_rozhrani>:
    5911:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

0000591f <text_ethernet_rozhrani>:
    591f:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    592f:	69 00                                               i.

00005931 <text_onewire_hledam>:
    5931:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

0000593e <text_onewire_rozhrani>:
    593e:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

0000594d <text_touchscreen>:
    594d:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00005959 <text_nastaveni_systemu>:
    5959:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    5969:	75 00                                               u.

0000596b <text_test_eeprom>:
    596b:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

0000597b <text_ok>:
    597b:	4f 4b 00                                            OK.

0000597e <text_test_ram>:
    597e:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

0000598b <text_bezny_start>:
    598b:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

00005997 <text_prog>:
    5997:	50 52 4f 47 00                                      PROG.

0000599c <text_vychozi_nastaveni>:
    599c:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    59ac:	69 00                                               i.

000059ae <text_vnitrni_ochrany>:
    59ae:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

000059be <term_title>:
    59be:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    59ce:	6f 72 20 76 33 00                                   or v3.

000059d4 <regulator_default_text>:
    59d4:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    59e4:	72 3a 00                                            r:.

000059e7 <current_time>:
    59e7:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

000059f4 <current_temp>:
    59f4:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    5a04:	3a 00                                               :.

00005a06 <text_err>:
    5a06:	45 72 72 6f 72 00                                   Error.

00005a0c <nastaveni_tds_period>:
    5a0c:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

00005a1b <temp_offset_short>:
    5a1b:	6f 66 66 73 65 74 3a 00                             offset:.

00005a23 <text_online>:
    5a23:	4f 6e 6c 69 6e 65 00                                Online.

00005a2a <text_last_update>:
    5a2a:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    5a3a:	7a 61 63 65 3a 00                                   zace:.

00005a40 <current_temp_short>:
    5a40:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

00005a49 <text_nazev>:
    5a49:	4e 61 7a 65 76 3a 00                                Nazev:.

00005a50 <text_nastavit_tds>:
    5a50:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    5a60:	6c 6f 00                                            lo.

00005a63 <text_not_used>:
    5a63:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

00005a70 <text_associovat_tds>:
    5a70:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    5a80:	64 6c 6f 00                                         dlo.

00005a84 <text_rtds_prefix>:
    5a84:	2f 00                                               /.

00005a86 <nastaveni_rtds>:
    5a86:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00005a95 <nastaveni_onewire>:
    5a95:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00005aa3 <text_term_do_activate>:
    5aa3:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    5ab3:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

00005abd <text_term_deactive>:
    5abd:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00005ac7 <text_term_active>:
    5ac7:	41 6b 74 69 76 6e 69 00                             Aktivni.

00005acf <text_change_default_ring>:
    5acf:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    5adf:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

00005ae9 <text_button_term_fan>:
    5ae9:	46 41 4e 00                                         FAN.

00005aed <text_dashdash>:
    5aed:	2d 2d 2d 00                                         ---.

00005af1 <text_current_ring_mode>:
    5af1:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    5b01:	75 6c 61 74 6f 72 75 00                             ulatoru.

00005b09 <text_button_term_man_comment>:
    5b09:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

00005b18 <text_button_term_man>:
    5b18:	4d 41 4e 00                                         MAN.

00005b1c <text_button_term_prog_comment>:
    5b1c:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    5b2c:	72 61 6d 00                                         ram.

00005b30 <text_button_term_prog>:
    5b30:	50 52 4f 47 00                                      PROG.

00005b35 <text_button_term_min_comment>:
    5b35:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    5b45:	67 75 6c 61 63 65 00                                gulace.

00005b4c <text_button_term_min>:
    5b4c:	4d 49 4e 00                                         MIN.

00005b50 <text_button_term_max_comment>:
    5b50:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    5b60:	75 6c 61 63 65 00                                   ulace.

00005b66 <text_button_term_max>:
    5b66:	4d 41 58 00                                         MAX.

00005b6a <text_button_term_off_comment>:
    5b6a:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    5b7a:	79 20 6d 6f 64 00                                   y mod.

00005b80 <text_button_term_off>:
    5b80:	4f 46 46 00                                         OFF.

00005b84 <port_to_mode_PGM>:
    5b84:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00005b94 <digital_pin_to_timer_PGM>:
    5b94:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    5bc8:	00 03                                               ..

00005bca <status_know_devices>:
    5bca:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    5bda:	63 65 73 00                                         ces.

00005bde <_ZL10network_ip.lto_priv.237>:
    5bde:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00005be9 <status_mqtt_process>:
    5be9:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    5bf9:	65 73 73 00                                         ess.

00005bfd <status_mqtt_receive>:
    5bfd:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    5c0d:	69 76 65 00                                         ive.

00005c11 <status_mqtt_error>:
    5c11:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    5c21:	72 00                                               r.

00005c23 <status_mqtt_send>:
    5c23:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00005c34 <lcd_font>:
    5c34:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    5c44:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    5c54:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    5c64:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    5c74:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    5c84:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    5c94:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    5ca4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    5cb4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    5cc4:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    5cd4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    5ce4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    5cf4:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    5d04:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    5d14:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    5d24:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    5d34:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    5d44:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    5d54:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    5d64:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    5d74:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    5d84:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    5d94:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    5da4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    5db4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    5dc4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    5dd4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    5de4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    5df4:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    5e04:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    5e14:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    5e24:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    5e34:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    5e44:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    5e54:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    5e64:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    5e74:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    5e84:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    5e94:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    5ea4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    5eb4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    5ec4:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    5ed4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    5ee4:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    5ef4:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    5f04:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    5f14:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    5f24:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    5f34:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    5f44:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    5f54:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    5f64:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    5f74:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    5f84:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    5f94:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    5fa4:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    5fb4:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    5fc4:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    5fd4:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    5fe4:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    5ff4:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    6004:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    6014:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    6024:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    6034:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    6044:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    6054:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    6064:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    6074:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    6084:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    6094:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    60a4:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    60b4:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    60c4:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    60d4:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    60e4:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    60f4:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    6104:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    6114:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    6124:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

0000612f <port_to_input_PGM>:
    612f:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

0000613f <digital_pin_to_bit_mask_PGM>:
    613f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    614f:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    615f:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    616f:	08 10 20 40 80 20                                   .. @. 

00006175 <port_to_output_PGM>:
    6175:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00006185 <digital_pin_to_port_PGM>:
    6185:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    6195:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    61a5:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    61b5:	06 06 06 06 06 07                                   ......

000061bb <daysInMonth>:
    61bb:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f 00              .............

000061c8 <__ctors_start>:
__ctors_start():
    61c8:	65 b5       	in	r22, 0x25	; 37

000061ca <__ctors_end>:
__dtors_end():
    61ca:	11 24       	eor	r1, r1
    61cc:	1f be       	out	0x3f, r1	; 63
    61ce:	cf ef       	ldi	r28, 0xFF	; 255
    61d0:	d1 e2       	ldi	r29, 0x21	; 33
    61d2:	de bf       	out	0x3e, r29	; 62
    61d4:	cd bf       	out	0x3d, r28	; 61
    61d6:	00 e0       	ldi	r16, 0x00	; 0
    61d8:	0c bf       	out	0x3c, r16	; 60

000061da <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    61da:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    61dc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    61de:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    61e0:	ee e1       	ldi	r30, 0x1E	; 30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    61e2:	f2 ea       	ldi	r31, 0xA2	; 162
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    61e4:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    61e6:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    61e8:	02 c0       	rjmp	.+4      	; 0x61ee <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    61ea:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    61ec:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    61ee:	a4 37       	cpi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    61f0:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    61f2:	d9 f7       	brne	.-10     	; 0x61ea <__do_copy_data+0x10>

000061f4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    61f4:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    61f6:	a4 e7       	ldi	r26, 0x74	; 116
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    61f8:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <.do_clear_bss_start>

000061fc <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    61fc:	1d 92       	st	X+, r1

000061fe <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    61fe:	ac 3c       	cpi	r26, 0xCC	; 204
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    6200:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    6202:	e1 f7       	brne	.-8      	; 0x61fc <.do_clear_bss_loop>

00006204 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    6204:	10 e3       	ldi	r17, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    6206:	c5 ee       	ldi	r28, 0xE5	; 229
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    6208:	d0 e3       	ldi	r29, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    620a:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    620c:	06 c0       	rjmp	.+12     	; 0x621a <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    620e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    6210:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    6212:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    6214:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    6216:	0e 94 64 cf 	call	0x19ec8	; 0x19ec8 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    621a:	c4 3e       	cpi	r28, 0xE4	; 228
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    621c:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    621e:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    6220:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    6222:	a9 f7       	brne	.-22     	; 0x620e <__do_global_ctors+0xa>
    6224:	0e 94 74 b9 	call	0x172e8	; 0x172e8 <main>
    6228:	0c 94 0d d1 	jmp	0x1a21a	; 0x1a21a <_exit>

0000622c <__bad_interrupt>:
__vector_38():
    622c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006230 <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    6230:	08 95       	ret

00006232 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    6232:	cf 93       	push	r28
    6234:	df 93       	push	r29
    6236:	1f 92       	push	r1
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
    623c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    623e:	dc 01       	movw	r26, r24
    6240:	ed 91       	ld	r30, X+
    6242:	fc 91       	ld	r31, X
    6244:	02 80       	ldd	r0, Z+2	; 0x02
    6246:	f3 81       	ldd	r31, Z+3	; 0x03
    6248:	e0 2d       	mov	r30, r0
    624a:	41 e0       	ldi	r20, 0x01	; 1
    624c:	50 e0       	ldi	r21, 0x00	; 0
    624e:	be 01       	movw	r22, r28
    6250:	6f 5f       	subi	r22, 0xFF	; 255
    6252:	7f 4f       	sbci	r23, 0xFF	; 255
    6254:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    6256:	0f 90       	pop	r0
    6258:	df 91       	pop	r29
    625a:	cf 91       	pop	r28
    625c:	08 95       	ret

0000625e <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    625e:	dc 01       	movw	r26, r24
    6260:	ed 91       	ld	r30, X+
    6262:	fc 91       	ld	r31, X
    6264:	02 8c       	ldd	r0, Z+26	; 0x1a
    6266:	f3 8d       	ldd	r31, Z+27	; 0x1b
    6268:	e0 2d       	mov	r30, r0
    626a:	19 95       	eicall
    626c:	91 e0       	ldi	r25, 0x01	; 1
    626e:	89 27       	eor	r24, r25
    6270:	08 95       	ret

00006272 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	80 e0       	ldi	r24, 0x00	; 0
    6276:	08 95       	ret

00006278 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    6278:	dc 01       	movw	r26, r24
    627a:	ed 91       	ld	r30, X+
    627c:	fc 91       	ld	r31, X
    627e:	04 8c       	ldd	r0, Z+28	; 0x1c
    6280:	f5 8d       	ldd	r31, Z+29	; 0x1d
    6282:	e0 2d       	mov	r30, r0
    6284:	19 94       	eijmp

00006286 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    6286:	fc 01       	movw	r30, r24
    6288:	84 89       	ldd	r24, Z+20	; 0x14
    628a:	95 89       	ldd	r25, Z+21	; 0x15
    628c:	08 95       	ret

0000628e <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    628e:	fc 01       	movw	r30, r24
    6290:	82 89       	ldd	r24, Z+18	; 0x12
    6292:	93 89       	ldd	r25, Z+19	; 0x13
    6294:	08 95       	ret

00006296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    6296:	4f 92       	push	r4
    6298:	5f 92       	push	r5
    629a:	6f 92       	push	r6
    629c:	7f 92       	push	r7
    629e:	8f 92       	push	r8
    62a0:	9f 92       	push	r9
    62a2:	af 92       	push	r10
    62a4:	bf 92       	push	r11
    62a6:	cf 92       	push	r12
    62a8:	df 92       	push	r13
    62aa:	ef 92       	push	r14
    62ac:	ff 92       	push	r15
    62ae:	0f 93       	push	r16
    62b0:	1f 93       	push	r17
    62b2:	cf 93       	push	r28
    62b4:	df 93       	push	r29
    62b6:	ec 01       	movw	r28, r24
    62b8:	5a 01       	movw	r10, r20
    62ba:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    62bc:	37 ff       	sbrs	r19, 7
    62be:	05 c0       	rjmp	.+10     	; 0x62ca <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    62c0:	62 0f       	add	r22, r18
    62c2:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    62c4:	31 95       	neg	r19
    62c6:	21 95       	neg	r18
    62c8:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    62ca:	7b 01       	movw	r14, r22
    62cc:	e2 0e       	add	r14, r18
    62ce:	f3 1e       	adc	r15, r19
    62d0:	6b 01       	movw	r12, r22
    62d2:	77 ff       	sbrs	r23, 7
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    62d6:	d1 2c       	mov	r13, r1
    62d8:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    62da:	e8 81       	ld	r30, Y
    62dc:	f9 81       	ldd	r31, Y+1	; 0x01
    62de:	06 84       	ldd	r0, Z+14	; 0x0e
    62e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    62e2:	e0 2d       	mov	r30, r0
    62e4:	ce 01       	movw	r24, r28
    62e6:	19 95       	eicall
    62e8:	8e 15       	cp	r24, r14
    62ea:	9f 05       	cpc	r25, r15
    62ec:	44 f4       	brge	.+16     	; 0x62fe <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    62ee:	e8 81       	ld	r30, Y
    62f0:	f9 81       	ldd	r31, Y+1	; 0x01
    62f2:	06 84       	ldd	r0, Z+14	; 0x0e
    62f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    62f6:	e0 2d       	mov	r30, r0
    62f8:	ce 01       	movw	r24, r28
    62fa:	19 95       	eicall
    62fc:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    62fe:	47 01       	movw	r8, r14
    6300:	8c 18       	sub	r8, r12
    6302:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    6304:	17 ff       	sbrs	r17, 7
    6306:	05 c0       	rjmp	.+10     	; 0x6312 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    6308:	a0 0e       	add	r10, r16
    630a:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    630c:	11 95       	neg	r17
    630e:	01 95       	neg	r16
    6310:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    6312:	0a 0d       	add	r16, r10
    6314:	1b 1d       	adc	r17, r11
    6316:	b7 fe       	sbrs	r11, 7
    6318:	02 c0       	rjmp	.+4      	; 0x631e <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    631a:	b1 2c       	mov	r11, r1
    631c:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    631e:	e8 81       	ld	r30, Y
    6320:	f9 81       	ldd	r31, Y+1	; 0x01
    6322:	04 84       	ldd	r0, Z+12	; 0x0c
    6324:	f5 85       	ldd	r31, Z+13	; 0x0d
    6326:	e0 2d       	mov	r30, r0
    6328:	ce 01       	movw	r24, r28
    632a:	19 95       	eicall
    632c:	80 17       	cp	r24, r16
    632e:	91 07       	cpc	r25, r17
    6330:	44 f4       	brge	.+16     	; 0x6342 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    6332:	e8 81       	ld	r30, Y
    6334:	f9 81       	ldd	r31, Y+1	; 0x01
    6336:	04 84       	ldd	r0, Z+12	; 0x0c
    6338:	f5 85       	ldd	r31, Z+13	; 0x0d
    633a:	e0 2d       	mov	r30, r0
    633c:	ce 01       	movw	r24, r28
    633e:	19 95       	eicall
    6340:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    6342:	38 01       	movw	r6, r16
    6344:	6a 18       	sub	r6, r10
    6346:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    6348:	01 50       	subi	r16, 0x01	; 1
    634a:	11 09       	sbc	r17, r1
    634c:	97 01       	movw	r18, r14
    634e:	21 50       	subi	r18, 0x01	; 1
    6350:	31 09       	sbc	r19, r1
    6352:	e8 81       	ld	r30, Y
    6354:	f9 81       	ldd	r31, Y+1	; 0x01
    6356:	06 80       	ldd	r0, Z+6	; 0x06
    6358:	f7 81       	ldd	r31, Z+7	; 0x07
    635a:	e0 2d       	mov	r30, r0
    635c:	a5 01       	movw	r20, r10
    635e:	b6 01       	movw	r22, r12
    6360:	ce 01       	movw	r24, r28
    6362:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    6364:	ee a5       	ldd	r30, Y+46	; 0x2e
    6366:	ff a5       	ldd	r31, Y+47	; 0x2f
    6368:	80 81       	ld	r24, Z
    636a:	9a ad       	ldd	r25, Y+58	; 0x3a
    636c:	89 23       	and	r24, r25
    636e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    6370:	88 8d       	ldd	r24, Y+24	; 0x18
    6372:	99 8d       	ldd	r25, Y+25	; 0x19
    6374:	89 2b       	or	r24, r25
    6376:	c9 f4       	brne	.+50     	; 0x63aa <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    6378:	e8 a9       	ldd	r30, Y+48	; 0x30
    637a:	f9 a9       	ldd	r31, Y+49	; 0x31
    637c:	80 81       	ld	r24, Z
    637e:	9b ad       	ldd	r25, Y+59	; 0x3b
    6380:	89 23       	and	r24, r25
    6382:	80 83       	st	Z, r24
    6384:	12 b8       	out	0x02, r1	; 2
    6386:	ea a9       	ldd	r30, Y+50	; 0x32
    6388:	fb a9       	ldd	r31, Y+51	; 0x33
    638a:	80 81       	ld	r24, Z
    638c:	9c ad       	ldd	r25, Y+60	; 0x3c
    638e:	89 23       	and	r24, r25
    6390:	80 83       	st	Z, r24
    6392:	ea a9       	ldd	r30, Y+50	; 0x32
    6394:	fb a9       	ldd	r31, Y+51	; 0x33
    6396:	80 81       	ld	r24, Z
    6398:	98 ad       	ldd	r25, Y+56	; 0x38
    639a:	89 2b       	or	r24, r25
    639c:	80 83       	st	Z, r24
    639e:	e8 a9       	ldd	r30, Y+48	; 0x30
    63a0:	f9 a9       	ldd	r31, Y+49	; 0x31
    63a2:	80 81       	ld	r24, Z
    63a4:	9f a9       	ldd	r25, Y+55	; 0x37
    63a6:	89 2b       	or	r24, r25
    63a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    63aa:	e8 a9       	ldd	r30, Y+48	; 0x30
    63ac:	f9 a9       	ldd	r31, Y+49	; 0x31
    63ae:	80 81       	ld	r24, Z
    63b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    63b2:	89 23       	and	r24, r25
    63b4:	80 83       	st	Z, r24
    63b6:	88 a1       	ldd	r24, Y+32	; 0x20
    63b8:	82 b9       	out	0x02, r24	; 2
    63ba:	ea a9       	ldd	r30, Y+50	; 0x32
    63bc:	fb a9       	ldd	r31, Y+51	; 0x33
    63be:	80 81       	ld	r24, Z
    63c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    63c2:	89 23       	and	r24, r25
    63c4:	80 83       	st	Z, r24
    63c6:	ea a9       	ldd	r30, Y+50	; 0x32
    63c8:	fb a9       	ldd	r31, Y+51	; 0x33
    63ca:	80 81       	ld	r24, Z
    63cc:	98 ad       	ldd	r25, Y+56	; 0x38
    63ce:	89 2b       	or	r24, r25
    63d0:	80 83       	st	Z, r24
    63d2:	e8 a9       	ldd	r30, Y+48	; 0x30
    63d4:	f9 a9       	ldd	r31, Y+49	; 0x31
    63d6:	80 81       	ld	r24, Z
    63d8:	9f a9       	ldd	r25, Y+55	; 0x37
    63da:	89 2b       	or	r24, r25
    63dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    63de:	86 14       	cp	r8, r6
    63e0:	97 04       	cpc	r9, r7
    63e2:	2c f0       	brlt	.+10     	; 0x63ee <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    63e4:	96 2d       	mov	r25, r6
    63e6:	87 2d       	mov	r24, r7
    63e8:	34 01       	movw	r6, r8
    63ea:	89 2e       	mov	r8, r25
    63ec:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    63ee:	18 14       	cp	r1, r8
    63f0:	19 04       	cpc	r1, r9
    63f2:	0c f5       	brge	.+66     	; 0x6436 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    63f4:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    63f6:	52 b8       	out	0x02, r5	; 2
    63f8:	ea a9       	ldd	r30, Y+50	; 0x32
    63fa:	fb a9       	ldd	r31, Y+51	; 0x33
    63fc:	20 81       	ld	r18, Z
    63fe:	3c ad       	ldd	r19, Y+60	; 0x3c
    6400:	23 23       	and	r18, r19
    6402:	20 83       	st	Z, r18
    6404:	ea a9       	ldd	r30, Y+50	; 0x32
    6406:	fb a9       	ldd	r31, Y+51	; 0x33
    6408:	20 81       	ld	r18, Z
    640a:	38 ad       	ldd	r19, Y+56	; 0x38
    640c:	23 2b       	or	r18, r19
    640e:	20 83       	st	Z, r18
    6410:	42 b8       	out	0x02, r4	; 2
    6412:	ea a9       	ldd	r30, Y+50	; 0x32
    6414:	fb a9       	ldd	r31, Y+51	; 0x33
    6416:	20 81       	ld	r18, Z
    6418:	3c ad       	ldd	r19, Y+60	; 0x3c
    641a:	23 23       	and	r18, r19
    641c:	20 83       	st	Z, r18
    641e:	ea a9       	ldd	r30, Y+50	; 0x32
    6420:	fb a9       	ldd	r31, Y+51	; 0x33
    6422:	20 81       	ld	r18, Z
    6424:	38 ad       	ldd	r19, Y+56	; 0x38
    6426:	23 2b       	or	r18, r19
    6428:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    642a:	01 97       	sbiw	r24, 0x01	; 1
    642c:	21 f7       	brne	.-56     	; 0x63f6 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	88 1a       	sub	r8, r24
    6432:	91 08       	sbc	r9, r1
    6434:	dc cf       	rjmp	.-72     	; 0x63ee <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    6436:	88 8d       	ldd	r24, Y+24	; 0x18
    6438:	99 8d       	ldd	r25, Y+25	; 0x19
    643a:	00 97       	sbiw	r24, 0x00	; 0
    643c:	51 f5       	brne	.+84     	; 0x6492 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    643e:	0c 89       	ldd	r16, Y+20	; 0x14
    6440:	1d 89       	ldd	r17, Y+21	; 0x15
    6442:	01 50       	subi	r16, 0x01	; 1
    6444:	11 09       	sbc	r17, r1
    6446:	2a 89       	ldd	r18, Y+18	; 0x12
    6448:	3b 89       	ldd	r19, Y+19	; 0x13
    644a:	21 50       	subi	r18, 0x01	; 1
    644c:	31 09       	sbc	r19, r1
    644e:	e8 81       	ld	r30, Y
    6450:	f9 81       	ldd	r31, Y+1	; 0x01
    6452:	06 80       	ldd	r0, Z+6	; 0x06
    6454:	f7 81       	ldd	r31, Z+7	; 0x07
    6456:	e0 2d       	mov	r30, r0
    6458:	50 e0       	ldi	r21, 0x00	; 0
    645a:	40 e0       	ldi	r20, 0x00	; 0
    645c:	70 e0       	ldi	r23, 0x00	; 0
    645e:	60 e0       	ldi	r22, 0x00	; 0
    6460:	ce 01       	movw	r24, r28
    6462:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    6464:	ee a5       	ldd	r30, Y+46	; 0x2e
    6466:	ff a5       	ldd	r31, Y+47	; 0x2f
    6468:	80 81       	ld	r24, Z
    646a:	9e a9       	ldd	r25, Y+54	; 0x36
    646c:	89 2b       	or	r24, r25
    646e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    6470:	df 91       	pop	r29
    6472:	cf 91       	pop	r28
    6474:	1f 91       	pop	r17
    6476:	0f 91       	pop	r16
    6478:	ff 90       	pop	r15
    647a:	ef 90       	pop	r14
    647c:	df 90       	pop	r13
    647e:	cf 90       	pop	r12
    6480:	bf 90       	pop	r11
    6482:	af 90       	pop	r10
    6484:	9f 90       	pop	r9
    6486:	8f 90       	pop	r8
    6488:	7f 90       	pop	r7
    648a:	6f 90       	pop	r6
    648c:	5f 90       	pop	r5
    648e:	4f 90       	pop	r4
    6490:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	39 f7       	brne	.-50     	; 0x6464 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    6496:	ee a5       	ldd	r30, Y+46	; 0x2e
    6498:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    649a:	80 81       	ld	r24, Z
    649c:	9a ad       	ldd	r25, Y+58	; 0x3a
    649e:	89 23       	and	r24, r25
    64a0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    64a2:	e8 a9       	ldd	r30, Y+48	; 0x30
    64a4:	f9 a9       	ldd	r31, Y+49	; 0x31
    64a6:	80 81       	ld	r24, Z
    64a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    64aa:	89 23       	and	r24, r25
    64ac:	80 83       	st	Z, r24
    64ae:	84 e0       	ldi	r24, 0x04	; 4
    64b0:	82 b9       	out	0x02, r24	; 2
    64b2:	ea a9       	ldd	r30, Y+50	; 0x32
    64b4:	fb a9       	ldd	r31, Y+51	; 0x33
    64b6:	80 81       	ld	r24, Z
    64b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    64ba:	89 23       	and	r24, r25
    64bc:	80 83       	st	Z, r24
    64be:	ea a9       	ldd	r30, Y+50	; 0x32
    64c0:	fb a9       	ldd	r31, Y+51	; 0x33
    64c2:	80 81       	ld	r24, Z
    64c4:	98 ad       	ldd	r25, Y+56	; 0x38
    64c6:	89 2b       	or	r24, r25
    64c8:	80 83       	st	Z, r24
    64ca:	e8 a9       	ldd	r30, Y+48	; 0x30
    64cc:	f9 a9       	ldd	r31, Y+49	; 0x31
    64ce:	80 81       	ld	r24, Z
    64d0:	9f a9       	ldd	r25, Y+55	; 0x37
    64d2:	89 2b       	or	r24, r25
    64d4:	80 83       	st	Z, r24
    64d6:	8a 89       	ldd	r24, Y+18	; 0x12
    64d8:	9b 89       	ldd	r25, Y+19	; 0x13
    64da:	01 97       	sbiw	r24, 0x01	; 1
    64dc:	92 b9       	out	0x02, r25	; 2
    64de:	ea a9       	ldd	r30, Y+50	; 0x32
    64e0:	fb a9       	ldd	r31, Y+51	; 0x33
    64e2:	80 81       	ld	r24, Z
    64e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    64e6:	89 23       	and	r24, r25
    64e8:	80 83       	st	Z, r24
    64ea:	ea a9       	ldd	r30, Y+50	; 0x32
    64ec:	fb a9       	ldd	r31, Y+51	; 0x33
    64ee:	80 81       	ld	r24, Z
    64f0:	98 ad       	ldd	r25, Y+56	; 0x38
    64f2:	89 2b       	or	r24, r25
    64f4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    64f6:	e8 a9       	ldd	r30, Y+48	; 0x30
    64f8:	f9 a9       	ldd	r31, Y+49	; 0x31
    64fa:	80 81       	ld	r24, Z
    64fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    64fe:	89 23       	and	r24, r25
    6500:	80 83       	st	Z, r24
    6502:	85 e0       	ldi	r24, 0x05	; 5
    6504:	82 b9       	out	0x02, r24	; 2
    6506:	ea a9       	ldd	r30, Y+50	; 0x32
    6508:	fb a9       	ldd	r31, Y+51	; 0x33
    650a:	80 81       	ld	r24, Z
    650c:	9c ad       	ldd	r25, Y+60	; 0x3c
    650e:	89 23       	and	r24, r25
    6510:	80 83       	st	Z, r24
    6512:	ea a9       	ldd	r30, Y+50	; 0x32
    6514:	fb a9       	ldd	r31, Y+51	; 0x33
    6516:	80 81       	ld	r24, Z
    6518:	98 ad       	ldd	r25, Y+56	; 0x38
    651a:	89 2b       	or	r24, r25
    651c:	80 83       	st	Z, r24
    651e:	e8 a9       	ldd	r30, Y+48	; 0x30
    6520:	f9 a9       	ldd	r31, Y+49	; 0x31
    6522:	80 81       	ld	r24, Z
    6524:	9f a9       	ldd	r25, Y+55	; 0x37
    6526:	89 2b       	or	r24, r25
    6528:	80 83       	st	Z, r24
    652a:	8a 89       	ldd	r24, Y+18	; 0x12
    652c:	81 50       	subi	r24, 0x01	; 1
    652e:	82 b9       	out	0x02, r24	; 2
    6530:	ea a9       	ldd	r30, Y+50	; 0x32
    6532:	fb a9       	ldd	r31, Y+51	; 0x33
    6534:	80 81       	ld	r24, Z
    6536:	9c ad       	ldd	r25, Y+60	; 0x3c
    6538:	89 23       	and	r24, r25
    653a:	80 83       	st	Z, r24
    653c:	ea a9       	ldd	r30, Y+50	; 0x32
    653e:	fb a9       	ldd	r31, Y+51	; 0x33
    6540:	80 81       	ld	r24, Z
    6542:	98 ad       	ldd	r25, Y+56	; 0x38
    6544:	89 2b       	or	r24, r25
    6546:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    6548:	e8 a9       	ldd	r30, Y+48	; 0x30
    654a:	f9 a9       	ldd	r31, Y+49	; 0x31
    654c:	80 81       	ld	r24, Z
    654e:	9b ad       	ldd	r25, Y+59	; 0x3b
    6550:	89 23       	and	r24, r25
    6552:	80 83       	st	Z, r24
    6554:	88 e0       	ldi	r24, 0x08	; 8
    6556:	82 b9       	out	0x02, r24	; 2
    6558:	ea a9       	ldd	r30, Y+50	; 0x32
    655a:	fb a9       	ldd	r31, Y+51	; 0x33
    655c:	80 81       	ld	r24, Z
    655e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6560:	89 23       	and	r24, r25
    6562:	80 83       	st	Z, r24
    6564:	ea a9       	ldd	r30, Y+50	; 0x32
    6566:	fb a9       	ldd	r31, Y+51	; 0x33
    6568:	80 81       	ld	r24, Z
    656a:	98 ad       	ldd	r25, Y+56	; 0x38
    656c:	89 2b       	or	r24, r25
    656e:	80 83       	st	Z, r24
    6570:	e8 a9       	ldd	r30, Y+48	; 0x30
    6572:	f9 a9       	ldd	r31, Y+49	; 0x31
    6574:	80 81       	ld	r24, Z
    6576:	9f a9       	ldd	r25, Y+55	; 0x37
    6578:	89 2b       	or	r24, r25
    657a:	80 83       	st	Z, r24
    657c:	8c 89       	ldd	r24, Y+20	; 0x14
    657e:	9d 89       	ldd	r25, Y+21	; 0x15
    6580:	01 97       	sbiw	r24, 0x01	; 1
    6582:	92 b9       	out	0x02, r25	; 2
    6584:	ea a9       	ldd	r30, Y+50	; 0x32
    6586:	fb a9       	ldd	r31, Y+51	; 0x33
    6588:	80 81       	ld	r24, Z
    658a:	9c ad       	ldd	r25, Y+60	; 0x3c
    658c:	89 23       	and	r24, r25
    658e:	80 83       	st	Z, r24
    6590:	ea a9       	ldd	r30, Y+50	; 0x32
    6592:	fb a9       	ldd	r31, Y+51	; 0x33
    6594:	80 81       	ld	r24, Z
    6596:	98 ad       	ldd	r25, Y+56	; 0x38
    6598:	89 2b       	or	r24, r25
    659a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    659c:	e8 a9       	ldd	r30, Y+48	; 0x30
    659e:	f9 a9       	ldd	r31, Y+49	; 0x31
    65a0:	80 81       	ld	r24, Z
    65a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    65a4:	89 23       	and	r24, r25
    65a6:	80 83       	st	Z, r24
    65a8:	89 e0       	ldi	r24, 0x09	; 9
    65aa:	82 b9       	out	0x02, r24	; 2
    65ac:	ea a9       	ldd	r30, Y+50	; 0x32
    65ae:	fb a9       	ldd	r31, Y+51	; 0x33
    65b0:	80 81       	ld	r24, Z
    65b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    65b4:	89 23       	and	r24, r25
    65b6:	80 83       	st	Z, r24
    65b8:	ea a9       	ldd	r30, Y+50	; 0x32
    65ba:	fb a9       	ldd	r31, Y+51	; 0x33
    65bc:	80 81       	ld	r24, Z
    65be:	98 ad       	ldd	r25, Y+56	; 0x38
    65c0:	89 2b       	or	r24, r25
    65c2:	80 83       	st	Z, r24
    65c4:	e8 a9       	ldd	r30, Y+48	; 0x30
    65c6:	f9 a9       	ldd	r31, Y+49	; 0x31
    65c8:	80 81       	ld	r24, Z
    65ca:	9f a9       	ldd	r25, Y+55	; 0x37
    65cc:	89 2b       	or	r24, r25
    65ce:	80 83       	st	Z, r24
    65d0:	8c 89       	ldd	r24, Y+20	; 0x14
    65d2:	81 50       	subi	r24, 0x01	; 1
    65d4:	82 b9       	out	0x02, r24	; 2
    65d6:	ea a9       	ldd	r30, Y+50	; 0x32
    65d8:	fb a9       	ldd	r31, Y+51	; 0x33
    65da:	80 81       	ld	r24, Z
    65dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    65de:	89 23       	and	r24, r25
    65e0:	80 83       	st	Z, r24
    65e2:	ea a9       	ldd	r30, Y+50	; 0x32
    65e4:	fb a9       	ldd	r31, Y+51	; 0x33
    65e6:	80 81       	ld	r24, Z
    65e8:	98 ad       	ldd	r25, Y+56	; 0x38
    65ea:	89 2b       	or	r24, r25
    65ec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    65ee:	ee a5       	ldd	r30, Y+46	; 0x2e
    65f0:	ff a5       	ldd	r31, Y+47	; 0x2f
    65f2:	80 81       	ld	r24, Z
    65f4:	9e a9       	ldd	r25, Y+54	; 0x36
    65f6:	89 2b       	or	r24, r25
    65f8:	80 83       	st	Z, r24
    65fa:	34 cf       	rjmp	.-408    	; 0x6464 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

000065fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    65fc:	af 92       	push	r10
    65fe:	bf 92       	push	r11
    6600:	cf 92       	push	r12
    6602:	df 92       	push	r13
    6604:	ef 92       	push	r14
    6606:	ff 92       	push	r15
    6608:	0f 93       	push	r16
    660a:	1f 93       	push	r17
    660c:	cf 93       	push	r28
    660e:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    6610:	77 fd       	sbrc	r23, 7
    6612:	75 c0       	rjmp	.+234    	; 0x66fe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6614:	57 fd       	sbrc	r21, 7
    6616:	73 c0       	rjmp	.+230    	; 0x66fe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6618:	c3 2e       	mov	r12, r19
    661a:	d2 2e       	mov	r13, r18
    661c:	5a 01       	movw	r10, r20
    661e:	7b 01       	movw	r14, r22
    6620:	ec 01       	movw	r28, r24
    6622:	e8 81       	ld	r30, Y
    6624:	f9 81       	ldd	r31, Y+1	; 0x01
    6626:	06 84       	ldd	r0, Z+14	; 0x0e
    6628:	f7 85       	ldd	r31, Z+15	; 0x0f
    662a:	e0 2d       	mov	r30, r0
    662c:	19 95       	eicall
    662e:	8e 15       	cp	r24, r14
    6630:	9f 05       	cpc	r25, r15
    6632:	0c f4       	brge	.+2      	; 0x6636 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    6634:	64 c0       	rjmp	.+200    	; 0x66fe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    6636:	e8 81       	ld	r30, Y
    6638:	f9 81       	ldd	r31, Y+1	; 0x01
    663a:	04 84       	ldd	r0, Z+12	; 0x0c
    663c:	f5 85       	ldd	r31, Z+13	; 0x0d
    663e:	e0 2d       	mov	r30, r0
    6640:	ce 01       	movw	r24, r28
    6642:	19 95       	eicall
    6644:	8a 15       	cp	r24, r10
    6646:	9b 05       	cpc	r25, r11
    6648:	0c f4       	brge	.+2      	; 0x664c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    664a:	59 c0       	rjmp	.+178    	; 0x66fe <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    664c:	e8 81       	ld	r30, Y
    664e:	f9 81       	ldd	r31, Y+1	; 0x01
    6650:	06 80       	ldd	r0, Z+6	; 0x06
    6652:	f7 81       	ldd	r31, Z+7	; 0x07
    6654:	e0 2d       	mov	r30, r0
    6656:	85 01       	movw	r16, r10
    6658:	97 01       	movw	r18, r14
    665a:	a5 01       	movw	r20, r10
    665c:	b7 01       	movw	r22, r14
    665e:	ce 01       	movw	r24, r28
    6660:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    6662:	ee a5       	ldd	r30, Y+46	; 0x2e
    6664:	ff a5       	ldd	r31, Y+47	; 0x2f
    6666:	80 81       	ld	r24, Z
    6668:	9a ad       	ldd	r25, Y+58	; 0x3a
    666a:	89 23       	and	r24, r25
    666c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    666e:	98 a1       	ldd	r25, Y+32	; 0x20
    6670:	29 a1       	ldd	r18, Y+33	; 0x21
    6672:	e8 a9       	ldd	r30, Y+48	; 0x30
    6674:	f9 a9       	ldd	r31, Y+49	; 0x31
    6676:	80 81       	ld	r24, Z
    6678:	3b ad       	ldd	r19, Y+59	; 0x3b
    667a:	83 23       	and	r24, r19
    667c:	80 83       	st	Z, r24
    667e:	22 b9       	out	0x02, r18	; 2
    6680:	ea a9       	ldd	r30, Y+50	; 0x32
    6682:	fb a9       	ldd	r31, Y+51	; 0x33
    6684:	80 81       	ld	r24, Z
    6686:	2c ad       	ldd	r18, Y+60	; 0x3c
    6688:	82 23       	and	r24, r18
    668a:	80 83       	st	Z, r24
    668c:	ea a9       	ldd	r30, Y+50	; 0x32
    668e:	fb a9       	ldd	r31, Y+51	; 0x33
    6690:	80 81       	ld	r24, Z
    6692:	28 ad       	ldd	r18, Y+56	; 0x38
    6694:	82 2b       	or	r24, r18
    6696:	80 83       	st	Z, r24
    6698:	92 b9       	out	0x02, r25	; 2
    669a:	ea a9       	ldd	r30, Y+50	; 0x32
    669c:	fb a9       	ldd	r31, Y+51	; 0x33
    669e:	80 81       	ld	r24, Z
    66a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    66a2:	89 23       	and	r24, r25
    66a4:	80 83       	st	Z, r24
    66a6:	ea a9       	ldd	r30, Y+50	; 0x32
    66a8:	fb a9       	ldd	r31, Y+51	; 0x33
    66aa:	80 81       	ld	r24, Z
    66ac:	98 ad       	ldd	r25, Y+56	; 0x38
    66ae:	89 2b       	or	r24, r25
    66b0:	80 83       	st	Z, r24
    66b2:	e8 a9       	ldd	r30, Y+48	; 0x30
    66b4:	f9 a9       	ldd	r31, Y+49	; 0x31
    66b6:	80 81       	ld	r24, Z
    66b8:	9f a9       	ldd	r25, Y+55	; 0x37
    66ba:	89 2b       	or	r24, r25
    66bc:	80 83       	st	Z, r24
    66be:	c2 b8       	out	0x02, r12	; 2
    66c0:	ea a9       	ldd	r30, Y+50	; 0x32
    66c2:	fb a9       	ldd	r31, Y+51	; 0x33
    66c4:	80 81       	ld	r24, Z
    66c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    66c8:	89 23       	and	r24, r25
    66ca:	80 83       	st	Z, r24
    66cc:	ea a9       	ldd	r30, Y+50	; 0x32
    66ce:	fb a9       	ldd	r31, Y+51	; 0x33
    66d0:	80 81       	ld	r24, Z
    66d2:	98 ad       	ldd	r25, Y+56	; 0x38
    66d4:	89 2b       	or	r24, r25
    66d6:	80 83       	st	Z, r24
    66d8:	d2 b8       	out	0x02, r13	; 2
    66da:	ea a9       	ldd	r30, Y+50	; 0x32
    66dc:	fb a9       	ldd	r31, Y+51	; 0x33
    66de:	80 81       	ld	r24, Z
    66e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    66e2:	89 23       	and	r24, r25
    66e4:	80 83       	st	Z, r24
    66e6:	ea a9       	ldd	r30, Y+50	; 0x32
    66e8:	fb a9       	ldd	r31, Y+51	; 0x33
    66ea:	80 81       	ld	r24, Z
    66ec:	98 ad       	ldd	r25, Y+56	; 0x38
    66ee:	89 2b       	or	r24, r25
    66f0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    66f2:	ee a5       	ldd	r30, Y+46	; 0x2e
    66f4:	ff a5       	ldd	r31, Y+47	; 0x2f
    66f6:	80 81       	ld	r24, Z
    66f8:	9e a9       	ldd	r25, Y+54	; 0x36
    66fa:	89 2b       	or	r24, r25
    66fc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    66fe:	df 91       	pop	r29
    6700:	cf 91       	pop	r28
    6702:	1f 91       	pop	r17
    6704:	0f 91       	pop	r16
    6706:	ff 90       	pop	r15
    6708:	ef 90       	pop	r14
    670a:	df 90       	pop	r13
    670c:	cf 90       	pop	r12
    670e:	bf 90       	pop	r11
    6710:	af 90       	pop	r10
    6712:	08 95       	ret

00006714 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    6714:	7f 92       	push	r7
    6716:	8f 92       	push	r8
    6718:	9f 92       	push	r9
    671a:	af 92       	push	r10
    671c:	bf 92       	push	r11
    671e:	cf 92       	push	r12
    6720:	df 92       	push	r13
    6722:	ef 92       	push	r14
    6724:	ff 92       	push	r15
    6726:	0f 93       	push	r16
    6728:	1f 93       	push	r17
    672a:	cf 93       	push	r28
    672c:	df 93       	push	r29
    672e:	ec 01       	movw	r28, r24
    6730:	59 01       	movw	r10, r18
    6732:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    6734:	0e 9d       	mul	r16, r14
    6736:	60 01       	movw	r12, r0
    6738:	0f 9d       	mul	r16, r15
    673a:	d0 0c       	add	r13, r0
    673c:	1e 9d       	mul	r17, r14
    673e:	d0 0c       	add	r13, r0
    6740:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    6742:	87 01       	movw	r16, r14
    6744:	04 0f       	add	r16, r20
    6746:	15 1f       	adc	r17, r21
    6748:	01 50       	subi	r16, 0x01	; 1
    674a:	11 09       	sbc	r17, r1
    674c:	26 0f       	add	r18, r22
    674e:	37 1f       	adc	r19, r23
    6750:	21 50       	subi	r18, 0x01	; 1
    6752:	31 09       	sbc	r19, r1
    6754:	e8 81       	ld	r30, Y
    6756:	f9 81       	ldd	r31, Y+1	; 0x01
    6758:	06 80       	ldd	r0, Z+6	; 0x06
    675a:	f7 81       	ldd	r31, Z+7	; 0x07
    675c:	e0 2d       	mov	r30, r0
    675e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    6760:	77 24       	eor	r7, r7
    6762:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    6764:	1c 14       	cp	r1, r12
    6766:	1d 04       	cpc	r1, r13
    6768:	0c f0       	brlt	.+2      	; 0x676c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    676a:	0a c1       	rjmp	.+532    	; 0x6980 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    676c:	ee a5       	ldd	r30, Y+46	; 0x2e
    676e:	ff a5       	ldd	r31, Y+47	; 0x2f
    6770:	80 81       	ld	r24, Z
    6772:	9a ad       	ldd	r25, Y+58	; 0x3a
    6774:	89 23       	and	r24, r25
    6776:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    6778:	e8 a9       	ldd	r30, Y+48	; 0x30
    677a:	f9 a9       	ldd	r31, Y+49	; 0x31
    677c:	80 81       	ld	r24, Z
    677e:	9b ad       	ldd	r25, Y+59	; 0x3b
    6780:	89 23       	and	r24, r25
    6782:	80 83       	st	Z, r24
    6784:	9a a1       	ldd	r25, Y+34	; 0x22
    6786:	8b a1       	ldd	r24, Y+35	; 0x23
    6788:	82 b9       	out	0x02, r24	; 2
    678a:	ea a9       	ldd	r30, Y+50	; 0x32
    678c:	fb a9       	ldd	r31, Y+51	; 0x33
    678e:	80 81       	ld	r24, Z
    6790:	2c ad       	ldd	r18, Y+60	; 0x3c
    6792:	82 23       	and	r24, r18
    6794:	80 83       	st	Z, r24
    6796:	ea a9       	ldd	r30, Y+50	; 0x32
    6798:	fb a9       	ldd	r31, Y+51	; 0x33
    679a:	80 81       	ld	r24, Z
    679c:	28 ad       	ldd	r18, Y+56	; 0x38
    679e:	82 2b       	or	r24, r18
    67a0:	80 83       	st	Z, r24
    67a2:	92 b9       	out	0x02, r25	; 2
    67a4:	ea a9       	ldd	r30, Y+50	; 0x32
    67a6:	fb a9       	ldd	r31, Y+51	; 0x33
    67a8:	80 81       	ld	r24, Z
    67aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    67ac:	89 23       	and	r24, r25
    67ae:	80 83       	st	Z, r24
    67b0:	ea a9       	ldd	r30, Y+50	; 0x32
    67b2:	fb a9       	ldd	r31, Y+51	; 0x33
    67b4:	80 81       	ld	r24, Z
    67b6:	98 ad       	ldd	r25, Y+56	; 0x38
    67b8:	89 2b       	or	r24, r25
    67ba:	80 83       	st	Z, r24
    67bc:	e8 a9       	ldd	r30, Y+48	; 0x30
    67be:	f9 a9       	ldd	r31, Y+49	; 0x31
    67c0:	80 81       	ld	r24, Z
    67c2:	9f a9       	ldd	r25, Y+55	; 0x37
    67c4:	89 2b       	or	r24, r25
    67c6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    67c8:	81 b1       	in	r24, 0x01	; 1
    67ca:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    67cc:	88 8d       	ldd	r24, Y+24	; 0x18
    67ce:	99 8d       	ldd	r25, Y+25	; 0x19
    67d0:	89 2b       	or	r24, r25
    67d2:	09 f0       	breq	.+2      	; 0x67d6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    67d4:	67 c0       	rjmp	.+206    	; 0x68a4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    67d6:	f5 01       	movw	r30, r10
    67d8:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    67da:	42 e0       	ldi	r20, 0x02	; 2
    67dc:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    67de:	ac a9       	ldd	r26, Y+52	; 0x34
    67e0:	bd a9       	ldd	r27, Y+53	; 0x35
    67e2:	2c 91       	ld	r18, X
    67e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    67e6:	23 23       	and	r18, r19
    67e8:	2c 93       	st	X, r18
    67ea:	20 b1       	in	r18, 0x00	; 0
    67ec:	ac a9       	ldd	r26, Y+52	; 0x34
    67ee:	bd a9       	ldd	r27, Y+53	; 0x35
    67f0:	2c 91       	ld	r18, X
    67f2:	39 ad       	ldd	r19, Y+57	; 0x39
    67f4:	23 2b       	or	r18, r19
    67f6:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    67f8:	ac a9       	ldd	r26, Y+52	; 0x34
    67fa:	bd a9       	ldd	r27, Y+53	; 0x35
    67fc:	2c 91       	ld	r18, X
    67fe:	3d ad       	ldd	r19, Y+61	; 0x3d
    6800:	23 23       	and	r18, r19
    6802:	2c 93       	st	X, r18
    6804:	20 b1       	in	r18, 0x00	; 0
    6806:	ac a9       	ldd	r26, Y+52	; 0x34
    6808:	bd a9       	ldd	r27, Y+53	; 0x35
    680a:	2c 91       	ld	r18, X
    680c:	39 ad       	ldd	r19, Y+57	; 0x39
    680e:	23 2b       	or	r18, r19
    6810:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    6812:	ac a9       	ldd	r26, Y+52	; 0x34
    6814:	bd a9       	ldd	r27, Y+53	; 0x35
    6816:	2c 91       	ld	r18, X
    6818:	3d ad       	ldd	r19, Y+61	; 0x3d
    681a:	23 23       	and	r18, r19
    681c:	2c 93       	st	X, r18
    681e:	20 b1       	in	r18, 0x00	; 0
    6820:	ac a9       	ldd	r26, Y+52	; 0x34
    6822:	bd a9       	ldd	r27, Y+53	; 0x35
    6824:	3c 91       	ld	r19, X
    6826:	69 ad       	ldd	r22, Y+57	; 0x39
    6828:	36 2b       	or	r19, r22
    682a:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    682c:	ac a9       	ldd	r26, Y+52	; 0x34
    682e:	bd a9       	ldd	r27, Y+53	; 0x35
    6830:	3c 91       	ld	r19, X
    6832:	6d ad       	ldd	r22, Y+61	; 0x3d
    6834:	36 23       	and	r19, r22
    6836:	3c 93       	st	X, r19
    6838:	60 b1       	in	r22, 0x00	; 0
    683a:	ac a9       	ldd	r26, Y+52	; 0x34
    683c:	bd a9       	ldd	r27, Y+53	; 0x35
    683e:	3c 91       	ld	r19, X
    6840:	79 ad       	ldd	r23, Y+57	; 0x39
    6842:	37 2b       	or	r19, r23
    6844:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    6846:	41 30       	cpi	r20, 0x01	; 1
    6848:	51 05       	cpc	r21, r1
    684a:	49 f5       	brne	.+82     	; 0x689e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    684c:	32 2f       	mov	r19, r18
    684e:	26 2f       	mov	r18, r22
    6850:	21 93       	st	Z+, r18
    6852:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    6854:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    6856:	09 f0       	breq	.+2      	; 0x685a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    6858:	c0 cf       	rjmp	.-128    	; 0x67da <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    685a:	cc 0c       	add	r12, r12
    685c:	dd 1c       	adc	r13, r13
    685e:	ac 0c       	add	r10, r12
    6860:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    6862:	0c 89       	ldd	r16, Y+20	; 0x14
    6864:	1d 89       	ldd	r17, Y+21	; 0x15
    6866:	01 50       	subi	r16, 0x01	; 1
    6868:	11 09       	sbc	r17, r1
    686a:	2a 89       	ldd	r18, Y+18	; 0x12
    686c:	3b 89       	ldd	r19, Y+19	; 0x13
    686e:	21 50       	subi	r18, 0x01	; 1
    6870:	31 09       	sbc	r19, r1
    6872:	e8 81       	ld	r30, Y
    6874:	f9 81       	ldd	r31, Y+1	; 0x01
    6876:	06 80       	ldd	r0, Z+6	; 0x06
    6878:	f7 81       	ldd	r31, Z+7	; 0x07
    687a:	e0 2d       	mov	r30, r0
    687c:	50 e0       	ldi	r21, 0x00	; 0
    687e:	40 e0       	ldi	r20, 0x00	; 0
    6880:	70 e0       	ldi	r23, 0x00	; 0
    6882:	60 e0       	ldi	r22, 0x00	; 0
    6884:	ce 01       	movw	r24, r28
    6886:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    6888:	ee a5       	ldd	r30, Y+46	; 0x2e
    688a:	ff a5       	ldd	r31, Y+47	; 0x2f
    688c:	80 81       	ld	r24, Z
    688e:	9e a9       	ldd	r25, Y+54	; 0x36
    6890:	89 2b       	or	r24, r25
    6892:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    6894:	81 b1       	in	r24, 0x01	; 1
    6896:	71 b8       	out	0x01, r7	; 1
    6898:	d1 2c       	mov	r13, r1
    689a:	c1 2c       	mov	r12, r1
    689c:	63 cf       	rjmp	.-314    	; 0x6764 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    689e:	41 e0       	ldi	r20, 0x01	; 1
    68a0:	50 e0       	ldi	r21, 0x00	; 0
    68a2:	9d cf       	rjmp	.-198    	; 0x67de <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    68a4:	ec a9       	ldd	r30, Y+52	; 0x34
    68a6:	fd a9       	ldd	r31, Y+53	; 0x35
    68a8:	80 81       	ld	r24, Z
    68aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    68ac:	89 23       	and	r24, r25
    68ae:	80 83       	st	Z, r24
    68b0:	80 b1       	in	r24, 0x00	; 0
    68b2:	ec a9       	ldd	r30, Y+52	; 0x34
    68b4:	fd a9       	ldd	r31, Y+53	; 0x35
    68b6:	80 81       	ld	r24, Z
    68b8:	99 ad       	ldd	r25, Y+57	; 0x39
    68ba:	89 2b       	or	r24, r25
    68bc:	80 83       	st	Z, r24
    68be:	75 01       	movw	r14, r10
    68c0:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    68c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    68c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    68c6:	81 30       	cpi	r24, 0x01	; 1
    68c8:	91 05       	cpc	r25, r1
    68ca:	d9 f5       	brne	.+118    	; 0x6942 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    68cc:	ec a9       	ldd	r30, Y+52	; 0x34
    68ce:	fd a9       	ldd	r31, Y+53	; 0x35
    68d0:	80 81       	ld	r24, Z
    68d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    68d4:	89 23       	and	r24, r25
    68d6:	80 83       	st	Z, r24
    68d8:	60 b1       	in	r22, 0x00	; 0
    68da:	ec a9       	ldd	r30, Y+52	; 0x34
    68dc:	fd a9       	ldd	r31, Y+53	; 0x35
    68de:	80 81       	ld	r24, Z
    68e0:	99 ad       	ldd	r25, Y+57	; 0x39
    68e2:	89 2b       	or	r24, r25
    68e4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    68e6:	ec a9       	ldd	r30, Y+52	; 0x34
    68e8:	fd a9       	ldd	r31, Y+53	; 0x35
    68ea:	80 81       	ld	r24, Z
    68ec:	9d ad       	ldd	r25, Y+61	; 0x3d
    68ee:	89 23       	and	r24, r25
    68f0:	80 83       	st	Z, r24
    68f2:	40 b1       	in	r20, 0x00	; 0
    68f4:	ec a9       	ldd	r30, Y+52	; 0x34
    68f6:	fd a9       	ldd	r31, Y+53	; 0x35
    68f8:	80 81       	ld	r24, Z
    68fa:	99 ad       	ldd	r25, Y+57	; 0x39
    68fc:	89 2b       	or	r24, r25
    68fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    6900:	ec a9       	ldd	r30, Y+52	; 0x34
    6902:	fd a9       	ldd	r31, Y+53	; 0x35
    6904:	80 81       	ld	r24, Z
    6906:	9d ad       	ldd	r25, Y+61	; 0x3d
    6908:	89 23       	and	r24, r25
    690a:	80 83       	st	Z, r24
    690c:	20 b1       	in	r18, 0x00	; 0
    690e:	ec a9       	ldd	r30, Y+52	; 0x34
    6910:	fd a9       	ldd	r31, Y+53	; 0x35
    6912:	80 81       	ld	r24, Z
    6914:	99 ad       	ldd	r25, Y+57	; 0x39
    6916:	89 2b       	or	r24, r25
    6918:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    691a:	e8 81       	ld	r30, Y
    691c:	f9 81       	ldd	r31, Y+1	; 0x01
    691e:	01 90       	ld	r0, Z+
    6920:	f0 81       	ld	r31, Z
    6922:	e0 2d       	mov	r30, r0
    6924:	ce 01       	movw	r24, r28
    6926:	19 95       	eicall
    6928:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    692a:	f7 01       	movw	r30, r14
    692c:	81 92       	st	Z+, r8
    692e:	91 92       	st	Z+, r9
    6930:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    6932:	01 50       	subi	r16, 0x01	; 1
    6934:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    6936:	29 f6       	brne	.-118    	; 0x68c2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    6938:	cc 0c       	add	r12, r12
    693a:	dd 1c       	adc	r13, r13
    693c:	ac 0c       	add	r10, r12
    693e:	bd 1c       	adc	r11, r13
    6940:	a3 cf       	rjmp	.-186    	; 0x6888 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    6942:	89 2b       	or	r24, r25
    6944:	91 f7       	brne	.-28     	; 0x692a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    6946:	ec a9       	ldd	r30, Y+52	; 0x34
    6948:	fd a9       	ldd	r31, Y+53	; 0x35
    694a:	80 81       	ld	r24, Z
    694c:	9d ad       	ldd	r25, Y+61	; 0x3d
    694e:	89 23       	and	r24, r25
    6950:	80 83       	st	Z, r24
    6952:	80 b0       	in	r8, 0x00	; 0
    6954:	ec a9       	ldd	r30, Y+52	; 0x34
    6956:	fd a9       	ldd	r31, Y+53	; 0x35
    6958:	80 81       	ld	r24, Z
    695a:	99 ad       	ldd	r25, Y+57	; 0x39
    695c:	89 2b       	or	r24, r25
    695e:	80 83       	st	Z, r24
    6960:	ec a9       	ldd	r30, Y+52	; 0x34
    6962:	fd a9       	ldd	r31, Y+53	; 0x35
    6964:	80 81       	ld	r24, Z
    6966:	9d ad       	ldd	r25, Y+61	; 0x3d
    6968:	89 23       	and	r24, r25
    696a:	80 83       	st	Z, r24
    696c:	90 b1       	in	r25, 0x00	; 0
    696e:	ec a9       	ldd	r30, Y+52	; 0x34
    6970:	fd a9       	ldd	r31, Y+53	; 0x35
    6972:	80 81       	ld	r24, Z
    6974:	29 ad       	ldd	r18, Y+57	; 0x39
    6976:	82 2b       	or	r24, r18
    6978:	80 83       	st	Z, r24
    697a:	98 2c       	mov	r9, r8
    697c:	89 2e       	mov	r8, r25
    697e:	d5 cf       	rjmp	.-86     	; 0x692a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    6980:	90 e0       	ldi	r25, 0x00	; 0
    6982:	80 e0       	ldi	r24, 0x00	; 0
    6984:	df 91       	pop	r29
    6986:	cf 91       	pop	r28
    6988:	1f 91       	pop	r17
    698a:	0f 91       	pop	r16
    698c:	ff 90       	pop	r15
    698e:	ef 90       	pop	r14
    6990:	df 90       	pop	r13
    6992:	cf 90       	pop	r12
    6994:	bf 90       	pop	r11
    6996:	af 90       	pop	r10
    6998:	9f 90       	pop	r9
    699a:	8f 90       	pop	r8
    699c:	7f 90       	pop	r7
    699e:	08 95       	ret

000069a0 <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    69a0:	38 e0       	ldi	r19, 0x08	; 8
    69a2:	43 9f       	mul	r20, r19
    69a4:	c0 01       	movw	r24, r0
    69a6:	11 24       	eor	r1, r1
    69a8:	80 7e       	andi	r24, 0xE0	; 224
    69aa:	97 70       	andi	r25, 0x07	; 7
    69ac:	26 95       	lsr	r18
    69ae:	26 95       	lsr	r18
    69b0:	26 95       	lsr	r18
    69b2:	82 2b       	or	r24, r18
    69b4:	70 e0       	ldi	r23, 0x00	; 0
    69b6:	76 2f       	mov	r23, r22
    69b8:	66 27       	eor	r22, r22
    69ba:	66 27       	eor	r22, r22
    69bc:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    69be:	86 2b       	or	r24, r22
    69c0:	97 2b       	or	r25, r23
    69c2:	08 95       	ret

000069c4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    69c4:	0f 93       	push	r16
    69c6:	cf 93       	push	r28
    69c8:	df 93       	push	r29
    69ca:	dc 01       	movw	r26, r24
    69cc:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    69ce:	9e 96       	adiw	r26, 0x2e	; 46
    69d0:	ed 91       	ld	r30, X+
    69d2:	fc 91       	ld	r31, X
    69d4:	9f 97       	sbiw	r26, 0x2f	; 47
    69d6:	80 81       	ld	r24, Z
    69d8:	da 96       	adiw	r26, 0x3a	; 58
    69da:	9c 91       	ld	r25, X
    69dc:	da 97       	sbiw	r26, 0x3a	; 58
    69de:	89 23       	and	r24, r25
    69e0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    69e2:	22 23       	and	r18, r18
    69e4:	09 f4       	brne	.+2      	; 0x69e8 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    69e6:	5b c0       	rjmp	.+182    	; 0x6a9e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    69e8:	58 96       	adiw	r26, 0x18	; 24
    69ea:	8d 91       	ld	r24, X+
    69ec:	9c 91       	ld	r25, X
    69ee:	59 97       	sbiw	r26, 0x19	; 25
    69f0:	89 2b       	or	r24, r25
    69f2:	49 f5       	brne	.+82     	; 0x6a46 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    69f4:	d0 96       	adiw	r26, 0x30	; 48
    69f6:	ed 91       	ld	r30, X+
    69f8:	fc 91       	ld	r31, X
    69fa:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    69fc:	80 81       	ld	r24, Z
    69fe:	db 96       	adiw	r26, 0x3b	; 59
    6a00:	9c 91       	ld	r25, X
    6a02:	db 97       	sbiw	r26, 0x3b	; 59
    6a04:	89 23       	and	r24, r25
    6a06:	80 83       	st	Z, r24
    6a08:	12 b8       	out	0x02, r1	; 2
    6a0a:	d2 96       	adiw	r26, 0x32	; 50
    6a0c:	ed 91       	ld	r30, X+
    6a0e:	fc 91       	ld	r31, X
    6a10:	d3 97       	sbiw	r26, 0x33	; 51
    6a12:	80 81       	ld	r24, Z
    6a14:	dc 96       	adiw	r26, 0x3c	; 60
    6a16:	9c 91       	ld	r25, X
    6a18:	dc 97       	sbiw	r26, 0x3c	; 60
    6a1a:	89 23       	and	r24, r25
    6a1c:	80 83       	st	Z, r24
    6a1e:	d2 96       	adiw	r26, 0x32	; 50
    6a20:	ed 91       	ld	r30, X+
    6a22:	fc 91       	ld	r31, X
    6a24:	d3 97       	sbiw	r26, 0x33	; 51
    6a26:	80 81       	ld	r24, Z
    6a28:	d8 96       	adiw	r26, 0x38	; 56
    6a2a:	9c 91       	ld	r25, X
    6a2c:	d8 97       	sbiw	r26, 0x38	; 56
    6a2e:	89 2b       	or	r24, r25
    6a30:	80 83       	st	Z, r24
    6a32:	d0 96       	adiw	r26, 0x30	; 48
    6a34:	ed 91       	ld	r30, X+
    6a36:	fc 91       	ld	r31, X
    6a38:	d1 97       	sbiw	r26, 0x31	; 49
    6a3a:	80 81       	ld	r24, Z
    6a3c:	d7 96       	adiw	r26, 0x37	; 55
    6a3e:	9c 91       	ld	r25, X
    6a40:	d7 97       	sbiw	r26, 0x37	; 55
    6a42:	89 2b       	or	r24, r25
    6a44:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    6a46:	d0 96       	adiw	r26, 0x30	; 48
    6a48:	ed 91       	ld	r30, X+
    6a4a:	fc 91       	ld	r31, X
    6a4c:	d1 97       	sbiw	r26, 0x31	; 49
    6a4e:	80 81       	ld	r24, Z
    6a50:	db 96       	adiw	r26, 0x3b	; 59
    6a52:	9c 91       	ld	r25, X
    6a54:	db 97       	sbiw	r26, 0x3b	; 59
    6a56:	89 23       	and	r24, r25
    6a58:	80 83       	st	Z, r24
    6a5a:	90 96       	adiw	r26, 0x20	; 32
    6a5c:	8c 91       	ld	r24, X
    6a5e:	90 97       	sbiw	r26, 0x20	; 32
    6a60:	82 b9       	out	0x02, r24	; 2
    6a62:	d2 96       	adiw	r26, 0x32	; 50
    6a64:	ed 91       	ld	r30, X+
    6a66:	fc 91       	ld	r31, X
    6a68:	d3 97       	sbiw	r26, 0x33	; 51
    6a6a:	80 81       	ld	r24, Z
    6a6c:	dc 96       	adiw	r26, 0x3c	; 60
    6a6e:	9c 91       	ld	r25, X
    6a70:	dc 97       	sbiw	r26, 0x3c	; 60
    6a72:	89 23       	and	r24, r25
    6a74:	80 83       	st	Z, r24
    6a76:	d2 96       	adiw	r26, 0x32	; 50
    6a78:	ed 91       	ld	r30, X+
    6a7a:	fc 91       	ld	r31, X
    6a7c:	d3 97       	sbiw	r26, 0x33	; 51
    6a7e:	80 81       	ld	r24, Z
    6a80:	d8 96       	adiw	r26, 0x38	; 56
    6a82:	9c 91       	ld	r25, X
    6a84:	d8 97       	sbiw	r26, 0x38	; 56
    6a86:	89 2b       	or	r24, r25
    6a88:	80 83       	st	Z, r24
    6a8a:	d0 96       	adiw	r26, 0x30	; 48
    6a8c:	ed 91       	ld	r30, X+
    6a8e:	fc 91       	ld	r31, X
    6a90:	d1 97       	sbiw	r26, 0x31	; 49
    6a92:	80 81       	ld	r24, Z
    6a94:	d7 96       	adiw	r26, 0x37	; 55
    6a96:	9c 91       	ld	r25, X
    6a98:	d7 97       	sbiw	r26, 0x37	; 55
    6a9a:	89 2b       	or	r24, r25
    6a9c:	80 83       	st	Z, r24
    6a9e:	eb 01       	movw	r28, r22
    6aa0:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    6aa2:	18 16       	cp	r1, r24
    6aa4:	19 06       	cpc	r1, r25
    6aa6:	bc f5       	brge	.+110    	; 0x6b16 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    6aa8:	00 23       	and	r16, r16
    6aaa:	91 f1       	breq	.+100    	; 0x6b10 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    6aac:	fe 01       	movw	r30, r28
    6aae:	45 91       	lpm	r20, Z+
    6ab0:	54 91       	lpm	r21, Z
    6ab2:	34 2f       	mov	r19, r20
    6ab4:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    6ab6:	22 b9       	out	0x02, r18	; 2
    6ab8:	d2 96       	adiw	r26, 0x32	; 50
    6aba:	ed 91       	ld	r30, X+
    6abc:	fc 91       	ld	r31, X
    6abe:	d3 97       	sbiw	r26, 0x33	; 51
    6ac0:	20 81       	ld	r18, Z
    6ac2:	dc 96       	adiw	r26, 0x3c	; 60
    6ac4:	4c 91       	ld	r20, X
    6ac6:	dc 97       	sbiw	r26, 0x3c	; 60
    6ac8:	24 23       	and	r18, r20
    6aca:	20 83       	st	Z, r18
    6acc:	d2 96       	adiw	r26, 0x32	; 50
    6ace:	ed 91       	ld	r30, X+
    6ad0:	fc 91       	ld	r31, X
    6ad2:	d3 97       	sbiw	r26, 0x33	; 51
    6ad4:	20 81       	ld	r18, Z
    6ad6:	d8 96       	adiw	r26, 0x38	; 56
    6ad8:	4c 91       	ld	r20, X
    6ada:	d8 97       	sbiw	r26, 0x38	; 56
    6adc:	24 2b       	or	r18, r20
    6ade:	20 83       	st	Z, r18
    6ae0:	32 b9       	out	0x02, r19	; 2
    6ae2:	d2 96       	adiw	r26, 0x32	; 50
    6ae4:	ed 91       	ld	r30, X+
    6ae6:	fc 91       	ld	r31, X
    6ae8:	d3 97       	sbiw	r26, 0x33	; 51
    6aea:	20 81       	ld	r18, Z
    6aec:	dc 96       	adiw	r26, 0x3c	; 60
    6aee:	3c 91       	ld	r19, X
    6af0:	dc 97       	sbiw	r26, 0x3c	; 60
    6af2:	23 23       	and	r18, r19
    6af4:	20 83       	st	Z, r18
    6af6:	d2 96       	adiw	r26, 0x32	; 50
    6af8:	ed 91       	ld	r30, X+
    6afa:	fc 91       	ld	r31, X
    6afc:	d3 97       	sbiw	r26, 0x33	; 51
    6afe:	20 81       	ld	r18, Z
    6b00:	d8 96       	adiw	r26, 0x38	; 56
    6b02:	3c 91       	ld	r19, X
    6b04:	d8 97       	sbiw	r26, 0x38	; 56
    6b06:	23 2b       	or	r18, r19
    6b08:	20 83       	st	Z, r18
    6b0a:	22 96       	adiw	r28, 0x02	; 2
    6b0c:	01 97       	sbiw	r24, 0x01	; 1
    6b0e:	c9 cf       	rjmp	.-110    	; 0x6aa2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    6b10:	38 81       	ld	r19, Y
    6b12:	29 81       	ldd	r18, Y+1	; 0x01
    6b14:	d0 cf       	rjmp	.-96     	; 0x6ab6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    6b16:	9e 96       	adiw	r26, 0x2e	; 46
    6b18:	ed 91       	ld	r30, X+
    6b1a:	fc 91       	ld	r31, X
    6b1c:	9f 97       	sbiw	r26, 0x2f	; 47
    6b1e:	80 81       	ld	r24, Z
    6b20:	d6 96       	adiw	r26, 0x36	; 54
    6b22:	9c 91       	ld	r25, X
    6b24:	89 2b       	or	r24, r25
    6b26:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    6b28:	df 91       	pop	r29
    6b2a:	cf 91       	pop	r28
    6b2c:	0f 91       	pop	r16
    6b2e:	08 95       	ret

00006b30 <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    6b30:	2f 92       	push	r2
    6b32:	3f 92       	push	r3
    6b34:	4f 92       	push	r4
    6b36:	5f 92       	push	r5
    6b38:	6f 92       	push	r6
    6b3a:	7f 92       	push	r7
    6b3c:	8f 92       	push	r8
    6b3e:	9f 92       	push	r9
    6b40:	af 92       	push	r10
    6b42:	bf 92       	push	r11
    6b44:	cf 92       	push	r12
    6b46:	df 92       	push	r13
    6b48:	ef 92       	push	r14
    6b4a:	ff 92       	push	r15
    6b4c:	0f 93       	push	r16
    6b4e:	1f 93       	push	r17
    6b50:	cf 93       	push	r28
    6b52:	df 93       	push	r29
    6b54:	00 d0       	rcall	.+0      	; 0x6b56 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    6b56:	00 d0       	rcall	.+0      	; 0x6b58 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    6b58:	cd b7       	in	r28, 0x3d	; 61
    6b5a:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    6b5c:	28 2e       	mov	r2, r24
    6b5e:	31 2c       	mov	r3, r1
    6b60:	c1 01       	movw	r24, r2
    6b62:	88 0f       	add	r24, r24
    6b64:	99 1f       	adc	r25, r25
    6b66:	e0 91 a6 0c 	lds	r30, 0x0CA6	; 0x800ca6 <array_pids>
    6b6a:	f0 91 a7 0c 	lds	r31, 0x0CA7	; 0x800ca7 <array_pids+0x1>
    6b6e:	e8 0f       	add	r30, r24
    6b70:	f9 1f       	adc	r31, r25
    6b72:	80 81       	ld	r24, Z
    6b74:	91 81       	ldd	r25, Z+1	; 0x01
    6b76:	9e 83       	std	Y+6, r25	; 0x06
    6b78:	8d 83       	std	Y+5, r24	; 0x05
    6b7a:	81 01       	movw	r16, r2
    6b7c:	00 0f       	add	r16, r16
    6b7e:	11 1f       	adc	r17, r17
    6b80:	00 0f       	add	r16, r16
    6b82:	11 1f       	adc	r17, r17
    6b84:	f8 01       	movw	r30, r16
    6b86:	e5 52       	subi	r30, 0x25	; 37
    6b88:	f6 4f       	sbci	r31, 0xF6	; 246
    6b8a:	40 80       	ld	r4, Z
    6b8c:	51 80       	ldd	r5, Z+1	; 0x01
    6b8e:	62 80       	ldd	r6, Z+2	; 0x02
    6b90:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    6b92:	20 e0       	ldi	r18, 0x00	; 0
    6b94:	30 e0       	ldi	r19, 0x00	; 0
    6b96:	a9 01       	movw	r20, r18
    6b98:	c3 01       	movw	r24, r6
    6b9a:	b2 01       	movw	r22, r4
    6b9c:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
    6ba0:	87 fd       	sbrc	r24, 7
    6ba2:	97 c0       	rjmp	.+302    	; 0x6cd2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:219
    6ba4:	f8 01       	movw	r30, r16
    6ba6:	e1 51       	subi	r30, 0x11	; 17
    6ba8:	f6 4f       	sbci	r31, 0xF6	; 246
    6baa:	80 80       	ld	r8, Z
    6bac:	91 80       	ldd	r9, Z+1	; 0x01
    6bae:	a2 80       	ldd	r10, Z+2	; 0x02
    6bb0:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    6bb2:	20 e0       	ldi	r18, 0x00	; 0
    6bb4:	30 e0       	ldi	r19, 0x00	; 0
    6bb6:	a9 01       	movw	r20, r18
    6bb8:	c5 01       	movw	r24, r10
    6bba:	b4 01       	movw	r22, r8
    6bbc:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
    6bc0:	87 fd       	sbrc	r24, 7
    6bc2:	87 c0       	rjmp	.+270    	; 0x6cd2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:219
    6bc4:	f8 01       	movw	r30, r16
    6bc6:	ed 5f       	subi	r30, 0xFD	; 253
    6bc8:	f5 4f       	sbci	r31, 0xF5	; 245
    6bca:	c0 80       	ld	r12, Z
    6bcc:	d1 80       	ldd	r13, Z+1	; 0x01
    6bce:	e2 80       	ldd	r14, Z+2	; 0x02
    6bd0:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    6bd2:	20 e0       	ldi	r18, 0x00	; 0
    6bd4:	30 e0       	ldi	r19, 0x00	; 0
    6bd6:	a9 01       	movw	r20, r18
    6bd8:	c7 01       	movw	r24, r14
    6bda:	b6 01       	movw	r22, r12
    6bdc:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
    6be0:	87 fd       	sbrc	r24, 7
    6be2:	77 c0       	rjmp	.+238    	; 0x6cd2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	ed 81       	ldd	r30, Y+5	; 0x05
    6be8:	fe 81       	ldd	r31, Y+6	; 0x06
    6bea:	22 8d       	ldd	r18, Z+26	; 0x1a
    6bec:	33 8d       	ldd	r19, Z+27	; 0x1b
    6bee:	21 30       	cpi	r18, 0x01	; 1
    6bf0:	31 05       	cpc	r19, r1
    6bf2:	09 f0       	breq	.+2      	; 0x6bf6 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    6bf4:	80 e0       	ldi	r24, 0x00	; 0
    6bf6:	ed 81       	ldd	r30, Y+5	; 0x05
    6bf8:	fe 81       	ldd	r31, Y+6	; 0x06
    6bfa:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    6bfc:	40 82       	st	Z, r4
    6bfe:	51 82       	std	Z+1, r5	; 0x01
    6c00:	62 82       	std	Z+2, r6	; 0x02
    6c02:	73 82       	std	Z+3, r7	; 0x03
    6c04:	84 82       	std	Z+4, r8	; 0x04
    6c06:	95 82       	std	Z+5, r9	; 0x05
    6c08:	a6 82       	std	Z+6, r10	; 0x06
    6c0a:	b7 82       	std	Z+7, r11	; 0x07
    6c0c:	c0 86       	std	Z+8, r12	; 0x08
    6c0e:	d1 86       	std	Z+9, r13	; 0x09
    6c10:	e2 86       	std	Z+10, r14	; 0x0a
    6c12:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    6c14:	66 a5       	ldd	r22, Z+46	; 0x2e
    6c16:	77 a5       	ldd	r23, Z+47	; 0x2f
    6c18:	80 a9       	ldd	r24, Z+48	; 0x30
    6c1a:	91 a9       	ldd	r25, Z+49	; 0x31
    6c1c:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
    6c20:	20 e0       	ldi	r18, 0x00	; 0
    6c22:	30 e0       	ldi	r19, 0x00	; 0
    6c24:	4a e7       	ldi	r20, 0x7A	; 122
    6c26:	54 e4       	ldi	r21, 0x44	; 68
    6c28:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
    6c2c:	69 83       	std	Y+1, r22	; 0x01
    6c2e:	7a 83       	std	Y+2, r23	; 0x02
    6c30:	8b 83       	std	Y+3, r24	; 0x03
    6c32:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    6c34:	ed 81       	ldd	r30, Y+5	; 0x05
    6c36:	fe 81       	ldd	r31, Y+6	; 0x06
    6c38:	44 86       	std	Z+12, r4	; 0x0c
    6c3a:	55 86       	std	Z+13, r5	; 0x0d
    6c3c:	66 86       	std	Z+14, r6	; 0x0e
    6c3e:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    6c40:	9b 01       	movw	r18, r22
    6c42:	ac 01       	movw	r20, r24
    6c44:	c5 01       	movw	r24, r10
    6c46:	b4 01       	movw	r22, r8
    6c48:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
    6c4c:	4b 01       	movw	r8, r22
    6c4e:	5c 01       	movw	r10, r24
    6c50:	ed 81       	ldd	r30, Y+5	; 0x05
    6c52:	fe 81       	ldd	r31, Y+6	; 0x06
    6c54:	80 8a       	std	Z+16, r8	; 0x10
    6c56:	91 8a       	std	Z+17, r9	; 0x11
    6c58:	a2 8a       	std	Z+18, r10	; 0x12
    6c5a:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    6c5c:	29 81       	ldd	r18, Y+1	; 0x01
    6c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    6c60:	4b 81       	ldd	r20, Y+3	; 0x03
    6c62:	5c 81       	ldd	r21, Y+4	; 0x04
    6c64:	c7 01       	movw	r24, r14
    6c66:	b6 01       	movw	r22, r12
    6c68:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
    6c6c:	6b 01       	movw	r12, r22
    6c6e:	7c 01       	movw	r14, r24
    6c70:	ed 81       	ldd	r30, Y+5	; 0x05
    6c72:	fe 81       	ldd	r31, Y+6	; 0x06
    6c74:	c4 8a       	std	Z+20, r12	; 0x14
    6c76:	d5 8a       	std	Z+21, r13	; 0x15
    6c78:	e6 8a       	std	Z+22, r14	; 0x16
    6c7a:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    6c7c:	80 8d       	ldd	r24, Z+24	; 0x18
    6c7e:	91 8d       	ldd	r25, Z+25	; 0x19
    6c80:	01 97       	sbiw	r24, 0x01	; 1
    6c82:	39 f5       	brne	.+78     	; 0x6cd2 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    6c84:	a3 01       	movw	r20, r6
    6c86:	92 01       	movw	r18, r4
    6c88:	60 e0       	ldi	r22, 0x00	; 0
    6c8a:	70 e0       	ldi	r23, 0x00	; 0
    6c8c:	cb 01       	movw	r24, r22
    6c8e:	0e 94 3e ce 	call	0x19c7c	; 0x19c7c <__subsf3>
    6c92:	ed 81       	ldd	r30, Y+5	; 0x05
    6c94:	fe 81       	ldd	r31, Y+6	; 0x06
    6c96:	64 87       	std	Z+12, r22	; 0x0c
    6c98:	75 87       	std	Z+13, r23	; 0x0d
    6c9a:	86 87       	std	Z+14, r24	; 0x0e
    6c9c:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    6c9e:	a5 01       	movw	r20, r10
    6ca0:	94 01       	movw	r18, r8
    6ca2:	60 e0       	ldi	r22, 0x00	; 0
    6ca4:	70 e0       	ldi	r23, 0x00	; 0
    6ca6:	cb 01       	movw	r24, r22
    6ca8:	0e 94 3e ce 	call	0x19c7c	; 0x19c7c <__subsf3>
    6cac:	ed 81       	ldd	r30, Y+5	; 0x05
    6cae:	fe 81       	ldd	r31, Y+6	; 0x06
    6cb0:	60 8b       	std	Z+16, r22	; 0x10
    6cb2:	71 8b       	std	Z+17, r23	; 0x11
    6cb4:	82 8b       	std	Z+18, r24	; 0x12
    6cb6:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    6cb8:	a7 01       	movw	r20, r14
    6cba:	96 01       	movw	r18, r12
    6cbc:	60 e0       	ldi	r22, 0x00	; 0
    6cbe:	70 e0       	ldi	r23, 0x00	; 0
    6cc0:	cb 01       	movw	r24, r22
    6cc2:	0e 94 3e ce 	call	0x19c7c	; 0x19c7c <__subsf3>
    6cc6:	ed 81       	ldd	r30, Y+5	; 0x05
    6cc8:	fe 81       	ldd	r31, Y+6	; 0x06
    6cca:	64 8b       	std	Z+20, r22	; 0x14
    6ccc:	75 8b       	std	Z+21, r23	; 0x15
    6cce:	86 8b       	std	Z+22, r24	; 0x16
    6cd0:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    6cd2:	f1 01       	movw	r30, r2
    6cd4:	e9 5e       	subi	r30, 0xE9	; 233
    6cd6:	f5 4f       	sbci	r31, 0xF5	; 245
    6cd8:	10 81       	ld	r17, Z
    6cda:	61 2f       	mov	r22, r17
    6cdc:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    6cde:	61 15       	cp	r22, r1
    6ce0:	71 05       	cpc	r23, r1
    6ce2:	f1 f1       	breq	.+124    	; 0x6d60 <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    6ce4:	07 2e       	mov	r0, r23
    6ce6:	00 0c       	add	r0, r0
    6ce8:	88 0b       	sbc	r24, r24
    6cea:	99 0b       	sbc	r25, r25
    6cec:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    6cf0:	6b 01       	movw	r12, r22
    6cf2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    6cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    6cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    6cf8:	66 a5       	ldd	r22, Z+46	; 0x2e
    6cfa:	77 a5       	ldd	r23, Z+47	; 0x2f
    6cfc:	80 a9       	ldd	r24, Z+48	; 0x30
    6cfe:	91 a9       	ldd	r25, Z+49	; 0x31
    6d00:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
    6d04:	9b 01       	movw	r18, r22
    6d06:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    6d08:	c7 01       	movw	r24, r14
    6d0a:	b6 01       	movw	r22, r12
    6d0c:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
    6d10:	6b 01       	movw	r12, r22
    6d12:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    6d14:	ac 01       	movw	r20, r24
    6d16:	9b 01       	movw	r18, r22
    6d18:	ed 81       	ldd	r30, Y+5	; 0x05
    6d1a:	fe 81       	ldd	r31, Y+6	; 0x06
    6d1c:	60 89       	ldd	r22, Z+16	; 0x10
    6d1e:	71 89       	ldd	r23, Z+17	; 0x11
    6d20:	82 89       	ldd	r24, Z+18	; 0x12
    6d22:	93 89       	ldd	r25, Z+19	; 0x13
    6d24:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
    6d28:	ed 81       	ldd	r30, Y+5	; 0x05
    6d2a:	fe 81       	ldd	r31, Y+6	; 0x06
    6d2c:	60 8b       	std	Z+16, r22	; 0x10
    6d2e:	71 8b       	std	Z+17, r23	; 0x11
    6d30:	82 8b       	std	Z+18, r24	; 0x12
    6d32:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    6d34:	a7 01       	movw	r20, r14
    6d36:	96 01       	movw	r18, r12
    6d38:	64 89       	ldd	r22, Z+20	; 0x14
    6d3a:	75 89       	ldd	r23, Z+21	; 0x15
    6d3c:	86 89       	ldd	r24, Z+22	; 0x16
    6d3e:	97 89       	ldd	r25, Z+23	; 0x17
    6d40:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
    6d44:	ed 81       	ldd	r30, Y+5	; 0x05
    6d46:	fe 81       	ldd	r31, Y+6	; 0x06
    6d48:	64 8b       	std	Z+20, r22	; 0x14
    6d4a:	75 8b       	std	Z+21, r23	; 0x15
    6d4c:	86 8b       	std	Z+22, r24	; 0x16
    6d4e:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    6d50:	81 2f       	mov	r24, r17
    6d52:	90 e0       	ldi	r25, 0x00	; 0
    6d54:	b0 e0       	ldi	r27, 0x00	; 0
    6d56:	a0 e0       	ldi	r26, 0x00	; 0
    6d58:	86 a7       	std	Z+46, r24	; 0x2e
    6d5a:	97 a7       	std	Z+47, r25	; 0x2f
    6d5c:	a0 ab       	std	Z+48, r26	; 0x30
    6d5e:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:221
}
    6d60:	26 96       	adiw	r28, 0x06	; 6
    6d62:	0f b6       	in	r0, 0x3f	; 63
    6d64:	f8 94       	cli
    6d66:	de bf       	out	0x3e, r29	; 62
    6d68:	0f be       	out	0x3f, r0	; 63
    6d6a:	cd bf       	out	0x3d, r28	; 61
    6d6c:	df 91       	pop	r29
    6d6e:	cf 91       	pop	r28
    6d70:	1f 91       	pop	r17
    6d72:	0f 91       	pop	r16
    6d74:	ff 90       	pop	r15
    6d76:	ef 90       	pop	r14
    6d78:	df 90       	pop	r13
    6d7a:	cf 90       	pop	r12
    6d7c:	bf 90       	pop	r11
    6d7e:	af 90       	pop	r10
    6d80:	9f 90       	pop	r9
    6d82:	8f 90       	pop	r8
    6d84:	7f 90       	pop	r7
    6d86:	6f 90       	pop	r6
    6d88:	5f 90       	pop	r5
    6d8a:	4f 90       	pop	r4
    6d8c:	3f 90       	pop	r3
    6d8e:	2f 90       	pop	r2
    6d90:	08 95       	ret

00006d92 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    6d92:	fb 01       	movw	r30, r22
    6d94:	9c 01       	movw	r18, r24
    6d96:	28 5f       	subi	r18, 0xF8	; 248
    6d98:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    6d9a:	dc 01       	movw	r26, r24
    6d9c:	5d 91       	ld	r21, X+
    6d9e:	cd 01       	movw	r24, r26
    6da0:	41 91       	ld	r20, Z+
    6da2:	54 13       	cpse	r21, r20
    6da4:	05 c0       	rjmp	.+10     	; 0x6db0 <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    6da6:	a2 17       	cp	r26, r18
    6da8:	b3 07       	cpc	r27, r19
    6daa:	b9 f7       	brne	.-18     	; 0x6d9a <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    6dac:	81 e0       	ldi	r24, 0x01	; 1
    6dae:	08 95       	ret
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    6db0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    6db2:	08 95       	ret

00006db4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    6db4:	80 33       	cpi	r24, 0x30	; 48
    6db6:	9c f0       	brlt	.+38     	; 0x6dde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    6db8:	8a 33       	cpi	r24, 0x3A	; 58
    6dba:	24 f0       	brlt	.+8      	; 0x6dc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    6dbc:	8f 35       	cpi	r24, 0x5F	; 95
    6dbe:	24 f0       	brlt	.+8      	; 0x6dc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    6dc0:	8b 37       	cpi	r24, 0x7B	; 123
    6dc2:	24 f4       	brge	.+8      	; 0x6dcc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    6dc4:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    6dc6:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    6dc8:	81 34       	cpi	r24, 0x41	; 65
    6dca:	4c f0       	brlt	.+18     	; 0x6dde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    6dcc:	8b 35       	cpi	r24, 0x5B	; 91
    6dce:	d4 f3       	brlt	.-12     	; 0x6dc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    6dd0:	93 ed       	ldi	r25, 0xD3	; 211
    6dd2:	98 0f       	add	r25, r24
    6dd4:	81 e0       	ldi	r24, 0x01	; 1
    6dd6:	92 30       	cpi	r25, 0x02	; 2
    6dd8:	b0 f3       	brcs	.-20     	; 0x6dc6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    6dda:	80 e0       	ldi	r24, 0x00	; 0
    6ddc:	08 95       	ret
    6dde:	8b 32       	cpi	r24, 0x2B	; 43
    6de0:	b9 f7       	brne	.-18     	; 0x6dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    6de2:	f0 cf       	rjmp	.-32     	; 0x6dc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00006de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    6de4:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    6de6:	80 85       	ldd	r24, Z+8	; 0x08
    6de8:	81 11       	cpse	r24, r1
    6dea:	0a c0       	rjmp	.+20     	; 0x6e00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    6dec:	a2 81       	ldd	r26, Z+2	; 0x02
    6dee:	b3 81       	ldd	r27, Z+3	; 0x03
    6df0:	cd 01       	movw	r24, r26
    6df2:	01 96       	adiw	r24, 0x01	; 1
    6df4:	93 83       	std	Z+3, r25	; 0x03
    6df6:	82 83       	std	Z+2, r24	; 0x02
    6df8:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    6dfa:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    6dfc:	81 e0       	ldi	r24, 0x01	; 1
    6dfe:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    6e00:	87 81       	ldd	r24, Z+7	; 0x07
    6e02:	08 95       	ret

00006e04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    6e04:	df 92       	push	r13
    6e06:	ef 92       	push	r14
    6e08:	ff 92       	push	r15
    6e0a:	0f 93       	push	r16
    6e0c:	1f 93       	push	r17
    6e0e:	cf 93       	push	r28
    6e10:	df 93       	push	r29
    6e12:	ec 01       	movw	r28, r24
    6e14:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    6e16:	0c 81       	ldd	r16, Y+4	; 0x04
    6e18:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    6e1a:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    6e1e:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6e20:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    6e22:	ce 01       	movw	r24, r28
    6e24:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6e28:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    6e2a:	d8 16       	cp	r13, r24
    6e2c:	89 f1       	breq	.+98     	; 0x6e90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    6e2e:	81 11       	cpse	r24, r1
    6e30:	0a c0       	rjmp	.+20     	; 0x6e46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    6e32:	81 e0       	ldi	r24, 0x01	; 1
    6e34:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	1f 91       	pop	r17
    6e3c:	0f 91       	pop	r16
    6e3e:	ff 90       	pop	r15
    6e40:	ef 90       	pop	r14
    6e42:	df 90       	pop	r13
    6e44:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    6e46:	8c 35       	cpi	r24, 0x5C	; 92
    6e48:	d1 f4       	brne	.+52     	; 0x6e7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    6e4a:	ce 01       	movw	r24, r28
    6e4c:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    6e50:	88 23       	and	r24, r24
    6e52:	79 f3       	breq	.-34     	; 0x6e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    6e54:	85 37       	cpi	r24, 0x75	; 117
    6e56:	19 f4       	brne	.+6      	; 0x6e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    6e58:	84 e0       	ldi	r24, 0x04	; 4
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	ec cf       	rjmp	.-40     	; 0x6e36 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    6e5e:	e8 ee       	ldi	r30, 0xE8	; 232
    6e60:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    6e62:	90 81       	ld	r25, Z
    6e64:	99 23       	and	r25, r25
    6e66:	51 f0       	breq	.+20     	; 0x6e7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    6e68:	89 13       	cpse	r24, r25
    6e6a:	06 c0       	rjmp	.+12     	; 0x6e78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    6e6c:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    6e6e:	81 11       	cpse	r24, r1
    6e70:	05 c0       	rjmp	.+10     	; 0x6e7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    6e72:	82 e0       	ldi	r24, 0x02	; 2
    6e74:	90 e0       	ldi	r25, 0x00	; 0
    6e76:	df cf       	rjmp	.-66     	; 0x6e36 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    6e78:	32 96       	adiw	r30, 0x02	; 2
    6e7a:	f3 cf       	rjmp	.-26     	; 0x6e62 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6e7c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    6e7e:	ec 81       	ldd	r30, Y+4	; 0x04
    6e80:	fd 81       	ldd	r31, Y+5	; 0x05
    6e82:	9f 01       	movw	r18, r30
    6e84:	2f 5f       	subi	r18, 0xFF	; 255
    6e86:	3f 4f       	sbci	r19, 0xFF	; 255
    6e88:	3d 83       	std	Y+5, r19	; 0x05
    6e8a:	2c 83       	std	Y+4, r18	; 0x04
    6e8c:	80 83       	st	Z, r24
    6e8e:	c9 cf       	rjmp	.-110    	; 0x6e22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    6e90:	ec 81       	ldd	r30, Y+4	; 0x04
    6e92:	fd 81       	ldd	r31, Y+5	; 0x05
    6e94:	cf 01       	movw	r24, r30
    6e96:	01 96       	adiw	r24, 0x01	; 1
    6e98:	9d 83       	std	Y+5, r25	; 0x05
    6e9a:	8c 83       	std	Y+4, r24	; 0x04
    6e9c:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    6e9e:	f7 01       	movw	r30, r14
    6ea0:	11 83       	std	Z+1, r17	; 0x01
    6ea2:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    6ea4:	83 e0       	ldi	r24, 0x03	; 3
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	01 2b       	or	r16, r17
    6eaa:	29 f2       	breq	.-118    	; 0x6e36 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	80 e0       	ldi	r24, 0x00	; 0
    6eb0:	c2 cf       	rjmp	.-124    	; 0x6e36 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00006eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    6eb2:	1f 93       	push	r17
    6eb4:	cf 93       	push	r28
    6eb6:	df 93       	push	r29
    6eb8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    6eba:	ce 01       	movw	r24, r28
    6ebc:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    6ec0:	8b 30       	cpi	r24, 0x0B	; 11
    6ec2:	3c f4       	brge	.+14     	; 0x6ed2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    6ec4:	89 30       	cpi	r24, 0x09	; 9
    6ec6:	5c f4       	brge	.+22     	; 0x6ede <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    6ec8:	88 23       	and	r24, r24
    6eca:	e9 f0       	breq	.+58     	; 0x6f06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    6ecc:	90 e0       	ldi	r25, 0x00	; 0
    6ece:	80 e0       	ldi	r24, 0x00	; 0
    6ed0:	1c c0       	rjmp	.+56     	; 0x6f0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    6ed2:	80 32       	cpi	r24, 0x20	; 32
    6ed4:	21 f0       	breq	.+8      	; 0x6ede <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    6ed6:	8f 32       	cpi	r24, 0x2F	; 47
    6ed8:	21 f0       	breq	.+8      	; 0x6ee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    6eda:	8d 30       	cpi	r24, 0x0D	; 13
    6edc:	b9 f7       	brne	.-18     	; 0x6ecc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6ede:	18 86       	std	Y+8, r1	; 0x08
    6ee0:	ec cf       	rjmp	.-40     	; 0x6eba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    6ee2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    6ee4:	ce 01       	movw	r24, r28
    6ee6:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    6eea:	8a 32       	cpi	r24, 0x2A	; 42
    6eec:	29 f0       	breq	.+10     	; 0x6ef8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    6eee:	8f 32       	cpi	r24, 0x2F	; 47
    6ef0:	d1 f0       	breq	.+52     	; 0x6f26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    6ef2:	82 e0       	ldi	r24, 0x02	; 2
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
    6ef6:	09 c0       	rjmp	.+18     	; 0x6f0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6ef8:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    6efa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    6efc:	ce 01       	movw	r24, r28
    6efe:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    6f02:	81 11       	cpse	r24, r1
    6f04:	06 c0       	rjmp	.+12     	; 0x6f12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    6f06:	81 e0       	ldi	r24, 0x01	; 1
    6f08:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    6f0a:	df 91       	pop	r29
    6f0c:	cf 91       	pop	r28
    6f0e:	1f 91       	pop	r17
    6f10:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    6f12:	8f 32       	cpi	r24, 0x2F	; 47
    6f14:	11 f4       	brne	.+4      	; 0x6f1a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    6f16:	11 11       	cpse	r17, r1
    6f18:	e2 cf       	rjmp	.-60     	; 0x6ede <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    6f1a:	11 e0       	ldi	r17, 0x01	; 1
    6f1c:	8a 32       	cpi	r24, 0x2A	; 42
    6f1e:	09 f0       	breq	.+2      	; 0x6f22 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    6f20:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    6f22:	18 86       	std	Y+8, r1	; 0x08
    6f24:	eb cf       	rjmp	.-42     	; 0x6efc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    6f26:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    6f28:	ce 01       	movw	r24, r28
    6f2a:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    6f2e:	88 23       	and	r24, r24
    6f30:	51 f3       	breq	.-44     	; 0x6f06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    6f32:	8a 30       	cpi	r24, 0x0A	; 10
    6f34:	c1 f7       	brne	.-16     	; 0x6f26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    6f36:	c1 cf       	rjmp	.-126    	; 0x6eba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00006f38 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5515
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    6f38:	81 e0       	ldi	r24, 0x01	; 1
    6f3a:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <default_show_temp>
    6f3e:	94 13       	cpse	r25, r20
    6f40:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5519
    ret = 1;

  return ret;
}
    6f42:	08 95       	ret

00006f44 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    6f44:	00 97       	sbiw	r24, 0x00	; 0
    6f46:	31 f4       	brne	.+12     	; 0x6f54 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
    return use_tds + use_rtds;
    6f48:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <use_tds>
    6f4c:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <use_rtds>
    6f50:	89 0f       	add	r24, r25
    6f52:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5505

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    6f54:	01 97       	sbiw	r24, 0x01	; 1
    6f56:	09 f0       	breq	.+2      	; 0x6f5a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    6f58:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5506
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    6f5a:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5507
}
    6f5c:	08 95       	ret

00006f5e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5268
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    6f5e:	e3 e3       	ldi	r30, 0x33	; 51
    6f60:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5269
  uint8_t active = 0;
    6f62:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5271
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    6f64:	91 85       	ldd	r25, Z+9	; 0x09
    6f66:	91 30       	cpi	r25, 0x01	; 1
    6f68:	09 f4       	brne	.+2      	; 0x6f6c <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    6f6a:	8f 5f       	subi	r24, 0xFF	; 255
    6f6c:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5270

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    6f6e:	9a e0       	ldi	r25, 0x0A	; 10
    6f70:	e5 37       	cpi	r30, 0x75	; 117
    6f72:	f9 07       	cpc	r31, r25
    6f74:	b9 f7       	brne	.-18     	; 0x6f64 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5273
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    6f76:	08 95       	ret

00006f78 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5184
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    6f78:	8a e0       	ldi	r24, 0x0A	; 10
    6f7a:	08 95       	ret

00006f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5160
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    6f7c:	ef 92       	push	r14
    6f7e:	ff 92       	push	r15
    6f80:	0f 93       	push	r16
    6f82:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6f84:	80 17       	cp	r24, r16
    6f86:	91 07       	cpc	r25, r17
    6f88:	74 f4       	brge	.+28     	; 0x6fa6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5162
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6f8a:	84 0f       	add	r24, r20
    6f8c:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6f8e:	08 17       	cp	r16, r24
    6f90:	19 07       	cpc	r17, r25
    6f92:	4c f4       	brge	.+18     	; 0x6fa6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    6f94:	6e 15       	cp	r22, r14
    6f96:	7f 05       	cpc	r23, r15
    6f98:	34 f4       	brge	.+12     	; 0x6fa6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5162
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    6f9a:	62 0f       	add	r22, r18
    6f9c:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    6f9e:	81 e0       	ldi	r24, 0x01	; 1
    6fa0:	e6 16       	cp	r14, r22
    6fa2:	f7 06       	cpc	r15, r23
    6fa4:	0c f0       	brlt	.+2      	; 0x6fa8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5161
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    6fa6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5167
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    6fa8:	1f 91       	pop	r17
    6faa:	0f 91       	pop	r16
    6fac:	ff 90       	pop	r15
    6fae:	ef 90       	pop	r14
    6fb0:	08 95       	ret

00006fb2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5017
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    6fb2:	cf 93       	push	r28
    6fb4:	df 93       	push	r29
    6fb6:	fc 01       	movw	r30, r24
    6fb8:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5018
  if (max_element > 0)
    6fba:	22 23       	and	r18, r18
    6fbc:	09 f1       	breq	.+66     	; 0x7000 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5020
  {
    menu_slider_data_max = *stop;
    6fbe:	98 81       	ld	r25, Y
    6fc0:	90 93 0c 09 	sts	0x090C, r25	; 0x80090c <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
    menu_slider_data_min = *start;
    6fc4:	80 81       	ld	r24, Z
    6fc6:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
    menu_slider_data_max_element = max_element;
    6fca:	20 93 0a 09 	sts	0x090A, r18	; 0x80090a <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
    ///
    *start = menu_slider_data_current[args];
    6fce:	a4 2f       	mov	r26, r20
    6fd0:	b0 e0       	ldi	r27, 0x00	; 0
    6fd2:	ab 5f       	subi	r26, 0xFB	; 251
    6fd4:	b6 4f       	sbci	r27, 0xF6	; 246
    6fd6:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    6fd8:	62 2f       	mov	r22, r18
    6fda:	70 e0       	ldi	r23, 0x00	; 0
    6fdc:	49 2f       	mov	r20, r25
    6fde:	50 e0       	ldi	r21, 0x00	; 0
    6fe0:	db 01       	movw	r26, r22
    6fe2:	a3 0f       	add	r26, r19
    6fe4:	b1 1d       	adc	r27, r1
    6fe6:	4a 17       	cp	r20, r26
    6fe8:	5b 07       	cpc	r21, r27
    6fea:	6c f0       	brlt	.+26     	; 0x7006 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5024
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    6fec:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5027
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    6fee:	80 81       	ld	r24, Z
    6ff0:	98 17       	cp	r25, r24
    6ff2:	08 f4       	brcc	.+2      	; 0x6ff6 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5028
      *start = menu_slider_data_max;
    6ff4:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    6ff6:	29 17       	cp	r18, r25
    6ff8:	78 f4       	brcc	.+30     	; 0x7018 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    6ffa:	80 81       	ld	r24, Z
    6ffc:	28 0f       	add	r18, r24
    6ffe:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    7000:	df 91       	pop	r29
    7002:	cf 91       	pop	r28
    7004:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5025
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    7006:	48 1b       	sub	r20, r24
    7008:	51 09       	sbc	r21, r1
    700a:	64 17       	cp	r22, r20
    700c:	75 07       	cpc	r23, r21
    700e:	74 f7       	brge	.-36     	; 0x6fec <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5026
      *start = menu_slider_data_max - max_element;
    7010:	89 2f       	mov	r24, r25
    7012:	82 1b       	sub	r24, r18
    7014:	80 83       	st	Z, r24
    7016:	eb cf       	rjmp	.-42     	; 0x6fee <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5032
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    7018:	98 83       	st	Y, r25
    701a:	f2 cf       	rjmp	.-28     	; 0x7000 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

0000701c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5012
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    701c:	fc 01       	movw	r30, r24
    701e:	eb 5f       	subi	r30, 0xFB	; 251
    7020:	f6 4f       	sbci	r31, 0xF6	; 246
    7022:	90 81       	ld	r25, Z
    7024:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <menu_slider_data_min>
    7028:	89 17       	cp	r24, r25
    702a:	10 f4       	brcc	.+4      	; 0x7030 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5013
    menu_slider_data_current[args1]--;
    702c:	91 50       	subi	r25, 0x01	; 1
    702e:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5014
}
    7030:	08 95       	ret

00007032 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5006
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    7032:	fc 01       	movw	r30, r24
    7034:	eb 5f       	subi	r30, 0xFB	; 251
    7036:	f6 4f       	sbci	r31, 0xF6	; 246
    7038:	90 81       	ld	r25, Z
    703a:	20 91 0c 09 	lds	r18, 0x090C	; 0x80090c <menu_slider_data_max>
    703e:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <menu_slider_data_max_element>
    7042:	28 1b       	sub	r18, r24
    7044:	33 0b       	sbc	r19, r19
    7046:	92 17       	cp	r25, r18
    7048:	13 06       	cpc	r1, r19
    704a:	14 f4       	brge	.+4      	; 0x7050 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5007
    menu_slider_data_current[args1]++;
    704c:	9f 5f       	subi	r25, 0xFF	; 255
    704e:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5008
}
    7050:	08 95       	ret

00007052 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3892
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    7052:	83 30       	cpi	r24, 0x03	; 3
    7054:	41 f4       	brne	.+16     	; 0x7066 <a2d_complete(unsigned char, unsigned int)+0x14>
    7056:	70 93 7b 0a 	sts	0x0A7B, r23	; 0x800a7b <proud+0x1>
    705a:	60 93 7a 0a 	sts	0x0A7A, r22	; 0x800a7a <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3897
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    705e:	81 e0       	ldi	r24, 0x01	; 1
    7060:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3898
}
    7064:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3893
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    7066:	86 30       	cpi	r24, 0x06	; 6
    7068:	29 f4       	brne	.+10     	; 0x7074 <a2d_complete(unsigned char, unsigned int)+0x22>
    706a:	70 93 81 0a 	sts	0x0A81, r23	; 0x800a81 <tritri+0x1>
    706e:	60 93 80 0a 	sts	0x0A80, r22	; 0x800a80 <tritri>
    7072:	f5 cf       	rjmp	.-22     	; 0x705e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3894
  if (channel == A_PETV) petnula = data;
    7074:	85 30       	cpi	r24, 0x05	; 5
    7076:	29 f4       	brne	.+10     	; 0x7082 <a2d_complete(unsigned char, unsigned int)+0x30>
    7078:	70 93 7f 0a 	sts	0x0A7F, r23	; 0x800a7f <petnula+0x1>
    707c:	60 93 7e 0a 	sts	0x0A7E, r22	; 0x800a7e <petnula>
    7080:	ee cf       	rjmp	.-36     	; 0x705e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3895
  if (channel == A_DVANACTV) dvanact = data;
    7082:	84 30       	cpi	r24, 0x04	; 4
    7084:	29 f4       	brne	.+10     	; 0x7090 <a2d_complete(unsigned char, unsigned int)+0x3e>
    7086:	70 93 7d 0a 	sts	0x0A7D, r23	; 0x800a7d <dvanact+0x1>
    708a:	60 93 7c 0a 	sts	0x0A7C, r22	; 0x800a7c <dvanact>
    708e:	e7 cf       	rjmp	.-50     	; 0x705e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3896
  if (channel == A_LIGHT) light_curr = data;
    7090:	87 30       	cpi	r24, 0x07	; 7
    7092:	29 f7       	brne	.-54     	; 0x705e <a2d_complete(unsigned char, unsigned int)+0xc>
    7094:	70 93 45 0b 	sts	0x0B45, r23	; 0x800b45 <light_curr+0x1>
    7098:	60 93 44 0b 	sts	0x0B44, r22	; 0x800b44 <light_curr>
    709c:	e0 cf       	rjmp	.-64     	; 0x705e <a2d_complete(unsigned char, unsigned int)+0xc>

0000709e <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2557


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    709e:	08 95       	ret

000070a0 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  return 0;
}

uint8_t menu_redraw_update_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw10s == 1)
    70a0:	80 91 4e 0b 	lds	r24, 0x0B4E	; 0x800b4e <menu_redraw10s>
    70a4:	81 30       	cpi	r24, 0x01	; 1
    70a6:	19 f4       	brne	.+6      	; 0x70ae <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
  {
    menu_redraw10s = 0;
    70a8:	10 92 4e 0b 	sts	0x0B4E, r1	; 0x800b4e <menu_redraw10s>
    70ac:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
    return 1;
  }
  return 0;
    70ae:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2551
}
    70b0:	08 95       	ret

000070b2 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (change_term_mode == 1)
    70b2:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <change_term_mode>
    70b6:	81 30       	cpi	r24, 0x01	; 1
    70b8:	19 f4       	brne	.+6      	; 0x70c0 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2537
  {
    change_term_mode = 0;
    70ba:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <change_term_mode>
    70be:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
    return 1;
  }
  return 0;
    70c0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
}
    70c2:	08 95       	ret

000070c4 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
}


uint8_t menu_redraw_time05s(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw05s == 1)
    70c4:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <menu_redraw05s>
    70c8:	81 30       	cpi	r24, 0x01	; 1
    70ca:	19 f4       	brne	.+6      	; 0x70d2 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
  {
    menu_redraw05s = 0;
    70cc:	10 92 49 0b 	sts	0x0B49, r1	; 0x800b49 <menu_redraw05s>
    70d0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
    return 1;
  }
  return 0;
    70d2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
}
    70d4:	08 95       	ret

000070d6 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_set_string_keyboard_type = args1;
    70d6:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
}
    70da:	08 95       	ret

000070dc <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    70dc:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <__data_end>
    70e0:	83 30       	cpi	r24, 0x03	; 3
    70e2:	08 f0       	brcs	.+2      	; 0x70e6 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    70e4:	08 95       	ret
    70e6:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    70e8:	08 95       	ret

000070ea <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    70ea:	0f 93       	push	r16
    70ec:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    70ee:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <__data_end>
    70f2:	91 11       	cpse	r25, r1
    70f4:	0c c0       	rjmp	.+24     	; 0x710e <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    70f6:	e8 2f       	mov	r30, r24
    70f8:	f0 e0       	ldi	r31, 0x00	; 0
    70fa:	ec 5f       	subi	r30, 0xFC	; 252
    70fc:	f8 4a       	sbci	r31, 0xA8	; 168
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    70fe:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2453
  line1[0] = znak;
    7100:	d9 01       	movw	r26, r18
    7102:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2454
  line2[0] = 0;
    7104:	f8 01       	movw	r30, r16
    7106:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
}
    7108:	1f 91       	pop	r17
    710a:	0f 91       	pop	r16
    710c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2449
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    710e:	91 30       	cpi	r25, 0x01	; 1
    7110:	29 f4       	brne	.+10     	; 0x711c <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    7112:	e8 2f       	mov	r30, r24
    7114:	f0 e0       	ldi	r31, 0x00	; 0
    7116:	e6 51       	subi	r30, 0x16	; 22
    7118:	f9 4a       	sbci	r31, 0xA9	; 169
    711a:	f1 cf       	rjmp	.-30     	; 0x70fe <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    711c:	92 30       	cpi	r25, 0x02	; 2
    711e:	81 f7       	brne	.-32     	; 0x7100 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2452
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    7120:	e8 2f       	mov	r30, r24
    7122:	f0 e0       	ldi	r31, 0x00	; 0
    7124:	e0 53       	subi	r30, 0x30	; 48
    7126:	f9 4a       	sbci	r31, 0xA9	; 169
    7128:	ea cf       	rjmp	.-44     	; 0x70fe <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000712a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    712a:	0f 93       	push	r16
    712c:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    712e:	8a 30       	cpi	r24, 0x0A	; 10
    7130:	41 f0       	breq	.+16     	; 0x7142 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    7132:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
  if (args1 == 10) line1[0] = '.';
    7134:	f9 01       	movw	r30, r18
    7136:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  line2[0] = 0;
    7138:	f8 01       	movw	r30, r16
    713a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
}
    713c:	1f 91       	pop	r17
    713e:	0f 91       	pop	r16
    7140:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    7142:	8e e2       	ldi	r24, 0x2E	; 46
    7144:	f7 cf       	rjmp	.-18     	; 0x7134 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>

00007146 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 11;
}
    7146:	8b e0       	ldi	r24, 0x0B	; 11
    7148:	08 95       	ret

0000714a <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1564
  return 0;
}
uint8_t display_enable_show(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    714a:	81 e0       	ldi	r24, 0x01	; 1
    714c:	08 95       	ret

0000714e <get_function_budik_enabled(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_budik_enabledjjh():
    714e:	81 e0       	ldi	r24, 0x01	; 1
    7150:	08 95       	ret

00007152 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    7152:	cf 92       	push	r12
    7154:	df 92       	push	r13
    7156:	ef 92       	push	r14
    7158:	ff 92       	push	r15
    715a:	cf 93       	push	r28
    715c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    715e:	25 e1       	ldi	r18, 0x15	; 21
    7160:	28 9f       	mul	r18, r24
    7162:	e0 01       	movw	r28, r0
    7164:	29 9f       	mul	r18, r25
    7166:	d0 0d       	add	r29, r0
    7168:	11 24       	eor	r1, r1
    716a:	cf 54       	subi	r28, 0x4F	; 79
    716c:	d7 4f       	sbci	r29, 0xF7	; 247
    716e:	2e 85       	ldd	r18, Y+14	; 0x0e
    7170:	3f 85       	ldd	r19, Y+15	; 0x0f
    7172:	48 89       	ldd	r20, Y+16	; 0x10
    7174:	59 89       	ldd	r21, Y+17	; 0x11
    7176:	68 81       	ld	r22, Y
    7178:	79 81       	ldd	r23, Y+1	; 0x01
    717a:	8a 81       	ldd	r24, Y+2	; 0x02
    717c:	9b 81       	ldd	r25, Y+3	; 0x03
    717e:	0e 94 3f ce 	call	0x19c7e	; 0x19c7e <__addsf3>
    7182:	6b 01       	movw	r12, r22
    7184:	7c 01       	movw	r14, r24
    7186:	2c 81       	ldd	r18, Y+4	; 0x04
    7188:	3d 81       	ldd	r19, Y+5	; 0x05
    718a:	4e 81       	ldd	r20, Y+6	; 0x06
    718c:	5f 81       	ldd	r21, Y+7	; 0x07
    718e:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
    7192:	18 16       	cp	r1, r24
    7194:	cc f0       	brlt	.+50     	; 0x71c8 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    7196:	c8 82       	st	Y, r12
    7198:	d9 82       	std	Y+1, r13	; 0x01
    719a:	ea 82       	std	Y+2, r14	; 0x02
    719c:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    719e:	8c 85       	ldd	r24, Y+12	; 0x0c
    71a0:	81 30       	cpi	r24, 0x01	; 1
    71a2:	91 f4       	brne	.+36     	; 0x71c8 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x76>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    71a4:	c7 01       	movw	r24, r14
    71a6:	b6 01       	movw	r22, r12
    71a8:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
    71ac:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    71ae:	8a 89       	ldd	r24, Y+18	; 0x12
    71b0:	eb 89       	ldd	r30, Y+19	; 0x13
    71b2:	fc 89       	ldd	r31, Y+20	; 0x14
    71b4:	b7 01       	movw	r22, r14
    71b6:	a6 01       	movw	r20, r12
    71b8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
    }
  }
}
    71ba:	df 91       	pop	r29
    71bc:	cf 91       	pop	r28
    71be:	ff 90       	pop	r15
    71c0:	ef 90       	pop	r14
    71c2:	df 90       	pop	r13
    71c4:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    71c6:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
    }
  }
}
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	ff 90       	pop	r15
    71ce:	ef 90       	pop	r14
    71d0:	df 90       	pop	r13
    71d2:	cf 90       	pop	r12
    71d4:	08 95       	ret

000071d6 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    71d6:	cf 92       	push	r12
    71d8:	df 92       	push	r13
    71da:	ef 92       	push	r14
    71dc:	ff 92       	push	r15
    71de:	cf 93       	push	r28
    71e0:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    71e2:	25 e1       	ldi	r18, 0x15	; 21
    71e4:	28 9f       	mul	r18, r24
    71e6:	e0 01       	movw	r28, r0
    71e8:	29 9f       	mul	r18, r25
    71ea:	d0 0d       	add	r29, r0
    71ec:	11 24       	eor	r1, r1
    71ee:	cf 54       	subi	r28, 0x4F	; 79
    71f0:	d7 4f       	sbci	r29, 0xF7	; 247
    71f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    71f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    71f6:	48 89       	ldd	r20, Y+16	; 0x10
    71f8:	59 89       	ldd	r21, Y+17	; 0x11
    71fa:	68 81       	ld	r22, Y
    71fc:	79 81       	ldd	r23, Y+1	; 0x01
    71fe:	8a 81       	ldd	r24, Y+2	; 0x02
    7200:	9b 81       	ldd	r25, Y+3	; 0x03
    7202:	0e 94 3e ce 	call	0x19c7c	; 0x19c7c <__subsf3>
    7206:	6b 01       	movw	r12, r22
    7208:	7c 01       	movw	r14, r24
    720a:	28 85       	ldd	r18, Y+8	; 0x08
    720c:	39 85       	ldd	r19, Y+9	; 0x09
    720e:	4a 85       	ldd	r20, Y+10	; 0x0a
    7210:	5b 85       	ldd	r21, Y+11	; 0x0b
    7212:	0e 94 53 cf 	call	0x19ea6	; 0x19ea6 <__gesf2>
    7216:	87 fd       	sbrc	r24, 7
    7218:	19 c0       	rjmp	.+50     	; 0x724c <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    721a:	c8 82       	st	Y, r12
    721c:	d9 82       	std	Y+1, r13	; 0x01
    721e:	ea 82       	std	Y+2, r14	; 0x02
    7220:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    7222:	8c 85       	ldd	r24, Y+12	; 0x0c
    7224:	81 30       	cpi	r24, 0x01	; 1
    7226:	91 f4       	brne	.+36     	; 0x724c <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x76>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
    7228:	c7 01       	movw	r24, r14
    722a:	b6 01       	movw	r22, r12
    722c:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
    7230:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    7232:	8a 89       	ldd	r24, Y+18	; 0x12
    7234:	eb 89       	ldd	r30, Y+19	; 0x13
    7236:	fc 89       	ldd	r31, Y+20	; 0x14
    7238:	b7 01       	movw	r22, r14
    723a:	a6 01       	movw	r20, r12
    723c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
    }
  }
}
    723e:	df 91       	pop	r29
    7240:	cf 91       	pop	r28
    7242:	ff 90       	pop	r15
    7244:	ef 90       	pop	r14
    7246:	df 90       	pop	r13
    7248:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
  {
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    724a:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
    }
  }
}
    724c:	df 91       	pop	r29
    724e:	cf 91       	pop	r28
    7250:	ff 90       	pop	r15
    7252:	ef 90       	pop	r14
    7254:	df 90       	pop	r13
    7256:	cf 90       	pop	r12
    7258:	08 95       	ret

0000725a <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2232
}



uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    725a:	4f 92       	push	r4
    725c:	5f 92       	push	r5
    725e:	6f 92       	push	r6
    7260:	7f 92       	push	r7
    7262:	8f 92       	push	r8
    7264:	9f 92       	push	r9
    7266:	af 92       	push	r10
    7268:	bf 92       	push	r11
    726a:	cf 92       	push	r12
    726c:	df 92       	push	r13
    726e:	ef 92       	push	r14
    7270:	ff 92       	push	r15
    7272:	cf 93       	push	r28
    7274:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2233
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
    7276:	d0 91 82 0a 	lds	r29, 0x0A82	; 0x800a82 <default_ring>
thermostat_get_pid_p():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    727a:	2d 2f       	mov	r18, r29
    727c:	30 e0       	ldi	r19, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    727e:	e1 eb       	ldi	r30, 0xB1	; 177
    7280:	f8 e0       	ldi	r31, 0x08	; 8
thermostat_get_pid_p():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:65
    7282:	c9 01       	movw	r24, r18
    7284:	88 0f       	add	r24, r24
    7286:	99 1f       	adc	r25, r25
    7288:	88 0f       	add	r24, r24
    728a:	99 1f       	adc	r25, r25
    728c:	dc 01       	movw	r26, r24
    728e:	a5 52       	subi	r26, 0x25	; 37
    7290:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    7292:	4d 91       	ld	r20, X+
    7294:	5d 91       	ld	r21, X+
    7296:	6d 91       	ld	r22, X+
    7298:	7c 91       	ld	r23, X
    729a:	40 83       	st	Z, r20
    729c:	51 83       	std	Z+1, r21	; 0x01
    729e:	62 83       	std	Z+2, r22	; 0x02
    72a0:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  menu_dialog_variable[idx].variable_min = min;
    72a2:	81 2c       	mov	r8, r1
    72a4:	91 2c       	mov	r9, r1
    72a6:	50 e2       	ldi	r21, 0x20	; 32
    72a8:	a5 2e       	mov	r10, r21
    72aa:	51 ec       	ldi	r21, 0xC1	; 193
    72ac:	b5 2e       	mov	r11, r21
    72ae:	80 86       	std	Z+8, r8	; 0x08
    72b0:	91 86       	std	Z+9, r9	; 0x09
    72b2:	a2 86       	std	Z+10, r10	; 0x0a
    72b4:	b3 86       	std	Z+11, r11	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    72b6:	c1 2c       	mov	r12, r1
    72b8:	d1 2c       	mov	r13, r1
    72ba:	60 e2       	ldi	r22, 0x20	; 32
    72bc:	e6 2e       	mov	r14, r22
    72be:	61 e4       	ldi	r22, 0x41	; 65
    72c0:	f6 2e       	mov	r15, r22
    72c2:	c4 82       	std	Z+4, r12	; 0x04
    72c4:	d5 82       	std	Z+5, r13	; 0x05
    72c6:	e6 82       	std	Z+6, r14	; 0x06
    72c8:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    72ca:	4d ec       	ldi	r20, 0xCD	; 205
    72cc:	5c ec       	ldi	r21, 0xCC	; 204
    72ce:	6c ec       	ldi	r22, 0xCC	; 204
    72d0:	7d e3       	ldi	r23, 0x3D	; 61
    72d2:	46 87       	std	Z+14, r20	; 0x0e
    72d4:	57 87       	std	Z+15, r21	; 0x0f
    72d6:	60 8b       	std	Z+16, r22	; 0x10
    72d8:	71 8b       	std	Z+17, r23	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    72da:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    72dc:	d2 8b       	std	Z+18, r29	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    72de:	c1 e0       	ldi	r28, 0x01	; 1
    72e0:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    72e2:	a1 ea       	ldi	r26, 0xA1	; 161
    72e4:	b6 e6       	ldi	r27, 0x66	; 102
    72e6:	b4 8b       	std	Z+20, r27	; 0x14
    72e8:	a3 8b       	std	Z+19, r26	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    72ea:	dc 01       	movw	r26, r24
    72ec:	a1 51       	subi	r26, 0x11	; 17
    72ee:	b6 4f       	sbci	r27, 0xF6	; 246
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    72f0:	4d 90       	ld	r4, X+
    72f2:	5d 90       	ld	r5, X+
    72f4:	6d 90       	ld	r6, X+
    72f6:	7c 90       	ld	r7, X
    72f8:	45 8a       	std	Z+21, r4	; 0x15
    72fa:	56 8a       	std	Z+22, r5	; 0x16
    72fc:	67 8a       	std	Z+23, r6	; 0x17
    72fe:	70 8e       	std	Z+24, r7	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  menu_dialog_variable[idx].variable_min = min;
    7300:	85 8e       	std	Z+29, r8	; 0x1d
    7302:	96 8e       	std	Z+30, r9	; 0x1e
    7304:	a7 8e       	std	Z+31, r10	; 0x1f
    7306:	b0 a2       	std	Z+32, r11	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    7308:	c1 8e       	std	Z+25, r12	; 0x19
    730a:	d2 8e       	std	Z+26, r13	; 0x1a
    730c:	e3 8e       	std	Z+27, r14	; 0x1b
    730e:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    7310:	43 a3       	std	Z+35, r20	; 0x23
    7312:	54 a3       	std	Z+36, r21	; 0x24
    7314:	65 a3       	std	Z+37, r22	; 0x25
    7316:	76 a3       	std	Z+38, r23	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    7318:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    731a:	d7 a3       	std	Z+39, r29	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    731c:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    731e:	aa e8       	ldi	r26, 0x8A	; 138
    7320:	b6 e6       	ldi	r27, 0x66	; 102
    7322:	b1 a7       	std	Z+41, r27	; 0x29
    7324:	a0 a7       	std	Z+40, r26	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    7326:	8d 5f       	subi	r24, 0xFD	; 253
    7328:	95 4f       	sbci	r25, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    732a:	dc 01       	movw	r26, r24
    732c:	4d 90       	ld	r4, X+
    732e:	5d 90       	ld	r5, X+
    7330:	6d 90       	ld	r6, X+
    7332:	7c 90       	ld	r7, X
    7334:	42 a6       	std	Z+42, r4	; 0x2a
    7336:	53 a6       	std	Z+43, r5	; 0x2b
    7338:	64 a6       	std	Z+44, r6	; 0x2c
    733a:	75 a6       	std	Z+45, r7	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  menu_dialog_variable[idx].variable_min = min;
    733c:	82 aa       	std	Z+50, r8	; 0x32
    733e:	93 aa       	std	Z+51, r9	; 0x33
    7340:	a4 aa       	std	Z+52, r10	; 0x34
    7342:	b5 aa       	std	Z+53, r11	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    7344:	c6 a6       	std	Z+46, r12	; 0x2e
    7346:	d7 a6       	std	Z+47, r13	; 0x2f
    7348:	e0 aa       	std	Z+48, r14	; 0x30
    734a:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    734c:	40 af       	std	Z+56, r20	; 0x38
    734e:	51 af       	std	Z+57, r21	; 0x39
    7350:	62 af       	std	Z+58, r22	; 0x3a
    7352:	73 af       	std	Z+59, r23	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    7354:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    7356:	d4 af       	std	Z+60, r29	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    7358:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    735a:	83 e7       	ldi	r24, 0x73	; 115
    735c:	96 e6       	ldi	r25, 0x66	; 102
    735e:	96 af       	std	Z+62, r25	; 0x3e
    7360:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    7362:	29 5e       	subi	r18, 0xE9	; 233
    7364:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    7366:	f9 01       	movw	r30, r18
    7368:	60 81       	ld	r22, Z
    736a:	70 e0       	ldi	r23, 0x00	; 0
    736c:	90 e0       	ldi	r25, 0x00	; 0
    736e:	80 e0       	ldi	r24, 0x00	; 0
    7370:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
    7374:	60 93 f0 08 	sts	0x08F0, r22	; 0x8008f0 <menu_dialog_variable+0x3f>
    7378:	70 93 f1 08 	sts	0x08F1, r23	; 0x8008f1 <menu_dialog_variable+0x40>
    737c:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <menu_dialog_variable+0x41>
    7380:	90 93 f3 08 	sts	0x08F3, r25	; 0x8008f3 <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    7384:	80 e0       	ldi	r24, 0x00	; 0
    7386:	90 e0       	ldi	r25, 0x00	; 0
    7388:	a0 e8       	ldi	r26, 0x80	; 128
    738a:	bf e3       	ldi	r27, 0x3F	; 63
    738c:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <menu_dialog_variable+0x47>
    7390:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <menu_dialog_variable+0x48>
    7394:	a0 93 fa 08 	sts	0x08FA, r26	; 0x8008fa <menu_dialog_variable+0x49>
    7398:	b0 93 fb 08 	sts	0x08FB, r27	; 0x8008fb <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    739c:	80 e0       	ldi	r24, 0x00	; 0
    739e:	90 e0       	ldi	r25, 0x00	; 0
    73a0:	ae e7       	ldi	r26, 0x7E	; 126
    73a2:	b3 e4       	ldi	r27, 0x43	; 67
    73a4:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <menu_dialog_variable+0x43>
    73a8:	90 93 f5 08 	sts	0x08F5, r25	; 0x8008f5 <menu_dialog_variable+0x44>
    73ac:	a0 93 f6 08 	sts	0x08F6, r26	; 0x8008f6 <menu_dialog_variable+0x45>
    73b0:	b0 93 f7 08 	sts	0x08F7, r27	; 0x8008f7 <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    73b4:	80 e0       	ldi	r24, 0x00	; 0
    73b6:	90 e0       	ldi	r25, 0x00	; 0
    73b8:	a0 e0       	ldi	r26, 0x00	; 0
    73ba:	b0 e4       	ldi	r27, 0x40	; 64
    73bc:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <menu_dialog_variable+0x4d>
    73c0:	90 93 ff 08 	sts	0x08FF, r25	; 0x8008ff <menu_dialog_variable+0x4e>
    73c4:	a0 93 00 09 	sts	0x0900, r26	; 0x800900 <menu_dialog_variable+0x4f>
    73c8:	b0 93 01 09 	sts	0x0901, r27	; 0x800901 <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    73cc:	c0 93 fd 08 	sts	0x08FD, r28	; 0x8008fd <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    73d0:	d0 93 02 09 	sts	0x0902, r29	; 0x800902 <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    73d4:	c0 93 fc 08 	sts	0x08FC, r28	; 0x8008fc <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    73d8:	84 e6       	ldi	r24, 0x64	; 100
    73da:	96 e6       	ldi	r25, 0x66	; 102
    73dc:	90 93 04 09 	sts	0x0904, r25	; 0x800904 <menu_dialog_variable+0x53>
    73e0:	80 93 03 09 	sts	0x0903, r24	; 0x800903 <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
{
  display_function_set_variable(thermostat_get_pid_p(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(default_ring), -10.0, 10.0, 0.1, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(default_ring),  1, 254, 2, default_ring, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    73e4:	df 91       	pop	r29
    73e6:	cf 91       	pop	r28
    73e8:	ff 90       	pop	r15
    73ea:	ef 90       	pop	r14
    73ec:	df 90       	pop	r13
    73ee:	cf 90       	pop	r12
    73f0:	bf 90       	pop	r11
    73f2:	af 90       	pop	r10
    73f4:	9f 90       	pop	r9
    73f6:	8f 90       	pop	r8
    73f8:	7f 90       	pop	r7
    73fa:	6f 90       	pop	r6
    73fc:	5f 90       	pop	r5
    73fe:	4f 90       	pop	r4
    7400:	08 95       	ret

00007402 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    7402:	ff 92       	push	r15
    7404:	0f 93       	push	r16
    7406:	1f 93       	push	r17
    7408:	cf 93       	push	r28
    740a:	df 93       	push	r29
    740c:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    740e:	20 91 f5 0b 	lds	r18, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
    7412:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7414:	80 e0       	ldi	r24, 0x00	; 0
    7416:	64 ef       	ldi	r22, 0xF4	; 244
    7418:	76 e0       	ldi	r23, 0x06	; 6
    741a:	ca ed       	ldi	r28, 0xDA	; 218
    741c:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    741e:	89 01       	movw	r16, r18
    7420:	05 51       	subi	r16, 0x15	; 21
    7422:	14 4f       	sbci	r17, 0xF4	; 244
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7424:	fb 01       	movw	r30, r22
    7426:	94 91       	lpm	r25, Z
    7428:	89 17       	cp	r24, r25
    742a:	e8 f4       	brcc	.+58     	; 0x7466 <MenuHistoryGetMenu(unsigned char*)+0x64>
    742c:	8c 9f       	mul	r24, r28
    742e:	a0 01       	movw	r20, r0
    7430:	8d 9f       	mul	r24, r29
    7432:	50 0d       	add	r21, r0
    7434:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7436:	fa 01       	movw	r30, r20
    7438:	e3 54       	subi	r30, 0x43	; 67
    743a:	f6 4f       	sbci	r31, 0xF6	; 246
    743c:	f4 90       	lpm	r15, Z
    743e:	f8 01       	movw	r30, r16
    7440:	90 81       	ld	r25, Z
    7442:	9f 11       	cpse	r25, r15
    7444:	0e c0       	rjmp	.+28     	; 0x7462 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    7446:	48 50       	subi	r20, 0x08	; 8
    7448:	59 4f       	sbci	r21, 0xF9	; 249
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    744a:	2f 51       	subi	r18, 0x1F	; 31
    744c:	34 4f       	sbci	r19, 0xF4	; 244
    744e:	f9 01       	movw	r30, r18
    7450:	20 81       	ld	r18, Z
    7452:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
      return menus;
    }
  }
}
    7454:	ca 01       	movw	r24, r20
    7456:	df 91       	pop	r29
    7458:	cf 91       	pop	r28
    745a:	1f 91       	pop	r17
    745c:	0f 91       	pop	r16
    745e:	ff 90       	pop	r15
    7460:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2148
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    7462:	8f 5f       	subi	r24, 0xFF	; 255
    7464:	df cf       	rjmp	.-66     	; 0x7424 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    7466:	80 e0       	ldi	r24, 0x00	; 0
    7468:	65 ef       	ldi	r22, 0xF5	; 245
    746a:	76 e0       	ldi	r23, 0x06	; 6
    746c:	ca ed       	ldi	r28, 0xDA	; 218
    746e:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7470:	89 01       	movw	r16, r18
    7472:	05 51       	subi	r16, 0x15	; 21
    7474:	14 4f       	sbci	r17, 0xF4	; 244
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    7476:	fb 01       	movw	r30, r22
    7478:	94 91       	lpm	r25, Z
    747a:	89 17       	cp	r24, r25
    747c:	90 f4       	brcc	.+36     	; 0x74a2 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    747e:	8c 9f       	mul	r24, r28
    7480:	a0 01       	movw	r20, r0
    7482:	8d 9f       	mul	r24, r29
    7484:	50 0d       	add	r21, r0
    7486:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7488:	fa 01       	movw	r30, r20
    748a:	ef 5b       	subi	r30, 0xBF	; 191
    748c:	f9 4d       	sbci	r31, 0xD9	; 217
    748e:	f4 90       	lpm	r15, Z
    7490:	f8 01       	movw	r30, r16
    7492:	90 81       	ld	r25, Z
    7494:	9f 11       	cpse	r25, r15
    7496:	03 c0       	rjmp	.+6      	; 0x749e <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2159
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    7498:	44 58       	subi	r20, 0x84	; 132
    749a:	5c 4d       	sbci	r21, 0xDC	; 220
    749c:	d6 cf       	rjmp	.-84     	; 0x744a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    749e:	8f 5f       	subi	r24, 0xFF	; 255
    74a0:	ea cf       	rjmp	.-44     	; 0x7476 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    74a2:	80 e0       	ldi	r24, 0x00	; 0
    74a4:	66 ef       	ldi	r22, 0xF6	; 246
    74a6:	76 e0       	ldi	r23, 0x06	; 6
    74a8:	ca ed       	ldi	r28, 0xDA	; 218
    74aa:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    74ac:	89 01       	movw	r16, r18
    74ae:	05 51       	subi	r16, 0x15	; 21
    74b0:	14 4f       	sbci	r17, 0xF4	; 244
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    74b2:	fb 01       	movw	r30, r22
    74b4:	94 91       	lpm	r25, Z
    74b6:	89 17       	cp	r24, r25
    74b8:	90 f4       	brcc	.+36     	; 0x74de <MenuHistoryGetMenu(unsigned char*)+0xdc>
    74ba:	8c 9f       	mul	r24, r28
    74bc:	a0 01       	movw	r20, r0
    74be:	8d 9f       	mul	r24, r29
    74c0:	50 0d       	add	r21, r0
    74c2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    74c4:	fa 01       	movw	r30, r20
    74c6:	e3 5a       	subi	r30, 0xA3	; 163
    74c8:	f8 4c       	sbci	r31, 0xC8	; 200
    74ca:	f4 90       	lpm	r15, Z
    74cc:	f8 01       	movw	r30, r16
    74ce:	90 81       	ld	r25, Z
    74d0:	9f 11       	cpse	r25, r15
    74d2:	03 c0       	rjmp	.+6      	; 0x74da <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    74d4:	48 56       	subi	r20, 0x68	; 104
    74d6:	5b 4c       	sbci	r21, 0xCB	; 203
    74d8:	b8 cf       	rjmp	.-144    	; 0x744a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    74da:	8f 5f       	subi	r24, 0xFF	; 255
    74dc:	ea cf       	rjmp	.-44     	; 0x74b2 <MenuHistoryGetMenu(unsigned char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	67 ef       	ldi	r22, 0xF7	; 247
    74e2:	76 e0       	ldi	r23, 0x06	; 6
    74e4:	ca ed       	ldi	r28, 0xDA	; 218
    74e6:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    74e8:	89 01       	movw	r16, r18
    74ea:	05 51       	subi	r16, 0x15	; 21
    74ec:	14 4f       	sbci	r17, 0xF4	; 244
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    74ee:	fb 01       	movw	r30, r22
    74f0:	84 91       	lpm	r24, Z
    74f2:	98 17       	cp	r25, r24
    74f4:	08 f0       	brcs	.+2      	; 0x74f8 <MenuHistoryGetMenu(unsigned char*)+0xf6>
    74f6:	ae cf       	rjmp	.-164    	; 0x7454 <MenuHistoryGetMenu(unsigned char*)+0x52>
    74f8:	9c 9f       	mul	r25, r28
    74fa:	a0 01       	movw	r20, r0
    74fc:	9d 9f       	mul	r25, r29
    74fe:	50 0d       	add	r21, r0
    7500:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    7502:	fa 01       	movw	r30, r20
    7504:	e7 58       	subi	r30, 0x87	; 135
    7506:	f7 4b       	sbci	r31, 0xB7	; 183
    7508:	f4 90       	lpm	r15, Z
    750a:	f8 01       	movw	r30, r16
    750c:	80 81       	ld	r24, Z
    750e:	8f 11       	cpse	r24, r15
    7510:	03 c0       	rjmp	.+6      	; 0x7518 <MenuHistoryGetMenu(unsigned char*)+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2179
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    7512:	4c 54       	subi	r20, 0x4C	; 76
    7514:	5a 4b       	sbci	r21, 0xBA	; 186
    7516:	99 cf       	rjmp	.-206    	; 0x744a <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2177
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
    7518:	9f 5f       	subi	r25, 0xFF	; 255
    751a:	e9 cf       	rjmp	.-46     	; 0x74ee <MenuHistoryGetMenu(unsigned char*)+0xec>

0000751c <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1576




bool enable_redraw(uint8_t mask, uint8_t data)
{
    751c:	30 e0       	ldi	r19, 0x00	; 0
    751e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1580
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    7520:	e1 e0       	ldi	r30, 0x01	; 1
    7522:	f0 e0       	ldi	r31, 0x00	; 0
    7524:	af 01       	movw	r20, r30
    7526:	02 2e       	mov	r0, r18
    7528:	01 c0       	rjmp	.+2      	; 0x752c <enable_redraw(unsigned char, unsigned char)+0x10>
    752a:	44 0f       	add	r20, r20
    752c:	0a 94       	dec	r0
    752e:	ea f7       	brpl	.-6      	; 0x752a <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1581
    if ( (mask & v) != 0 )
    7530:	98 2f       	mov	r25, r24
    7532:	94 23       	and	r25, r20
    7534:	11 f0       	breq	.+4      	; 0x753a <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1582
      if ( (data & v) != 0)
    7536:	46 23       	and	r20, r22
    7538:	39 f4       	brne	.+14     	; 0x7548 <enable_redraw(unsigned char, unsigned char)+0x2c>
    753a:	2f 5f       	subi	r18, 0xFF	; 255
    753c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1578


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    753e:	28 30       	cpi	r18, 0x08	; 8
    7540:	31 05       	cpc	r19, r1
    7542:	81 f7       	brne	.-32     	; 0x7524 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1577



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    7544:	80 e0       	ldi	r24, 0x00	; 0
    7546:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    7548:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
        break;
      }
  }
  return ret;
}
    754a:	08 95       	ret

0000754c <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1560
void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
void nullfceargs(uint16_t args1, uint16_t args2, uint8_t args3) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 0;
}
    754c:	80 e0       	ldi	r24, 0x00	; 0
    754e:	08 95       	ret

00007550 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1555





void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
    7550:	08 95       	ret

00007552 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    7552:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    7554:	86 81       	ldd	r24, Z+6	; 0x06
    7556:	97 81       	ldd	r25, Z+7	; 0x07
    7558:	68 0f       	add	r22, r24
    755a:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    755c:	24 81       	ldd	r18, Z+4	; 0x04
    755e:	35 81       	ldd	r19, Z+5	; 0x05
    7560:	26 17       	cp	r18, r22
    7562:	37 07       	cpc	r19, r23
    7564:	38 f0       	brcs	.+14     	; 0x7574 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    7566:	22 81       	ldd	r18, Z+2	; 0x02
    7568:	33 81       	ldd	r19, Z+3	; 0x03
    756a:	82 0f       	add	r24, r18
    756c:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    756e:	77 83       	std	Z+7, r23	; 0x07
    7570:	66 83       	std	Z+6, r22	; 0x06
    7572:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    7578:	08 95       	ret

0000757a <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
    757a:	cf 93       	push	r28
    757c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
    757e:	fc 01       	movw	r30, r24
    7580:	24 85       	ldd	r18, Z+12	; 0x0c
    7582:	28 30       	cpi	r18, 0x08	; 8
    7584:	d9 f0       	breq	.+54     	; 0x75bc <EthernetClient::connected()+0x42>
    7586:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
    7588:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    758c:	84 31       	cpi	r24, 0x14	; 20
    758e:	89 f0       	breq	.+34     	; 0x75b2 <EthernetClient::connected()+0x38>
    7590:	88 23       	and	r24, r24
    7592:	79 f0       	breq	.+30     	; 0x75b2 <EthernetClient::connected()+0x38>
    7594:	88 31       	cpi	r24, 0x18	; 24
    7596:	69 f0       	breq	.+26     	; 0x75b2 <EthernetClient::connected()+0x38>
    7598:	21 e0       	ldi	r18, 0x01	; 1
    759a:	8c 31       	cpi	r24, 0x1C	; 28
    759c:	59 f4       	brne	.+22     	; 0x75b4 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    759e:	e8 81       	ld	r30, Y
    75a0:	f9 81       	ldd	r31, Y+1	; 0x01
    75a2:	00 84       	ldd	r0, Z+8	; 0x08
    75a4:	f1 85       	ldd	r31, Z+9	; 0x09
    75a6:	e0 2d       	mov	r30, r0
    75a8:	ce 01       	movw	r24, r28
    75aa:	19 95       	eicall
    75ac:	21 e0       	ldi	r18, 0x01	; 1
    75ae:	89 2b       	or	r24, r25
    75b0:	09 f4       	brne	.+2      	; 0x75b4 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    75b2:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
    75b4:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
    75b6:	df 91       	pop	r29
    75b8:	cf 91       	pop	r28
    75ba:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
    75bc:	80 e0       	ldi	r24, 0x00	; 0
    75be:	fb cf       	rjmp	.-10     	; 0x75b6 <EthernetClient::connected()+0x3c>

000075c0 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
    75c0:	cf 92       	push	r12
    75c2:	df 92       	push	r13
    75c4:	ef 92       	push	r14
    75c6:	ff 92       	push	r15
    75c8:	cf 93       	push	r28
    75ca:	df 93       	push	r29
    75cc:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
    75ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    75d0:	88 30       	cpi	r24, 0x08	; 8
    75d2:	49 f1       	breq	.+82     	; 0x7626 <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
    75d4:	68 e0       	ldi	r22, 0x08	; 8
    75d6:	70 e0       	ldi	r23, 0x00	; 0
    75d8:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
    75dc:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    75e0:	6b 01       	movw	r12, r22
    75e2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
    75e4:	ce 01       	movw	r24, r28
    75e6:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <EthernetClient::status()>
    75ea:	88 23       	and	r24, r24
    75ec:	91 f0       	breq	.+36     	; 0x7612 <EthernetClient::stop()+0x52>
    75ee:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    75f2:	6c 19       	sub	r22, r12
    75f4:	7d 09       	sbc	r23, r13
    75f6:	8e 09       	sbc	r24, r14
    75f8:	9f 09       	sbc	r25, r15
    75fa:	68 3e       	cpi	r22, 0xE8	; 232
    75fc:	73 40       	sbci	r23, 0x03	; 3
    75fe:	81 05       	cpc	r24, r1
    7600:	91 05       	cpc	r25, r1
    7602:	38 f4       	brcc	.+14     	; 0x7612 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
    7604:	61 e0       	ldi	r22, 0x01	; 1
    7606:	70 e0       	ldi	r23, 0x00	; 0
    7608:	80 e0       	ldi	r24, 0x00	; 0
    760a:	90 e0       	ldi	r25, 0x00	; 0
    760c:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
    7610:	e9 cf       	rjmp	.-46     	; 0x75e4 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
    7612:	ce 01       	movw	r24, r28
    7614:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <EthernetClient::status()>
    7618:	88 23       	and	r24, r24
    761a:	19 f0       	breq	.+6      	; 0x7622 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
    761c:	8c 85       	ldd	r24, Y+12	; 0x0c
    761e:	0e 94 05 b3 	call	0x1660a	; 0x1660a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
    7622:	88 e0       	ldi	r24, 0x08	; 8
    7624:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
    7626:	df 91       	pop	r29
    7628:	cf 91       	pop	r28
    762a:	ff 90       	pop	r15
    762c:	ef 90       	pop	r14
    762e:	df 90       	pop	r13
    7630:	cf 90       	pop	r12
    7632:	08 95       	ret

00007634 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    7634:	0f 93       	push	r16
    7636:	1f 93       	push	r17
    7638:	cf 93       	push	r28
    763a:	df 93       	push	r29
    763c:	1f 92       	push	r1
    763e:	cd b7       	in	r28, 0x3d	; 61
    7640:	de b7       	in	r29, 0x3e	; 62
    7642:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    7644:	dc 01       	movw	r26, r24
    7646:	ed 91       	ld	r30, X+
    7648:	fc 91       	ld	r31, X
    764a:	00 84       	ldd	r0, Z+8	; 0x08
    764c:	f1 85       	ldd	r31, Z+9	; 0x09
    764e:	e0 2d       	mov	r30, r0
    7650:	19 95       	eicall
    7652:	89 2b       	or	r24, r25
    7654:	91 f0       	breq	.+36     	; 0x767a <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    7656:	21 e0       	ldi	r18, 0x01	; 1
    7658:	41 e0       	ldi	r20, 0x01	; 1
    765a:	50 e0       	ldi	r21, 0x00	; 0
    765c:	be 01       	movw	r22, r28
    765e:	6f 5f       	subi	r22, 0xFF	; 255
    7660:	7f 4f       	sbci	r23, 0xFF	; 255
    7662:	f8 01       	movw	r30, r16
    7664:	84 85       	ldd	r24, Z+12	; 0x0c
    7666:	0e 94 ad b1 	call	0x1635a	; 0x1635a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    766a:	89 81       	ldd	r24, Y+1	; 0x01
    766c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    766e:	0f 90       	pop	r0
    7670:	df 91       	pop	r29
    7672:	cf 91       	pop	r28
    7674:	1f 91       	pop	r17
    7676:	0f 91       	pop	r16
    7678:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    767a:	8f ef       	ldi	r24, 0xFF	; 255
    767c:	9f ef       	ldi	r25, 0xFF	; 255
    767e:	f7 cf       	rjmp	.-18     	; 0x766e <EthernetClient::peek()+0x3a>

00007680 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    7680:	fc 01       	movw	r30, r24
    7682:	84 85       	ldd	r24, Z+12	; 0x0c
    7684:	0c 94 13 b2 	jmp	0x16426	; 0x16426 <recv(unsigned char, unsigned char*, int)>

00007688 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    7688:	cf 93       	push	r28
    768a:	df 93       	push	r29
    768c:	1f 92       	push	r1
    768e:	cd b7       	in	r28, 0x3d	; 61
    7690:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    7692:	41 e0       	ldi	r20, 0x01	; 1
    7694:	50 e0       	ldi	r21, 0x00	; 0
    7696:	be 01       	movw	r22, r28
    7698:	6f 5f       	subi	r22, 0xFF	; 255
    769a:	7f 4f       	sbci	r23, 0xFF	; 255
    769c:	fc 01       	movw	r30, r24
    769e:	84 85       	ldd	r24, Z+12	; 0x0c
    76a0:	0e 94 13 b2 	call	0x16426	; 0x16426 <recv(unsigned char, unsigned char*, int)>
    76a4:	18 16       	cp	r1, r24
    76a6:	19 06       	cpc	r1, r25
    76a8:	34 f4       	brge	.+12     	; 0x76b6 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    76aa:	89 81       	ldd	r24, Y+1	; 0x01
    76ac:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    76ae:	0f 90       	pop	r0
    76b0:	df 91       	pop	r29
    76b2:	cf 91       	pop	r28
    76b4:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    76b6:	8f ef       	ldi	r24, 0xFF	; 255
    76b8:	9f ef       	ldi	r25, 0xFF	; 255
    76ba:	f9 cf       	rjmp	.-14     	; 0x76ae <EthernetClient::read()+0x26>

000076bc <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    76bc:	fc 01       	movw	r30, r24
    76be:	84 85       	ldd	r24, Z+12	; 0x0c
    76c0:	88 30       	cpi	r24, 0x08	; 8
    76c2:	11 f0       	breq	.+4      	; 0x76c8 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    76c4:	0c 94 a1 a0 	jmp	0x14142	; 0x14142 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    76c8:	90 e0       	ldi	r25, 0x00	; 0
    76ca:	80 e0       	ldi	r24, 0x00	; 0
    76cc:	08 95       	ret

000076ce <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    76ce:	cf 93       	push	r28
    76d0:	df 93       	push	r29
    76d2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    76d4:	61 e0       	ldi	r22, 0x01	; 1
    76d6:	8c 81       	ldd	r24, Y+4	; 0x04
    76d8:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    76dc:	60 e0       	ldi	r22, 0x00	; 0
    76de:	8b 81       	ldd	r24, Y+3	; 0x03
    76e0:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    76e4:	61 e0       	ldi	r22, 0x01	; 1
    76e6:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    76e8:	df 91       	pop	r29
    76ea:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    76ec:	0c 94 e1 a2 	jmp	0x145c2	; 0x145c2 <pinMode>

000076f0 <get_function_budik_text_state(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2402
uint8_t get_function_budik_enabled(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    76f0:	0f 93       	push	r16
    76f2:	1f 93       	push	r17
    76f4:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403
  strcpy(line1, "Zapnuto 06:45");
    76f6:	63 ef       	ldi	r22, 0xF3	; 243
    76f8:	72 e0       	ldi	r23, 0x02	; 2
    76fa:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
  line2[0] = 0;
    76fe:	f8 01       	movw	r30, r16
    7700:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
}
    7702:	1f 91       	pop	r17
    7704:	0f 91       	pop	r16
    7706:	08 95       	ret

00007708 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5890
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_get_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    7708:	0f 93       	push	r16
    770a:	1f 93       	push	r17
    770c:	48 2f       	mov	r20, r24
    770e:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5891
  if (args1 == 0)
    7710:	41 11       	cpse	r20, r1
    7712:	0b c0       	rjmp	.+22     	; 0x772a <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5893
  {
    strcpy_P(line1, text_button_term_off);
    7714:	60 e8       	ldi	r22, 0x80	; 128
    7716:	7b e5       	ldi	r23, 0x5B	; 91
    7718:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5894
    strcpy_P(line2, text_button_term_off_comment);
    771c:	6a e6       	ldi	r22, 0x6A	; 106
    771e:	7b e5       	ldi	r23, 0x5B	; 91
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    7720:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
  }
}
    7722:	1f 91       	pop	r17
    7724:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    7726:	0c 94 f4 c3 	jmp	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5896
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    772a:	41 30       	cpi	r20, 0x01	; 1
    772c:	39 f4       	brne	.+14     	; 0x773c <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5898
  {
    strcpy_P(line1, text_button_term_max);
    772e:	66 e6       	ldi	r22, 0x66	; 102
    7730:	7b e5       	ldi	r23, 0x5B	; 91
    7732:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5899
    strcpy_P(line2, text_button_term_max_comment);
    7736:	60 e5       	ldi	r22, 0x50	; 80
    7738:	7b e5       	ldi	r23, 0x5B	; 91
    773a:	f2 cf       	rjmp	.-28     	; 0x7720 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5901
  }
  if (args1 == 2)
    773c:	42 30       	cpi	r20, 0x02	; 2
    773e:	39 f4       	brne	.+14     	; 0x774e <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5903
  {
    strcpy_P(line1, text_button_term_min);
    7740:	6c e4       	ldi	r22, 0x4C	; 76
    7742:	7b e5       	ldi	r23, 0x5B	; 91
    7744:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5904
    strcpy_P(line2, text_button_term_min_comment);
    7748:	65 e3       	ldi	r22, 0x35	; 53
    774a:	7b e5       	ldi	r23, 0x5B	; 91
    774c:	e9 cf       	rjmp	.-46     	; 0x7720 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5906
  }
  if (args1 == 3)
    774e:	43 30       	cpi	r20, 0x03	; 3
    7750:	39 f4       	brne	.+14     	; 0x7760 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5908
  {
    strcpy_P(line1, text_button_term_prog);
    7752:	60 e3       	ldi	r22, 0x30	; 48
    7754:	7b e5       	ldi	r23, 0x5B	; 91
    7756:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5909
    strcpy_P(line2, text_button_term_prog_comment);
    775a:	6c e1       	ldi	r22, 0x1C	; 28
    775c:	7b e5       	ldi	r23, 0x5B	; 91
    775e:	e0 cf       	rjmp	.-64     	; 0x7720 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5911
  }
  if (args1 == 4)
    7760:	44 30       	cpi	r20, 0x04	; 4
    7762:	39 f4       	brne	.+14     	; 0x7772 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5913
  {
    strcpy_P(line1, text_button_term_man);
    7764:	68 e1       	ldi	r22, 0x18	; 24
    7766:	7b e5       	ldi	r23, 0x5B	; 91
    7768:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
    strcpy_P(line2, text_button_term_man_comment);
    776c:	69 e0       	ldi	r22, 0x09	; 9
    776e:	7b e5       	ldi	r23, 0x5B	; 91
    7770:	d7 cf       	rjmp	.-82     	; 0x7720 <button_get_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
  }
}
    7772:	1f 91       	pop	r17
    7774:	0f 91       	pop	r16
    7776:	08 95       	ret

00007778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.37():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    7778:	0f 93       	push	r16
    777a:	1f 93       	push	r17
    777c:	cf 93       	push	r28
    777e:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    7780:	00 97       	sbiw	r24, 0x00	; 0
    7782:	01 f1       	breq	.+64     	; 0x77c4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x4c>
    7784:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    7786:	fc 01       	movw	r30, r24
    7788:	c0 81       	ld	r28, Z
    778a:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    778c:	20 97       	sbiw	r28, 0x00	; 0
    778e:	d1 f0       	breq	.+52     	; 0x77c4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    7790:	6a 85       	ldd	r22, Y+10	; 0x0a
    7792:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    7794:	01 15       	cp	r16, r1
    7796:	11 05       	cpc	r17, r1
    7798:	19 f0       	breq	.+6      	; 0x77a0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x28>
    779a:	61 15       	cp	r22, r1
    779c:	71 05       	cpc	r23, r1
    779e:	49 f4       	brne	.+18     	; 0x77b2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x3a>
    77a0:	06 17       	cp	r16, r22
    77a2:	17 07       	cpc	r17, r23
    77a4:	59 f4       	brne	.+22     	; 0x77bc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.37():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    77a6:	ce 01       	movw	r24, r28
    77a8:	df 91       	pop	r29
    77aa:	cf 91       	pop	r28
    77ac:	1f 91       	pop	r17
    77ae:	0f 91       	pop	r16
    77b0:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    77b2:	c8 01       	movw	r24, r16
    77b4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    77b8:	89 2b       	or	r24, r25
    77ba:	a9 f3       	breq	.-22     	; 0x77a6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.37():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    77bc:	0e 80       	ldd	r0, Y+6	; 0x06
    77be:	df 81       	ldd	r29, Y+7	; 0x07
    77c0:	c0 2d       	mov	r28, r0
    77c2:	e4 cf       	rjmp	.-56     	; 0x778c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    77c4:	d0 e0       	ldi	r29, 0x00	; 0
    77c6:	c0 e0       	ldi	r28, 0x00	; 0
    77c8:	ee cf       	rjmp	.-36     	; 0x77a6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]+0x2e>

000077ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    77ca:	4f 92       	push	r4
    77cc:	5f 92       	push	r5
    77ce:	6f 92       	push	r6
    77d0:	7f 92       	push	r7
    77d2:	8f 92       	push	r8
    77d4:	9f 92       	push	r9
    77d6:	af 92       	push	r10
    77d8:	bf 92       	push	r11
    77da:	df 92       	push	r13
    77dc:	ef 92       	push	r14
    77de:	ff 92       	push	r15
    77e0:	0f 93       	push	r16
    77e2:	1f 93       	push	r17
    77e4:	cf 93       	push	r28
    77e6:	df 93       	push	r29
    77e8:	cd b7       	in	r28, 0x3d	; 61
    77ea:	de b7       	in	r29, 0x3e	; 62
    77ec:	c4 54       	subi	r28, 0x44	; 68
    77ee:	d1 09       	sbc	r29, r1
    77f0:	0f b6       	in	r0, 0x3f	; 63
    77f2:	f8 94       	cli
    77f4:	de bf       	out	0x3e, r29	; 62
    77f6:	0f be       	out	0x3f, r0	; 63
    77f8:	cd bf       	out	0x3d, r28	; 61
    77fa:	8c 01       	movw	r16, r24
    77fc:	4a 01       	movw	r8, r20
    77fe:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    7800:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    7804:	00 97       	sbiw	r24, 0x00	; 0
    7806:	09 f0       	breq	.+2      	; 0x780a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    7808:	b0 c0       	rjmp	.+352    	; 0x796a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    780a:	c8 01       	movw	r24, r16
    780c:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7810:	75 01       	movw	r14, r10
    7812:	8b 35       	cpi	r24, 0x5B	; 91
    7814:	49 f1       	breq	.+82     	; 0x7868 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    7816:	8b 37       	cpi	r24, 0x7B	; 123
    7818:	09 f4       	brne	.+2      	; 0x781c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    781a:	d2 c0       	rjmp	.+420    	; 0x79c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    781c:	c8 01       	movw	r24, r16
    781e:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    7822:	87 32       	cpi	r24, 0x27	; 39
    7824:	09 f4       	brne	.+2      	; 0x7828 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    7826:	eb c1       	rjmp	.+982    	; 0x7bfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    7828:	82 32       	cpi	r24, 0x22	; 34
    782a:	09 f4       	brne	.+2      	; 0x782e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    782c:	e8 c1       	rjmp	.+976    	; 0x7bfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    782e:	c8 01       	movw	r24, r16
    7830:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7834:	b8 2e       	mov	r11, r24
    7836:	ce 01       	movw	r24, r28
    7838:	01 96       	adiw	r24, 0x01	; 1
    783a:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    783c:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    783e:	8b 2d       	mov	r24, r11
    7840:	0e 94 da 36 	call	0x6db4	; 0x6db4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    7844:	88 23       	and	r24, r24
    7846:	09 f4       	brne	.+2      	; 0x784a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    7848:	f5 c1       	rjmp	.+1002   	; 0x7c34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    784a:	bf e3       	ldi	r27, 0x3F	; 63
    784c:	db 16       	cp	r13, r27
    784e:	09 f4       	brne	.+2      	; 0x7852 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    7850:	f1 c1       	rjmp	.+994    	; 0x7c34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7852:	f8 01       	movw	r30, r16
    7854:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    7856:	d3 94       	inc	r13
    7858:	d4 01       	movw	r26, r8
    785a:	bd 92       	st	X+, r11
    785c:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    785e:	c8 01       	movw	r24, r16
    7860:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7864:	b8 2e       	mov	r11, r24
    7866:	eb cf       	rjmp	.-42     	; 0x783e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    7868:	d8 01       	movw	r26, r16
    786a:	16 96       	adiw	r26, 0x06	; 6
    786c:	8c 91       	ld	r24, X
    786e:	88 23       	and	r24, r24
    7870:	09 f4       	brne	.+2      	; 0x7874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    7872:	c1 c1       	rjmp	.+898    	; 0x7bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    7874:	a1 14       	cp	r10, r1
    7876:	b1 04       	cpc	r11, r1
    7878:	09 f4       	brne	.+2      	; 0x787c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    787a:	2d c1       	rjmp	.+602    	; 0x7ad6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    787c:	88 e0       	ldi	r24, 0x08	; 8
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	f5 01       	movw	r30, r10
    7882:	91 83       	std	Z+1, r25	; 0x01
    7884:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    7886:	13 82       	std	Z+3, r1	; 0x03
    7888:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    788a:	15 82       	std	Z+5, r1	; 0x05
    788c:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    788e:	c8 01       	movw	r24, r16
    7890:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7894:	8b 35       	cpi	r24, 0x5B	; 91
    7896:	09 f0       	breq	.+2      	; 0x789a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    7898:	ef c0       	rjmp	.+478    	; 0x7a78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    789a:	d8 01       	movw	r26, r16
    789c:	18 96       	adiw	r26, 0x08	; 8
    789e:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    78a0:	c8 01       	movw	r24, r16
    78a2:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    78a6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    78a8:	89 2b       	or	r24, r25
    78aa:	09 f0       	breq	.+2      	; 0x78ae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    78ac:	5d c0       	rjmp	.+186    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    78ae:	c8 01       	movw	r24, r16
    78b0:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    78b4:	8d 35       	cpi	r24, 0x5D	; 93
    78b6:	09 f4       	brne	.+2      	; 0x78ba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    78b8:	55 c0       	rjmp	.+170    	; 0x7964 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    78ba:	8c e0       	ldi	r24, 0x0C	; 12
    78bc:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    78be:	d4 01       	movw	r26, r8
    78c0:	ed 91       	ld	r30, X+
    78c2:	fc 91       	ld	r31, X
    78c4:	01 90       	ld	r0, Z+
    78c6:	f0 81       	ld	r31, Z
    78c8:	e0 2d       	mov	r30, r0
    78ca:	6c e0       	ldi	r22, 0x0C	; 12
    78cc:	70 e0       	ldi	r23, 0x00	; 0
    78ce:	c4 01       	movw	r24, r8
    78d0:	19 95       	eicall
    78d2:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    78d4:	00 97       	sbiw	r24, 0x00	; 0
    78d6:	09 f4       	brne	.+2      	; 0x78da <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    78d8:	64 c0       	rjmp	.+200    	; 0x79a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    78da:	dc 01       	movw	r26, r24
    78dc:	2d 2d       	mov	r18, r13
    78de:	1d 92       	st	X+, r1
    78e0:	2a 95       	dec	r18
    78e2:	e9 f7       	brne	.-6      	; 0x78de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    78e4:	11 82       	std	Z+1, r1	; 0x01
    78e6:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    78e8:	d7 01       	movw	r26, r14
    78ea:	14 96       	adiw	r26, 0x04	; 4
    78ec:	8d 91       	ld	r24, X+
    78ee:	9c 91       	ld	r25, X
    78f0:	15 97       	sbiw	r26, 0x05	; 5
    78f2:	00 97       	sbiw	r24, 0x00	; 0
    78f4:	09 f4       	brne	.+2      	; 0x78f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    78f6:	50 c0       	rjmp	.+160    	; 0x7998 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    78f8:	91 87       	std	Z+9, r25	; 0x09
    78fa:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    78fc:	14 96       	adiw	r26, 0x04	; 4
    78fe:	8d 91       	ld	r24, X+
    7900:	9c 91       	ld	r25, X
    7902:	dc 01       	movw	r26, r24
    7904:	17 96       	adiw	r26, 0x07	; 7
    7906:	fc 93       	st	X, r31
    7908:	ee 93       	st	-X, r30
    790a:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    790c:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    790e:	15 96       	adiw	r26, 0x05	; 5
    7910:	fc 93       	st	X, r31
    7912:	ee 93       	st	-X, r30
    7914:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    7916:	98 2d       	mov	r25, r8
    7918:	89 2d       	mov	r24, r9
    791a:	49 2e       	mov	r4, r25
    791c:	58 2e       	mov	r5, r24
    791e:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    7920:	ef 2b       	or	r30, r31
    7922:	09 f4       	brne	.+2      	; 0x7926 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    7924:	d8 c0       	rjmp	.+432    	; 0x7ad6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    7926:	f8 01       	movw	r30, r16
    7928:	86 81       	ldd	r24, Z+6	; 0x06
    792a:	81 50       	subi	r24, 0x01	; 1
    792c:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    792e:	b3 01       	movw	r22, r6
    7930:	a2 01       	movw	r20, r4
    7932:	c8 01       	movw	r24, r16
    7934:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    7938:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    793a:	d8 01       	movw	r26, r16
    793c:	16 96       	adiw	r26, 0x06	; 6
    793e:	8c 91       	ld	r24, X
    7940:	16 97       	sbiw	r26, 0x06	; 6
    7942:	8f 5f       	subi	r24, 0xFF	; 255
    7944:	16 96       	adiw	r26, 0x06	; 6
    7946:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    7948:	a1 14       	cp	r10, r1
    794a:	b1 04       	cpc	r11, r1
    794c:	69 f4       	brne	.+26     	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    794e:	c8 01       	movw	r24, r16
    7950:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7954:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    7956:	89 2b       	or	r24, r25
    7958:	39 f4       	brne	.+14     	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    795a:	c8 01       	movw	r24, r16
    795c:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7960:	8d 35       	cpi	r24, 0x5D	; 93
    7962:	21 f5       	brne	.+72     	; 0x79ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7964:	f8 01       	movw	r30, r16
    7966:	10 86       	std	Z+8, r1	; 0x08
    7968:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    796a:	cc 5b       	subi	r28, 0xBC	; 188
    796c:	df 4f       	sbci	r29, 0xFF	; 255
    796e:	0f b6       	in	r0, 0x3f	; 63
    7970:	f8 94       	cli
    7972:	de bf       	out	0x3e, r29	; 62
    7974:	0f be       	out	0x3f, r0	; 63
    7976:	cd bf       	out	0x3d, r28	; 61
    7978:	df 91       	pop	r29
    797a:	cf 91       	pop	r28
    797c:	1f 91       	pop	r17
    797e:	0f 91       	pop	r16
    7980:	ff 90       	pop	r15
    7982:	ef 90       	pop	r14
    7984:	df 90       	pop	r13
    7986:	bf 90       	pop	r11
    7988:	af 90       	pop	r10
    798a:	9f 90       	pop	r9
    798c:	8f 90       	pop	r8
    798e:	7f 90       	pop	r7
    7990:	6f 90       	pop	r6
    7992:	5f 90       	pop	r5
    7994:	4f 90       	pop	r4
    7996:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    7998:	13 96       	adiw	r26, 0x03	; 3
    799a:	fc 93       	st	X, r31
    799c:	ee 93       	st	-X, r30
    799e:	12 97       	sbiw	r26, 0x02	; 2
    79a0:	b6 cf       	rjmp	.-148    	; 0x790e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    79a2:	f0 e0       	ldi	r31, 0x00	; 0
    79a4:	e0 e0       	ldi	r30, 0x00	; 0
    79a6:	90 e0       	ldi	r25, 0x00	; 0
    79a8:	80 e0       	ldi	r24, 0x00	; 0
    79aa:	b7 cf       	rjmp	.-146    	; 0x791a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    79ac:	c8 01       	movw	r24, r16
    79ae:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    79b2:	8c 32       	cpi	r24, 0x2C	; 44
    79b4:	09 f0       	breq	.+2      	; 0x79b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    79b6:	60 c0       	rjmp	.+192    	; 0x7a78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    79b8:	d8 01       	movw	r26, r16
    79ba:	18 96       	adiw	r26, 0x08	; 8
    79bc:	1c 92       	st	X, r1
    79be:	7f cf       	rjmp	.-258    	; 0x78be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    79c0:	f8 01       	movw	r30, r16
    79c2:	86 81       	ldd	r24, Z+6	; 0x06
    79c4:	88 23       	and	r24, r24
    79c6:	09 f4       	brne	.+2      	; 0x79ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    79c8:	16 c1       	rjmp	.+556    	; 0x7bf6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    79ca:	a1 14       	cp	r10, r1
    79cc:	b1 04       	cpc	r11, r1
    79ce:	09 f4       	brne	.+2      	; 0x79d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    79d0:	82 c0       	rjmp	.+260    	; 0x7ad6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    79d2:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    79d4:	89 e0       	ldi	r24, 0x09	; 9
    79d6:	90 e0       	ldi	r25, 0x00	; 0
    79d8:	d5 01       	movw	r26, r10
    79da:	11 96       	adiw	r26, 0x01	; 1
    79dc:	9c 93       	st	X, r25
    79de:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    79e0:	13 96       	adiw	r26, 0x03	; 3
    79e2:	1c 92       	st	X, r1
    79e4:	1e 92       	st	-X, r1
    79e6:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    79e8:	15 96       	adiw	r26, 0x05	; 5
    79ea:	1c 92       	st	X, r1
    79ec:	1e 92       	st	-X, r1
    79ee:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    79f0:	45 01       	movw	r8, r10
    79f2:	b2 e0       	ldi	r27, 0x02	; 2
    79f4:	8b 0e       	add	r8, r27
    79f6:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    79f8:	c8 01       	movw	r24, r16
    79fa:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    79fe:	8b 37       	cpi	r24, 0x7B	; 123
    7a00:	d9 f5       	brne	.+118    	; 0x7a78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7a02:	f8 01       	movw	r30, r16
    7a04:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    7a06:	c8 01       	movw	r24, r16
    7a08:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7a0c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    7a0e:	89 2b       	or	r24, r25
    7a10:	09 f0       	breq	.+2      	; 0x7a14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    7a12:	aa cf       	rjmp	.-172    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7a14:	c8 01       	movw	r24, r16
    7a16:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7a1a:	8d 37       	cpi	r24, 0x7D	; 125
    7a1c:	09 f4       	brne	.+2      	; 0x7a20 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    7a1e:	9c c0       	rjmp	.+312    	; 0x7b58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    7a20:	bc e0       	ldi	r27, 0x0C	; 12
    7a22:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    7a24:	c8 01       	movw	r24, r16
    7a26:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    7a2a:	87 32       	cpi	r24, 0x27	; 39
    7a2c:	79 f0       	breq	.+30     	; 0x7a4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    7a2e:	82 32       	cpi	r24, 0x22	; 34
    7a30:	69 f0       	breq	.+26     	; 0x7a4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    7a32:	f8 01       	movw	r30, r16
    7a34:	a4 80       	ldd	r10, Z+4	; 0x04
    7a36:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    7a38:	c8 01       	movw	r24, r16
    7a3a:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7a3e:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    7a40:	81 11       	cpse	r24, r1
    7a42:	1e c0       	rjmp	.+60     	; 0x7a80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    7a44:	aa 24       	eor	r10, r10
    7a46:	a3 94       	inc	r10
    7a48:	b1 2c       	mov	r11, r1
    7a4a:	8e cf       	rjmp	.-228    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    7a4c:	be 01       	movw	r22, r28
    7a4e:	6f 5f       	subi	r22, 0xFF	; 255
    7a50:	7f 4f       	sbci	r23, 0xFF	; 255
    7a52:	c8 01       	movw	r24, r16
    7a54:	0e 94 02 37 	call	0x6e04	; 0x6e04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    7a58:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    7a5a:	89 2b       	or	r24, r25
    7a5c:	09 f0       	breq	.+2      	; 0x7a60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    7a5e:	84 cf       	rjmp	.-248    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    7a60:	c8 01       	movw	r24, r16
    7a62:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7a66:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    7a68:	89 2b       	or	r24, r25
    7a6a:	09 f0       	breq	.+2      	; 0x7a6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    7a6c:	7d cf       	rjmp	.-262    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7a6e:	c8 01       	movw	r24, r16
    7a70:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7a74:	8a 33       	cpi	r24, 0x3A	; 58
    7a76:	99 f1       	breq	.+102    	; 0x7ade <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    7a78:	72 e0       	ldi	r23, 0x02	; 2
    7a7a:	a7 2e       	mov	r10, r23
    7a7c:	b1 2c       	mov	r11, r1
    7a7e:	74 cf       	rjmp	.-280    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    7a80:	0e 94 da 36 	call	0x6db4	; 0x6db4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    7a84:	88 23       	and	r24, r24
    7a86:	c1 f3       	breq	.-16     	; 0x7a78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7a88:	d8 01       	movw	r26, r16
    7a8a:	18 96       	adiw	r26, 0x08	; 8
    7a8c:	1c 92       	st	X, r1
    7a8e:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    7a90:	14 96       	adiw	r26, 0x04	; 4
    7a92:	ed 91       	ld	r30, X+
    7a94:	fc 91       	ld	r31, X
    7a96:	15 97       	sbiw	r26, 0x05	; 5
    7a98:	cf 01       	movw	r24, r30
    7a9a:	01 96       	adiw	r24, 0x01	; 1
    7a9c:	15 96       	adiw	r26, 0x05	; 5
    7a9e:	9c 93       	st	X, r25
    7aa0:	8e 93       	st	-X, r24
    7aa2:	14 97       	sbiw	r26, 0x04	; 4
    7aa4:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    7aa6:	c8 01       	movw	r24, r16
    7aa8:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7aac:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    7aae:	0e 94 da 36 	call	0x6db4	; 0x6db4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    7ab2:	81 11       	cpse	r24, r1
    7ab4:	e9 cf       	rjmp	.-46     	; 0x7a88 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    7ab6:	d8 01       	movw	r26, r16
    7ab8:	14 96       	adiw	r26, 0x04	; 4
    7aba:	ed 91       	ld	r30, X+
    7abc:	fc 91       	ld	r31, X
    7abe:	15 97       	sbiw	r26, 0x05	; 5
    7ac0:	cf 01       	movw	r24, r30
    7ac2:	01 96       	adiw	r24, 0x01	; 1
    7ac4:	15 96       	adiw	r26, 0x05	; 5
    7ac6:	9c 93       	st	X, r25
    7ac8:	8e 93       	st	-X, r24
    7aca:	14 97       	sbiw	r26, 0x04	; 4
    7acc:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    7ace:	ba 82       	std	Y+2, r11	; 0x02
    7ad0:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    7ad2:	ab 28       	or	r10, r11
    7ad4:	29 f6       	brne	.-118    	; 0x7a60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    7ad6:	e3 e0       	ldi	r30, 0x03	; 3
    7ad8:	ae 2e       	mov	r10, r30
    7ada:	b1 2c       	mov	r11, r1
    7adc:	45 cf       	rjmp	.-374    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7ade:	f8 01       	movw	r30, r16
    7ae0:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    7ae2:	a9 80       	ldd	r10, Y+1	; 0x01
    7ae4:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    7ae6:	a1 14       	cp	r10, r1
    7ae8:	b1 04       	cpc	r11, r1
    7aea:	d1 f5       	brne	.+116    	; 0x7b60 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    7aec:	90 e0       	ldi	r25, 0x00	; 0
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	30 e0       	ldi	r19, 0x00	; 0
    7af2:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    7af4:	22 96       	adiw	r28, 0x02	; 2
    7af6:	3f af       	std	Y+63, r19	; 0x3f
    7af8:	22 97       	sbiw	r28, 0x02	; 2
    7afa:	23 96       	adiw	r28, 0x03	; 3
    7afc:	2f af       	std	Y+63, r18	; 0x3f
    7afe:	23 97       	sbiw	r28, 0x03	; 3
    7b00:	25 96       	adiw	r28, 0x05	; 5
    7b02:	9f af       	std	Y+63, r25	; 0x3f
    7b04:	8e af       	std	Y+62, r24	; 0x3e
    7b06:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    7b08:	89 2b       	or	r24, r25
    7b0a:	29 f3       	breq	.-54     	; 0x7ad6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    7b0c:	d8 01       	movw	r26, r16
    7b0e:	16 96       	adiw	r26, 0x06	; 6
    7b10:	8c 91       	ld	r24, X
    7b12:	16 97       	sbiw	r26, 0x06	; 6
    7b14:	81 50       	subi	r24, 0x01	; 1
    7b16:	16 96       	adiw	r26, 0x06	; 6
    7b18:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    7b1a:	25 96       	adiw	r28, 0x05	; 5
    7b1c:	4c ad       	ldd	r20, Y+60	; 0x3c
    7b1e:	5d ad       	ldd	r21, Y+61	; 0x3d
    7b20:	6e ad       	ldd	r22, Y+62	; 0x3e
    7b22:	7f ad       	ldd	r23, Y+63	; 0x3f
    7b24:	25 97       	sbiw	r28, 0x05	; 5
    7b26:	c8 01       	movw	r24, r16
    7b28:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    7b2c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    7b2e:	f8 01       	movw	r30, r16
    7b30:	86 81       	ldd	r24, Z+6	; 0x06
    7b32:	8f 5f       	subi	r24, 0xFF	; 255
    7b34:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    7b36:	a1 14       	cp	r10, r1
    7b38:	b1 04       	cpc	r11, r1
    7b3a:	09 f0       	breq	.+2      	; 0x7b3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    7b3c:	15 cf       	rjmp	.-470    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    7b3e:	c8 01       	movw	r24, r16
    7b40:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7b44:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    7b46:	89 2b       	or	r24, r25
    7b48:	09 f0       	breq	.+2      	; 0x7b4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    7b4a:	0e cf       	rjmp	.-484    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7b4c:	c8 01       	movw	r24, r16
    7b4e:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7b52:	8d 37       	cpi	r24, 0x7D	; 125
    7b54:	09 f0       	breq	.+2      	; 0x7b58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    7b56:	3f c0       	rjmp	.+126    	; 0x7bd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7b58:	d8 01       	movw	r26, r16
    7b5a:	18 96       	adiw	r26, 0x08	; 8
    7b5c:	1c 92       	st	X, r1
    7b5e:	04 cf       	rjmp	.-504    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    7b60:	b5 01       	movw	r22, r10
    7b62:	c4 01       	movw	r24, r8
    7b64:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    7b68:	00 97       	sbiw	r24, 0x00	; 0
    7b6a:	49 f5       	brne	.+82     	; 0x7bbe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    7b6c:	d3 01       	movw	r26, r6
    7b6e:	ed 91       	ld	r30, X+
    7b70:	fc 91       	ld	r31, X
    7b72:	01 90       	ld	r0, Z+
    7b74:	f0 81       	ld	r31, Z
    7b76:	e0 2d       	mov	r30, r0
    7b78:	6c e0       	ldi	r22, 0x0C	; 12
    7b7a:	70 e0       	ldi	r23, 0x00	; 0
    7b7c:	c3 01       	movw	r24, r6
    7b7e:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    7b80:	00 97       	sbiw	r24, 0x00	; 0
    7b82:	09 f4       	brne	.+2      	; 0x7b86 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    7b84:	b3 cf       	rjmp	.-154    	; 0x7aec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    7b86:	fc 01       	movw	r30, r24
    7b88:	25 2d       	mov	r18, r5
    7b8a:	11 92       	st	Z+, r1
    7b8c:	2a 95       	dec	r18
    7b8e:	e9 f7       	brne	.-6      	; 0x7b8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    7b90:	dc 01       	movw	r26, r24
    7b92:	1d 92       	st	X+, r1
    7b94:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    7b96:	d7 01       	movw	r26, r14
    7b98:	14 96       	adiw	r26, 0x04	; 4
    7b9a:	ed 91       	ld	r30, X+
    7b9c:	fc 91       	ld	r31, X
    7b9e:	15 97       	sbiw	r26, 0x05	; 5
    7ba0:	30 97       	sbiw	r30, 0x00	; 0
    7ba2:	81 f0       	breq	.+32     	; 0x7bc4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    7ba4:	dc 01       	movw	r26, r24
    7ba6:	19 96       	adiw	r26, 0x09	; 9
    7ba8:	fc 93       	st	X, r31
    7baa:	ee 93       	st	-X, r30
    7bac:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    7bae:	97 83       	std	Z+7, r25	; 0x07
    7bb0:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    7bb2:	f7 01       	movw	r30, r14
    7bb4:	95 83       	std	Z+5, r25	; 0x05
    7bb6:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    7bb8:	fc 01       	movw	r30, r24
    7bba:	b3 86       	std	Z+11, r11	; 0x0b
    7bbc:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    7bbe:	36 2d       	mov	r19, r6
    7bc0:	27 2d       	mov	r18, r7
    7bc2:	98 cf       	rjmp	.-208    	; 0x7af4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    7bc4:	13 96       	adiw	r26, 0x03	; 3
    7bc6:	9c 93       	st	X, r25
    7bc8:	8e 93       	st	-X, r24
    7bca:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    7bcc:	15 96       	adiw	r26, 0x05	; 5
    7bce:	9c 93       	st	X, r25
    7bd0:	8e 93       	st	-X, r24
    7bd2:	14 97       	sbiw	r26, 0x04	; 4
    7bd4:	f1 cf       	rjmp	.-30     	; 0x7bb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    7bd6:	c8 01       	movw	r24, r16
    7bd8:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    7bdc:	8c 32       	cpi	r24, 0x2C	; 44
    7bde:	09 f0       	breq	.+2      	; 0x7be2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    7be0:	4b cf       	rjmp	.-362    	; 0x7a78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    7be2:	f8 01       	movw	r30, r16
    7be4:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    7be6:	c8 01       	movw	r24, r16
    7be8:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    7bec:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    7bee:	89 2b       	or	r24, r25
    7bf0:	09 f4       	brne	.+2      	; 0x7bf4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    7bf2:	18 cf       	rjmp	.-464    	; 0x7a24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    7bf4:	b9 ce       	rjmp	.-654    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    7bf6:	f5 e0       	ldi	r31, 0x05	; 5
    7bf8:	af 2e       	mov	r10, r31
    7bfa:	b1 2c       	mov	r11, r1
    7bfc:	b5 ce       	rjmp	.-662    	; 0x7968 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.45():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    7bfe:	be 01       	movw	r22, r28
    7c00:	6f 5f       	subi	r22, 0xFF	; 255
    7c02:	7f 4f       	sbci	r23, 0xFF	; 255
    7c04:	c8 01       	movw	r24, r16
    7c06:	0e 94 02 37 	call	0x6e04	; 0x6e04 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    7c0a:	00 97       	sbiw	r24, 0x00	; 0
    7c0c:	09 f0       	breq	.+2      	; 0x7c10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    7c0e:	ad ce       	rjmp	.-678    	; 0x796a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    7c10:	e1 14       	cp	r14, r1
    7c12:	f1 04       	cpc	r15, r1
    7c14:	61 f0       	breq	.+24     	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.45():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    7c16:	89 81       	ldd	r24, Y+1	; 0x01
    7c18:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    7c1a:	23 e0       	ldi	r18, 0x03	; 3
    7c1c:	30 e0       	ldi	r19, 0x00	; 0
    7c1e:	d7 01       	movw	r26, r14
    7c20:	11 96       	adiw	r26, 0x01	; 1
    7c22:	3c 93       	st	X, r19
    7c24:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    7c26:	13 96       	adiw	r26, 0x03	; 3
    7c28:	9c 93       	st	X, r25
    7c2a:	8e 93       	st	-X, r24
    7c2c:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    7c2e:	90 e0       	ldi	r25, 0x00	; 0
    7c30:	80 e0       	ldi	r24, 0x00	; 0
    7c32:	9b ce       	rjmp	.-714    	; 0x796a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    7c34:	e1 e0       	ldi	r30, 0x01	; 1
    7c36:	f0 e0       	ldi	r31, 0x00	; 0
    7c38:	ec 0f       	add	r30, r28
    7c3a:	fd 1f       	adc	r31, r29
    7c3c:	ed 0d       	add	r30, r13
    7c3e:	f1 1d       	adc	r31, r1
    7c40:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    7c42:	19 81       	ldd	r17, Y+1	; 0x01
    7c44:	11 23       	and	r17, r17
    7c46:	09 f4       	brne	.+2      	; 0x7c4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    7c48:	51 c0       	rjmp	.+162    	; 0x7cec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    7c4a:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    7c4c:	1d 32       	cpi	r17, 0x2D	; 45
    7c4e:	71 f1       	breq	.+92     	; 0x7cac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    7c50:	1b 32       	cpi	r17, 0x2B	; 43
    7c52:	61 f1       	breq	.+88     	; 0x7cac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    7c54:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    7c56:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    7c58:	90 ed       	ldi	r25, 0xD0	; 208
    7c5a:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    7c5c:	9a 30       	cpi	r25, 0x0A	; 10
    7c5e:	d8 f3       	brcs	.-10     	; 0x7c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    7c60:	81 11       	cpse	r24, r1
    7c62:	44 c0       	rjmp	.+136    	; 0x7cec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    7c64:	14 37       	cpi	r17, 0x74	; 116
    7c66:	09 f4       	brne	.+2      	; 0x7c6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    7c68:	dd c1       	rjmp	.+954    	; 0x8024 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    7c6a:	1b 32       	cpi	r17, 0x2B	; 43
    7c6c:	09 f1       	breq	.+66     	; 0x7cb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    7c6e:	1d 32       	cpi	r17, 0x2D	; 45
    7c70:	19 f1       	breq	.+70     	; 0x7cb8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    7c72:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    7c74:	fe 01       	movw	r30, r28
    7c76:	31 96       	adiw	r30, 0x01	; 1
    7c78:	20 e0       	ldi	r18, 0x00	; 0
    7c7a:	30 e0       	ldi	r19, 0x00	; 0
    7c7c:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    7c7e:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7c80:	80 ed       	ldi	r24, 0xD0	; 208
    7c82:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    7c84:	8a 30       	cpi	r24, 0x0A	; 10
    7c86:	d0 f4       	brcc	.+52     	; 0x7cbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    7c88:	aa e0       	ldi	r26, 0x0A	; 10
    7c8a:	b0 e0       	ldi	r27, 0x00	; 0
    7c8c:	0e 94 24 ce 	call	0x19c48	; 0x19c48 <__muluhisi3>
    7c90:	20 2f       	mov	r18, r16
    7c92:	00 0f       	add	r16, r16
    7c94:	33 0b       	sbc	r19, r19
    7c96:	20 53       	subi	r18, 0x30	; 48
    7c98:	31 09       	sbc	r19, r1
    7c9a:	03 2e       	mov	r0, r19
    7c9c:	00 0c       	add	r0, r0
    7c9e:	44 0b       	sbc	r20, r20
    7ca0:	55 0b       	sbc	r21, r21
    7ca2:	26 0f       	add	r18, r22
    7ca4:	37 1f       	adc	r19, r23
    7ca6:	48 1f       	adc	r20, r24
    7ca8:	59 1f       	adc	r21, r25
    7caa:	e9 cf       	rjmp	.-46     	; 0x7c7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    7cac:	32 96       	adiw	r30, 0x02	; 2
    7cae:	d3 cf       	rjmp	.-90     	; 0x7c56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    7cb0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    7cb2:	fe 01       	movw	r30, r28
    7cb4:	32 96       	adiw	r30, 0x02	; 2
    7cb6:	e0 cf       	rjmp	.-64     	; 0x7c78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    7cb8:	11 e0       	ldi	r17, 0x01	; 1
    7cba:	fb cf       	rjmp	.-10     	; 0x7cb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    7cbc:	11 23       	and	r17, r17
    7cbe:	09 f4       	brne	.+2      	; 0x7cc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    7cc0:	b5 c1       	rjmp	.+874    	; 0x802c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    7cc2:	e1 14       	cp	r14, r1
    7cc4:	f1 04       	cpc	r15, r1
    7cc6:	09 f4       	brne	.+2      	; 0x7cca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    7cc8:	b2 cf       	rjmp	.-156    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    7cca:	87 e0       	ldi	r24, 0x07	; 7
    7ccc:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    7cce:	21 15       	cp	r18, r1
    7cd0:	31 05       	cpc	r19, r1
    7cd2:	41 05       	cpc	r20, r1
    7cd4:	51 05       	cpc	r21, r1
    7cd6:	11 f4       	brne	.+4      	; 0x7cdc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    7cd8:	86 e0       	ldi	r24, 0x06	; 6
    7cda:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    7cdc:	f7 01       	movw	r30, r14
    7cde:	91 83       	std	Z+1, r25	; 0x01
    7ce0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    7ce2:	22 83       	std	Z+2, r18	; 0x02
    7ce4:	33 83       	std	Z+3, r19	; 0x03
    7ce6:	44 83       	std	Z+4, r20	; 0x04
    7ce8:	55 83       	std	Z+5, r21	; 0x05
    7cea:	a1 cf       	rjmp	.-190    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    7cec:	61 e0       	ldi	r22, 0x01	; 1
    7cee:	73 e0       	ldi	r23, 0x03	; 3
    7cf0:	ce 01       	movw	r24, r28
    7cf2:	01 96       	adiw	r24, 0x01	; 1
    7cf4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    7cf8:	89 2b       	or	r24, r25
    7cfa:	09 f4       	brne	.+2      	; 0x7cfe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    7cfc:	46 c0       	rjmp	.+140    	; 0x7d8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    7cfe:	5e 01       	movw	r10, r28
    7d00:	f2 e0       	ldi	r31, 0x02	; 2
    7d02:	af 0e       	add	r10, r31
    7d04:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    7d06:	1d 32       	cpi	r17, 0x2D	; 45
    7d08:	49 f0       	breq	.+18     	; 0x7d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    7d0a:	fe 01       	movw	r30, r28
    7d0c:	31 96       	adiw	r30, 0x01	; 1
    7d0e:	5f 01       	movw	r10, r30
    7d10:	1b 32       	cpi	r17, 0x2B	; 43
    7d12:	21 f4       	brne	.+8      	; 0x7d1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    7d14:	5e 01       	movw	r10, r28
    7d16:	22 e0       	ldi	r18, 0x02	; 2
    7d18:	a2 0e       	add	r10, r18
    7d1a:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    7d1c:	65 e0       	ldi	r22, 0x05	; 5
    7d1e:	73 e0       	ldi	r23, 0x03	; 3
    7d20:	c5 01       	movw	r24, r10
    7d22:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    7d26:	89 2b       	or	r24, r25
    7d28:	81 f1       	breq	.+96     	; 0x7d8a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    7d2a:	d5 01       	movw	r26, r10
    7d2c:	8c 91       	ld	r24, X
    7d2e:	88 23       	and	r24, r24
    7d30:	09 f4       	brne	.+2      	; 0x7d34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    7d32:	3b c1       	rjmp	.+630    	; 0x7faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    7d34:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    7d36:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    7d38:	90 ed       	ldi	r25, 0xD0	; 208
    7d3a:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    7d3c:	9a 30       	cpi	r25, 0x0A	; 10
    7d3e:	d0 f3       	brcs	.-12     	; 0x7d34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    7d40:	8e 32       	cpi	r24, 0x2E	; 46
    7d42:	41 f4       	brne	.+16     	; 0x7d54 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    7d44:	9d 01       	movw	r18, r26
    7d46:	f9 01       	movw	r30, r18
    7d48:	2f 5f       	subi	r18, 0xFF	; 255
    7d4a:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7d4c:	80 81       	ld	r24, Z
    7d4e:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    7d50:	8a 30       	cpi	r24, 0x0A	; 10
    7d52:	c8 f3       	brcs	.-14     	; 0x7d46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    7d54:	80 81       	ld	r24, Z
    7d56:	8f 7d       	andi	r24, 0xDF	; 223
    7d58:	85 34       	cpi	r24, 0x45	; 69
    7d5a:	a1 f4       	brne	.+40     	; 0x7d84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    7d5c:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    7d5e:	8d 32       	cpi	r24, 0x2D	; 45
    7d60:	09 f4       	brne	.+2      	; 0x7d64 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    7d62:	57 c0       	rjmp	.+174    	; 0x7e12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    7d64:	8b 32       	cpi	r24, 0x2B	; 43
    7d66:	09 f4       	brne	.+2      	; 0x7d6a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    7d68:	54 c0       	rjmp	.+168    	; 0x7e12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    7d6a:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    7d6c:	80 81       	ld	r24, Z
    7d6e:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    7d70:	8a 30       	cpi	r24, 0x0A	; 10
    7d72:	08 f0       	brcs	.+2      	; 0x7d76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    7d74:	1a c1       	rjmp	.+564    	; 0x7faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    7d76:	cf 01       	movw	r24, r30
    7d78:	fc 01       	movw	r30, r24
    7d7a:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7d7c:	20 81       	ld	r18, Z
    7d7e:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    7d80:	2a 30       	cpi	r18, 0x0A	; 10
    7d82:	d0 f3       	brcs	.-12     	; 0x7d78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    7d84:	80 81       	ld	r24, Z
    7d86:	81 11       	cpse	r24, r1
    7d88:	10 c1       	rjmp	.+544    	; 0x7faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    7d8a:	1b 32       	cpi	r17, 0x2B	; 43
    7d8c:	09 f4       	brne	.+2      	; 0x7d90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    7d8e:	43 c0       	rjmp	.+134    	; 0x7e16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    7d90:	1d 32       	cpi	r17, 0x2D	; 45
    7d92:	09 f0       	breq	.+2      	; 0x7d96 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    7d94:	47 c0       	rjmp	.+142    	; 0x7e24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    7d96:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    7d98:	dd 24       	eor	r13, r13
    7d9a:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    7d9c:	5e 01       	movw	r10, r28
    7d9e:	b2 e0       	ldi	r27, 0x02	; 2
    7da0:	ab 0e       	add	r10, r27
    7da2:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    7da4:	60 e0       	ldi	r22, 0x00	; 0
    7da6:	70 e0       	ldi	r23, 0x00	; 0
    7da8:	80 e8       	ldi	r24, 0x80	; 128
    7daa:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    7dac:	14 37       	cpi	r17, 0x74	; 116
    7dae:	09 f4       	brne	.+2      	; 0x7db2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    7db0:	d2 c0       	rjmp	.+420    	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    7db2:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    7db4:	60 e0       	ldi	r22, 0x00	; 0
    7db6:	70 e0       	ldi	r23, 0x00	; 0
    7db8:	80 ec       	ldi	r24, 0xC0	; 192
    7dba:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    7dbc:	1e 34       	cpi	r17, 0x4E	; 78
    7dbe:	09 f4       	brne	.+2      	; 0x7dc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    7dc0:	ca c0       	rjmp	.+404    	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    7dc2:	19 34       	cpi	r17, 0x49	; 73
    7dc4:	09 f4       	brne	.+2      	; 0x7dc8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    7dc6:	97 c0       	rjmp	.+302    	; 0x7ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    7dc8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    7dca:	20 e0       	ldi	r18, 0x00	; 0
    7dcc:	30 e0       	ldi	r19, 0x00	; 0
    7dce:	a9 01       	movw	r20, r18
    7dd0:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    7dd2:	d5 01       	movw	r26, r10
    7dd4:	1d 91       	ld	r17, X+
    7dd6:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7dd8:	80 ed       	ldi	r24, 0xD0	; 208
    7dda:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    7ddc:	8a 30       	cpi	r24, 0x0A	; 10
    7dde:	48 f5       	brcc	.+82     	; 0x7e32 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    7de0:	2c 3c       	cpi	r18, 0xCC	; 204
    7de2:	bc ec       	ldi	r27, 0xCC	; 204
    7de4:	3b 07       	cpc	r19, r27
    7de6:	bc e0       	ldi	r27, 0x0C	; 12
    7de8:	4b 07       	cpc	r20, r27
    7dea:	51 05       	cpc	r21, r1
    7dec:	04 f5       	brge	.+64     	; 0x7e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    7dee:	aa e0       	ldi	r26, 0x0A	; 10
    7df0:	b0 e0       	ldi	r27, 0x00	; 0
    7df2:	0e 94 24 ce 	call	0x19c48	; 0x19c48 <__muluhisi3>
    7df6:	21 2f       	mov	r18, r17
    7df8:	11 0f       	add	r17, r17
    7dfa:	33 0b       	sbc	r19, r19
    7dfc:	20 53       	subi	r18, 0x30	; 48
    7dfe:	31 09       	sbc	r19, r1
    7e00:	03 2e       	mov	r0, r19
    7e02:	00 0c       	add	r0, r0
    7e04:	44 0b       	sbc	r20, r20
    7e06:	55 0b       	sbc	r21, r21
    7e08:	26 0f       	add	r18, r22
    7e0a:	37 1f       	adc	r19, r23
    7e0c:	48 1f       	adc	r20, r24
    7e0e:	59 1f       	adc	r21, r25
    7e10:	df cf       	rjmp	.-66     	; 0x7dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    7e12:	32 96       	adiw	r30, 0x02	; 2
    7e14:	ab cf       	rjmp	.-170    	; 0x7d6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    7e16:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    7e18:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    7e1a:	5e 01       	movw	r10, r28
    7e1c:	e2 e0       	ldi	r30, 0x02	; 2
    7e1e:	ae 0e       	add	r10, r30
    7e20:	b1 1c       	adc	r11, r1
    7e22:	c0 cf       	rjmp	.-128    	; 0x7da4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    7e24:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    7e26:	ce 01       	movw	r24, r28
    7e28:	01 96       	adiw	r24, 0x01	; 1
    7e2a:	5c 01       	movw	r10, r24
    7e2c:	bb cf       	rjmp	.-138    	; 0x7da4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    7e2e:	0f 5f       	subi	r16, 0xFF	; 255
    7e30:	cf cf       	rjmp	.-98     	; 0x7dd0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    7e32:	1e 32       	cpi	r17, 0x2E	; 46
    7e34:	31 f5       	brne	.+76     	; 0x7e82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    7e36:	5f 01       	movw	r10, r30
    7e38:	8f ef       	ldi	r24, 0xFF	; 255
    7e3a:	a8 1a       	sub	r10, r24
    7e3c:	b8 0a       	sbc	r11, r24
    7e3e:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    7e40:	d5 01       	movw	r26, r10
    7e42:	1d 91       	ld	r17, X+
    7e44:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7e46:	80 ed       	ldi	r24, 0xD0	; 208
    7e48:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    7e4a:	8a 30       	cpi	r24, 0x0A	; 10
    7e4c:	d0 f4       	brcc	.+52     	; 0x7e82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    7e4e:	2c 3c       	cpi	r18, 0xCC	; 204
    7e50:	bc ec       	ldi	r27, 0xCC	; 204
    7e52:	3b 07       	cpc	r19, r27
    7e54:	bc e0       	ldi	r27, 0x0C	; 12
    7e56:	4b 07       	cpc	r20, r27
    7e58:	51 05       	cpc	r21, r1
    7e5a:	8c f7       	brge	.-30     	; 0x7e3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    7e5c:	aa e0       	ldi	r26, 0x0A	; 10
    7e5e:	b0 e0       	ldi	r27, 0x00	; 0
    7e60:	0e 94 24 ce 	call	0x19c48	; 0x19c48 <__muluhisi3>
    7e64:	21 2f       	mov	r18, r17
    7e66:	11 0f       	add	r17, r17
    7e68:	33 0b       	sbc	r19, r19
    7e6a:	20 53       	subi	r18, 0x30	; 48
    7e6c:	31 09       	sbc	r19, r1
    7e6e:	03 2e       	mov	r0, r19
    7e70:	00 0c       	add	r0, r0
    7e72:	44 0b       	sbc	r20, r20
    7e74:	55 0b       	sbc	r21, r21
    7e76:	26 0f       	add	r18, r22
    7e78:	37 1f       	adc	r19, r23
    7e7a:	48 1f       	adc	r20, r24
    7e7c:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    7e7e:	01 50       	subi	r16, 0x01	; 1
    7e80:	de cf       	rjmp	.-68     	; 0x7e3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    7e82:	80 81       	ld	r24, Z
    7e84:	8f 7d       	andi	r24, 0xDF	; 223
    7e86:	00 2e       	mov	r0, r16
    7e88:	00 0c       	add	r0, r0
    7e8a:	11 0b       	sbc	r17, r17
    7e8c:	85 34       	cpi	r24, 0x45	; 69
    7e8e:	09 f0       	breq	.+2      	; 0x7e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    7e90:	70 c0       	rjmp	.+224    	; 0x7f72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    7e92:	81 81       	ldd	r24, Z+1	; 0x01
    7e94:	8d 32       	cpi	r24, 0x2D	; 45
    7e96:	41 f5       	brne	.+80     	; 0x7ee8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    7e98:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    7e9a:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    7e9c:	90 e0       	ldi	r25, 0x00	; 0
    7e9e:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    7ea0:	6a e0       	ldi	r22, 0x0A	; 10
    7ea2:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    7ea4:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    7ea6:	60 ed       	ldi	r22, 0xD0	; 208
    7ea8:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    7eaa:	6a 30       	cpi	r22, 0x0A	; 10
    7eac:	78 f5       	brcc	.+94     	; 0x7f0c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    7eae:	b8 9e       	mul	r11, r24
    7eb0:	b0 01       	movw	r22, r0
    7eb2:	b9 9e       	mul	r11, r25
    7eb4:	70 0d       	add	r23, r0
    7eb6:	11 24       	eor	r1, r1
    7eb8:	8a 2f       	mov	r24, r26
    7eba:	aa 0f       	add	r26, r26
    7ebc:	99 0b       	sbc	r25, r25
    7ebe:	c0 97       	sbiw	r24, 0x30	; 48
    7ec0:	86 0f       	add	r24, r22
    7ec2:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    7ec4:	b8 01       	movw	r22, r16
    7ec6:	68 0f       	add	r22, r24
    7ec8:	79 1f       	adc	r23, r25
    7eca:	67 32       	cpi	r22, 0x27	; 39
    7ecc:	71 05       	cpc	r23, r1
    7ece:	54 f3       	brlt	.-44     	; 0x7ea4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    7ed0:	bb 23       	and	r27, r27
    7ed2:	89 f0       	breq	.+34     	; 0x7ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    7ed4:	60 e0       	ldi	r22, 0x00	; 0
    7ed6:	70 e0       	ldi	r23, 0x00	; 0
    7ed8:	80 e0       	ldi	r24, 0x00	; 0
    7eda:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    7edc:	d1 10       	cpse	r13, r1
    7ede:	3b c0       	rjmp	.+118    	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    7ee0:	60 e0       	ldi	r22, 0x00	; 0
    7ee2:	70 e0       	ldi	r23, 0x00	; 0
    7ee4:	cb 01       	movw	r24, r22
    7ee6:	37 c0       	rjmp	.+110    	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    7ee8:	8b 32       	cpi	r24, 0x2B	; 43
    7eea:	19 f0       	breq	.+6      	; 0x7ef2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    7eec:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    7eee:	b0 e0       	ldi	r27, 0x00	; 0
    7ef0:	d5 cf       	rjmp	.-86     	; 0x7e9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    7ef2:	32 96       	adiw	r30, 0x02	; 2
    7ef4:	fc cf       	rjmp	.-8      	; 0x7eee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    7ef6:	60 e0       	ldi	r22, 0x00	; 0
    7ef8:	70 e0       	ldi	r23, 0x00	; 0
    7efa:	80 e8       	ldi	r24, 0x80	; 128
    7efc:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    7efe:	d1 10       	cpse	r13, r1
    7f00:	2a c0       	rjmp	.+84     	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    7f02:	60 e0       	ldi	r22, 0x00	; 0
    7f04:	70 e0       	ldi	r23, 0x00	; 0
    7f06:	80 e8       	ldi	r24, 0x80	; 128
    7f08:	9f e7       	ldi	r25, 0x7F	; 127
    7f0a:	25 c0       	rjmp	.+74     	; 0x7f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    7f0c:	bb 23       	and	r27, r27
    7f0e:	19 f0       	breq	.+6      	; 0x7f16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    7f10:	91 95       	neg	r25
    7f12:	81 95       	neg	r24
    7f14:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    7f16:	08 0f       	add	r16, r24
    7f18:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    7f1a:	ca 01       	movw	r24, r20
    7f1c:	b9 01       	movw	r22, r18
    7f1e:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    7f22:	10 16       	cp	r1, r16
    7f24:	11 06       	cpc	r1, r17
    7f26:	44 f5       	brge	.+80     	; 0x7f78 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    7f28:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    7f2a:	00 ff       	sbrs	r16, 0
    7f2c:	0c c0       	rjmp	.+24     	; 0x7f46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    7f2e:	24 e0       	ldi	r18, 0x04	; 4
    7f30:	b2 9e       	mul	r11, r18
    7f32:	f0 01       	movw	r30, r0
    7f34:	11 24       	eor	r1, r1
    7f36:	e8 5c       	subi	r30, 0xC8	; 200
    7f38:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    7f3a:	20 81       	ld	r18, Z
    7f3c:	31 81       	ldd	r19, Z+1	; 0x01
    7f3e:	42 81       	ldd	r20, Z+2	; 0x02
    7f40:	53 81       	ldd	r21, Z+3	; 0x03
    7f42:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    7f46:	15 95       	asr	r17
    7f48:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    7f4a:	b3 94       	inc	r11
    7f4c:	01 15       	cp	r16, r1
    7f4e:	11 05       	cpc	r17, r1
    7f50:	61 f7       	brne	.-40     	; 0x7f2a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    7f52:	d1 10       	cpse	r13, r1
    7f54:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    7f56:	e1 14       	cp	r14, r1
    7f58:	f1 04       	cpc	r15, r1
    7f5a:	09 f4       	brne	.+2      	; 0x7f5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    7f5c:	68 ce       	rjmp	.-816    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    7f5e:	2a e0       	ldi	r18, 0x0A	; 10
    7f60:	30 e0       	ldi	r19, 0x00	; 0
    7f62:	f7 01       	movw	r30, r14
    7f64:	31 83       	std	Z+1, r19	; 0x01
    7f66:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    7f68:	62 83       	std	Z+2, r22	; 0x02
    7f6a:	73 83       	std	Z+3, r23	; 0x03
    7f6c:	84 83       	std	Z+4, r24	; 0x04
    7f6e:	95 83       	std	Z+5, r25	; 0x05
    7f70:	5e ce       	rjmp	.-836    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    7f72:	90 e0       	ldi	r25, 0x00	; 0
    7f74:	80 e0       	ldi	r24, 0x00	; 0
    7f76:	cf cf       	rjmp	.-98     	; 0x7f16 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    7f78:	11 95       	neg	r17
    7f7a:	01 95       	neg	r16
    7f7c:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    7f7e:	b1 2c       	mov	r11, r1
make_float():
    7f80:	01 15       	cp	r16, r1
    7f82:	11 05       	cpc	r17, r1
    7f84:	31 f3       	breq	.-52     	; 0x7f52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    7f86:	00 ff       	sbrs	r16, 0
    7f88:	0c c0       	rjmp	.+24     	; 0x7fa2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    7f8a:	a4 e0       	ldi	r26, 0x04	; 4
    7f8c:	ba 9e       	mul	r11, r26
    7f8e:	f0 01       	movw	r30, r0
    7f90:	11 24       	eor	r1, r1
    7f92:	e0 5e       	subi	r30, 0xE0	; 224
    7f94:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    7f96:	20 81       	ld	r18, Z
    7f98:	31 81       	ldd	r19, Z+1	; 0x01
    7f9a:	42 81       	ldd	r20, Z+2	; 0x02
    7f9c:	53 81       	ldd	r21, Z+3	; 0x03
    7f9e:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    7fa2:	15 95       	asr	r17
    7fa4:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    7fa6:	b3 94       	inc	r11
    7fa8:	eb cf       	rjmp	.-42     	; 0x7f80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    7faa:	6e e0       	ldi	r22, 0x0E	; 14
    7fac:	73 e0       	ldi	r23, 0x03	; 3
    7fae:	ce 01       	movw	r24, r28
    7fb0:	01 96       	adiw	r24, 0x01	; 1
    7fb2:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    7fb6:	89 2b       	or	r24, r25
    7fb8:	91 f4       	brne	.+36     	; 0x7fde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    7fba:	e1 14       	cp	r14, r1
    7fbc:	f1 04       	cpc	r15, r1
    7fbe:	09 f4       	brne	.+2      	; 0x7fc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    7fc0:	36 ce       	rjmp	.-916    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    7fc2:	85 e0       	ldi	r24, 0x05	; 5
    7fc4:	90 e0       	ldi	r25, 0x00	; 0
    7fc6:	f7 01       	movw	r30, r14
    7fc8:	91 83       	std	Z+1, r25	; 0x01
    7fca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    7fcc:	81 e0       	ldi	r24, 0x01	; 1
    7fce:	90 e0       	ldi	r25, 0x00	; 0
    7fd0:	a0 e0       	ldi	r26, 0x00	; 0
    7fd2:	b0 e0       	ldi	r27, 0x00	; 0
    7fd4:	82 83       	std	Z+2, r24	; 0x02
    7fd6:	93 83       	std	Z+3, r25	; 0x03
    7fd8:	a4 83       	std	Z+4, r26	; 0x04
    7fda:	b5 83       	std	Z+5, r27	; 0x05
    7fdc:	28 ce       	rjmp	.-944    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    7fde:	63 e1       	ldi	r22, 0x13	; 19
    7fe0:	73 e0       	ldi	r23, 0x03	; 3
    7fe2:	ce 01       	movw	r24, r28
    7fe4:	01 96       	adiw	r24, 0x01	; 1
    7fe6:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    7fea:	89 2b       	or	r24, r25
    7fec:	79 f4       	brne	.+30     	; 0x800c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    7fee:	e1 14       	cp	r14, r1
    7ff0:	f1 04       	cpc	r15, r1
    7ff2:	09 f4       	brne	.+2      	; 0x7ff6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    7ff4:	1c ce       	rjmp	.-968    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    7ff6:	85 e0       	ldi	r24, 0x05	; 5
    7ff8:	90 e0       	ldi	r25, 0x00	; 0
    7ffa:	d7 01       	movw	r26, r14
    7ffc:	8d 93       	st	X+, r24
    7ffe:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    8000:	f7 01       	movw	r30, r14
    8002:	12 82       	std	Z+2, r1	; 0x02
    8004:	13 82       	std	Z+3, r1	; 0x03
    8006:	14 82       	std	Z+4, r1	; 0x04
    8008:	15 82       	std	Z+5, r1	; 0x05
    800a:	11 ce       	rjmp	.-990    	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    800c:	69 e1       	ldi	r22, 0x19	; 25
    800e:	73 e0       	ldi	r23, 0x03	; 3
    8010:	ce 01       	movw	r24, r28
    8012:	01 96       	adiw	r24, 0x01	; 1
    8014:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    8018:	89 2b       	or	r24, r25
    801a:	09 f4       	brne	.+2      	; 0x801e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    801c:	08 ce       	rjmp	.-1008   	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    801e:	82 e0       	ldi	r24, 0x02	; 2
    8020:	90 e0       	ldi	r25, 0x00	; 0
    8022:	a3 cc       	rjmp	.-1722   	; 0x796a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    8024:	21 e0       	ldi	r18, 0x01	; 1
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	40 e0       	ldi	r20, 0x00	; 0
    802a:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    802c:	e1 14       	cp	r14, r1
    802e:	f1 04       	cpc	r15, r1
    8030:	09 f0       	breq	.+2      	; 0x8034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    8032:	52 ce       	rjmp	.-860    	; 0x7cd8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    8034:	fc cd       	rjmp	.-1032   	; 0x7c2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00008036 <remote_tds_get_data(unsigned char) [clone .part.28]>:
_Z19remote_tds_get_datah.part.28():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    8036:	cf 93       	push	r28
    8038:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2766
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    803a:	93 e0       	ldi	r25, 0x03	; 3
    803c:	89 9f       	mul	r24, r25
    803e:	e0 01       	movw	r28, r0
    8040:	11 24       	eor	r1, r1
    8042:	be 01       	movw	r22, r28
    8044:	6b 59       	subi	r22, 0x9B	; 155
    8046:	7f 4f       	sbci	r23, 0xFF	; 255
    8048:	07 2e       	mov	r0, r23
    804a:	00 0c       	add	r0, r0
    804c:	88 0b       	sbc	r24, r24
    804e:	99 0b       	sbc	r25, r25
    8050:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2767
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    8054:	be 01       	movw	r22, r28
    8056:	6c 59       	subi	r22, 0x9C	; 156
    8058:	7f 4f       	sbci	r23, 0xFF	; 255
    805a:	07 2e       	mov	r0, r23
    805c:	00 0c       	add	r0, r0
    805e:	88 0b       	sbc	r24, r24
    8060:	99 0b       	sbc	r25, r25
    8062:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2770
  }
  return temp;
}
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	df 91       	pop	r29
    806a:	cf 91       	pop	r28
    806c:	08 95       	ret

0000806e <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z37button_click_term_set_mode_via_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5831
/*
   funkce pro prepnuti na dialog vyberu modu
*/
void button_click_term_set_mode_via_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (default_ring != NO_DEFAULT_RING)
    806e:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <default_ring>
    8072:	6f 3f       	cpi	r22, 0xFF	; 255
    8074:	29 f0       	breq	.+10     	; 0x8080 <button_click_term_set_mode_via_dialog(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5832
    MenuHistoryNextMenu(MENU_DIALOG_SELECT_TERM_MODE, default_ring, args3);
    8076:	70 e0       	ldi	r23, 0x00	; 0
    8078:	88 e6       	ldi	r24, 0x68	; 104
    807a:	90 e0       	ldi	r25, 0x00	; 0
    807c:	0c 94 ea 9b 	jmp	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5833
}
    8080:	08 95       	ret

00008082 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_nastaveni_ring_screenjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711



void button_click_nastaveni_ring_screen(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (default_ring != NO_DEFAULT_RING)
    8082:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <default_ring>
    8086:	6f 3f       	cpi	r22, 0xFF	; 255
    8088:	19 f0       	breq	.+6      	; 0x8090 <button_click_nastaveni_ring_screen(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5712
    MenuHistoryNextMenu(args1, default_ring, args3);
    808a:	70 e0       	ldi	r23, 0x00	; 0
    808c:	0c 94 ea 9b 	jmp	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5713
}
    8090:	08 95       	ret

00008092 <click_thermostat_set_ring_via_dialog(unsigned int, unsigned int, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5550
}
/////
/////
void click_thermostat_set_ring_via_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring, args3);
    8092:	60 91 82 0a 	lds	r22, 0x0A82	; 0x800a82 <default_ring>
    8096:	70 e0       	ldi	r23, 0x00	; 0
    8098:	8a e0       	ldi	r24, 0x0A	; 10
    809a:	90 e0       	ldi	r25, 0x00	; 0
    809c:	0c 94 ea 9b 	jmp	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>

000080a0 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5282
  tds_associate(idx);
}

/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint16_t args1, uint16_t args2, uint8_t idx)
{
    80a0:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5284
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    80a2:	8b e0       	ldi	r24, 0x0B	; 11
    80a4:	48 9f       	mul	r20, r24
    80a6:	f0 01       	movw	r30, r0
    80a8:	11 24       	eor	r1, r1
    80aa:	ed 5c       	subi	r30, 0xCD	; 205
    80ac:	f5 4f       	sbci	r31, 0xF5	; 245
    80ae:	62 85       	ldd	r22, Z+10	; 0x0a
    80b0:	6f 3f       	cpi	r22, 0xFF	; 255
    80b2:	b1 f4       	brne	.+44     	; 0x80e0 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    80b4:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5286
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    80b6:	70 e0       	ldi	r23, 0x00	; 0
    80b8:	60 e0       	ldi	r22, 0x00	; 0
    80ba:	84 e6       	ldi	r24, 0x64	; 100
    80bc:	90 e0       	ldi	r25, 0x00	; 0
    80be:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
    dialog_yes_function = &helper_tds_associate;
    80c2:	8f e8       	ldi	r24, 0x8F	; 143
    80c4:	9e e6       	ldi	r25, 0x6E	; 110
    80c6:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <dialog_yes_function+0x1>
    80ca:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5288
    dialog_yes_args1 = idx;
    80ce:	c0 93 2e 09 	sts	0x092E, r28	; 0x80092e <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5289
    strcpy_P(dialog_text, text_associovat_tds);
    80d2:	60 e7       	ldi	r22, 0x70	; 112
    80d4:	7a e5       	ldi	r23, 0x5A	; 90
    80d6:	8e e0       	ldi	r24, 0x0E	; 14
    80d8:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5295
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
  }
}
    80da:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5289
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &helper_tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    80dc:	0c 94 f4 c3 	jmp	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5293
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    80e0:	70 e0       	ldi	r23, 0x00	; 0
    80e2:	84 e0       	ldi	r24, 0x04	; 4
    80e4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5295
  }
}
    80e6:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5293
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    80e8:	0c 94 ea 9b 	jmp	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>

000080ec <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_save_string_function(args1, args2, args3);
    80ec:	e0 91 32 09 	lds	r30, 0x0932	; 0x800932 <dialog_save_string_function>
    80f0:	f0 91 33 09 	lds	r31, 0x0933	; 0x800933 <dialog_save_string_function+0x1>
    80f4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
  MenuHistoryPrevMenu(0, 0, 0);
    80f6:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

000080fa <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    80fa:	1f 93       	push	r17
    80fc:	cf 93       	push	r28
    80fe:	df 93       	push	r29
    8100:	ec 01       	movw	r28, r24
    8102:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    8104:	90 e0       	ldi	r25, 0x00	; 0
    8106:	80 e0       	ldi	r24, 0x00	; 0
    8108:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
    810c:	ab 01       	movw	r20, r22
    810e:	bc 01       	movw	r22, r24
    8110:	85 e1       	ldi	r24, 0x15	; 21
    8112:	8c 9f       	mul	r24, r28
    8114:	f0 01       	movw	r30, r0
    8116:	8d 9f       	mul	r24, r29
    8118:	f0 0d       	add	r31, r0
    811a:	11 24       	eor	r1, r1
    811c:	ef 54       	subi	r30, 0x4F	; 79
    811e:	f7 4f       	sbci	r31, 0xF7	; 247
    8120:	03 88       	ldd	r0, Z+19	; 0x13
    8122:	f4 89       	ldd	r31, Z+20	; 0x14
    8124:	e0 2d       	mov	r30, r0
    8126:	21 2f       	mov	r18, r17
    8128:	ce 01       	movw	r24, r28
    812a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
  MenuHistoryPrevMenu(0, 0, 0);
}
    812c:	df 91       	pop	r29
    812e:	cf 91       	pop	r28
    8130:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
    8132:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

00008136 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    8136:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <dialog_yes_args1>
    813a:	e0 91 2f 09 	lds	r30, 0x092F	; 0x80092f <dialog_yes_function>
    813e:	f0 91 30 09 	lds	r31, 0x0930	; 0x800930 <dialog_yes_function+0x1>
    8142:	40 e0       	ldi	r20, 0x00	; 0
    8144:	70 e0       	ldi	r23, 0x00	; 0
    8146:	60 e0       	ldi	r22, 0x00	; 0
    8148:	90 e0       	ldi	r25, 0x00	; 0
    814a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498
  MenuHistoryPrevMenu(0, 0, 0);
    814c:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

00008150 <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8150:	ef 92       	push	r14
    8152:	ff 92       	push	r15
    8154:	0f 93       	push	r16
    8156:	1f 93       	push	r17
    8158:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    815a:	ee 24       	eor	r14, r14
    815c:	ea 94       	dec	r14
    815e:	fe 2c       	mov	r15, r14
    8160:	10 e0       	ldi	r17, 0x00	; 0
    8162:	00 e0       	ldi	r16, 0x00	; 0
    8164:	22 e0       	ldi	r18, 0x02	; 2
    8166:	bc 01       	movw	r22, r24
    8168:	8e e0       	ldi	r24, 0x0E	; 14
    816a:	99 e0       	ldi	r25, 0x09	; 9
    816c:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4842
}
    8170:	1f 91       	pop	r17
    8172:	0f 91       	pop	r16
    8174:	ff 90       	pop	r15
    8176:	ef 90       	pop	r14
    8178:	08 95       	ret

0000817a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2322
  }
}

void display_element_set_string_del_char(uint16_t args1, uint16_t idx, uint8_t args3)
{
  uint8_t len = strlen(dialog_set_string);
    817a:	86 e3       	ldi	r24, 0x36	; 54
    817c:	99 e0       	ldi	r25, 0x09	; 9
    817e:	fc 01       	movw	r30, r24
    8180:	01 90       	ld	r0, Z+
    8182:	00 20       	and	r0, r0
    8184:	e9 f7       	brne	.-6      	; 0x8180 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    8186:	cf 01       	movw	r24, r30
    8188:	87 53       	subi	r24, 0x37	; 55
    818a:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
  if (len > 0)
    818c:	88 23       	and	r24, r24
    818e:	29 f0       	breq	.+10     	; 0x819a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
    dialog_set_string[len - 1] = 0;
    8190:	99 27       	eor	r25, r25
    8192:	fc 01       	movw	r30, r24
    8194:	eb 5c       	subi	r30, 0xCB	; 203
    8196:	f6 4f       	sbci	r31, 0xF6	; 246
    8198:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
}
    819a:	08 95       	ret

0000819c <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    819c:	e6 e3       	ldi	r30, 0x36	; 54
    819e:	f9 e0       	ldi	r31, 0x09	; 9
    81a0:	01 90       	ld	r0, Z+
    81a2:	00 20       	and	r0, r0
    81a4:	e9 f7       	brne	.-6      	; 0x81a0 <display_element_set_string_add_char(char)+0x4>
    81a6:	e7 53       	subi	r30, 0x37	; 55
    81a8:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  if (len  < dialog_set_string_max_length - 1)
    81aa:	ff 27       	eor	r31, r31
    81ac:	20 91 35 09 	lds	r18, 0x0935	; 0x800935 <dialog_set_string_max_length>
    81b0:	21 50       	subi	r18, 0x01	; 1
    81b2:	33 0b       	sbc	r19, r19
    81b4:	e2 17       	cp	r30, r18
    81b6:	f3 07       	cpc	r31, r19
    81b8:	24 f4       	brge	.+8      	; 0x81c2 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  {
    dialog_set_string[len] = znak;
    81ba:	ea 5c       	subi	r30, 0xCA	; 202
    81bc:	f6 4f       	sbci	r31, 0xF6	; 246
    81be:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
    dialog_set_string[len + 1] = 0;
    81c0:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  }
}
    81c2:	08 95       	ret

000081c4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
   args3 ... index prvku
*/
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    81c4:	90 91 74 08 	lds	r25, 0x0874	; 0x800874 <__data_end>
    81c8:	91 11       	cpse	r25, r1
    81ca:	07 c0       	rjmp	.+14     	; 0x81da <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    81cc:	e4 2f       	mov	r30, r20
    81ce:	f0 e0       	ldi	r31, 0x00	; 0
    81d0:	ec 5f       	subi	r30, 0xFC	; 252
    81d2:	f8 4a       	sbci	r31, 0xA8	; 168
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    81d4:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  ///
  display_element_set_string_add_char(znak);
    81d6:	0c 94 ce 40 	jmp	0x819c	; 0x819c <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    81da:	91 30       	cpi	r25, 0x01	; 1
    81dc:	29 f4       	brne	.+10     	; 0x81e8 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    81de:	e4 2f       	mov	r30, r20
    81e0:	f0 e0       	ldi	r31, 0x00	; 0
    81e2:	e6 51       	subi	r30, 0x16	; 22
    81e4:	f9 4a       	sbci	r31, 0xA9	; 169
    81e6:	f6 cf       	rjmp	.-20     	; 0x81d4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    81e8:	92 30       	cpi	r25, 0x02	; 2
    81ea:	a9 f7       	brne	.-22     	; 0x81d6 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    81ec:	e4 2f       	mov	r30, r20
    81ee:	f0 e0       	ldi	r31, 0x00	; 0
    81f0:	e0 53       	subi	r30, 0x30	; 48
    81f2:	f9 4a       	sbci	r31, 0xA9	; 169
    81f4:	ef cf       	rjmp	.-34     	; 0x81d4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

000081f6 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
   args3 ... index prvku
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    81f6:	80 e3       	ldi	r24, 0x30	; 48
    81f8:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
  if (args3 == 10) znak = '.';
    81fa:	4a 30       	cpi	r20, 0x0A	; 10
    81fc:	09 f4       	brne	.+2      	; 0x8200 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0xa>
    81fe:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2429
  display_element_set_string_add_char(znak);
    8200:	0c 94 ce 40 	jmp	0x819c	; 0x819c <display_element_set_string_add_char(char)>

00008204 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5144
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    8204:	2f 92       	push	r2
    8206:	3f 92       	push	r3
    8208:	4f 92       	push	r4
    820a:	5f 92       	push	r5
    820c:	6f 92       	push	r6
    820e:	7f 92       	push	r7
    8210:	9f 92       	push	r9
    8212:	af 92       	push	r10
    8214:	bf 92       	push	r11
    8216:	cf 92       	push	r12
    8218:	df 92       	push	r13
    821a:	ef 92       	push	r14
    821c:	ff 92       	push	r15
    821e:	0f 93       	push	r16
    8220:	1f 93       	push	r17
    8222:	cf 93       	push	r28
    8224:	df 93       	push	r29
    8226:	00 d0       	rcall	.+0      	; 0x8228 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    8228:	1f 92       	push	r1
    822a:	1f 92       	push	r1
    822c:	cd b7       	in	r28, 0x3d	; 61
    822e:	de b7       	in	r29, 0x3e	; 62
    8230:	6c 01       	movw	r12, r24
    8232:	5b 01       	movw	r10, r22
    8234:	1a 01       	movw	r2, r20
    8236:	29 01       	movw	r4, r18
    8238:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    823a:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    823e:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    8242:	10 e0       	ldi	r17, 0x00	; 0
    8244:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8246:	3b 01       	movw	r6, r22
    8248:	62 0e       	add	r6, r18
    824a:	73 1e       	adc	r7, r19
    824c:	84 0f       	add	r24, r20
    824e:	95 1f       	adc	r25, r21
    8250:	9d 83       	std	Y+5, r25	; 0x05
    8252:	8c 83       	std	Y+4, r24	; 0x04
    8254:	93 01       	movw	r18, r6
    8256:	20 1b       	sub	r18, r16
    8258:	31 0b       	sbc	r19, r17
    825a:	4c 81       	ldd	r20, Y+4	; 0x04
    825c:	5d 81       	ldd	r21, Y+5	; 0x05
    825e:	40 1b       	sub	r20, r16
    8260:	51 0b       	sbc	r21, r17
    8262:	b5 01       	movw	r22, r10
    8264:	60 0f       	add	r22, r16
    8266:	71 1f       	adc	r23, r17
    8268:	c6 01       	movw	r24, r12
    826a:	80 0f       	add	r24, r16
    826c:	91 1f       	adc	r25, r17
    826e:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    8272:	0f 5f       	subi	r16, 0xFF	; 255
    8274:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5148
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    8276:	03 30       	cpi	r16, 0x03	; 3
    8278:	11 05       	cpc	r17, r1
    827a:	61 f7       	brne	.-40     	; 0x8254 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    827c:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5151
  str1[1] = 0;
    827e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5153
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    8280:	ce 01       	movw	r24, r28
    8282:	01 96       	adiw	r24, 0x01	; 1
    8284:	fc 01       	movw	r30, r24
    8286:	01 90       	ld	r0, Z+
    8288:	00 20       	and	r0, r0
    828a:	e9 f7       	brne	.-6      	; 0x8286 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    828c:	31 97       	sbiw	r30, 0x01	; 1
    828e:	e8 1b       	sub	r30, r24
    8290:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8292:	29 2d       	mov	r18, r9
    8294:	22 0f       	add	r18, r18
    8296:	29 0d       	add	r18, r9
    8298:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5155
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    829a:	a2 01       	movw	r20, r4
    829c:	42 1b       	sub	r20, r18
    829e:	51 09       	sbc	r21, r1
    82a0:	56 95       	lsr	r21
    82a2:	47 95       	ror	r20
    82a4:	56 95       	lsr	r21
    82a6:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    82a8:	4a 0d       	add	r20, r10
    82aa:	5b 2d       	mov	r21, r11
    82ac:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    82ae:	26 e0       	ldi	r18, 0x06	; 6
    82b0:	e2 9f       	mul	r30, r18
    82b2:	f0 01       	movw	r30, r0
    82b4:	11 24       	eor	r1, r1
    82b6:	9e 9e       	mul	r9, r30
    82b8:	90 01       	movw	r18, r0
    82ba:	9f 9e       	mul	r9, r31
    82bc:	30 0d       	add	r19, r0
    82be:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    82c0:	33 27       	eor	r19, r19
    82c2:	b1 01       	movw	r22, r2
    82c4:	62 1b       	sub	r22, r18
    82c6:	73 0b       	sbc	r23, r19
    82c8:	76 95       	lsr	r23
    82ca:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    82cc:	6c 0d       	add	r22, r12
    82ce:	7d 2d       	mov	r23, r13
    82d0:	71 1d       	adc	r23, r1
    82d2:	ee 24       	eor	r14, r14
    82d4:	ea 94       	dec	r14
    82d6:	fe 2c       	mov	r15, r14
    82d8:	10 e0       	ldi	r17, 0x00	; 0
    82da:	00 e0       	ldi	r16, 0x00	; 0
    82dc:	29 2d       	mov	r18, r9
    82de:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5157
}
    82e2:	0f 90       	pop	r0
    82e4:	0f 90       	pop	r0
    82e6:	0f 90       	pop	r0
    82e8:	0f 90       	pop	r0
    82ea:	0f 90       	pop	r0
    82ec:	df 91       	pop	r29
    82ee:	cf 91       	pop	r28
    82f0:	1f 91       	pop	r17
    82f2:	0f 91       	pop	r16
    82f4:	ff 90       	pop	r15
    82f6:	ef 90       	pop	r14
    82f8:	df 90       	pop	r13
    82fa:	cf 90       	pop	r12
    82fc:	bf 90       	pop	r11
    82fe:	af 90       	pop	r10
    8300:	9f 90       	pop	r9
    8302:	7f 90       	pop	r7
    8304:	6f 90       	pop	r6
    8306:	5f 90       	pop	r5
    8308:	4f 90       	pop	r4
    830a:	3f 90       	pop	r3
    830c:	2f 90       	pop	r2
    830e:	08 95       	ret

00008310 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4776
  }
*/

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8310:	8f 92       	push	r8
    8312:	9f 92       	push	r9
    8314:	af 92       	push	r10
    8316:	bf 92       	push	r11
    8318:	cf 92       	push	r12
    831a:	df 92       	push	r13
    831c:	ef 92       	push	r14
    831e:	ff 92       	push	r15
    8320:	0f 93       	push	r16
    8322:	1f 93       	push	r17
    8324:	cf 93       	push	r28
    8326:	df 93       	push	r29
    8328:	cd b7       	in	r28, 0x3d	; 61
    832a:	de b7       	in	r29, 0x3e	; 62
    832c:	68 97       	sbiw	r28, 0x18	; 24
    832e:	0f b6       	in	r0, 0x3f	; 63
    8330:	f8 94       	cli
    8332:	de bf       	out	0x3e, r29	; 62
    8334:	0f be       	out	0x3f, r0	; 63
    8336:	cd bf       	out	0x3d, r28	; 61
    8338:	5c 01       	movw	r10, r24
    833a:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    833c:	67 ee       	ldi	r22, 0xE7	; 231
    833e:	79 e5       	ldi	r23, 0x59	; 89
    8340:	ce 01       	movw	r24, r28
    8342:	01 96       	adiw	r24, 0x01	; 1
    8344:	6c 01       	movw	r12, r24
    8346:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4781
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    834a:	a4 01       	movw	r20, r8
    834c:	4b 5f       	subi	r20, 0xFB	; 251
    834e:	5f 4f       	sbci	r21, 0xFF	; 255
    8350:	b5 01       	movw	r22, r10
    8352:	61 5b       	subi	r22, 0xB1	; 177
    8354:	7f 4f       	sbci	r23, 0xFF	; 255
    8356:	ee 24       	eor	r14, r14
    8358:	ea 94       	dec	r14
    835a:	fe 2c       	mov	r15, r14
    835c:	10 e0       	ldi	r17, 0x00	; 0
    835e:	00 e0       	ldi	r16, 0x00	; 0
    8360:	21 e0       	ldi	r18, 0x01	; 1
    8362:	c6 01       	movw	r24, r12
    8364:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    8368:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    836c:	80 fd       	sbrc	r24, 0
    836e:	50 c0       	rjmp	.+160    	; 0x8410 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x100>
    8370:	90 91 d7 10 	lds	r25, 0x10D7	; 0x8010d7 <now+0x4>
    8374:	80 91 d6 10 	lds	r24, 0x10D6	; 0x8010d6 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
  {
    if (uptime % 2 )
    8378:	20 91 4a 0b 	lds	r18, 0x0B4A	; 0x800b4a <uptime>
    837c:	20 ff       	sbrs	r18, 0
    837e:	41 c0       	rjmp	.+130    	; 0x8402 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4785
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    8380:	1f 92       	push	r1
    8382:	9f 93       	push	r25
    8384:	1f 92       	push	r1
    8386:	8f 93       	push	r24
    8388:	8e e1       	ldi	r24, 0x1E	; 30
    838a:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    838c:	9f 93       	push	r25
    838e:	8f 93       	push	r24
    8390:	df 92       	push	r13
    8392:	cf 92       	push	r12
    8394:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
    8398:	0f b6       	in	r0, 0x3f	; 63
    839a:	f8 94       	cli
    839c:	de bf       	out	0x3e, r29	; 62
    839e:	0f be       	out	0x3f, r0	; 63
    83a0:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    83a2:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    83a6:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    83aa:	a4 01       	movw	r20, r8
    83ac:	4c 5e       	subi	r20, 0xEC	; 236
    83ae:	5f 4f       	sbci	r21, 0xFF	; 255
    83b0:	b5 01       	movw	r22, r10
    83b2:	6c 5f       	subi	r22, 0xFC	; 252
    83b4:	7f 4f       	sbci	r23, 0xFF	; 255
    83b6:	ee 24       	eor	r14, r14
    83b8:	ea 94       	dec	r14
    83ba:	fe 2c       	mov	r15, r14
    83bc:	10 e0       	ldi	r17, 0x00	; 0
    83be:	00 e0       	ldi	r16, 0x00	; 0
    83c0:	28 e0       	ldi	r18, 0x08	; 8
    83c2:	c6 01       	movw	r24, r12
    83c4:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    83c8:	94 01       	movw	r18, r8
    83ca:	2c 5a       	subi	r18, 0xAC	; 172
    83cc:	3f 4f       	sbci	r19, 0xFF	; 255
    83ce:	a5 01       	movw	r20, r10
    83d0:	4c 50       	subi	r20, 0x0C	; 12
    83d2:	5f 4f       	sbci	r21, 0xFF	; 255
    83d4:	b4 01       	movw	r22, r8
    83d6:	c5 01       	movw	r24, r10
    83d8:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4796
}
    83dc:	68 96       	adiw	r28, 0x18	; 24
    83de:	0f b6       	in	r0, 0x3f	; 63
    83e0:	f8 94       	cli
    83e2:	de bf       	out	0x3e, r29	; 62
    83e4:	0f be       	out	0x3f, r0	; 63
    83e6:	cd bf       	out	0x3d, r28	; 61
    83e8:	df 91       	pop	r29
    83ea:	cf 91       	pop	r28
    83ec:	1f 91       	pop	r17
    83ee:	0f 91       	pop	r16
    83f0:	ff 90       	pop	r15
    83f2:	ef 90       	pop	r14
    83f4:	df 90       	pop	r13
    83f6:	cf 90       	pop	r12
    83f8:	bf 90       	pop	r11
    83fa:	af 90       	pop	r10
    83fc:	9f 90       	pop	r9
    83fe:	8f 90       	pop	r8
    8400:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4787
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    8402:	1f 92       	push	r1
    8404:	9f 93       	push	r25
    8406:	1f 92       	push	r1
    8408:	8f 93       	push	r24
    840a:	88 e2       	ldi	r24, 0x28	; 40
    840c:	93 e0       	ldi	r25, 0x03	; 3
    840e:	be cf       	rjmp	.-132    	; 0x838c <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4791
  }
  else
  {
    strcpy(str1, "--:--");
    8410:	62 e3       	ldi	r22, 0x32	; 50
    8412:	73 e0       	ldi	r23, 0x03	; 3
    8414:	c6 01       	movw	r24, r12
    8416:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
    841a:	c3 cf       	rjmp	.-122    	; 0x83a2 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x92>

0000841c <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z25display_element_rectanglejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4745
}

//-----------------------------------------------------------------------------------------------------------------------------------
void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    841c:	26 0f       	add	r18, r22
    841e:	37 1f       	adc	r19, r23
    8420:	48 0f       	add	r20, r24
    8422:	59 1f       	adc	r21, r25
    8424:	0c 94 06 9b 	jmp	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>

00008428 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5077
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    8428:	2f 92       	push	r2
    842a:	3f 92       	push	r3
    842c:	4f 92       	push	r4
    842e:	5f 92       	push	r5
    8430:	6f 92       	push	r6
    8432:	7f 92       	push	r7
    8434:	8f 92       	push	r8
    8436:	9f 92       	push	r9
    8438:	af 92       	push	r10
    843a:	bf 92       	push	r11
    843c:	cf 92       	push	r12
    843e:	df 92       	push	r13
    8440:	ef 92       	push	r14
    8442:	ff 92       	push	r15
    8444:	0f 93       	push	r16
    8446:	1f 93       	push	r17
    8448:	cf 93       	push	r28
    844a:	df 93       	push	r29
    844c:	00 d0       	rcall	.+0      	; 0x844e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    844e:	1f 92       	push	r1
    8450:	cd b7       	in	r28, 0x3d	; 61
    8452:	de b7       	in	r29, 0x3e	; 62
    8454:	2c 01       	movw	r4, r24
    8456:	3b 01       	movw	r6, r22
    8458:	0a 83       	std	Y+2, r16	; 0x02
    845a:	eb 82       	std	Y+3, r14	; 0x03
    845c:	3a 2c       	mov	r3, r10
    845e:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    8460:	31 e0       	ldi	r19, 0x01	; 1
    8462:	83 12       	cpse	r8, r19
    8464:	02 c0       	rjmp	.+4      	; 0x846a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5091
    back_color = color_active;
    8466:	3c 2c       	mov	r3, r12
    8468:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    846a:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    846e:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    8472:	10 e0       	ldi	r17, 0x00	; 0
    8474:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5094
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8476:	a2 2e       	mov	r10, r18
    8478:	b1 2c       	mov	r11, r1
    847a:	84 2e       	mov	r8, r20
    847c:	91 2c       	mov	r9, r1
    847e:	65 01       	movw	r12, r10
    8480:	c6 0c       	add	r12, r6
    8482:	d7 1c       	adc	r13, r7
    8484:	74 01       	movw	r14, r8
    8486:	e4 0c       	add	r14, r4
    8488:	f5 1c       	adc	r15, r5
    848a:	96 01       	movw	r18, r12
    848c:	20 1b       	sub	r18, r16
    848e:	31 0b       	sbc	r19, r17
    8490:	a7 01       	movw	r20, r14
    8492:	40 1b       	sub	r20, r16
    8494:	51 0b       	sbc	r21, r17
    8496:	b3 01       	movw	r22, r6
    8498:	60 0f       	add	r22, r16
    849a:	71 1f       	adc	r23, r17
    849c:	c2 01       	movw	r24, r4
    849e:	80 0f       	add	r24, r16
    84a0:	91 1f       	adc	r25, r17
    84a2:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    84a6:	0f 5f       	subi	r16, 0xFF	; 255
    84a8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    84aa:	03 30       	cpi	r16, 0x03	; 3
    84ac:	11 05       	cpc	r17, r1
    84ae:	69 f7       	brne	.-38     	; 0x848a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    84b0:	30 92 4d 0e 	sts	0x0E4D, r3	; 0x800e4d <my_lcd+0xa>
    84b4:	20 92 4e 0e 	sts	0x0E4E, r2	; 0x800e4e <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5096
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    84b8:	93 01       	movw	r18, r6
    84ba:	23 50       	subi	r18, 0x03	; 3
    84bc:	31 09       	sbc	r19, r1
    84be:	2a 0d       	add	r18, r10
    84c0:	3b 1d       	adc	r19, r11
    84c2:	a2 01       	movw	r20, r4
    84c4:	43 50       	subi	r20, 0x03	; 3
    84c6:	51 09       	sbc	r21, r1
    84c8:	48 0d       	add	r20, r8
    84ca:	59 1d       	adc	r21, r9
    84cc:	b3 01       	movw	r22, r6
    84ce:	6d 5f       	subi	r22, 0xFD	; 253
    84d0:	7f 4f       	sbci	r23, 0xFF	; 255
    84d2:	c2 01       	movw	r24, r4
    84d4:	03 96       	adiw	r24, 0x03	; 3
    84d6:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5097
  if (strlen(line1) > 0)
    84da:	ea 8d       	ldd	r30, Y+26	; 0x1a
    84dc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    84de:	80 81       	ld	r24, Z
    84e0:	88 23       	and	r24, r24
    84e2:	09 f4       	brne	.+2      	; 0x84e6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbe>
    84e4:	a1 c0       	rjmp	.+322    	; 0x8628 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5099
  {
    prvni = 1;
    84e6:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
    num_lines_const = 2;
    84e8:	f2 e0       	ldi	r31, 0x02	; 2
    84ea:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5102
  }
  if (strlen(line2) > 0)
    84ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
    84ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    84f0:	90 81       	ld	r25, Z
    84f2:	99 23       	and	r25, r25
    84f4:	09 f4       	brne	.+2      	; 0x84f8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd0>
    84f6:	9b c0       	rjmp	.+310    	; 0x862e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5105
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    84f8:	f9 81       	ldd	r31, Y+1	; 0x01
    84fa:	fe 5f       	subi	r31, 0xFE	; 254
    84fc:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5104
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    84fe:	21 e0       	ldi	r18, 0x01	; 1
    8500:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5081
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    8502:	d1 2c       	mov	r13, r1
    8504:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5107
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    8506:	81 30       	cpi	r24, 0x01	; 1
    8508:	d1 f5       	brne	.+116    	; 0x857e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x156>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5109
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    850a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    850c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    850e:	01 90       	ld	r0, Z+
    8510:	00 20       	and	r0, r0
    8512:	e9 f7       	brne	.-6      	; 0x850e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    8514:	9f 01       	movw	r18, r30
    8516:	21 50       	subi	r18, 0x01	; 1
    8518:	31 09       	sbc	r19, r1
    851a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    851c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    851e:	24 1b       	sub	r18, r20
    8520:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8522:	8a 81       	ldd	r24, Y+2	; 0x02
    8524:	88 0f       	add	r24, r24
    8526:	5a 81       	ldd	r21, Y+2	; 0x02
    8528:	85 0f       	add	r24, r21
    852a:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5111
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    852c:	f5 01       	movw	r30, r10
    852e:	e8 1b       	sub	r30, r24
    8530:	f1 09       	sbc	r31, r1
    8532:	cf 01       	movw	r24, r30
    8534:	f9 81       	ldd	r31, Y+1	; 0x01
    8536:	6f 2f       	mov	r22, r31
    8538:	70 e0       	ldi	r23, 0x00	; 0
    853a:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
    853e:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5112
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    8540:	a3 01       	movw	r20, r6
    8542:	41 50       	subi	r20, 0x01	; 1
    8544:	51 09       	sbc	r21, r1
    8546:	46 0f       	add	r20, r22
    8548:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    854a:	66 e0       	ldi	r22, 0x06	; 6
    854c:	26 9f       	mul	r18, r22
    854e:	90 01       	movw	r18, r0
    8550:	11 24       	eor	r1, r1
    8552:	ea 81       	ldd	r30, Y+2	; 0x02
    8554:	e2 9f       	mul	r30, r18
    8556:	c0 01       	movw	r24, r0
    8558:	e3 9f       	mul	r30, r19
    855a:	90 0d       	add	r25, r0
    855c:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5110
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    855e:	b4 01       	movw	r22, r8
    8560:	68 1b       	sub	r22, r24
    8562:	79 0b       	sbc	r23, r25
    8564:	76 95       	lsr	r23
    8566:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5112
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    8568:	64 0d       	add	r22, r4
    856a:	75 1d       	adc	r23, r5
    856c:	e3 2c       	mov	r14, r3
    856e:	f2 2c       	mov	r15, r2
    8570:	10 e0       	ldi	r17, 0x00	; 0
    8572:	00 e0       	ldi	r16, 0x00	; 0
    8574:	2e 2f       	mov	r18, r30
    8576:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8578:	9b 8d       	ldd	r25, Y+27	; 0x1b
    857a:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5114
  }
  if (druhy == 1)
    857e:	fc 81       	ldd	r31, Y+4	; 0x04
    8580:	f1 30       	cpi	r31, 0x01	; 1
    8582:	d9 f5       	brne	.+118    	; 0x85fa <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5116
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    8584:	ec 8d       	ldd	r30, Y+28	; 0x1c
    8586:	fd 8d       	ldd	r31, Y+29	; 0x1d
    8588:	01 90       	ld	r0, Z+
    858a:	00 20       	and	r0, r0
    858c:	e9 f7       	brne	.-6      	; 0x8588 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x160>
    858e:	31 97       	sbiw	r30, 0x01	; 1
    8590:	2c 8d       	ldd	r18, Y+28	; 0x1c
    8592:	3d 8d       	ldd	r19, Y+29	; 0x1d
    8594:	e2 1b       	sub	r30, r18
    8596:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8598:	8b 81       	ldd	r24, Y+3	; 0x03
    859a:	88 0f       	add	r24, r24
    859c:	3b 81       	ldd	r19, Y+3	; 0x03
    859e:	83 0f       	add	r24, r19
    85a0:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5118
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    85a2:	a5 01       	movw	r20, r10
    85a4:	48 1b       	sub	r20, r24
    85a6:	51 09       	sbc	r21, r1
    85a8:	ca 01       	movw	r24, r20
    85aa:	88 0f       	add	r24, r24
    85ac:	99 1f       	adc	r25, r25
    85ae:	59 81       	ldd	r21, Y+1	; 0x01
    85b0:	65 2f       	mov	r22, r21
    85b2:	70 e0       	ldi	r23, 0x00	; 0
    85b4:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    85b8:	81 e0       	ldi	r24, 0x01	; 1
    85ba:	68 1a       	sub	r6, r24
    85bc:	71 08       	sbc	r7, r1
    85be:	66 0e       	add	r6, r22
    85c0:	77 1e       	adc	r7, r23
    85c2:	a3 01       	movw	r20, r6
    85c4:	4c 0d       	add	r20, r12
    85c6:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    85c8:	96 e0       	ldi	r25, 0x06	; 6
    85ca:	e9 9f       	mul	r30, r25
    85cc:	f0 01       	movw	r30, r0
    85ce:	11 24       	eor	r1, r1
    85d0:	3e 9f       	mul	r19, r30
    85d2:	c0 01       	movw	r24, r0
    85d4:	3f 9f       	mul	r19, r31
    85d6:	90 0d       	add	r25, r0
    85d8:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5117
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    85da:	b4 01       	movw	r22, r8
    85dc:	68 1b       	sub	r22, r24
    85de:	79 0b       	sbc	r23, r25
    85e0:	76 95       	lsr	r23
    85e2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    85e4:	64 0d       	add	r22, r4
    85e6:	75 1d       	adc	r23, r5
    85e8:	e3 2c       	mov	r14, r3
    85ea:	f2 2c       	mov	r15, r2
    85ec:	10 e0       	ldi	r17, 0x00	; 0
    85ee:	00 e0       	ldi	r16, 0x00	; 0
    85f0:	23 2f       	mov	r18, r19
    85f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    85f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    85f6:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5121
  }
}
    85fa:	0f 90       	pop	r0
    85fc:	0f 90       	pop	r0
    85fe:	0f 90       	pop	r0
    8600:	0f 90       	pop	r0
    8602:	df 91       	pop	r29
    8604:	cf 91       	pop	r28
    8606:	1f 91       	pop	r17
    8608:	0f 91       	pop	r16
    860a:	ff 90       	pop	r15
    860c:	ef 90       	pop	r14
    860e:	df 90       	pop	r13
    8610:	cf 90       	pop	r12
    8612:	bf 90       	pop	r11
    8614:	af 90       	pop	r10
    8616:	9f 90       	pop	r9
    8618:	8f 90       	pop	r8
    861a:	7f 90       	pop	r7
    861c:	6f 90       	pop	r6
    861e:	5f 90       	pop	r5
    8620:	4f 90       	pop	r4
    8622:	3f 90       	pop	r3
    8624:	2f 90       	pop	r2
    8626:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5087
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    8628:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5086
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    862a:	19 82       	std	Y+1, r1	; 0x01
    862c:	5f cf       	rjmp	.-322    	; 0x84ec <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5088
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    862e:	1c 82       	std	Y+4, r1	; 0x04
    8630:	68 cf       	rjmp	.-304    	; 0x8502 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xda>

00008632 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5041
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    8632:	2f 92       	push	r2
    8634:	3f 92       	push	r3
    8636:	4f 92       	push	r4
    8638:	5f 92       	push	r5
    863a:	6f 92       	push	r6
    863c:	7f 92       	push	r7
    863e:	8f 92       	push	r8
    8640:	9f 92       	push	r9
    8642:	af 92       	push	r10
    8644:	bf 92       	push	r11
    8646:	cf 92       	push	r12
    8648:	df 92       	push	r13
    864a:	ef 92       	push	r14
    864c:	ff 92       	push	r15
    864e:	0f 93       	push	r16
    8650:	1f 93       	push	r17
    8652:	cf 93       	push	r28
    8654:	df 93       	push	r29
    8656:	00 d0       	rcall	.+0      	; 0x8658 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    8658:	1f 92       	push	r1
    865a:	1f 92       	push	r1
    865c:	cd b7       	in	r28, 0x3d	; 61
    865e:	de b7       	in	r29, 0x3e	; 62
    8660:	2c 01       	movw	r4, r24
    8662:	3b 01       	movw	r6, r22
    8664:	5a 83       	std	Y+2, r21	; 0x02
    8666:	49 83       	std	Y+1, r20	; 0x01
    8668:	19 01       	movw	r2, r18
    866a:	90 2e       	mov	r9, r16
    866c:	eb 82       	std	Y+3, r14	; 0x03
    866e:	dd 82       	std	Y+5, r13	; 0x05
    8670:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8672:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    8676:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    867a:	10 e0       	ldi	r17, 0x00	; 0
    867c:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5051
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    867e:	6b 01       	movw	r12, r22
    8680:	c2 0e       	add	r12, r18
    8682:	d3 1e       	adc	r13, r19
    8684:	7a 01       	movw	r14, r20
    8686:	e8 0e       	add	r14, r24
    8688:	f9 1e       	adc	r15, r25
    868a:	96 01       	movw	r18, r12
    868c:	20 1b       	sub	r18, r16
    868e:	31 0b       	sbc	r19, r17
    8690:	a7 01       	movw	r20, r14
    8692:	40 1b       	sub	r20, r16
    8694:	51 0b       	sbc	r21, r17
    8696:	b8 01       	movw	r22, r16
    8698:	66 0d       	add	r22, r6
    869a:	77 1d       	adc	r23, r7
    869c:	c8 01       	movw	r24, r16
    869e:	84 0d       	add	r24, r4
    86a0:	95 1d       	adc	r25, r5
    86a2:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    86a6:	0f 5f       	subi	r16, 0xFF	; 255
    86a8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5050
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    86aa:	03 30       	cpi	r16, 0x03	; 3
    86ac:	11 05       	cpc	r17, r1
    86ae:	69 f7       	brne	.-38     	; 0x868a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    86b0:	91 01       	movw	r18, r2
    86b2:	23 50       	subi	r18, 0x03	; 3
    86b4:	31 09       	sbc	r19, r1
    86b6:	49 81       	ldd	r20, Y+1	; 0x01
    86b8:	5a 81       	ldd	r21, Y+2	; 0x02
    86ba:	43 50       	subi	r20, 0x03	; 3
    86bc:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5052
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    86be:	61 e0       	ldi	r22, 0x01	; 1
    86c0:	86 12       	cpse	r8, r22
    86c2:	11 c0       	rjmp	.+34     	; 0x86e6 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    86c4:	8f ef       	ldi	r24, 0xFF	; 255
    86c6:	9f ef       	ldi	r25, 0xFF	; 255
    86c8:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    86cc:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5055
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    86d0:	26 0d       	add	r18, r6
    86d2:	37 1d       	adc	r19, r7
    86d4:	44 0d       	add	r20, r4
    86d6:	55 1d       	adc	r21, r5
    86d8:	b3 01       	movw	r22, r6
    86da:	6d 5f       	subi	r22, 0xFD	; 253
    86dc:	7f 4f       	sbci	r23, 0xFF	; 255
    86de:	c2 01       	movw	r24, r4
    86e0:	03 96       	adiw	r24, 0x03	; 3
    86e2:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5057
  }
  if (strlen(line1) > 0)
    86e6:	ec 81       	ldd	r30, Y+4	; 0x04
    86e8:	fd 81       	ldd	r31, Y+5	; 0x05
    86ea:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5048
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    86ec:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5043
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    86ee:	d1 2c       	mov	r13, r1
    86f0:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5057
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    86f2:	88 23       	and	r24, r24
    86f4:	91 f1       	breq	.+100    	; 0x875a <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5060
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    86f6:	01 90       	ld	r0, Z+
    86f8:	00 20       	and	r0, r0
    86fa:	e9 f7       	brne	.-6      	; 0x86f6 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    86fc:	31 97       	sbiw	r30, 0x01	; 1
    86fe:	4c 81       	ldd	r20, Y+4	; 0x04
    8700:	5d 81       	ldd	r21, Y+5	; 0x05
    8702:	e4 1b       	sub	r30, r20
    8704:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8706:	89 2d       	mov	r24, r9
    8708:	88 0f       	add	r24, r24
    870a:	89 0d       	add	r24, r9
    870c:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5062
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    870e:	61 01       	movw	r12, r2
    8710:	c8 1a       	sub	r12, r24
    8712:	d1 08       	sbc	r13, r1
    8714:	d6 94       	lsr	r13
    8716:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5063
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    8718:	a3 01       	movw	r20, r6
    871a:	41 50       	subi	r20, 0x01	; 1
    871c:	51 09       	sbc	r21, r1
    871e:	4c 0d       	add	r20, r12
    8720:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    8722:	66 e0       	ldi	r22, 0x06	; 6
    8724:	e6 9f       	mul	r30, r22
    8726:	f0 01       	movw	r30, r0
    8728:	11 24       	eor	r1, r1
    872a:	9e 9e       	mul	r9, r30
    872c:	c0 01       	movw	r24, r0
    872e:	9f 9e       	mul	r9, r31
    8730:	90 0d       	add	r25, r0
    8732:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5061
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    8734:	69 81       	ldd	r22, Y+1	; 0x01
    8736:	7a 81       	ldd	r23, Y+2	; 0x02
    8738:	68 1b       	sub	r22, r24
    873a:	79 0b       	sbc	r23, r25
    873c:	76 95       	lsr	r23
    873e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5063
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    8740:	64 0d       	add	r22, r4
    8742:	75 1d       	adc	r23, r5
    8744:	ee 24       	eor	r14, r14
    8746:	ea 94       	dec	r14
    8748:	fe 2c       	mov	r15, r14
    874a:	10 e0       	ldi	r17, 0x00	; 0
    874c:	00 e0       	ldi	r16, 0x00	; 0
    874e:	29 2d       	mov	r18, r9
    8750:	8c 81       	ldd	r24, Y+4	; 0x04
    8752:	9d 81       	ldd	r25, Y+5	; 0x05
    8754:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    8758:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5065
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    875a:	f5 01       	movw	r30, r10
    875c:	80 81       	ld	r24, Z
    875e:	88 23       	and	r24, r24
    8760:	b9 f1       	breq	.+110    	; 0x87d0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5068
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    8762:	01 90       	ld	r0, Z+
    8764:	00 20       	and	r0, r0
    8766:	e9 f7       	brne	.-6      	; 0x8762 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    8768:	9f 01       	movw	r18, r30
    876a:	21 50       	subi	r18, 0x01	; 1
    876c:	31 09       	sbc	r19, r1
    876e:	2a 19       	sub	r18, r10
    8770:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8772:	8b 81       	ldd	r24, Y+3	; 0x03
    8774:	88 0f       	add	r24, r24
    8776:	fb 81       	ldd	r31, Y+3	; 0x03
    8778:	8f 0f       	add	r24, r31
    877a:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    877c:	a1 01       	movw	r20, r2
    877e:	48 1b       	sub	r20, r24
    8780:	51 09       	sbc	r21, r1
    8782:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5067
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    8784:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    8786:	70 e0       	ldi	r23, 0x00	; 0
    8788:	0e 94 bb cd 	call	0x19b76	; 0x19b76 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5071
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    878c:	51 e0       	ldi	r21, 0x01	; 1
    878e:	65 1a       	sub	r6, r21
    8790:	71 08       	sbc	r7, r1
    8792:	c6 0c       	add	r12, r6
    8794:	d7 1c       	adc	r13, r7
    8796:	ab 01       	movw	r20, r22
    8798:	4c 0d       	add	r20, r12
    879a:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    879c:	66 e0       	ldi	r22, 0x06	; 6
    879e:	26 9f       	mul	r18, r22
    87a0:	90 01       	movw	r18, r0
    87a2:	11 24       	eor	r1, r1
    87a4:	f2 9f       	mul	r31, r18
    87a6:	c0 01       	movw	r24, r0
    87a8:	f3 9f       	mul	r31, r19
    87aa:	90 0d       	add	r25, r0
    87ac:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5069
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    87ae:	69 81       	ldd	r22, Y+1	; 0x01
    87b0:	7a 81       	ldd	r23, Y+2	; 0x02
    87b2:	68 1b       	sub	r22, r24
    87b4:	79 0b       	sbc	r23, r25
    87b6:	76 95       	lsr	r23
    87b8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5071
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    87ba:	64 0d       	add	r22, r4
    87bc:	75 1d       	adc	r23, r5
    87be:	ee 24       	eor	r14, r14
    87c0:	ea 94       	dec	r14
    87c2:	fe 2c       	mov	r15, r14
    87c4:	10 e0       	ldi	r17, 0x00	; 0
    87c6:	00 e0       	ldi	r16, 0x00	; 0
    87c8:	2f 2f       	mov	r18, r31
    87ca:	c5 01       	movw	r24, r10
    87cc:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5073
  }
}
    87d0:	0f 90       	pop	r0
    87d2:	0f 90       	pop	r0
    87d4:	0f 90       	pop	r0
    87d6:	0f 90       	pop	r0
    87d8:	0f 90       	pop	r0
    87da:	df 91       	pop	r29
    87dc:	cf 91       	pop	r28
    87de:	1f 91       	pop	r17
    87e0:	0f 91       	pop	r16
    87e2:	ff 90       	pop	r15
    87e4:	ef 90       	pop	r14
    87e6:	df 90       	pop	r13
    87e8:	cf 90       	pop	r12
    87ea:	bf 90       	pop	r11
    87ec:	af 90       	pop	r10
    87ee:	9f 90       	pop	r9
    87f0:	8f 90       	pop	r8
    87f2:	7f 90       	pop	r7
    87f4:	6f 90       	pop	r6
    87f6:	5f 90       	pop	r5
    87f8:	4f 90       	pop	r4
    87fa:	3f 90       	pop	r3
    87fc:	2f 90       	pop	r2
    87fe:	08 95       	ret

00008800 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4992
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8800:	4f 92       	push	r4
    8802:	5f 92       	push	r5
    8804:	6f 92       	push	r6
    8806:	7f 92       	push	r7
    8808:	8f 92       	push	r8
    880a:	9f 92       	push	r9
    880c:	af 92       	push	r10
    880e:	bf 92       	push	r11
    8810:	cf 92       	push	r12
    8812:	df 92       	push	r13
    8814:	ef 92       	push	r14
    8816:	ff 92       	push	r15
    8818:	0f 93       	push	r16
    881a:	cf 93       	push	r28
    881c:	df 93       	push	r29
    881e:	ec 01       	movw	r28, r24
    8820:	6b 01       	movw	r12, r22
    8822:	2a 01       	movw	r4, r20
    8824:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8826:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    882a:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    882e:	f1 2c       	mov	r15, r1
    8830:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4996
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8832:	3b 01       	movw	r6, r22
    8834:	62 0e       	add	r6, r18
    8836:	73 1e       	adc	r7, r19
    8838:	4c 01       	movw	r8, r24
    883a:	84 0e       	add	r8, r20
    883c:	95 1e       	adc	r9, r21
    883e:	93 01       	movw	r18, r6
    8840:	2e 19       	sub	r18, r14
    8842:	3f 09       	sbc	r19, r15
    8844:	a4 01       	movw	r20, r8
    8846:	4e 19       	sub	r20, r14
    8848:	5f 09       	sbc	r21, r15
    884a:	b7 01       	movw	r22, r14
    884c:	6c 0d       	add	r22, r12
    884e:	7d 1d       	adc	r23, r13
    8850:	c7 01       	movw	r24, r14
    8852:	8c 0f       	add	r24, r28
    8854:	9d 1f       	adc	r25, r29
    8856:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    885a:	8f ef       	ldi	r24, 0xFF	; 255
    885c:	e8 1a       	sub	r14, r24
    885e:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4995
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    8860:	83 e0       	ldi	r24, 0x03	; 3
    8862:	e8 16       	cp	r14, r24
    8864:	f1 04       	cpc	r15, r1
    8866:	59 f7       	brne	.-42     	; 0x883e <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8868:	8f ef       	ldi	r24, 0xFF	; 255
    886a:	9f ef       	ldi	r25, 0xFF	; 255
    886c:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    8870:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4998
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    8874:	83 e0       	ldi	r24, 0x03	; 3
    8876:	48 1a       	sub	r4, r24
    8878:	51 08       	sbc	r5, r1
    887a:	4c 0e       	add	r4, r28
    887c:	5d 1e       	adc	r5, r29
    887e:	23 96       	adiw	r28, 0x03	; 3
    8880:	95 01       	movw	r18, r10
    8882:	23 50       	subi	r18, 0x03	; 3
    8884:	31 09       	sbc	r19, r1
    8886:	2c 0d       	add	r18, r12
    8888:	3d 1d       	adc	r19, r13
    888a:	b6 01       	movw	r22, r12
    888c:	6d 5f       	subi	r22, 0xFD	; 253
    888e:	7f 4f       	sbci	r23, 0xFF	; 255
    8890:	a2 01       	movw	r20, r4
    8892:	ce 01       	movw	r24, r28
    8894:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4999
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    8898:	60 91 0c 09 	lds	r22, 0x090C	; 0x80090c <menu_slider_data_max>
    889c:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <menu_slider_data_max_element>
    88a0:	68 1b       	sub	r22, r24
    88a2:	77 0b       	sbc	r23, r23
    88a4:	6f 5f       	subi	r22, 0xFF	; 255
    88a6:	7f 4f       	sbci	r23, 0xFF	; 255
    88a8:	c5 01       	movw	r24, r10
    88aa:	0e 94 bb cd 	call	0x19b76	; 0x19b76 <__udivmodhi4>
    88ae:	e0 2f       	mov	r30, r16
    88b0:	f0 e0       	ldi	r31, 0x00	; 0
    88b2:	eb 5f       	subi	r30, 0xFB	; 251
    88b4:	f6 4f       	sbci	r31, 0xF6	; 246
    88b6:	80 81       	ld	r24, Z
    88b8:	86 9f       	mul	r24, r22
    88ba:	60 2d       	mov	r22, r0
    88bc:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    88be:	8a e9       	ldi	r24, 0x9A	; 154
    88c0:	96 ed       	ldi	r25, 0xD6	; 214
    88c2:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    88c6:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    88ca:	6c 0d       	add	r22, r12
    88cc:	7d 2d       	mov	r23, r13
    88ce:	71 1d       	adc	r23, r1
    88d0:	9b 01       	movw	r18, r22
    88d2:	26 5f       	subi	r18, 0xF6	; 246
    88d4:	3f 4f       	sbci	r19, 0xFF	; 255
    88d6:	6b 5f       	subi	r22, 0xFB	; 251
    88d8:	7f 4f       	sbci	r23, 0xFF	; 255
    88da:	a2 01       	movw	r20, r4
    88dc:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5002
}
    88de:	df 91       	pop	r29
    88e0:	cf 91       	pop	r28
    88e2:	0f 91       	pop	r16
    88e4:	ff 90       	pop	r15
    88e6:	ef 90       	pop	r14
    88e8:	df 90       	pop	r13
    88ea:	cf 90       	pop	r12
    88ec:	bf 90       	pop	r11
    88ee:	af 90       	pop	r10
    88f0:	9f 90       	pop	r9
    88f2:	8f 90       	pop	r8
    88f4:	7f 90       	pop	r7
    88f6:	6f 90       	pop	r6
    88f8:	5f 90       	pop	r5
    88fa:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5001
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    88fc:	0c 94 5f 9b 	jmp	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>

00008900 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4971
  if (strlen(text) > 0)
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8900:	6f 92       	push	r6
    8902:	7f 92       	push	r7
    8904:	8f 92       	push	r8
    8906:	9f 92       	push	r9
    8908:	af 92       	push	r10
    890a:	bf 92       	push	r11
    890c:	cf 92       	push	r12
    890e:	df 92       	push	r13
    8910:	ef 92       	push	r14
    8912:	ff 92       	push	r15
    8914:	0f 93       	push	r16
    8916:	1f 93       	push	r17
    8918:	cf 93       	push	r28
    891a:	df 93       	push	r29
    891c:	6c 01       	movw	r12, r24
    891e:	8b 01       	movw	r16, r22
    8920:	3a 01       	movw	r6, r20
    8922:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8924:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    8928:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    892c:	f1 2c       	mov	r15, r1
    892e:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4975
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8930:	4b 01       	movw	r8, r22
    8932:	82 0e       	add	r8, r18
    8934:	93 1e       	adc	r9, r19
    8936:	5c 01       	movw	r10, r24
    8938:	a4 0e       	add	r10, r20
    893a:	b5 1e       	adc	r11, r21
    893c:	94 01       	movw	r18, r8
    893e:	2e 19       	sub	r18, r14
    8940:	3f 09       	sbc	r19, r15
    8942:	a5 01       	movw	r20, r10
    8944:	4e 19       	sub	r20, r14
    8946:	5f 09       	sbc	r21, r15
    8948:	b7 01       	movw	r22, r14
    894a:	60 0f       	add	r22, r16
    894c:	71 1f       	adc	r23, r17
    894e:	c7 01       	movw	r24, r14
    8950:	8c 0d       	add	r24, r12
    8952:	9d 1d       	adc	r25, r13
    8954:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    8958:	2f ef       	ldi	r18, 0xFF	; 255
    895a:	e2 1a       	sub	r14, r18
    895c:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4974
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    895e:	83 e0       	ldi	r24, 0x03	; 3
    8960:	e8 16       	cp	r14, r24
    8962:	f1 04       	cpc	r15, r1
    8964:	59 f7       	brne	.-42     	; 0x893c <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8966:	8f ef       	ldi	r24, 0xFF	; 255
    8968:	9f ef       	ldi	r25, 0xFF	; 255
    896a:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    896e:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4977
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    8972:	9e 01       	movw	r18, r28
    8974:	23 50       	subi	r18, 0x03	; 3
    8976:	31 09       	sbc	r19, r1
    8978:	20 0f       	add	r18, r16
    897a:	31 1f       	adc	r19, r17
    897c:	a3 01       	movw	r20, r6
    897e:	43 50       	subi	r20, 0x03	; 3
    8980:	51 09       	sbc	r21, r1
    8982:	4c 0d       	add	r20, r12
    8984:	5d 1d       	adc	r21, r13
    8986:	b8 01       	movw	r22, r16
    8988:	6d 5f       	subi	r22, 0xFD	; 253
    898a:	7f 4f       	sbci	r23, 0xFF	; 255
    898c:	c6 01       	movw	r24, r12
    898e:	03 96       	adiw	r24, 0x03	; 3
    8990:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8994:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    8998:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4980

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    899c:	86 e3       	ldi	r24, 0x36	; 54
    899e:	99 e0       	ldi	r25, 0x09	; 9
    89a0:	fc 01       	movw	r30, r24
    89a2:	01 90       	ld	r0, Z+
    89a4:	00 20       	and	r0, r0
    89a6:	e9 f7       	brne	.-6      	; 0x89a2 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa2>
    89a8:	cf 01       	movw	r24, r30
    89aa:	87 53       	subi	r24, 0x37	; 55
    89ac:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4982
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    89ae:	ae 01       	movw	r20, r28
    89b0:	4c 50       	subi	r20, 0x0C	; 12
    89b2:	51 09       	sbc	r21, r1
    89b4:	56 95       	lsr	r21
    89b6:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    89b8:	01 50       	subi	r16, 0x01	; 1
    89ba:	11 09       	sbc	r17, r1
    89bc:	40 0f       	add	r20, r16
    89be:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    89c0:	f6 e0       	ldi	r31, 0x06	; 6
    89c2:	8f 9f       	mul	r24, r31
    89c4:	c0 01       	movw	r24, r0
    89c6:	11 24       	eor	r1, r1
    89c8:	88 0f       	add	r24, r24
    89ca:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4981
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    89cc:	b3 01       	movw	r22, r6
    89ce:	68 1b       	sub	r22, r24
    89d0:	79 0b       	sbc	r23, r25
    89d2:	76 95       	lsr	r23
    89d4:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4983
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    89d6:	6c 0d       	add	r22, r12
    89d8:	7d 1d       	adc	r23, r13
    89da:	ee 24       	eor	r14, r14
    89dc:	ea 94       	dec	r14
    89de:	fe 2c       	mov	r15, r14
    89e0:	10 e0       	ldi	r17, 0x00	; 0
    89e2:	00 e0       	ldi	r16, 0x00	; 0
    89e4:	22 e0       	ldi	r18, 0x02	; 2
    89e6:	86 e3       	ldi	r24, 0x36	; 54
    89e8:	99 e0       	ldi	r25, 0x09	; 9
    89ea:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
}
    89ee:	df 91       	pop	r29
    89f0:	cf 91       	pop	r28
    89f2:	1f 91       	pop	r17
    89f4:	0f 91       	pop	r16
    89f6:	ff 90       	pop	r15
    89f8:	ef 90       	pop	r14
    89fa:	df 90       	pop	r13
    89fc:	cf 90       	pop	r12
    89fe:	bf 90       	pop	r11
    8a00:	af 90       	pop	r10
    8a02:	9f 90       	pop	r9
    8a04:	8f 90       	pop	r8
    8a06:	7f 90       	pop	r7
    8a08:	6f 90       	pop	r6
    8a0a:	08 95       	ret

00008a0c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4942
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t idx, uint8_t args2, char *text)
{
    8a0c:	2f 92       	push	r2
    8a0e:	3f 92       	push	r3
    8a10:	4f 92       	push	r4
    8a12:	5f 92       	push	r5
    8a14:	6f 92       	push	r6
    8a16:	7f 92       	push	r7
    8a18:	8f 92       	push	r8
    8a1a:	9f 92       	push	r9
    8a1c:	af 92       	push	r10
    8a1e:	bf 92       	push	r11
    8a20:	cf 92       	push	r12
    8a22:	df 92       	push	r13
    8a24:	ef 92       	push	r14
    8a26:	ff 92       	push	r15
    8a28:	0f 93       	push	r16
    8a2a:	1f 93       	push	r17
    8a2c:	cf 93       	push	r28
    8a2e:	df 93       	push	r29
    8a30:	00 d0       	rcall	.+0      	; 0x8a32 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x26>
    8a32:	00 d0       	rcall	.+0      	; 0x8a34 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x28>
    8a34:	00 d0       	rcall	.+0      	; 0x8a36 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x2a>
    8a36:	1f 92       	push	r1
    8a38:	cd b7       	in	r28, 0x3d	; 61
    8a3a:	de b7       	in	r29, 0x3e	; 62
    8a3c:	5c 01       	movw	r10, r24
    8a3e:	7b 01       	movw	r14, r22
    8a40:	2a 01       	movw	r4, r20
    8a42:	39 01       	movw	r6, r18
    8a44:	0a 87       	std	Y+10, r16	; 0x0a
    8a46:	16 01       	movw	r2, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8a48:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    8a4c:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    8a50:	10 e0       	ldi	r17, 0x00	; 0
    8a52:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4949
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    8a54:	4b 01       	movw	r8, r22
    8a56:	82 0e       	add	r8, r18
    8a58:	93 1e       	adc	r9, r19
    8a5a:	6c 01       	movw	r12, r24
    8a5c:	c4 0e       	add	r12, r20
    8a5e:	d5 1e       	adc	r13, r21
    8a60:	94 01       	movw	r18, r8
    8a62:	20 1b       	sub	r18, r16
    8a64:	31 0b       	sbc	r19, r17
    8a66:	a6 01       	movw	r20, r12
    8a68:	40 1b       	sub	r20, r16
    8a6a:	51 0b       	sbc	r21, r17
    8a6c:	b8 01       	movw	r22, r16
    8a6e:	6e 0d       	add	r22, r14
    8a70:	7f 1d       	adc	r23, r15
    8a72:	c8 01       	movw	r24, r16
    8a74:	8a 0d       	add	r24, r10
    8a76:	9b 1d       	adc	r25, r11
    8a78:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    8a7c:	0f 5f       	subi	r16, 0xFF	; 255
    8a7e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4948
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    8a80:	03 30       	cpi	r16, 0x03	; 3
    8a82:	11 05       	cpc	r17, r1
    8a84:	69 f7       	brne	.-38     	; 0x8a60 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x54>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8a86:	8f ef       	ldi	r24, 0xFF	; 255
    8a88:	9f ef       	ldi	r25, 0xFF	; 255
    8a8a:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    8a8e:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4951
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    8a92:	93 01       	movw	r18, r6
    8a94:	23 50       	subi	r18, 0x03	; 3
    8a96:	31 09       	sbc	r19, r1
    8a98:	2e 0d       	add	r18, r14
    8a9a:	3f 1d       	adc	r19, r15
    8a9c:	a2 01       	movw	r20, r4
    8a9e:	43 50       	subi	r20, 0x03	; 3
    8aa0:	51 09       	sbc	r21, r1
    8aa2:	4a 0d       	add	r20, r10
    8aa4:	5b 1d       	adc	r21, r11
    8aa6:	b7 01       	movw	r22, r14
    8aa8:	6d 5f       	subi	r22, 0xFD	; 253
    8aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    8aac:	c5 01       	movw	r24, r10
    8aae:	03 96       	adiw	r24, 0x03	; 3
    8ab0:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4953

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    8ab4:	2a 85       	ldd	r18, Y+10	; 0x0a
    8ab6:	82 2e       	mov	r8, r18
    8ab8:	91 2c       	mov	r9, r1
    8aba:	35 e1       	ldi	r19, 0x15	; 21
    8abc:	23 9f       	mul	r18, r19
    8abe:	f0 01       	movw	r30, r0
    8ac0:	11 24       	eor	r1, r1
    8ac2:	ef 54       	subi	r30, 0x4F	; 79
    8ac4:	f7 4f       	sbci	r31, 0xF7	; 247
    8ac6:	85 85       	ldd	r24, Z+13	; 0x0d
    8ac8:	9e 01       	movw	r18, r28
    8aca:	2f 5f       	subi	r18, 0xFF	; 255
    8acc:	3f 4f       	sbci	r19, 0xFF	; 255
    8ace:	69 01       	movw	r12, r18
    8ad0:	81 11       	cpse	r24, r1
    8ad2:	09 c0       	rjmp	.+18     	; 0x8ae6 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    8ad4:	60 81       	ld	r22, Z
    8ad6:	71 81       	ldd	r23, Z+1	; 0x01
    8ad8:	82 81       	ldd	r24, Z+2	; 0x02
    8ada:	93 81       	ldd	r25, Z+3	; 0x03
    8adc:	89 01       	movw	r16, r18
    8ade:	22 e0       	ldi	r18, 0x02	; 2
    8ae0:	44 e0       	ldi	r20, 0x04	; 4
    8ae2:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4956

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    8ae6:	85 e1       	ldi	r24, 0x15	; 21
    8ae8:	88 9d       	mul	r24, r8
    8aea:	f0 01       	movw	r30, r0
    8aec:	89 9d       	mul	r24, r9
    8aee:	f0 0d       	add	r31, r0
    8af0:	11 24       	eor	r1, r1
    8af2:	ef 54       	subi	r30, 0x4F	; 79
    8af4:	f7 4f       	sbci	r31, 0xF7	; 247
    8af6:	85 85       	ldd	r24, Z+13	; 0x0d
    8af8:	81 30       	cpi	r24, 0x01	; 1
    8afa:	59 f4       	brne	.+22     	; 0x8b12 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x106>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    8afc:	60 81       	ld	r22, Z
    8afe:	71 81       	ldd	r23, Z+1	; 0x01
    8b00:	82 81       	ldd	r24, Z+2	; 0x02
    8b02:	93 81       	ldd	r25, Z+3	; 0x03
    8b04:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
    8b08:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    8b0a:	4a e0       	ldi	r20, 0x0A	; 10
    8b0c:	b6 01       	movw	r22, r12
    8b0e:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8b12:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    8b16:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4961

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    8b1a:	f6 01       	movw	r30, r12
    8b1c:	01 90       	ld	r0, Z+
    8b1e:	00 20       	and	r0, r0
    8b20:	e9 f7       	brne	.-6      	; 0x8b1c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x110>
    8b22:	31 97       	sbiw	r30, 0x01	; 1
    8b24:	ec 19       	sub	r30, r12
    8b26:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4963
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    8b28:	3c e0       	ldi	r19, 0x0C	; 12
    8b2a:	63 1a       	sub	r6, r19
    8b2c:	71 08       	sbc	r7, r1
    8b2e:	76 94       	lsr	r7
    8b30:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4964
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    8b32:	81 e0       	ldi	r24, 0x01	; 1
    8b34:	e8 1a       	sub	r14, r24
    8b36:	f1 08       	sbc	r15, r1
    8b38:	6e 0c       	add	r6, r14
    8b3a:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    8b3c:	96 e0       	ldi	r25, 0x06	; 6
    8b3e:	e9 9f       	mul	r30, r25
    8b40:	f0 01       	movw	r30, r0
    8b42:	11 24       	eor	r1, r1
    8b44:	ee 0f       	add	r30, r30
    8b46:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4962
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    8b48:	b2 01       	movw	r22, r4
    8b4a:	6e 1b       	sub	r22, r30
    8b4c:	7f 0b       	sbc	r23, r31
    8b4e:	76 95       	lsr	r23
    8b50:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4964
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    8b52:	6a 0d       	add	r22, r10
    8b54:	7b 1d       	adc	r23, r11
    8b56:	ee 24       	eor	r14, r14
    8b58:	ea 94       	dec	r14
    8b5a:	fe 2c       	mov	r15, r14
    8b5c:	10 e0       	ldi	r17, 0x00	; 0
    8b5e:	00 e0       	ldi	r16, 0x00	; 0
    8b60:	22 e0       	ldi	r18, 0x02	; 2
    8b62:	a3 01       	movw	r20, r6
    8b64:	c6 01       	movw	r24, r12
    8b66:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4966

  if (strlen(text) > 0)
    8b6a:	f1 01       	movw	r30, r2
    8b6c:	80 81       	ld	r24, Z
    8b6e:	88 23       	and	r24, r24
    8b70:	41 f0       	breq	.+16     	; 0x8b82 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x176>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4967
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    8b72:	b5 01       	movw	r22, r10
    8b74:	6b 5f       	subi	r22, 0xFB	; 251
    8b76:	7f 4f       	sbci	r23, 0xFF	; 255
    8b78:	22 e0       	ldi	r18, 0x02	; 2
    8b7a:	a3 01       	movw	r20, r6
    8b7c:	c1 01       	movw	r24, r2
    8b7e:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4968
}
    8b82:	2a 96       	adiw	r28, 0x0a	; 10
    8b84:	0f b6       	in	r0, 0x3f	; 63
    8b86:	f8 94       	cli
    8b88:	de bf       	out	0x3e, r29	; 62
    8b8a:	0f be       	out	0x3f, r0	; 63
    8b8c:	cd bf       	out	0x3d, r28	; 61
    8b8e:	df 91       	pop	r29
    8b90:	cf 91       	pop	r28
    8b92:	1f 91       	pop	r17
    8b94:	0f 91       	pop	r16
    8b96:	ff 90       	pop	r15
    8b98:	ef 90       	pop	r14
    8b9a:	df 90       	pop	r13
    8b9c:	cf 90       	pop	r12
    8b9e:	bf 90       	pop	r11
    8ba0:	af 90       	pop	r10
    8ba2:	9f 90       	pop	r9
    8ba4:	8f 90       	pop	r8
    8ba6:	7f 90       	pop	r7
    8ba8:	6f 90       	pop	r6
    8baa:	5f 90       	pop	r5
    8bac:	4f 90       	pop	r4
    8bae:	3f 90       	pop	r3
    8bb0:	2f 90       	pop	r2
    8bb2:	08 95       	ret

00008bb4 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4826
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    8bb4:	af 92       	push	r10
    8bb6:	bf 92       	push	r11
    8bb8:	cf 92       	push	r12
    8bba:	df 92       	push	r13
    8bbc:	ef 92       	push	r14
    8bbe:	ff 92       	push	r15
    8bc0:	0f 93       	push	r16
    8bc2:	1f 93       	push	r17
    8bc4:	cf 93       	push	r28
    8bc6:	df 93       	push	r29
    8bc8:	cd b7       	in	r28, 0x3d	; 61
    8bca:	de b7       	in	r29, 0x3e	; 62
    8bcc:	60 97       	sbiw	r28, 0x10	; 16
    8bce:	0f b6       	in	r0, 0x3f	; 63
    8bd0:	f8 94       	cli
    8bd2:	de bf       	out	0x3e, r29	; 62
    8bd4:	0f be       	out	0x3f, r0	; 63
    8bd6:	cd bf       	out	0x3d, r28	; 61
    8bd8:	5c 01       	movw	r10, r24
    8bda:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    8bdc:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
    8be0:	9e 01       	movw	r18, r28
    8be2:	2f 5f       	subi	r18, 0xFF	; 255
    8be4:	3f 4f       	sbci	r19, 0xFF	; 255
    8be6:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4828
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    8be8:	80 fd       	sbrc	r24, 0
    8bea:	4e c0       	rjmp	.+156    	; 0x8c88 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    8bec:	80 91 d3 10 	lds	r24, 0x10D3	; 0x8010d3 <now>
    8bf0:	90 e0       	ldi	r25, 0x00	; 0
    8bf2:	80 53       	subi	r24, 0x30	; 48
    8bf4:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    8bf6:	9f 93       	push	r25
    8bf8:	8f 93       	push	r24
    8bfa:	80 91 d4 10 	lds	r24, 0x10D4	; 0x8010d4 <now+0x1>
    8bfe:	1f 92       	push	r1
    8c00:	8f 93       	push	r24
    8c02:	80 91 d5 10 	lds	r24, 0x10D5	; 0x8010d5 <now+0x2>
    8c06:	1f 92       	push	r1
    8c08:	8f 93       	push	r24
    8c0a:	88 e3       	ldi	r24, 0x38	; 56
    8c0c:	93 e0       	ldi	r25, 0x03	; 3
    8c0e:	9f 93       	push	r25
    8c10:	8f 93       	push	r24
    8c12:	3f 93       	push	r19
    8c14:	2f 93       	push	r18
    8c16:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
    8c1a:	0f b6       	in	r0, 0x3f	; 63
    8c1c:	f8 94       	cli
    8c1e:	de bf       	out	0x3e, r29	; 62
    8c20:	0f be       	out	0x3f, r0	; 63
    8c22:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    8c24:	8f ef       	ldi	r24, 0xFF	; 255
    8c26:	9f ef       	ldi	r25, 0xFF	; 255
    8c28:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
    8c2c:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4836
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    8c30:	4e e8       	ldi	r20, 0x8E	; 142
    8c32:	50 e0       	ldi	r21, 0x00	; 0
    8c34:	b8 01       	movw	r22, r16
    8c36:	c5 01       	movw	r24, r10
    8c38:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>
    8c3c:	b8 01       	movw	r22, r16
    8c3e:	6f 5f       	subi	r22, 0xFF	; 255
    8c40:	7f 4f       	sbci	r23, 0xFF	; 255
    8c42:	4e e8       	ldi	r20, 0x8E	; 142
    8c44:	50 e0       	ldi	r21, 0x00	; 0
    8c46:	c5 01       	movw	r24, r10
    8c48:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>
    8c4c:	a8 01       	movw	r20, r16
    8c4e:	4e 5f       	subi	r20, 0xFE	; 254
    8c50:	5f 4f       	sbci	r21, 0xFF	; 255
    8c52:	ee 24       	eor	r14, r14
    8c54:	ea 94       	dec	r14
    8c56:	fe 2c       	mov	r15, r14
    8c58:	10 e0       	ldi	r17, 0x00	; 0
    8c5a:	00 e0       	ldi	r16, 0x00	; 0
    8c5c:	23 e0       	ldi	r18, 0x03	; 3
    8c5e:	b5 01       	movw	r22, r10
    8c60:	c6 01       	movw	r24, r12
    8c62:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
}
    8c66:	60 96       	adiw	r28, 0x10	; 16
    8c68:	0f b6       	in	r0, 0x3f	; 63
    8c6a:	f8 94       	cli
    8c6c:	de bf       	out	0x3e, r29	; 62
    8c6e:	0f be       	out	0x3f, r0	; 63
    8c70:	cd bf       	out	0x3d, r28	; 61
    8c72:	df 91       	pop	r29
    8c74:	cf 91       	pop	r28
    8c76:	1f 91       	pop	r17
    8c78:	0f 91       	pop	r16
    8c7a:	ff 90       	pop	r15
    8c7c:	ef 90       	pop	r14
    8c7e:	df 90       	pop	r13
    8c80:	cf 90       	pop	r12
    8c82:	bf 90       	pop	r11
    8c84:	af 90       	pop	r10
    8c86:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    8c88:	67 e4       	ldi	r22, 0x47	; 71
    8c8a:	73 e0       	ldi	r23, 0x03	; 3
    8c8c:	c9 01       	movw	r24, r18
    8c8e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
    8c92:	c8 cf       	rjmp	.-112    	; 0x8c24 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>

00008c94 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    8c94:	cf 93       	push	r28
    8c96:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    8c98:	68 2f       	mov	r22, r24
    8c9a:	86 ef       	ldi	r24, 0xF6	; 246
    8c9c:	9b e0       	ldi	r25, 0x0B	; 11
    8c9e:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    8ca2:	8c 2f       	mov	r24, r28
    8ca4:	cc 0f       	add	r28, r28
    8ca6:	99 0b       	sbc	r25, r25
    8ca8:	cf 91       	pop	r28
    8caa:	08 95       	ret

00008cac <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    8cac:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    8cae:	82 95       	swap	r24
    8cb0:	88 0f       	add	r24, r24
    8cb2:	80 7e       	andi	r24, 0xE0	; 224
    8cb4:	68 e0       	ldi	r22, 0x08	; 8
    8cb6:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    8cb8:	c9 01       	movw	r24, r18
    8cba:	0c 94 4f b0 	jmp	0x1609e	; 0x1609e <W5500Class::read(unsigned int, unsigned char)>

00008cbe <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    8cbe:	8f 92       	push	r8
    8cc0:	9f 92       	push	r9
    8cc2:	af 92       	push	r10
    8cc4:	bf 92       	push	r11
    8cc6:	cf 92       	push	r12
    8cc8:	df 92       	push	r13
    8cca:	ef 92       	push	r14
    8ccc:	ff 92       	push	r15
    8cce:	0f 93       	push	r16
    8cd0:	1f 93       	push	r17
    8cd2:	cf 93       	push	r28
    8cd4:	6c 01       	movw	r12, r24
    8cd6:	5b 01       	movw	r10, r22
    8cd8:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    8cda:	fc 01       	movw	r30, r24
    8cdc:	c4 85       	ldd	r28, Z+12	; 0x0c
    8cde:	c8 30       	cpi	r28, 0x08	; 8
    8ce0:	a1 f4       	brne	.+40     	; 0x8d0a <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    8ce2:	81 e0       	ldi	r24, 0x01	; 1
    8ce4:	90 e0       	ldi	r25, 0x00	; 0
    8ce6:	f6 01       	movw	r30, r12
    8ce8:	93 83       	std	Z+3, r25	; 0x03
    8cea:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    8cec:	f1 2c       	mov	r15, r1
    8cee:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    8cf0:	c7 01       	movw	r24, r14
    8cf2:	cf 91       	pop	r28
    8cf4:	1f 91       	pop	r17
    8cf6:	0f 91       	pop	r16
    8cf8:	ff 90       	pop	r15
    8cfa:	ef 90       	pop	r14
    8cfc:	df 90       	pop	r13
    8cfe:	cf 90       	pop	r12
    8d00:	bf 90       	pop	r11
    8d02:	af 90       	pop	r10
    8d04:	9f 90       	pop	r9
    8d06:	8f 90       	pop	r8
    8d08:	08 95       	ret
    8d0a:	8a 01       	movw	r16, r20
    8d0c:	41 30       	cpi	r20, 0x01	; 1
    8d0e:	58 40       	sbci	r21, 0x08	; 8
    8d10:	10 f0       	brcs	.+4      	; 0x8d16 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    8d12:	00 e0       	ldi	r16, 0x00	; 0
    8d14:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    8d16:	8c 2f       	mov	r24, r28
    8d18:	0e 94 85 a0 	call	0x1410a	; 0x1410a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    8d1c:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    8d1e:	63 e0       	ldi	r22, 0x03	; 3
    8d20:	70 e0       	ldi	r23, 0x00	; 0
    8d22:	8c 2f       	mov	r24, r28
    8d24:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    8d28:	87 31       	cpi	r24, 0x17	; 23
    8d2a:	11 f0       	breq	.+4      	; 0x8d30 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    8d2c:	8c 31       	cpi	r24, 0x1C	; 28
    8d2e:	09 f5       	brne	.+66     	; 0x8d72 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    8d30:	80 16       	cp	r8, r16
    8d32:	91 06       	cpc	r9, r17
    8d34:	80 f3       	brcs	.-32     	; 0x8d16 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    8d36:	98 01       	movw	r18, r16
    8d38:	a5 01       	movw	r20, r10
    8d3a:	70 e0       	ldi	r23, 0x00	; 0
    8d3c:	60 e0       	ldi	r22, 0x00	; 0
    8d3e:	8c 2f       	mov	r24, r28
    8d40:	0e 94 2b b1 	call	0x16256	; 0x16256 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    8d44:	60 e2       	ldi	r22, 0x20	; 32
    8d46:	70 e0       	ldi	r23, 0x00	; 0
    8d48:	8c 2f       	mov	r24, r28
    8d4a:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    8d4e:	62 e0       	ldi	r22, 0x02	; 2
    8d50:	70 e0       	ldi	r23, 0x00	; 0
    8d52:	8c 2f       	mov	r24, r28
    8d54:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    8d58:	84 fd       	sbrc	r24, 4
    8d5a:	0e c0       	rjmp	.+28     	; 0x8d78 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    8d5c:	63 e0       	ldi	r22, 0x03	; 3
    8d5e:	70 e0       	ldi	r23, 0x00	; 0
    8d60:	8c 2f       	mov	r24, r28
    8d62:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    8d66:	81 11       	cpse	r24, r1
    8d68:	f2 cf       	rjmp	.-28     	; 0x8d4e <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    8d6a:	8c 2f       	mov	r24, r28
    8d6c:	0e 94 05 b3 	call	0x1660a	; 0x1660a <close(unsigned char)>
    8d70:	b8 cf       	rjmp	.-144    	; 0x8ce2 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    8d72:	10 e0       	ldi	r17, 0x00	; 0
    8d74:	00 e0       	ldi	r16, 0x00	; 0
    8d76:	df cf       	rjmp	.-66     	; 0x8d36 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    8d78:	40 e1       	ldi	r20, 0x10	; 16
    8d7a:	62 e0       	ldi	r22, 0x02	; 2
    8d7c:	70 e0       	ldi	r23, 0x00	; 0
    8d7e:	8c 2f       	mov	r24, r28
    8d80:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    8d84:	01 2b       	or	r16, r17
    8d86:	09 f0       	breq	.+2      	; 0x8d8a <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    8d88:	b3 cf       	rjmp	.-154    	; 0x8cf0 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    8d8a:	ab cf       	rjmp	.-170    	; 0x8ce2 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00008d8c <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    8d8c:	df 92       	push	r13
    8d8e:	ef 92       	push	r14
    8d90:	ff 92       	push	r15
    8d92:	0f 93       	push	r16
    8d94:	1f 93       	push	r17
    8d96:	cf 93       	push	r28
    8d98:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    8d9a:	fc 01       	movw	r30, r24
    8d9c:	24 85       	ldd	r18, Z+12	; 0x0c
    8d9e:	28 30       	cpi	r18, 0x08	; 8
    8da0:	51 f0       	breq	.+20     	; 0x8db6 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    8da2:	90 e0       	ldi	r25, 0x00	; 0
    8da4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    8da6:	df 91       	pop	r29
    8da8:	cf 91       	pop	r28
    8daa:	1f 91       	pop	r17
    8dac:	0f 91       	pop	r16
    8dae:	ff 90       	pop	r15
    8db0:	ef 90       	pop	r14
    8db2:	df 90       	pop	r13
    8db4:	08 95       	ret
    8db6:	7a 01       	movw	r14, r20
    8db8:	eb 01       	movw	r28, r22
    8dba:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    8dbc:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    8dbe:	63 e0       	ldi	r22, 0x03	; 3
    8dc0:	70 e0       	ldi	r23, 0x00	; 0
    8dc2:	8d 2d       	mov	r24, r13
    8dc4:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    8dc8:	81 11       	cpse	r24, r1
    8dca:	28 c0       	rjmp	.+80     	; 0x8e1c <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    8dcc:	f8 01       	movw	r30, r16
    8dce:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    8dd0:	f8 01       	movw	r30, r16
    8dd2:	84 85       	ldd	r24, Z+12	; 0x0c
    8dd4:	88 30       	cpi	r24, 0x08	; 8
    8dd6:	29 f3       	breq	.-54     	; 0x8da2 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    8dd8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    8ddc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8de0:	2f 5f       	subi	r18, 0xFF	; 255
    8de2:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    8de4:	19 f1       	breq	.+70     	; 0x8e2c <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    8de6:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8dea:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
socket():
    8dee:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    8df2:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8df6:	61 e0       	ldi	r22, 0x01	; 1
    8df8:	0e 94 12 b3 	call	0x16624	; 0x16624 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    8dfc:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    8dfe:	8f 3f       	cpi	r24, 0xFF	; 255
    8e00:	c1 f4       	brne	.+48     	; 0x8e32 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    8e02:	8b 81       	ldd	r24, Y+3	; 0x03
    8e04:	8f 3f       	cpi	r24, 0xFF	; 255
    8e06:	01 f5       	brne	.+64     	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    8e08:	8c 81       	ldd	r24, Y+4	; 0x04
    8e0a:	8f 3f       	cpi	r24, 0xFF	; 255
    8e0c:	e9 f4       	brne	.+58     	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    8e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    8e10:	8f 3f       	cpi	r24, 0xFF	; 255
    8e12:	d1 f4       	brne	.+52     	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    8e14:	88 e0       	ldi	r24, 0x08	; 8
    8e16:	f8 01       	movw	r30, r16
    8e18:	84 87       	std	Z+12, r24	; 0x0c
    8e1a:	c3 cf       	rjmp	.-122    	; 0x8da2 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    8e1c:	8b 7f       	andi	r24, 0xFB	; 251
    8e1e:	88 31       	cpi	r24, 0x18	; 24
    8e20:	a9 f2       	breq	.-86     	; 0x8dcc <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    8e22:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    8e24:	f8 e0       	ldi	r31, 0x08	; 8
    8e26:	df 12       	cpse	r13, r31
    8e28:	ca cf       	rjmp	.-108    	; 0x8dbe <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    8e2a:	d2 cf       	rjmp	.-92     	; 0x8dd0 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    8e2c:	20 e0       	ldi	r18, 0x00	; 0
    8e2e:	34 e0       	ldi	r19, 0x04	; 4
    8e30:	da cf       	rjmp	.-76     	; 0x8de6 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    8e32:	81 11       	cpse	r24, r1
    8e34:	09 c0       	rjmp	.+18     	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    8e36:	8b 81       	ldd	r24, Y+3	; 0x03
    8e38:	81 11       	cpse	r24, r1
    8e3a:	06 c0       	rjmp	.+12     	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    8e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    8e3e:	81 11       	cpse	r24, r1
    8e40:	03 c0       	rjmp	.+6      	; 0x8e48 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    8e42:	8d 81       	ldd	r24, Y+5	; 0x05
    8e44:	88 23       	and	r24, r24
    8e46:	31 f3       	breq	.-52     	; 0x8e14 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    8e48:	e1 14       	cp	r14, r1
    8e4a:	f1 04       	cpc	r15, r1
    8e4c:	19 f3       	breq	.-58     	; 0x8e14 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    8e4e:	f8 01       	movw	r30, r16
    8e50:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    8e52:	ae 01       	movw	r20, r28
    8e54:	4e 5f       	subi	r20, 0xFE	; 254
    8e56:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    8e58:	6d 2d       	mov	r22, r13
    8e5a:	62 95       	swap	r22
    8e5c:	66 0f       	add	r22, r22
    8e5e:	60 7e       	andi	r22, 0xE0	; 224
    8e60:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    8e62:	24 e0       	ldi	r18, 0x04	; 4
    8e64:	30 e0       	ldi	r19, 0x00	; 0
    8e66:	8c e0       	ldi	r24, 0x0C	; 12
    8e68:	90 e0       	ldi	r25, 0x00	; 0
    8e6a:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    8e6e:	4f 2d       	mov	r20, r15
    8e70:	60 e1       	ldi	r22, 0x10	; 16
    8e72:	70 e0       	ldi	r23, 0x00	; 0
    8e74:	8d 2d       	mov	r24, r13
    8e76:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    8e7a:	4e 2d       	mov	r20, r14
    8e7c:	61 e1       	ldi	r22, 0x11	; 17
    8e7e:	70 e0       	ldi	r23, 0x00	; 0
    8e80:	8d 2d       	mov	r24, r13
    8e82:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    8e86:	64 e0       	ldi	r22, 0x04	; 4
    8e88:	70 e0       	ldi	r23, 0x00	; 0
    8e8a:	8d 2d       	mov	r24, r13
    8e8c:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    8e90:	c8 01       	movw	r24, r16
    8e92:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <EthernetClient::status()>
    8e96:	87 31       	cpi	r24, 0x17	; 23
    8e98:	61 f0       	breq	.+24     	; 0x8eb2 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    8e9a:	61 e0       	ldi	r22, 0x01	; 1
    8e9c:	70 e0       	ldi	r23, 0x00	; 0
    8e9e:	80 e0       	ldi	r24, 0x00	; 0
    8ea0:	90 e0       	ldi	r25, 0x00	; 0
    8ea2:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    8ea6:	c8 01       	movw	r24, r16
    8ea8:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <EthernetClient::status()>
    8eac:	81 11       	cpse	r24, r1
    8eae:	f0 cf       	rjmp	.-32     	; 0x8e90 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    8eb0:	b1 cf       	rjmp	.-158    	; 0x8e14 <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    8eb2:	81 e0       	ldi	r24, 0x01	; 1
    8eb4:	90 e0       	ldi	r25, 0x00	; 0
    8eb6:	77 cf       	rjmp	.-274    	; 0x8da6 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

00008eb8 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    8eb8:	4f 92       	push	r4
    8eba:	5f 92       	push	r5
    8ebc:	6f 92       	push	r6
    8ebe:	7f 92       	push	r7
    8ec0:	8f 92       	push	r8
    8ec2:	9f 92       	push	r9
    8ec4:	af 92       	push	r10
    8ec6:	bf 92       	push	r11
    8ec8:	cf 92       	push	r12
    8eca:	df 92       	push	r13
    8ecc:	ef 92       	push	r14
    8ece:	ff 92       	push	r15
    8ed0:	0f 93       	push	r16
    8ed2:	1f 93       	push	r17
    8ed4:	cf 93       	push	r28
    8ed6:	df 93       	push	r29
    8ed8:	cd b7       	in	r28, 0x3d	; 61
    8eda:	de b7       	in	r29, 0x3e	; 62
    8edc:	63 97       	sbiw	r28, 0x13	; 19
    8ede:	0f b6       	in	r0, 0x3f	; 63
    8ee0:	f8 94       	cli
    8ee2:	de bf       	out	0x3e, r29	; 62
    8ee4:	0f be       	out	0x3f, r0	; 63
    8ee6:	cd bf       	out	0x3d, r28	; 61
    8ee8:	7c 01       	movw	r14, r24
    8eea:	6b 01       	movw	r12, r22
    8eec:	3a 01       	movw	r6, r20
    8eee:	fb 01       	movw	r30, r22
    8ef0:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    8ef2:	8d 91       	ld	r24, X+
    8ef4:	81 11       	cpse	r24, r1
    8ef6:	fd cf       	rjmp	.-6      	; 0x8ef2 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    8ef8:	30 e0       	ldi	r19, 0x00	; 0
    8efa:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    8efc:	90 e0       	ldi	r25, 0x00	; 0
    8efe:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    8f00:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    8f02:	41 91       	ld	r20, Z+
    8f04:	44 23       	and	r20, r20
    8f06:	01 f1       	breq	.+64     	; 0x8f48 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    8f08:	84 30       	cpi	r24, 0x04	; 4
    8f0a:	91 05       	cpc	r25, r1
    8f0c:	0c f0       	brlt	.+2      	; 0x8f10 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    8f0e:	42 c0       	rjmp	.+132    	; 0x8f94 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    8f10:	4e 32       	cpi	r20, 0x2E	; 46
    8f12:	69 f4       	brne	.+26     	; 0x8f2e <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    8f14:	2f 3f       	cpi	r18, 0xFF	; 255
    8f16:	31 05       	cpc	r19, r1
    8f18:	09 f0       	breq	.+2      	; 0x8f1c <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    8f1a:	e4 f5       	brge	.+120    	; 0x8f94 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    8f1c:	d3 01       	movw	r26, r6
    8f1e:	a8 0f       	add	r26, r24
    8f20:	b9 1f       	adc	r27, r25
    8f22:	12 96       	adiw	r26, 0x02	; 2
    8f24:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    8f26:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    8f28:	30 e0       	ldi	r19, 0x00	; 0
    8f2a:	20 e0       	ldi	r18, 0x00	; 0
    8f2c:	ea cf       	rjmp	.-44     	; 0x8f02 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    8f2e:	52 9f       	mul	r21, r18
    8f30:	b0 01       	movw	r22, r0
    8f32:	53 9f       	mul	r21, r19
    8f34:	70 0d       	add	r23, r0
    8f36:	11 24       	eor	r1, r1
    8f38:	24 2f       	mov	r18, r20
    8f3a:	44 0f       	add	r20, r20
    8f3c:	33 0b       	sbc	r19, r19
    8f3e:	20 53       	subi	r18, 0x30	; 48
    8f40:	31 09       	sbc	r19, r1
    8f42:	26 0f       	add	r18, r22
    8f44:	37 1f       	adc	r19, r23
    8f46:	dd cf       	rjmp	.-70     	; 0x8f02 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    8f48:	2f 3f       	cpi	r18, 0xFF	; 255
    8f4a:	31 05       	cpc	r19, r1
    8f4c:	09 f0       	breq	.+2      	; 0x8f50 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    8f4e:	14 f5       	brge	.+68     	; 0x8f94 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    8f50:	84 30       	cpi	r24, 0x04	; 4
    8f52:	91 05       	cpc	r25, r1
    8f54:	fc f4       	brge	.+62     	; 0x8f94 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    8f56:	68 0e       	add	r6, r24
    8f58:	79 1e       	adc	r7, r25
    8f5a:	f3 01       	movw	r30, r6
    8f5c:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    8f5e:	cc 24       	eor	r12, r12
    8f60:	c3 94       	inc	r12
    8f62:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    8f64:	c6 01       	movw	r24, r12
    8f66:	63 96       	adiw	r28, 0x13	; 19
    8f68:	0f b6       	in	r0, 0x3f	; 63
    8f6a:	f8 94       	cli
    8f6c:	de bf       	out	0x3e, r29	; 62
    8f6e:	0f be       	out	0x3f, r0	; 63
    8f70:	cd bf       	out	0x3d, r28	; 61
    8f72:	df 91       	pop	r29
    8f74:	cf 91       	pop	r28
    8f76:	1f 91       	pop	r17
    8f78:	0f 91       	pop	r16
    8f7a:	ff 90       	pop	r15
    8f7c:	ef 90       	pop	r14
    8f7e:	df 90       	pop	r13
    8f80:	cf 90       	pop	r12
    8f82:	bf 90       	pop	r11
    8f84:	af 90       	pop	r10
    8f86:	9f 90       	pop	r9
    8f88:	8f 90       	pop	r8
    8f8a:	7f 90       	pop	r7
    8f8c:	6f 90       	pop	r6
    8f8e:	5f 90       	pop	r5
    8f90:	4f 90       	pop	r4
    8f92:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    8f94:	f7 01       	movw	r30, r14
    8f96:	42 81       	ldd	r20, Z+2	; 0x02
    8f98:	53 81       	ldd	r21, Z+3	; 0x03
    8f9a:	64 81       	ldd	r22, Z+4	; 0x04
    8f9c:	75 81       	ldd	r23, Z+5	; 0x05
    8f9e:	80 91 a2 0c 	lds	r24, 0x0CA2	; 0x800ca2 <_ZL11INADDR_NONE.lto_priv.201+0x2>
    8fa2:	90 91 a3 0c 	lds	r25, 0x0CA3	; 0x800ca3 <_ZL11INADDR_NONE.lto_priv.201+0x3>
    8fa6:	a0 91 a4 0c 	lds	r26, 0x0CA4	; 0x800ca4 <_ZL11INADDR_NONE.lto_priv.201+0x4>
    8faa:	b0 91 a5 0c 	lds	r27, 0x0CA5	; 0x800ca5 <_ZL11INADDR_NONE.lto_priv.201+0x5>
    8fae:	48 17       	cp	r20, r24
    8fb0:	59 07       	cpc	r21, r25
    8fb2:	6a 07       	cpc	r22, r26
    8fb4:	7b 07       	cpc	r23, r27
    8fb6:	09 f4       	brne	.+2      	; 0x8fba <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    8fb8:	00 c2       	rjmp	.+1024   	; 0x93ba <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    8fba:	87 01       	movw	r16, r14
    8fbc:	08 5f       	subi	r16, 0xF8	; 248
    8fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    8fc0:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    8fc4:	6f 70       	andi	r22, 0x0F	; 15
    8fc6:	77 27       	eor	r23, r23
    8fc8:	7c 5f       	subi	r23, 0xFC	; 252
    8fca:	c8 01       	movw	r24, r16
    8fcc:	0e 94 46 b3 	call	0x1668c	; 0x1668c <EthernetUDP::begin(unsigned int)>
    8fd0:	81 30       	cpi	r24, 0x01	; 1
    8fd2:	09 f0       	breq	.+2      	; 0x8fd6 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    8fd4:	f7 c1       	rjmp	.+1006   	; 0x93c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    8fd6:	82 ee       	ldi	r24, 0xE2	; 226
    8fd8:	92 e0       	ldi	r25, 0x02	; 2
    8fda:	9a 83       	std	Y+2, r25	; 0x02
    8fdc:	89 83       	std	Y+1, r24	; 0x01
    8fde:	f7 01       	movw	r30, r14
    8fe0:	82 81       	ldd	r24, Z+2	; 0x02
    8fe2:	93 81       	ldd	r25, Z+3	; 0x03
    8fe4:	a4 81       	ldd	r26, Z+4	; 0x04
    8fe6:	b5 81       	ldd	r27, Z+5	; 0x05
    8fe8:	8b 83       	std	Y+3, r24	; 0x03
    8fea:	9c 83       	std	Y+4, r25	; 0x04
    8fec:	ad 83       	std	Y+5, r26	; 0x05
    8fee:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    8ff0:	45 e3       	ldi	r20, 0x35	; 53
    8ff2:	50 e0       	ldi	r21, 0x00	; 0
    8ff4:	be 01       	movw	r22, r28
    8ff6:	6f 5f       	subi	r22, 0xFF	; 255
    8ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    8ffa:	c8 01       	movw	r24, r16
    8ffc:	0e 94 aa b3 	call	0x16754	; 0x16754 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    9000:	89 2b       	or	r24, r25
    9002:	31 f4       	brne	.+12     	; 0x9010 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    9004:	d1 2c       	mov	r13, r1
    9006:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    9008:	c8 01       	movw	r24, r16
    900a:	0e 94 74 b3 	call	0x166e8	; 0x166e8 <EthernetUDP::stop()>
    900e:	aa cf       	rjmp	.-172    	; 0x8f64 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    9010:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    9014:	f7 01       	movw	r30, r14
    9016:	77 83       	std	Z+7, r23	; 0x07
    9018:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    901a:	42 e0       	ldi	r20, 0x02	; 2
    901c:	50 e0       	ldi	r21, 0x00	; 0
    901e:	b7 01       	movw	r22, r14
    9020:	6a 5f       	subi	r22, 0xFA	; 250
    9022:	7f 4f       	sbci	r23, 0xFF	; 255
    9024:	c8 01       	movw	r24, r16
    9026:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    902a:	81 e0       	ldi	r24, 0x01	; 1
    902c:	90 e0       	ldi	r25, 0x00	; 0
    902e:	9a 83       	std	Y+2, r25	; 0x02
    9030:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    9032:	42 e0       	ldi	r20, 0x02	; 2
    9034:	50 e0       	ldi	r21, 0x00	; 0
    9036:	be 01       	movw	r22, r28
    9038:	6f 5f       	subi	r22, 0xFF	; 255
    903a:	7f 4f       	sbci	r23, 0xFF	; 255
    903c:	c8 01       	movw	r24, r16
    903e:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    9042:	80 e0       	ldi	r24, 0x00	; 0
    9044:	91 e0       	ldi	r25, 0x01	; 1
    9046:	9a 83       	std	Y+2, r25	; 0x02
    9048:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    904a:	42 e0       	ldi	r20, 0x02	; 2
    904c:	50 e0       	ldi	r21, 0x00	; 0
    904e:	be 01       	movw	r22, r28
    9050:	6f 5f       	subi	r22, 0xFF	; 255
    9052:	7f 4f       	sbci	r23, 0xFF	; 255
    9054:	c8 01       	movw	r24, r16
    9056:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    905a:	1a 82       	std	Y+2, r1	; 0x02
    905c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    905e:	42 e0       	ldi	r20, 0x02	; 2
    9060:	50 e0       	ldi	r21, 0x00	; 0
    9062:	be 01       	movw	r22, r28
    9064:	6f 5f       	subi	r22, 0xFF	; 255
    9066:	7f 4f       	sbci	r23, 0xFF	; 255
    9068:	c8 01       	movw	r24, r16
    906a:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    906e:	42 e0       	ldi	r20, 0x02	; 2
    9070:	50 e0       	ldi	r21, 0x00	; 0
    9072:	be 01       	movw	r22, r28
    9074:	6f 5f       	subi	r22, 0xFF	; 255
    9076:	7f 4f       	sbci	r23, 0xFF	; 255
    9078:	c8 01       	movw	r24, r16
    907a:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    907e:	42 e0       	ldi	r20, 0x02	; 2
    9080:	50 e0       	ldi	r21, 0x00	; 0
    9082:	be 01       	movw	r22, r28
    9084:	6f 5f       	subi	r22, 0xFF	; 255
    9086:	7f 4f       	sbci	r23, 0xFF	; 255
    9088:	c8 01       	movw	r24, r16
    908a:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    908e:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    9090:	f6 01       	movw	r30, r12
    9092:	80 81       	ld	r24, Z
    9094:	88 23       	and	r24, r24
    9096:	01 f1       	breq	.+64     	; 0x90d8 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    9098:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    909a:	f6 01       	movw	r30, r12
    909c:	81 91       	ld	r24, Z+
    909e:	2f 01       	movw	r4, r30
    90a0:	88 23       	and	r24, r24
    90a2:	11 f0       	breq	.+4      	; 0x90a8 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    90a4:	8e 32       	cpi	r24, 0x2E	; 46
    90a6:	b1 f4       	brne	.+44     	; 0x90d4 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    90a8:	46 01       	movw	r8, r12
    90aa:	8a 18       	sub	r8, r10
    90ac:	9b 08       	sbc	r9, r11
    90ae:	18 14       	cp	r1, r8
    90b0:	19 04       	cpc	r1, r9
    90b2:	74 f4       	brge	.+28     	; 0x90d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    90b4:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    90b6:	41 e0       	ldi	r20, 0x01	; 1
    90b8:	50 e0       	ldi	r21, 0x00	; 0
    90ba:	be 01       	movw	r22, r28
    90bc:	63 5f       	subi	r22, 0xF3	; 243
    90be:	7f 4f       	sbci	r23, 0xFF	; 255
    90c0:	c8 01       	movw	r24, r16
    90c2:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    90c6:	a4 01       	movw	r20, r8
    90c8:	b5 01       	movw	r22, r10
    90ca:	c8 01       	movw	r24, r16
    90cc:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    90d0:	52 01       	movw	r10, r4
    90d2:	de cf       	rjmp	.-68     	; 0x9090 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    90d4:	62 01       	movw	r12, r4
    90d6:	e1 cf       	rjmp	.-62     	; 0x909a <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    90d8:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    90da:	41 e0       	ldi	r20, 0x01	; 1
    90dc:	50 e0       	ldi	r21, 0x00	; 0
    90de:	be 01       	movw	r22, r28
    90e0:	63 5f       	subi	r22, 0xF3	; 243
    90e2:	7f 4f       	sbci	r23, 0xFF	; 255
    90e4:	c8 01       	movw	r24, r16
    90e6:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    90ea:	c1 2c       	mov	r12, r1
    90ec:	dd 24       	eor	r13, r13
    90ee:	d3 94       	inc	r13
    90f0:	da 82       	std	Y+2, r13	; 0x02
    90f2:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    90f4:	42 e0       	ldi	r20, 0x02	; 2
    90f6:	50 e0       	ldi	r21, 0x00	; 0
    90f8:	be 01       	movw	r22, r28
    90fa:	6f 5f       	subi	r22, 0xFF	; 255
    90fc:	7f 4f       	sbci	r23, 0xFF	; 255
    90fe:	c8 01       	movw	r24, r16
    9100:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    9104:	da 82       	std	Y+2, r13	; 0x02
    9106:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    9108:	42 e0       	ldi	r20, 0x02	; 2
    910a:	50 e0       	ldi	r21, 0x00	; 0
    910c:	be 01       	movw	r22, r28
    910e:	6f 5f       	subi	r22, 0xFF	; 255
    9110:	7f 4f       	sbci	r23, 0xFF	; 255
    9112:	c8 01       	movw	r24, r16
    9114:	0e 94 6b b1 	call	0x162d6	; 0x162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    9118:	c8 01       	movw	r24, r16
    911a:	0e 94 81 b3 	call	0x16702	; 0x16702 <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    911e:	89 2b       	or	r24, r25
    9120:	09 f4       	brne	.+2      	; 0x9124 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    9122:	70 cf       	rjmp	.-288    	; 0x9004 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    9124:	f3 e0       	ldi	r31, 0x03	; 3
    9126:	af 2e       	mov	r10, r31
    9128:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    912a:	23 01       	movw	r4, r6
    912c:	22 e0       	ldi	r18, 0x02	; 2
    912e:	42 0e       	add	r4, r18
    9130:	51 1c       	adc	r5, r1
    9132:	43 c0       	rjmp	.+134    	; 0x91ba <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    9134:	f7 01       	movw	r30, r14
    9136:	42 81       	ldd	r20, Z+2	; 0x02
    9138:	53 81       	ldd	r21, Z+3	; 0x03
    913a:	64 81       	ldd	r22, Z+4	; 0x04
    913c:	75 81       	ldd	r23, Z+5	; 0x05
    913e:	81 8d       	ldd	r24, Z+25	; 0x19
    9140:	92 8d       	ldd	r25, Z+26	; 0x1a
    9142:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9144:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9146:	48 17       	cp	r20, r24
    9148:	59 07       	cpc	r21, r25
    914a:	6a 07       	cpc	r22, r26
    914c:	7b 07       	cpc	r23, r27
    914e:	09 f0       	breq	.+2      	; 0x9152 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    9150:	2a c1       	rjmp	.+596    	; 0x93a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    9152:	85 8d       	ldd	r24, Z+29	; 0x1d
    9154:	96 8d       	ldd	r25, Z+30	; 0x1e
    9156:	c5 97       	sbiw	r24, 0x35	; 53
    9158:	09 f0       	breq	.+2      	; 0x915c <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    915a:	25 c1       	rjmp	.+586    	; 0x93a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    915c:	81 a1       	ldd	r24, Z+33	; 0x21
    915e:	92 a1       	ldd	r25, Z+34	; 0x22
    9160:	0c 97       	sbiw	r24, 0x0c	; 12
    9162:	0c f4       	brge	.+2      	; 0x9166 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    9164:	25 c1       	rjmp	.+586    	; 0x93b0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    9166:	4c e0       	ldi	r20, 0x0C	; 12
    9168:	50 e0       	ldi	r21, 0x00	; 0
    916a:	be 01       	movw	r22, r28
    916c:	6f 5f       	subi	r22, 0xFF	; 255
    916e:	7f 4f       	sbci	r23, 0xFF	; 255
    9170:	c8 01       	movw	r24, r16
    9172:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    9176:	8b 81       	ldd	r24, Y+3	; 0x03
    9178:	9c 81       	ldd	r25, Y+4	; 0x04
    917a:	98 27       	eor	r25, r24
    917c:	89 27       	eor	r24, r25
    917e:	98 27       	eor	r25, r24
    9180:	9a 8b       	std	Y+18, r25	; 0x12
    9182:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    9184:	f7 01       	movw	r30, r14
    9186:	46 81       	ldd	r20, Z+6	; 0x06
    9188:	57 81       	ldd	r21, Z+7	; 0x07
    918a:	29 81       	ldd	r18, Y+1	; 0x01
    918c:	3a 81       	ldd	r19, Y+2	; 0x02
    918e:	42 17       	cp	r20, r18
    9190:	53 07       	cpc	r21, r19
    9192:	11 f4       	brne	.+4      	; 0x9198 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    9194:	97 fd       	sbrc	r25, 7
    9196:	2f c0       	rjmp	.+94     	; 0x91f6 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    9198:	c8 01       	movw	r24, r16
    919a:	0e 94 fb 97 	call	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    919e:	ec ef       	ldi	r30, 0xFC	; 252
    91a0:	ce 2e       	mov	r12, r30
    91a2:	dd 24       	eor	r13, r13
    91a4:	da 94       	dec	r13
    91a6:	81 e0       	ldi	r24, 0x01	; 1
    91a8:	a8 1a       	sub	r10, r24
    91aa:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    91ac:	09 f4       	brne	.+2      	; 0x91b0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    91ae:	2c cf       	rjmp	.-424    	; 0x9008 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    91b0:	ff ef       	ldi	r31, 0xFF	; 255
    91b2:	cf 16       	cp	r12, r31
    91b4:	df 06       	cpc	r13, r31
    91b6:	09 f0       	breq	.+2      	; 0x91ba <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    91b8:	27 cf       	rjmp	.-434    	; 0x9008 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    91ba:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    91be:	3b 01       	movw	r6, r22
    91c0:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    91c2:	c8 01       	movw	r24, r16
    91c4:	0e 94 99 b2 	call	0x16532	; 0x16532 <EthernetUDP::parsePacket()>
    91c8:	18 16       	cp	r1, r24
    91ca:	19 06       	cpc	r1, r25
    91cc:	0c f4       	brge	.+2      	; 0x91d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    91ce:	b2 cf       	rjmp	.-156    	; 0x9134 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    91d0:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
    91d4:	66 19       	sub	r22, r6
    91d6:	77 09       	sbc	r23, r7
    91d8:	88 09       	sbc	r24, r8
    91da:	99 09       	sbc	r25, r9
    91dc:	69 38       	cpi	r22, 0x89	; 137
    91de:	73 41       	sbci	r23, 0x13	; 19
    91e0:	81 05       	cpc	r24, r1
    91e2:	91 05       	cpc	r25, r1
    91e4:	08 f0       	brcs	.+2      	; 0x91e8 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    91e6:	db c0       	rjmp	.+438    	; 0x939e <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    91e8:	62 e3       	ldi	r22, 0x32	; 50
    91ea:	70 e0       	ldi	r23, 0x00	; 0
    91ec:	80 e0       	ldi	r24, 0x00	; 0
    91ee:	90 e0       	ldi	r25, 0x00	; 0
    91f0:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
    91f4:	e6 cf       	rjmp	.-52     	; 0x91c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    91f6:	8f 70       	andi	r24, 0x0F	; 15
    91f8:	92 70       	andi	r25, 0x02	; 2
    91fa:	89 2b       	or	r24, r25
    91fc:	41 f0       	breq	.+16     	; 0x920e <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    91fe:	c8 01       	movw	r24, r16
    9200:	0e 94 fb 97 	call	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    9204:	7b ef       	ldi	r23, 0xFB	; 251
    9206:	c7 2e       	mov	r12, r23
    9208:	dd 24       	eor	r13, r13
    920a:	da 94       	dec	r13
    920c:	cc cf       	rjmp	.-104    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    920e:	6f 80       	ldd	r6, Y+7	; 0x07
    9210:	78 84       	ldd	r7, Y+8	; 0x08
    9212:	76 24       	eor	r7, r6
    9214:	67 24       	eor	r6, r7
    9216:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    9218:	d1 2c       	mov	r13, r1
    921a:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    921c:	61 14       	cp	r6, r1
    921e:	71 04       	cpc	r7, r1
    9220:	d1 f4       	brne	.+52     	; 0x9256 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    9222:	c8 01       	movw	r24, r16
    9224:	0e 94 fb 97 	call	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    9228:	6a ef       	ldi	r22, 0xFA	; 250
    922a:	c6 2e       	mov	r12, r22
    922c:	dd 24       	eor	r13, r13
    922e:	da 94       	dec	r13
    9230:	ba cf       	rjmp	.-140    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    9232:	8d 85       	ldd	r24, Y+13	; 0x0d
    9234:	81 11       	cpse	r24, r1
    9236:	17 c0       	rjmp	.+46     	; 0x9266 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    9238:	c8 01       	movw	r24, r16
    923a:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    923e:	c8 01       	movw	r24, r16
    9240:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    9244:	c8 01       	movw	r24, r16
    9246:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    924a:	c8 01       	movw	r24, r16
    924c:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    9250:	ff ef       	ldi	r31, 0xFF	; 255
    9252:	cf 1a       	sub	r12, r31
    9254:	df 0a       	sbc	r13, r31
    9256:	8d 81       	ldd	r24, Y+5	; 0x05
    9258:	9e 81       	ldd	r25, Y+6	; 0x06
    925a:	98 27       	eor	r25, r24
    925c:	89 27       	eor	r24, r25
    925e:	98 27       	eor	r25, r24
    9260:	c8 16       	cp	r12, r24
    9262:	d9 06       	cpc	r13, r25
    9264:	a8 f4       	brcc	.+42     	; 0x9290 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    9266:	41 e0       	ldi	r20, 0x01	; 1
    9268:	50 e0       	ldi	r21, 0x00	; 0
    926a:	be 01       	movw	r22, r28
    926c:	63 5f       	subi	r22, 0xF3	; 243
    926e:	7f 4f       	sbci	r23, 0xFF	; 255
    9270:	c8 01       	movw	r24, r16
    9272:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    9276:	8d 85       	ldd	r24, Y+13	; 0x0d
    9278:	88 23       	and	r24, r24
    927a:	d9 f2       	breq	.-74     	; 0x9232 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    927c:	8d 85       	ldd	r24, Y+13	; 0x0d
    927e:	9f ef       	ldi	r25, 0xFF	; 255
    9280:	98 0f       	add	r25, r24
    9282:	9d 87       	std	Y+13, r25	; 0x0d
    9284:	88 23       	and	r24, r24
    9286:	a9 f2       	breq	.-86     	; 0x9232 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    9288:	c8 01       	movw	r24, r16
    928a:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    928e:	f6 cf       	rjmp	.-20     	; 0x927c <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    9290:	91 2c       	mov	r9, r1
    9292:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    9294:	41 e0       	ldi	r20, 0x01	; 1
    9296:	50 e0       	ldi	r21, 0x00	; 0
    9298:	be 01       	movw	r22, r28
    929a:	6d 5e       	subi	r22, 0xED	; 237
    929c:	7f 4f       	sbci	r23, 0xFF	; 255
    929e:	c8 01       	movw	r24, r16
    92a0:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    92a4:	8b 89       	ldd	r24, Y+19	; 0x13
    92a6:	98 2f       	mov	r25, r24
    92a8:	90 7c       	andi	r25, 0xC0	; 192
    92aa:	61 f4       	brne	.+24     	; 0x92c4 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    92ac:	88 23       	and	r24, r24
    92ae:	89 f0       	breq	.+34     	; 0x92d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    92b0:	8b 89       	ldd	r24, Y+19	; 0x13
    92b2:	9f ef       	ldi	r25, 0xFF	; 255
    92b4:	98 0f       	add	r25, r24
    92b6:	9b 8b       	std	Y+19, r25	; 0x13
    92b8:	88 23       	and	r24, r24
    92ba:	41 f0       	breq	.+16     	; 0x92cc <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    92bc:	c8 01       	movw	r24, r16
    92be:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    92c2:	f6 cf       	rjmp	.-20     	; 0x92b0 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    92c4:	c8 01       	movw	r24, r16
    92c6:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    92ca:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    92cc:	8b 89       	ldd	r24, Y+19	; 0x13
    92ce:	81 11       	cpse	r24, r1
    92d0:	e1 cf       	rjmp	.-62     	; 0x9294 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    92d2:	42 e0       	ldi	r20, 0x02	; 2
    92d4:	50 e0       	ldi	r21, 0x00	; 0
    92d6:	be 01       	movw	r22, r28
    92d8:	61 5f       	subi	r22, 0xF1	; 241
    92da:	7f 4f       	sbci	r23, 0xFF	; 255
    92dc:	c8 01       	movw	r24, r16
    92de:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    92e2:	42 e0       	ldi	r20, 0x02	; 2
    92e4:	50 e0       	ldi	r21, 0x00	; 0
    92e6:	be 01       	movw	r22, r28
    92e8:	63 5f       	subi	r22, 0xF3	; 243
    92ea:	7f 4f       	sbci	r23, 0xFF	; 255
    92ec:	c8 01       	movw	r24, r16
    92ee:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    92f2:	c8 01       	movw	r24, r16
    92f4:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    92f8:	c8 01       	movw	r24, r16
    92fa:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    92fe:	c8 01       	movw	r24, r16
    9300:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
    9304:	c8 01       	movw	r24, r16
    9306:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    930a:	42 e0       	ldi	r20, 0x02	; 2
    930c:	50 e0       	ldi	r21, 0x00	; 0
    930e:	be 01       	movw	r22, r28
    9310:	6f 5e       	subi	r22, 0xEF	; 239
    9312:	7f 4f       	sbci	r23, 0xFF	; 255
    9314:	c8 01       	movw	r24, r16
    9316:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    931a:	8f 85       	ldd	r24, Y+15	; 0x0f
    931c:	98 89       	ldd	r25, Y+16	; 0x10
    931e:	81 15       	cp	r24, r1
    9320:	91 40       	sbci	r25, 0x01	; 1
    9322:	e9 f4       	brne	.+58     	; 0x935e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    9324:	cd 84       	ldd	r12, Y+13	; 0x0d
    9326:	de 84       	ldd	r13, Y+14	; 0x0e
    9328:	dc 24       	eor	r13, r12
    932a:	cd 24       	eor	r12, r13
    932c:	dc 24       	eor	r13, r12
    932e:	81 e0       	ldi	r24, 0x01	; 1
    9330:	c8 16       	cp	r12, r24
    9332:	d1 04       	cpc	r13, r1
    9334:	a1 f4       	brne	.+40     	; 0x935e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    9336:	89 89       	ldd	r24, Y+17	; 0x11
    9338:	9a 89       	ldd	r25, Y+18	; 0x12
    933a:	81 15       	cp	r24, r1
    933c:	94 40       	sbci	r25, 0x04	; 4
    933e:	41 f0       	breq	.+16     	; 0x9350 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    9340:	c8 01       	movw	r24, r16
    9342:	0e 94 fb 97 	call	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    9346:	57 ef       	ldi	r21, 0xF7	; 247
    9348:	c5 2e       	mov	r12, r21
    934a:	dd 24       	eor	r13, r13
    934c:	da 94       	dec	r13
    934e:	2b cf       	rjmp	.-426    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    9350:	44 e0       	ldi	r20, 0x04	; 4
    9352:	50 e0       	ldi	r21, 0x00	; 0
    9354:	b2 01       	movw	r22, r4
    9356:	c8 01       	movw	r24, r16
    9358:	0e 94 50 b2 	call	0x164a0	; 0x164a0 <EthernetUDP::read(unsigned char*, unsigned int)>
    935c:	24 cf       	rjmp	.-440    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    935e:	d1 2c       	mov	r13, r1
    9360:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    9362:	89 89       	ldd	r24, Y+17	; 0x11
    9364:	9a 89       	ldd	r25, Y+18	; 0x12
    9366:	98 27       	eor	r25, r24
    9368:	89 27       	eor	r24, r25
    936a:	98 27       	eor	r25, r24
    936c:	c8 16       	cp	r12, r24
    936e:	d9 06       	cpc	r13, r25
    9370:	38 f4       	brcc	.+14     	; 0x9380 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    9372:	c8 01       	movw	r24, r16
    9374:	0e 94 6f b2 	call	0x164de	; 0x164de <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    9378:	ff ef       	ldi	r31, 0xFF	; 255
    937a:	cf 1a       	sub	r12, r31
    937c:	df 0a       	sbc	r13, r31
    937e:	f1 cf       	rjmp	.-30     	; 0x9362 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    9380:	2f ef       	ldi	r18, 0xFF	; 255
    9382:	82 1a       	sub	r8, r18
    9384:	92 0a       	sbc	r9, r18
    9386:	68 14       	cp	r6, r8
    9388:	79 04       	cpc	r7, r9
    938a:	09 f0       	breq	.+2      	; 0x938e <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    938c:	83 cf       	rjmp	.-250    	; 0x9294 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    938e:	c8 01       	movw	r24, r16
    9390:	0e 94 fb 97 	call	0x12ff6	; 0x12ff6 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    9394:	46 ef       	ldi	r20, 0xF6	; 246
    9396:	c4 2e       	mov	r12, r20
    9398:	dd 24       	eor	r13, r13
    939a:	da 94       	dec	r13
    939c:	04 cf       	rjmp	.-504    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    939e:	cc 24       	eor	r12, r12
    93a0:	ca 94       	dec	r12
    93a2:	dc 2c       	mov	r13, r12
    93a4:	00 cf       	rjmp	.-512    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    93a6:	2e ef       	ldi	r18, 0xFE	; 254
    93a8:	c2 2e       	mov	r12, r18
    93aa:	dd 24       	eor	r13, r13
    93ac:	da 94       	dec	r13
    93ae:	fb ce       	rjmp	.-522    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    93b0:	9d ef       	ldi	r25, 0xFD	; 253
    93b2:	c9 2e       	mov	r12, r25
    93b4:	dd 24       	eor	r13, r13
    93b6:	da 94       	dec	r13
    93b8:	f6 ce       	rjmp	.-532    	; 0x91a6 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    93ba:	8e ef       	ldi	r24, 0xFE	; 254
    93bc:	c8 2e       	mov	r12, r24
    93be:	dd 24       	eor	r13, r13
    93c0:	da 94       	dec	r13
    93c2:	d0 cd       	rjmp	.-1120   	; 0x8f64 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    93c4:	d1 2c       	mov	r13, r1
    93c6:	c1 2c       	mov	r12, r1
    93c8:	cd cd       	rjmp	.-1126   	; 0x8f64 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

000093ca <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    93ca:	cf 92       	push	r12
    93cc:	df 92       	push	r13
    93ce:	ef 92       	push	r14
    93d0:	ff 92       	push	r15
    93d2:	0f 93       	push	r16
    93d4:	1f 93       	push	r17
    93d6:	cf 93       	push	r28
    93d8:	df 93       	push	r29
    93da:	cd b7       	in	r28, 0x3d	; 61
    93dc:	de b7       	in	r29, 0x3e	; 62
    93de:	af 97       	sbiw	r28, 0x2f	; 47
    93e0:	0f b6       	in	r0, 0x3f	; 63
    93e2:	f8 94       	cli
    93e4:	de bf       	out	0x3e, r29	; 62
    93e6:	0f be       	out	0x3f, r0	; 63
    93e8:	cd bf       	out	0x3d, r28	; 61
    93ea:	7c 01       	movw	r14, r24
    93ec:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    93ee:	02 ee       	ldi	r16, 0xE2	; 226
    93f0:	12 e0       	ldi	r17, 0x02	; 2
    93f2:	1a 83       	std	Y+2, r17	; 0x02
    93f4:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    93f6:	1c 86       	std	Y+12, r1	; 0x0c
    93f8:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    93fa:	88 ee       	ldi	r24, 0xE8	; 232
    93fc:	93 e0       	ldi	r25, 0x03	; 3
    93fe:	a0 e0       	ldi	r26, 0x00	; 0
    9400:	b0 e0       	ldi	r27, 0x00	; 0
    9402:	8d 87       	std	Y+13, r24	; 0x0d
    9404:	9e 87       	std	Y+14, r25	; 0x0e
    9406:	af 87       	std	Y+15, r26	; 0x0f
    9408:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    940a:	88 e9       	ldi	r24, 0x98	; 152
    940c:	92 e0       	ldi	r25, 0x02	; 2
    940e:	9a 87       	std	Y+10, r25	; 0x0a
    9410:	89 87       	std	Y+9, r24	; 0x09
    9412:	88 e0       	ldi	r24, 0x08	; 8
    9414:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
    9416:	19 8f       	std	Y+25, r17	; 0x19
    9418:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    941a:	1a 8e       	std	Y+26, r1	; 0x1a
    941c:	1b 8e       	std	Y+27, r1	; 0x1b
    941e:	1c 8e       	std	Y+28, r1	; 0x1c
    9420:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    9422:	1b a7       	std	Y+43, r17	; 0x2b
    9424:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    9426:	1c a6       	std	Y+44, r1	; 0x2c
    9428:	1d a6       	std	Y+45, r1	; 0x2d
    942a:	1e a6       	std	Y+46, r1	; 0x2e
    942c:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    942e:	80 91 95 0c 	lds	r24, 0x0C95	; 0x800c95 <Ethernet+0x2>
    9432:	90 91 96 0c 	lds	r25, 0x0C96	; 0x800c96 <Ethernet+0x3>
    9436:	a0 91 97 0c 	lds	r26, 0x0C97	; 0x800c97 <Ethernet+0x4>
    943a:	b0 91 98 0c 	lds	r27, 0x0C98	; 0x800c98 <Ethernet+0x5>
    943e:	8e a3       	std	Y+38, r24	; 0x26
    9440:	9f a3       	std	Y+39, r25	; 0x27
    9442:	a8 a7       	std	Y+40, r26	; 0x28
    9444:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    9446:	8b 83       	std	Y+3, r24	; 0x03
    9448:	9c 83       	std	Y+4, r25	; 0x04
    944a:	ad 83       	std	Y+5, r26	; 0x05
    944c:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    944e:	18 86       	std	Y+8, r1	; 0x08
    9450:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    9452:	ae 01       	movw	r20, r28
    9454:	46 5d       	subi	r20, 0xD6	; 214
    9456:	5f 4f       	sbci	r21, 0xFF	; 255
    9458:	ce 01       	movw	r24, r28
    945a:	01 96       	adiw	r24, 0x01	; 1
    945c:	0e 94 5c 47 	call	0x8eb8	; 0x8eb8 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    9460:	81 30       	cpi	r24, 0x01	; 1
    9462:	91 05       	cpc	r25, r1
    9464:	b1 f4       	brne	.+44     	; 0x9492 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    9466:	d7 01       	movw	r26, r14
    9468:	ed 91       	ld	r30, X+
    946a:	fc 91       	ld	r31, X
    946c:	06 84       	ldd	r0, Z+14	; 0x0e
    946e:	f7 85       	ldd	r31, Z+15	; 0x0f
    9470:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
    9472:	1d a3       	std	Y+37, r17	; 0x25
    9474:	0c a3       	std	Y+36, r16	; 0x24
    9476:	8c a5       	ldd	r24, Y+44	; 0x2c
    9478:	9d a5       	ldd	r25, Y+45	; 0x2d
    947a:	ae a5       	ldd	r26, Y+46	; 0x2e
    947c:	bf a5       	ldd	r27, Y+47	; 0x2f
    947e:	8e a3       	std	Y+38, r24	; 0x26
    9480:	9f a3       	std	Y+39, r25	; 0x27
    9482:	a8 a7       	std	Y+40, r26	; 0x28
    9484:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    9486:	a6 01       	movw	r20, r12
    9488:	be 01       	movw	r22, r28
    948a:	6c 5d       	subi	r22, 0xDC	; 220
    948c:	7f 4f       	sbci	r23, 0xFF	; 255
    948e:	c7 01       	movw	r24, r14
    9490:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    9492:	af 96       	adiw	r28, 0x2f	; 47
    9494:	0f b6       	in	r0, 0x3f	; 63
    9496:	f8 94       	cli
    9498:	de bf       	out	0x3e, r29	; 62
    949a:	0f be       	out	0x3f, r0	; 63
    949c:	cd bf       	out	0x3d, r28	; 61
    949e:	df 91       	pop	r29
    94a0:	cf 91       	pop	r28
    94a2:	1f 91       	pop	r17
    94a4:	0f 91       	pop	r16
    94a6:	ff 90       	pop	r15
    94a8:	ef 90       	pop	r14
    94aa:	df 90       	pop	r13
    94ac:	cf 90       	pop	r12
    94ae:	08 95       	ret

000094b0 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    94b0:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    94b2:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    94b4:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    94b6:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SPIClass::initialized>
    94ba:	81 11       	cpse	r24, r1
    94bc:	27 c0       	rjmp	.+78     	; 0x950c <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    94be:	ed e8       	ldi	r30, 0x8D	; 141
    94c0:	f1 e6       	ldi	r31, 0x61	; 97
    94c2:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    94c4:	e7 e4       	ldi	r30, 0x47	; 71
    94c6:	f1 e6       	ldi	r31, 0x61	; 97
    94c8:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    94ca:	e8 2f       	mov	r30, r24
    94cc:	f0 e0       	ldi	r31, 0x00	; 0
    94ce:	ee 0f       	add	r30, r30
    94d0:	ff 1f       	adc	r31, r31
    94d2:	ec 57       	subi	r30, 0x7C	; 124
    94d4:	f4 4a       	sbci	r31, 0xA4	; 164
    94d6:	a5 91       	lpm	r26, Z+
    94d8:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    94da:	ec 91       	ld	r30, X
    94dc:	e9 23       	and	r30, r25
    94de:	21 f4       	brne	.+8      	; 0x94e8 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    94e0:	61 e0       	ldi	r22, 0x01	; 1
    94e2:	88 e0       	ldi	r24, 0x08	; 8
    94e4:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    94e8:	61 e0       	ldi	r22, 0x01	; 1
    94ea:	88 e0       	ldi	r24, 0x08	; 8
    94ec:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    94f0:	8c b5       	in	r24, 0x2c	; 44
    94f2:	80 61       	ori	r24, 0x10	; 16
    94f4:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    94f6:	8c b5       	in	r24, 0x2c	; 44
    94f8:	80 64       	ori	r24, 0x40	; 64
    94fa:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    94fc:	61 e0       	ldi	r22, 0x01	; 1
    94fe:	89 e0       	ldi	r24, 0x09	; 9
    9500:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    9504:	61 e0       	ldi	r22, 0x01	; 1
    9506:	8a e0       	ldi	r24, 0x0A	; 10
    9508:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    950c:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SPIClass::initialized>
    9510:	8f 5f       	subi	r24, 0xFF	; 255
    9512:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    9516:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
    9518:	cf 91       	pop	r28
    951a:	08 95       	ret

0000951c <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    951c:	7f 92       	push	r7
    951e:	8f 92       	push	r8
    9520:	9f 92       	push	r9
    9522:	af 92       	push	r10
    9524:	bf 92       	push	r11
    9526:	cf 92       	push	r12
    9528:	df 92       	push	r13
    952a:	ef 92       	push	r14
    952c:	ff 92       	push	r15
    952e:	0f 93       	push	r16
    9530:	1f 93       	push	r17
    9532:	cf 93       	push	r28
    9534:	df 93       	push	r29
    9536:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    9538:	fc 01       	movw	r30, r24
    953a:	86 81       	ldd	r24, Z+6	; 0x06
    953c:	81 11       	cpse	r24, r1
    953e:	35 c0       	rjmp	.+106    	; 0x95aa <SoftSPIB::transfer(unsigned char)+0x8e>
    9540:	86 2f       	mov	r24, r22
    9542:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    9544:	ec 01       	movw	r28, r24
    9546:	d6 95       	lsr	r29
    9548:	dc 2f       	mov	r29, r28
    954a:	cc 27       	eor	r28, r28
    954c:	d7 95       	ror	r29
    954e:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    9550:	66 1f       	adc	r22, r22
    9552:	66 27       	eor	r22, r22
    9554:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    9556:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    9558:	ec 01       	movw	r28, r24
    955a:	55 e0       	ldi	r21, 0x05	; 5
    955c:	cc 0f       	add	r28, r28
    955e:	dd 1f       	adc	r29, r29
    9560:	5a 95       	dec	r21
    9562:	e1 f7       	brne	.-8      	; 0x955c <SoftSPIB::transfer(unsigned char)+0x40>
    9564:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    9566:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    9568:	ec 01       	movw	r28, r24
    956a:	73 e0       	ldi	r23, 0x03	; 3
    956c:	cc 0f       	add	r28, r28
    956e:	dd 1f       	adc	r29, r29
    9570:	7a 95       	dec	r23
    9572:	e1 f7       	brne	.-8      	; 0x956c <SoftSPIB::transfer(unsigned char)+0x50>
    9574:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    9576:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    9578:	ec 01       	movw	r28, r24
    957a:	cc 0f       	add	r28, r28
    957c:	dd 1f       	adc	r29, r29
    957e:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    9580:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    9582:	ec 01       	movw	r28, r24
    9584:	d5 95       	asr	r29
    9586:	c7 95       	ror	r28
    9588:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    958a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    958c:	ec 01       	movw	r28, r24
    958e:	a3 e0       	ldi	r26, 0x03	; 3
    9590:	d5 95       	asr	r29
    9592:	c7 95       	ror	r28
    9594:	aa 95       	dec	r26
    9596:	e1 f7       	brne	.-8      	; 0x9590 <SoftSPIB::transfer(unsigned char)+0x74>
    9598:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    959a:	6c 2b       	or	r22, r28
    959c:	b5 e0       	ldi	r27, 0x05	; 5
    959e:	95 95       	asr	r25
    95a0:	87 95       	ror	r24
    95a2:	ba 95       	dec	r27
    95a4:	e1 f7       	brne	.-8      	; 0x959e <SoftSPIB::transfer(unsigned char)+0x82>
    95a6:	82 70       	andi	r24, 0x02	; 2
    95a8:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    95aa:	91 e0       	ldi	r25, 0x01	; 1
    95ac:	80 e0       	ldi	r24, 0x00	; 0
    95ae:	f8 01       	movw	r30, r16
    95b0:	21 81       	ldd	r18, Z+1	; 0x01
    95b2:	21 11       	cpse	r18, r1
    95b4:	01 c0       	rjmp	.+2      	; 0x95b8 <SoftSPIB::transfer(unsigned char)+0x9c>
    95b6:	90 e0       	ldi	r25, 0x00	; 0
    95b8:	e9 2e       	mov	r14, r25
    95ba:	f8 2e       	mov	r15, r24
    95bc:	d1 2c       	mov	r13, r1
    95be:	c1 2c       	mov	r12, r1
    95c0:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    95c2:	c6 2f       	mov	r28, r22
    95c4:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    95c6:	f8 01       	movw	r30, r16
    95c8:	80 81       	ld	r24, Z
    95ca:	88 23       	and	r24, r24
    95cc:	39 f0       	breq	.+14     	; 0x95dc <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    95ce:	f1 e0       	ldi	r31, 0x01	; 1
    95d0:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    95d2:	6e 2d       	mov	r22, r14
    95d4:	f8 01       	movw	r30, r16
    95d6:	85 81       	ldd	r24, Z+5	; 0x05
    95d8:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    95dc:	be 01       	movw	r22, r28
    95de:	0c 2c       	mov	r0, r12
    95e0:	02 c0       	rjmp	.+4      	; 0x95e6 <SoftSPIB::transfer(unsigned char)+0xca>
    95e2:	75 95       	asr	r23
    95e4:	67 95       	ror	r22
    95e6:	0a 94       	dec	r0
    95e8:	e2 f7       	brpl	.-8      	; 0x95e2 <SoftSPIB::transfer(unsigned char)+0xc6>
    95ea:	61 70       	andi	r22, 0x01	; 1
    95ec:	f8 01       	movw	r30, r16
    95ee:	84 81       	ldd	r24, Z+4	; 0x04
    95f0:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    95f4:	57 01       	movw	r10, r14
    95f6:	f1 e0       	ldi	r31, 0x01	; 1
    95f8:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    95fa:	6a 2d       	mov	r22, r10
    95fc:	f8 01       	movw	r30, r16
    95fe:	85 81       	ldd	r24, Z+5	; 0x05
    9600:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    9604:	f8 01       	movw	r30, r16
    9606:	23 81       	ldd	r18, Z+3	; 0x03
    9608:	30 e0       	ldi	r19, 0x00	; 0
    960a:	f9 01       	movw	r30, r18
    960c:	ec 56       	subi	r30, 0x6C	; 108
    960e:	f4 4a       	sbci	r31, 0xA4	; 164
    9610:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    9612:	f9 01       	movw	r30, r18
    9614:	e1 5c       	subi	r30, 0xC1	; 193
    9616:	fe 49       	sbci	r31, 0x9E	; 158
    9618:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    961a:	f9 01       	movw	r30, r18
    961c:	eb 57       	subi	r30, 0x7B	; 123
    961e:	fe 49       	sbci	r31, 0x9E	; 158
    9620:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    9622:	77 20       	and	r7, r7
    9624:	a9 f1       	breq	.+106    	; 0x9690 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    9626:	81 11       	cpse	r24, r1
    9628:	0e 94 1d a1 	call	0x1423a	; 0x1423a <turnOffPWM.lto_priv.238>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    962c:	e7 2d       	mov	r30, r7
    962e:	f0 e0       	ldi	r31, 0x00	; 0
    9630:	ee 0f       	add	r30, r30
    9632:	ff 1f       	adc	r31, r31
    9634:	e1 5d       	subi	r30, 0xD1	; 209
    9636:	fe 49       	sbci	r31, 0x9E	; 158
    9638:	a5 91       	lpm	r26, Z+
    963a:	b4 91       	lpm	r27, Z
    963c:	ec 91       	ld	r30, X
    963e:	8e 22       	and	r8, r30
    9640:	31 e0       	ldi	r19, 0x01	; 1
    9642:	20 e0       	ldi	r18, 0x00	; 0
    9644:	09 f4       	brne	.+2      	; 0x9648 <SoftSPIB::transfer(unsigned char)+0x12c>
    9646:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    9648:	83 2f       	mov	r24, r19
    964a:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    964c:	f8 01       	movw	r30, r16
    964e:	26 81       	ldd	r18, Z+6	; 0x06
    9650:	21 11       	cpse	r18, r1
    9652:	21 c0       	rjmp	.+66     	; 0x9696 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    9654:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    9656:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    9658:	f8 01       	movw	r30, r16
    965a:	80 81       	ld	r24, Z
    965c:	88 23       	and	r24, r24
    965e:	11 f1       	breq	.+68     	; 0x96a4 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    9660:	75 01       	movw	r14, r10
    9662:	ff ef       	ldi	r31, 0xFF	; 255
    9664:	cf 1a       	sub	r12, r31
    9666:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    9668:	28 e0       	ldi	r18, 0x08	; 8
    966a:	c2 16       	cp	r12, r18
    966c:	d1 04       	cpc	r13, r1
    966e:	09 f0       	breq	.+2      	; 0x9672 <SoftSPIB::transfer(unsigned char)+0x156>
    9670:	aa cf       	rjmp	.-172    	; 0x95c6 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    9672:	89 2d       	mov	r24, r9
    9674:	df 91       	pop	r29
    9676:	cf 91       	pop	r28
    9678:	1f 91       	pop	r17
    967a:	0f 91       	pop	r16
    967c:	ff 90       	pop	r15
    967e:	ef 90       	pop	r14
    9680:	df 90       	pop	r13
    9682:	cf 90       	pop	r12
    9684:	bf 90       	pop	r11
    9686:	af 90       	pop	r10
    9688:	9f 90       	pop	r9
    968a:	8f 90       	pop	r8
    968c:	7f 90       	pop	r7
    968e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
    9690:	90 e0       	ldi	r25, 0x00	; 0
    9692:	80 e0       	ldi	r24, 0x00	; 0
    9694:	db cf       	rjmp	.-74     	; 0x964c <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    9696:	96 95       	lsr	r25
    9698:	98 2f       	mov	r25, r24
    969a:	88 27       	eor	r24, r24
    969c:	97 95       	ror	r25
    969e:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    96a0:	96 94       	lsr	r9
    96a2:	d9 cf       	rjmp	.-78     	; 0x9656 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    96a4:	6e 2d       	mov	r22, r14
    96a6:	85 81       	ldd	r24, Z+5	; 0x05
    96a8:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
    96ac:	da cf       	rjmp	.-76     	; 0x9662 <SoftSPIB::transfer(unsigned char)+0x146>

000096ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    96ae:	cf 93       	push	r28
    96b0:	df 93       	push	r29
    96b2:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    96b4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    96b6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    96b8:	8c 91       	ld	r24, X
    96ba:	92 ad       	ldd	r25, Z+58	; 0x3a
    96bc:	89 23       	and	r24, r25
    96be:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    96c0:	a0 a9       	ldd	r26, Z+48	; 0x30
    96c2:	b1 a9       	ldd	r27, Z+49	; 0x31
    96c4:	8c 91       	ld	r24, X
    96c6:	93 ad       	ldd	r25, Z+59	; 0x3b
    96c8:	89 23       	and	r24, r25
    96ca:	8c 93       	st	X, r24
    96cc:	72 b9       	out	0x02, r23	; 2
    96ce:	a2 a9       	ldd	r26, Z+50	; 0x32
    96d0:	b3 a9       	ldd	r27, Z+51	; 0x33
    96d2:	8c 91       	ld	r24, X
    96d4:	94 ad       	ldd	r25, Z+60	; 0x3c
    96d6:	89 23       	and	r24, r25
    96d8:	8c 93       	st	X, r24
    96da:	a2 a9       	ldd	r26, Z+50	; 0x32
    96dc:	b3 a9       	ldd	r27, Z+51	; 0x33
    96de:	8c 91       	ld	r24, X
    96e0:	90 ad       	ldd	r25, Z+56	; 0x38
    96e2:	89 2b       	or	r24, r25
    96e4:	8c 93       	st	X, r24
    96e6:	62 b9       	out	0x02, r22	; 2
    96e8:	a2 a9       	ldd	r26, Z+50	; 0x32
    96ea:	b3 a9       	ldd	r27, Z+51	; 0x33
    96ec:	8c 91       	ld	r24, X
    96ee:	94 ad       	ldd	r25, Z+60	; 0x3c
    96f0:	89 23       	and	r24, r25
    96f2:	8c 93       	st	X, r24
    96f4:	a2 a9       	ldd	r26, Z+50	; 0x32
    96f6:	b3 a9       	ldd	r27, Z+51	; 0x33
    96f8:	8c 91       	ld	r24, X
    96fa:	90 ad       	ldd	r25, Z+56	; 0x38
    96fc:	89 2b       	or	r24, r25
    96fe:	8c 93       	st	X, r24
    9700:	a0 a9       	ldd	r26, Z+48	; 0x30
    9702:	b1 a9       	ldd	r27, Z+49	; 0x31
    9704:	8c 91       	ld	r24, X
    9706:	97 a9       	ldd	r25, Z+55	; 0x37
    9708:	89 2b       	or	r24, r25
    970a:	8c 93       	st	X, r24
    970c:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    970e:	9f ef       	ldi	r25, 0xFF	; 255
    9710:	92 0f       	add	r25, r18
    9712:	12 16       	cp	r1, r18
    9714:	0c f0       	brlt	.+2      	; 0x9718 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    9716:	3f c0       	rjmp	.+126    	; 0x9796 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    9718:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    971a:	82 b9       	out	0x02, r24	; 2
    971c:	c2 a9       	ldd	r28, Z+50	; 0x32
    971e:	d3 a9       	ldd	r29, Z+51	; 0x33
    9720:	88 81       	ld	r24, Y
    9722:	24 ad       	ldd	r18, Z+60	; 0x3c
    9724:	82 23       	and	r24, r18
    9726:	88 83       	st	Y, r24
    9728:	c2 a9       	ldd	r28, Z+50	; 0x32
    972a:	d3 a9       	ldd	r29, Z+51	; 0x33
    972c:	88 81       	ld	r24, Y
    972e:	20 ad       	ldd	r18, Z+56	; 0x38
    9730:	82 2b       	or	r24, r18
    9732:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    9734:	99 23       	and	r25, r25
    9736:	69 f1       	breq	.+90     	; 0x9792 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    9738:	20 8d       	ldd	r18, Z+24	; 0x18
    973a:	31 8d       	ldd	r19, Z+25	; 0x19
    973c:	21 30       	cpi	r18, 0x01	; 1
    973e:	31 05       	cpc	r19, r1
    9740:	41 f5       	brne	.+80     	; 0x9792 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    9742:	6f 5f       	subi	r22, 0xFF	; 255
    9744:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    9746:	c0 a9       	ldd	r28, Z+48	; 0x30
    9748:	d1 a9       	ldd	r29, Z+49	; 0x31
    974a:	88 81       	ld	r24, Y
    974c:	23 ad       	ldd	r18, Z+59	; 0x3b
    974e:	82 23       	and	r24, r18
    9750:	88 83       	st	Y, r24
    9752:	72 b9       	out	0x02, r23	; 2
    9754:	c2 a9       	ldd	r28, Z+50	; 0x32
    9756:	d3 a9       	ldd	r29, Z+51	; 0x33
    9758:	88 81       	ld	r24, Y
    975a:	24 ad       	ldd	r18, Z+60	; 0x3c
    975c:	82 23       	and	r24, r18
    975e:	88 83       	st	Y, r24
    9760:	c2 a9       	ldd	r28, Z+50	; 0x32
    9762:	d3 a9       	ldd	r29, Z+51	; 0x33
    9764:	88 81       	ld	r24, Y
    9766:	20 ad       	ldd	r18, Z+56	; 0x38
    9768:	82 2b       	or	r24, r18
    976a:	88 83       	st	Y, r24
    976c:	62 b9       	out	0x02, r22	; 2
    976e:	c2 a9       	ldd	r28, Z+50	; 0x32
    9770:	d3 a9       	ldd	r29, Z+51	; 0x33
    9772:	88 81       	ld	r24, Y
    9774:	24 ad       	ldd	r18, Z+60	; 0x3c
    9776:	82 23       	and	r24, r18
    9778:	88 83       	st	Y, r24
    977a:	c2 a9       	ldd	r28, Z+50	; 0x32
    977c:	d3 a9       	ldd	r29, Z+51	; 0x33
    977e:	88 81       	ld	r24, Y
    9780:	20 ad       	ldd	r18, Z+56	; 0x38
    9782:	82 2b       	or	r24, r18
    9784:	88 83       	st	Y, r24
    9786:	c0 a9       	ldd	r28, Z+48	; 0x30
    9788:	d1 a9       	ldd	r29, Z+49	; 0x31
    978a:	88 81       	ld	r24, Y
    978c:	27 a9       	ldd	r18, Z+55	; 0x37
    978e:	82 2b       	or	r24, r18
    9790:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    9792:	29 2f       	mov	r18, r25
    9794:	bc cf       	rjmp	.-136    	; 0x970e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    9796:	a6 a5       	ldd	r26, Z+46	; 0x2e
    9798:	b7 a5       	ldd	r27, Z+47	; 0x2f
    979a:	8c 91       	ld	r24, X
    979c:	96 a9       	ldd	r25, Z+54	; 0x36
    979e:	89 2b       	or	r24, r25
    97a0:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    97a2:	df 91       	pop	r29
    97a4:	cf 91       	pop	r28
    97a6:	08 95       	ret

000097a8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    97a8:	af 92       	push	r10
    97aa:	bf 92       	push	r11
    97ac:	cf 92       	push	r12
    97ae:	df 92       	push	r13
    97b0:	ef 92       	push	r14
    97b2:	ff 92       	push	r15
    97b4:	0f 93       	push	r16
    97b6:	1f 93       	push	r17
    97b8:	cf 93       	push	r28
    97ba:	df 93       	push	r29
    97bc:	00 d0       	rcall	.+0      	; 0x97be <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    97be:	00 d0       	rcall	.+0      	; 0x97c0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    97c0:	1f 92       	push	r1
    97c2:	1f 92       	push	r1
    97c4:	cd b7       	in	r28, 0x3d	; 61
    97c6:	de b7       	in	r29, 0x3e	; 62
    97c8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    97ca:	dc 01       	movw	r26, r24
    97cc:	9e 96       	adiw	r26, 0x2e	; 46
    97ce:	ed 91       	ld	r30, X+
    97d0:	fc 91       	ld	r31, X
    97d2:	9f 97       	sbiw	r26, 0x2f	; 47
    97d4:	80 81       	ld	r24, Z
    97d6:	da 96       	adiw	r26, 0x3a	; 58
    97d8:	9c 91       	ld	r25, X
    97da:	da 97       	sbiw	r26, 0x3a	; 58
    97dc:	89 23       	and	r24, r25
    97de:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    97e0:	58 96       	adiw	r26, 0x18	; 24
    97e2:	8d 91       	ld	r24, X+
    97e4:	9c 91       	ld	r25, X
    97e6:	59 97       	sbiw	r26, 0x19	; 25
    97e8:	00 97       	sbiw	r24, 0x00	; 0
    97ea:	09 f0       	breq	.+2      	; 0x97ee <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    97ec:	44 c3       	rjmp	.+1672   	; 0x9e76 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    97ee:	56 96       	adiw	r26, 0x16	; 22
    97f0:	8d 91       	ld	r24, X+
    97f2:	9c 91       	ld	r25, X
    97f4:	57 97       	sbiw	r26, 0x17	; 23
    97f6:	82 30       	cpi	r24, 0x02	; 2
    97f8:	91 05       	cpc	r25, r1
    97fa:	09 f4       	brne	.+2      	; 0x97fe <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    97fc:	0b c3       	rjmp	.+1558   	; 0x9e14 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    97fe:	83 30       	cpi	r24, 0x03	; 3
    9800:	91 05       	cpc	r25, r1
    9802:	09 f4       	brne	.+2      	; 0x9806 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    9804:	23 c3       	rjmp	.+1606   	; 0x9e4c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    9806:	01 97       	sbiw	r24, 0x01	; 1
    9808:	09 f0       	breq	.+2      	; 0x980c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    980a:	32 c3       	rjmp	.+1636   	; 0x9e70 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    980c:	1e 96       	adiw	r26, 0x0e	; 14
    980e:	0d 90       	ld	r0, X+
    9810:	bc 91       	ld	r27, X
    9812:	a0 2d       	mov	r26, r0
    9814:	68 01       	movw	r12, r16
    9816:	c0 94       	com	r12
    9818:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    981a:	40 95       	com	r20
    981c:	50 95       	com	r21
    981e:	fa 01       	movw	r30, r20
    9820:	ea 0f       	add	r30, r26
    9822:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    9824:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    9826:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    9828:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    982a:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    982c:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    982e:	6a 0f       	add	r22, r26
    9830:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    9832:	d7 01       	movw	r26, r14
    9834:	d0 96       	adiw	r26, 0x30	; 48
    9836:	cd 90       	ld	r12, X+
    9838:	dc 90       	ld	r13, X
    983a:	d6 01       	movw	r26, r12
    983c:	bc 90       	ld	r11, X
    983e:	d7 01       	movw	r26, r14
    9840:	db 96       	adiw	r26, 0x3b	; 59
    9842:	ac 90       	ld	r10, X
    9844:	ba 20       	and	r11, r10
    9846:	d6 01       	movw	r26, r12
    9848:	bc 92       	st	X, r11
    984a:	12 b8       	out	0x02, r1	; 2
    984c:	d7 01       	movw	r26, r14
    984e:	d2 96       	adiw	r26, 0x32	; 50
    9850:	cd 90       	ld	r12, X+
    9852:	dc 90       	ld	r13, X
    9854:	d6 01       	movw	r26, r12
    9856:	bc 90       	ld	r11, X
    9858:	d7 01       	movw	r26, r14
    985a:	dc 96       	adiw	r26, 0x3c	; 60
    985c:	ac 90       	ld	r10, X
    985e:	ba 20       	and	r11, r10
    9860:	d6 01       	movw	r26, r12
    9862:	bc 92       	st	X, r11
    9864:	d7 01       	movw	r26, r14
    9866:	d2 96       	adiw	r26, 0x32	; 50
    9868:	cd 90       	ld	r12, X+
    986a:	dc 90       	ld	r13, X
    986c:	d6 01       	movw	r26, r12
    986e:	bc 90       	ld	r11, X
    9870:	d7 01       	movw	r26, r14
    9872:	d8 96       	adiw	r26, 0x38	; 56
    9874:	ac 90       	ld	r10, X
    9876:	ba 28       	or	r11, r10
    9878:	d6 01       	movw	r26, r12
    987a:	bc 92       	st	X, r11
    987c:	a0 e5       	ldi	r26, 0x50	; 80
    987e:	a2 b9       	out	0x02, r26	; 2
    9880:	d7 01       	movw	r26, r14
    9882:	d2 96       	adiw	r26, 0x32	; 50
    9884:	cd 90       	ld	r12, X+
    9886:	dc 90       	ld	r13, X
    9888:	d6 01       	movw	r26, r12
    988a:	bc 90       	ld	r11, X
    988c:	d7 01       	movw	r26, r14
    988e:	dc 96       	adiw	r26, 0x3c	; 60
    9890:	ac 90       	ld	r10, X
    9892:	ba 20       	and	r11, r10
    9894:	d6 01       	movw	r26, r12
    9896:	bc 92       	st	X, r11
    9898:	d7 01       	movw	r26, r14
    989a:	d2 96       	adiw	r26, 0x32	; 50
    989c:	cd 90       	ld	r12, X+
    989e:	dc 90       	ld	r13, X
    98a0:	d6 01       	movw	r26, r12
    98a2:	bc 90       	ld	r11, X
    98a4:	d7 01       	movw	r26, r14
    98a6:	d8 96       	adiw	r26, 0x38	; 56
    98a8:	ac 90       	ld	r10, X
    98aa:	ba 28       	or	r11, r10
    98ac:	d6 01       	movw	r26, r12
    98ae:	bc 92       	st	X, r11
    98b0:	d7 01       	movw	r26, r14
    98b2:	d0 96       	adiw	r26, 0x30	; 48
    98b4:	cd 90       	ld	r12, X+
    98b6:	dc 90       	ld	r13, X
    98b8:	d6 01       	movw	r26, r12
    98ba:	bc 90       	ld	r11, X
    98bc:	d7 01       	movw	r26, r14
    98be:	d7 96       	adiw	r26, 0x37	; 55
    98c0:	ac 90       	ld	r10, X
    98c2:	ba 28       	or	r11, r10
    98c4:	d6 01       	movw	r26, r12
    98c6:	bc 92       	st	X, r11
    98c8:	72 b9       	out	0x02, r23	; 2
    98ca:	d7 01       	movw	r26, r14
    98cc:	d2 96       	adiw	r26, 0x32	; 50
    98ce:	ad 90       	ld	r10, X+
    98d0:	bc 90       	ld	r11, X
    98d2:	d5 01       	movw	r26, r10
    98d4:	7c 91       	ld	r23, X
    98d6:	d7 01       	movw	r26, r14
    98d8:	dc 96       	adiw	r26, 0x3c	; 60
    98da:	dc 90       	ld	r13, X
    98dc:	7d 21       	and	r23, r13
    98de:	d5 01       	movw	r26, r10
    98e0:	7c 93       	st	X, r23
    98e2:	d7 01       	movw	r26, r14
    98e4:	d2 96       	adiw	r26, 0x32	; 50
    98e6:	ad 90       	ld	r10, X+
    98e8:	bc 90       	ld	r11, X
    98ea:	d5 01       	movw	r26, r10
    98ec:	7c 91       	ld	r23, X
    98ee:	d7 01       	movw	r26, r14
    98f0:	d8 96       	adiw	r26, 0x38	; 56
    98f2:	dc 90       	ld	r13, X
    98f4:	7d 29       	or	r23, r13
    98f6:	d5 01       	movw	r26, r10
    98f8:	7c 93       	st	X, r23
    98fa:	62 b9       	out	0x02, r22	; 2
    98fc:	d7 01       	movw	r26, r14
    98fe:	d2 96       	adiw	r26, 0x32	; 50
    9900:	cd 90       	ld	r12, X+
    9902:	dc 90       	ld	r13, X
    9904:	d6 01       	movw	r26, r12
    9906:	6c 91       	ld	r22, X
    9908:	d7 01       	movw	r26, r14
    990a:	dc 96       	adiw	r26, 0x3c	; 60
    990c:	7c 91       	ld	r23, X
    990e:	67 23       	and	r22, r23
    9910:	d6 01       	movw	r26, r12
    9912:	6c 93       	st	X, r22
    9914:	d7 01       	movw	r26, r14
    9916:	d2 96       	adiw	r26, 0x32	; 50
    9918:	cd 90       	ld	r12, X+
    991a:	dc 90       	ld	r13, X
    991c:	d6 01       	movw	r26, r12
    991e:	6c 91       	ld	r22, X
    9920:	d7 01       	movw	r26, r14
    9922:	d8 96       	adiw	r26, 0x38	; 56
    9924:	7c 91       	ld	r23, X
    9926:	67 2b       	or	r22, r23
    9928:	d6 01       	movw	r26, r12
    992a:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    992c:	d7 01       	movw	r26, r14
    992e:	d0 96       	adiw	r26, 0x30	; 48
    9930:	cd 90       	ld	r12, X+
    9932:	dc 90       	ld	r13, X
    9934:	d6 01       	movw	r26, r12
    9936:	6c 91       	ld	r22, X
    9938:	d7 01       	movw	r26, r14
    993a:	db 96       	adiw	r26, 0x3b	; 59
    993c:	7c 91       	ld	r23, X
    993e:	67 23       	and	r22, r23
    9940:	d6 01       	movw	r26, r12
    9942:	6c 93       	st	X, r22
    9944:	12 b8       	out	0x02, r1	; 2
    9946:	d7 01       	movw	r26, r14
    9948:	d2 96       	adiw	r26, 0x32	; 50
    994a:	cd 90       	ld	r12, X+
    994c:	dc 90       	ld	r13, X
    994e:	d6 01       	movw	r26, r12
    9950:	6c 91       	ld	r22, X
    9952:	d7 01       	movw	r26, r14
    9954:	dc 96       	adiw	r26, 0x3c	; 60
    9956:	7c 91       	ld	r23, X
    9958:	67 23       	and	r22, r23
    995a:	d6 01       	movw	r26, r12
    995c:	6c 93       	st	X, r22
    995e:	d7 01       	movw	r26, r14
    9960:	d2 96       	adiw	r26, 0x32	; 50
    9962:	cd 90       	ld	r12, X+
    9964:	dc 90       	ld	r13, X
    9966:	d6 01       	movw	r26, r12
    9968:	6c 91       	ld	r22, X
    996a:	d7 01       	movw	r26, r14
    996c:	d8 96       	adiw	r26, 0x38	; 56
    996e:	7c 91       	ld	r23, X
    9970:	67 2b       	or	r22, r23
    9972:	d6 01       	movw	r26, r12
    9974:	6c 93       	st	X, r22
    9976:	61 e5       	ldi	r22, 0x51	; 81
    9978:	62 b9       	out	0x02, r22	; 2
    997a:	d7 01       	movw	r26, r14
    997c:	d2 96       	adiw	r26, 0x32	; 50
    997e:	cd 90       	ld	r12, X+
    9980:	dc 90       	ld	r13, X
    9982:	d6 01       	movw	r26, r12
    9984:	6c 91       	ld	r22, X
    9986:	d7 01       	movw	r26, r14
    9988:	dc 96       	adiw	r26, 0x3c	; 60
    998a:	7c 91       	ld	r23, X
    998c:	67 23       	and	r22, r23
    998e:	d6 01       	movw	r26, r12
    9990:	6c 93       	st	X, r22
    9992:	d7 01       	movw	r26, r14
    9994:	d2 96       	adiw	r26, 0x32	; 50
    9996:	cd 90       	ld	r12, X+
    9998:	dc 90       	ld	r13, X
    999a:	d6 01       	movw	r26, r12
    999c:	6c 91       	ld	r22, X
    999e:	d7 01       	movw	r26, r14
    99a0:	d8 96       	adiw	r26, 0x38	; 56
    99a2:	7c 91       	ld	r23, X
    99a4:	67 2b       	or	r22, r23
    99a6:	d6 01       	movw	r26, r12
    99a8:	6c 93       	st	X, r22
    99aa:	d7 01       	movw	r26, r14
    99ac:	d0 96       	adiw	r26, 0x30	; 48
    99ae:	cd 90       	ld	r12, X+
    99b0:	dc 90       	ld	r13, X
    99b2:	d6 01       	movw	r26, r12
    99b4:	6c 91       	ld	r22, X
    99b6:	d7 01       	movw	r26, r14
    99b8:	d7 96       	adiw	r26, 0x37	; 55
    99ba:	7c 91       	ld	r23, X
    99bc:	67 2b       	or	r22, r23
    99be:	d6 01       	movw	r26, r12
    99c0:	6c 93       	st	X, r22
    99c2:	32 b9       	out	0x02, r19	; 2
    99c4:	d7 01       	movw	r26, r14
    99c6:	d2 96       	adiw	r26, 0x32	; 50
    99c8:	cd 90       	ld	r12, X+
    99ca:	dc 90       	ld	r13, X
    99cc:	d6 01       	movw	r26, r12
    99ce:	3c 91       	ld	r19, X
    99d0:	d7 01       	movw	r26, r14
    99d2:	dc 96       	adiw	r26, 0x3c	; 60
    99d4:	6c 91       	ld	r22, X
    99d6:	36 23       	and	r19, r22
    99d8:	d6 01       	movw	r26, r12
    99da:	3c 93       	st	X, r19
    99dc:	d7 01       	movw	r26, r14
    99de:	d2 96       	adiw	r26, 0x32	; 50
    99e0:	cd 90       	ld	r12, X+
    99e2:	dc 90       	ld	r13, X
    99e4:	d6 01       	movw	r26, r12
    99e6:	3c 91       	ld	r19, X
    99e8:	d7 01       	movw	r26, r14
    99ea:	d8 96       	adiw	r26, 0x38	; 56
    99ec:	6c 91       	ld	r22, X
    99ee:	36 2b       	or	r19, r22
    99f0:	d6 01       	movw	r26, r12
    99f2:	3c 93       	st	X, r19
    99f4:	22 b9       	out	0x02, r18	; 2
    99f6:	d7 01       	movw	r26, r14
    99f8:	d2 96       	adiw	r26, 0x32	; 50
    99fa:	6d 91       	ld	r22, X+
    99fc:	7c 91       	ld	r23, X
    99fe:	db 01       	movw	r26, r22
    9a00:	2c 91       	ld	r18, X
    9a02:	d7 01       	movw	r26, r14
    9a04:	dc 96       	adiw	r26, 0x3c	; 60
    9a06:	3c 91       	ld	r19, X
    9a08:	23 23       	and	r18, r19
    9a0a:	db 01       	movw	r26, r22
    9a0c:	2c 93       	st	X, r18
    9a0e:	d7 01       	movw	r26, r14
    9a10:	d2 96       	adiw	r26, 0x32	; 50
    9a12:	6d 91       	ld	r22, X+
    9a14:	7c 91       	ld	r23, X
    9a16:	db 01       	movw	r26, r22
    9a18:	2c 91       	ld	r18, X
    9a1a:	d7 01       	movw	r26, r14
    9a1c:	d8 96       	adiw	r26, 0x38	; 56
    9a1e:	3c 91       	ld	r19, X
    9a20:	23 2b       	or	r18, r19
    9a22:	db 01       	movw	r26, r22
    9a24:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    9a26:	d7 01       	movw	r26, r14
    9a28:	d0 96       	adiw	r26, 0x30	; 48
    9a2a:	6d 91       	ld	r22, X+
    9a2c:	7c 91       	ld	r23, X
    9a2e:	db 01       	movw	r26, r22
    9a30:	2c 91       	ld	r18, X
    9a32:	d7 01       	movw	r26, r14
    9a34:	db 96       	adiw	r26, 0x3b	; 59
    9a36:	3c 91       	ld	r19, X
    9a38:	23 23       	and	r18, r19
    9a3a:	db 01       	movw	r26, r22
    9a3c:	2c 93       	st	X, r18
    9a3e:	12 b8       	out	0x02, r1	; 2
    9a40:	d7 01       	movw	r26, r14
    9a42:	d2 96       	adiw	r26, 0x32	; 50
    9a44:	6d 91       	ld	r22, X+
    9a46:	7c 91       	ld	r23, X
    9a48:	db 01       	movw	r26, r22
    9a4a:	2c 91       	ld	r18, X
    9a4c:	d7 01       	movw	r26, r14
    9a4e:	dc 96       	adiw	r26, 0x3c	; 60
    9a50:	3c 91       	ld	r19, X
    9a52:	23 23       	and	r18, r19
    9a54:	db 01       	movw	r26, r22
    9a56:	2c 93       	st	X, r18
    9a58:	d7 01       	movw	r26, r14
    9a5a:	d2 96       	adiw	r26, 0x32	; 50
    9a5c:	6d 91       	ld	r22, X+
    9a5e:	7c 91       	ld	r23, X
    9a60:	db 01       	movw	r26, r22
    9a62:	2c 91       	ld	r18, X
    9a64:	d7 01       	movw	r26, r14
    9a66:	d8 96       	adiw	r26, 0x38	; 56
    9a68:	3c 91       	ld	r19, X
    9a6a:	23 2b       	or	r18, r19
    9a6c:	db 01       	movw	r26, r22
    9a6e:	2c 93       	st	X, r18
    9a70:	22 e5       	ldi	r18, 0x52	; 82
    9a72:	22 b9       	out	0x02, r18	; 2
    9a74:	d7 01       	movw	r26, r14
    9a76:	d2 96       	adiw	r26, 0x32	; 50
    9a78:	6d 91       	ld	r22, X+
    9a7a:	7c 91       	ld	r23, X
    9a7c:	db 01       	movw	r26, r22
    9a7e:	2c 91       	ld	r18, X
    9a80:	d7 01       	movw	r26, r14
    9a82:	dc 96       	adiw	r26, 0x3c	; 60
    9a84:	3c 91       	ld	r19, X
    9a86:	23 23       	and	r18, r19
    9a88:	db 01       	movw	r26, r22
    9a8a:	2c 93       	st	X, r18
    9a8c:	d7 01       	movw	r26, r14
    9a8e:	d2 96       	adiw	r26, 0x32	; 50
    9a90:	6d 91       	ld	r22, X+
    9a92:	7c 91       	ld	r23, X
    9a94:	db 01       	movw	r26, r22
    9a96:	2c 91       	ld	r18, X
    9a98:	d7 01       	movw	r26, r14
    9a9a:	d8 96       	adiw	r26, 0x38	; 56
    9a9c:	3c 91       	ld	r19, X
    9a9e:	23 2b       	or	r18, r19
    9aa0:	db 01       	movw	r26, r22
    9aa2:	2c 93       	st	X, r18
    9aa4:	d7 01       	movw	r26, r14
    9aa6:	d0 96       	adiw	r26, 0x30	; 48
    9aa8:	6d 91       	ld	r22, X+
    9aaa:	7c 91       	ld	r23, X
    9aac:	db 01       	movw	r26, r22
    9aae:	2c 91       	ld	r18, X
    9ab0:	d7 01       	movw	r26, r14
    9ab2:	d7 96       	adiw	r26, 0x37	; 55
    9ab4:	3c 91       	ld	r19, X
    9ab6:	23 2b       	or	r18, r19
    9ab8:	db 01       	movw	r26, r22
    9aba:	2c 93       	st	X, r18
    9abc:	52 b9       	out	0x02, r21	; 2
    9abe:	d7 01       	movw	r26, r14
    9ac0:	d2 96       	adiw	r26, 0x32	; 50
    9ac2:	6d 91       	ld	r22, X+
    9ac4:	7c 91       	ld	r23, X
    9ac6:	db 01       	movw	r26, r22
    9ac8:	2c 91       	ld	r18, X
    9aca:	d7 01       	movw	r26, r14
    9acc:	dc 96       	adiw	r26, 0x3c	; 60
    9ace:	3c 91       	ld	r19, X
    9ad0:	23 23       	and	r18, r19
    9ad2:	db 01       	movw	r26, r22
    9ad4:	2c 93       	st	X, r18
    9ad6:	d7 01       	movw	r26, r14
    9ad8:	d2 96       	adiw	r26, 0x32	; 50
    9ada:	6d 91       	ld	r22, X+
    9adc:	7c 91       	ld	r23, X
    9ade:	db 01       	movw	r26, r22
    9ae0:	2c 91       	ld	r18, X
    9ae2:	d7 01       	movw	r26, r14
    9ae4:	d8 96       	adiw	r26, 0x38	; 56
    9ae6:	3c 91       	ld	r19, X
    9ae8:	23 2b       	or	r18, r19
    9aea:	db 01       	movw	r26, r22
    9aec:	2c 93       	st	X, r18
    9aee:	42 b9       	out	0x02, r20	; 2
    9af0:	d7 01       	movw	r26, r14
    9af2:	d2 96       	adiw	r26, 0x32	; 50
    9af4:	4d 91       	ld	r20, X+
    9af6:	5c 91       	ld	r21, X
    9af8:	da 01       	movw	r26, r20
    9afa:	2c 91       	ld	r18, X
    9afc:	d7 01       	movw	r26, r14
    9afe:	dc 96       	adiw	r26, 0x3c	; 60
    9b00:	3c 91       	ld	r19, X
    9b02:	23 23       	and	r18, r19
    9b04:	da 01       	movw	r26, r20
    9b06:	2c 93       	st	X, r18
    9b08:	d7 01       	movw	r26, r14
    9b0a:	d2 96       	adiw	r26, 0x32	; 50
    9b0c:	4d 91       	ld	r20, X+
    9b0e:	5c 91       	ld	r21, X
    9b10:	da 01       	movw	r26, r20
    9b12:	2c 91       	ld	r18, X
    9b14:	d7 01       	movw	r26, r14
    9b16:	d8 96       	adiw	r26, 0x38	; 56
    9b18:	3c 91       	ld	r19, X
    9b1a:	23 2b       	or	r18, r19
    9b1c:	da 01       	movw	r26, r20
    9b1e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    9b20:	d7 01       	movw	r26, r14
    9b22:	d0 96       	adiw	r26, 0x30	; 48
    9b24:	4d 91       	ld	r20, X+
    9b26:	5c 91       	ld	r21, X
    9b28:	da 01       	movw	r26, r20
    9b2a:	2c 91       	ld	r18, X
    9b2c:	d7 01       	movw	r26, r14
    9b2e:	db 96       	adiw	r26, 0x3b	; 59
    9b30:	3c 91       	ld	r19, X
    9b32:	23 23       	and	r18, r19
    9b34:	da 01       	movw	r26, r20
    9b36:	2c 93       	st	X, r18
    9b38:	12 b8       	out	0x02, r1	; 2
    9b3a:	d7 01       	movw	r26, r14
    9b3c:	d2 96       	adiw	r26, 0x32	; 50
    9b3e:	4d 91       	ld	r20, X+
    9b40:	5c 91       	ld	r21, X
    9b42:	da 01       	movw	r26, r20
    9b44:	2c 91       	ld	r18, X
    9b46:	d7 01       	movw	r26, r14
    9b48:	dc 96       	adiw	r26, 0x3c	; 60
    9b4a:	3c 91       	ld	r19, X
    9b4c:	23 23       	and	r18, r19
    9b4e:	da 01       	movw	r26, r20
    9b50:	2c 93       	st	X, r18
    9b52:	d7 01       	movw	r26, r14
    9b54:	d2 96       	adiw	r26, 0x32	; 50
    9b56:	4d 91       	ld	r20, X+
    9b58:	5c 91       	ld	r21, X
    9b5a:	da 01       	movw	r26, r20
    9b5c:	2c 91       	ld	r18, X
    9b5e:	d7 01       	movw	r26, r14
    9b60:	d8 96       	adiw	r26, 0x38	; 56
    9b62:	3c 91       	ld	r19, X
    9b64:	23 2b       	or	r18, r19
    9b66:	da 01       	movw	r26, r20
    9b68:	2c 93       	st	X, r18
    9b6a:	23 e5       	ldi	r18, 0x53	; 83
    9b6c:	22 b9       	out	0x02, r18	; 2
    9b6e:	d7 01       	movw	r26, r14
    9b70:	d2 96       	adiw	r26, 0x32	; 50
    9b72:	4d 91       	ld	r20, X+
    9b74:	5c 91       	ld	r21, X
    9b76:	da 01       	movw	r26, r20
    9b78:	2c 91       	ld	r18, X
    9b7a:	d7 01       	movw	r26, r14
    9b7c:	dc 96       	adiw	r26, 0x3c	; 60
    9b7e:	3c 91       	ld	r19, X
    9b80:	23 23       	and	r18, r19
    9b82:	da 01       	movw	r26, r20
    9b84:	2c 93       	st	X, r18
    9b86:	d7 01       	movw	r26, r14
    9b88:	d2 96       	adiw	r26, 0x32	; 50
    9b8a:	4d 91       	ld	r20, X+
    9b8c:	5c 91       	ld	r21, X
    9b8e:	da 01       	movw	r26, r20
    9b90:	2c 91       	ld	r18, X
    9b92:	d7 01       	movw	r26, r14
    9b94:	d8 96       	adiw	r26, 0x38	; 56
    9b96:	3c 91       	ld	r19, X
    9b98:	23 2b       	or	r18, r19
    9b9a:	da 01       	movw	r26, r20
    9b9c:	2c 93       	st	X, r18
    9b9e:	d7 01       	movw	r26, r14
    9ba0:	d0 96       	adiw	r26, 0x30	; 48
    9ba2:	4d 91       	ld	r20, X+
    9ba4:	5c 91       	ld	r21, X
    9ba6:	da 01       	movw	r26, r20
    9ba8:	2c 91       	ld	r18, X
    9baa:	d7 01       	movw	r26, r14
    9bac:	d7 96       	adiw	r26, 0x37	; 55
    9bae:	3c 91       	ld	r19, X
    9bb0:	23 2b       	or	r18, r19
    9bb2:	da 01       	movw	r26, r20
    9bb4:	2c 93       	st	X, r18
    9bb6:	12 b9       	out	0x02, r17	; 2
    9bb8:	d7 01       	movw	r26, r14
    9bba:	d2 96       	adiw	r26, 0x32	; 50
    9bbc:	4d 91       	ld	r20, X+
    9bbe:	5c 91       	ld	r21, X
    9bc0:	da 01       	movw	r26, r20
    9bc2:	2c 91       	ld	r18, X
    9bc4:	d7 01       	movw	r26, r14
    9bc6:	dc 96       	adiw	r26, 0x3c	; 60
    9bc8:	3c 91       	ld	r19, X
    9bca:	23 23       	and	r18, r19
    9bcc:	da 01       	movw	r26, r20
    9bce:	2c 93       	st	X, r18
    9bd0:	d7 01       	movw	r26, r14
    9bd2:	d2 96       	adiw	r26, 0x32	; 50
    9bd4:	4d 91       	ld	r20, X+
    9bd6:	5c 91       	ld	r21, X
    9bd8:	da 01       	movw	r26, r20
    9bda:	2c 91       	ld	r18, X
    9bdc:	d7 01       	movw	r26, r14
    9bde:	d8 96       	adiw	r26, 0x38	; 56
    9be0:	3c 91       	ld	r19, X
    9be2:	23 2b       	or	r18, r19
    9be4:	da 01       	movw	r26, r20
    9be6:	2c 93       	st	X, r18
    9be8:	02 b9       	out	0x02, r16	; 2
    9bea:	d7 01       	movw	r26, r14
    9bec:	d2 96       	adiw	r26, 0x32	; 50
    9bee:	4d 91       	ld	r20, X+
    9bf0:	5c 91       	ld	r21, X
    9bf2:	da 01       	movw	r26, r20
    9bf4:	2c 91       	ld	r18, X
    9bf6:	d7 01       	movw	r26, r14
    9bf8:	dc 96       	adiw	r26, 0x3c	; 60
    9bfa:	3c 91       	ld	r19, X
    9bfc:	23 23       	and	r18, r19
    9bfe:	da 01       	movw	r26, r20
    9c00:	2c 93       	st	X, r18
    9c02:	d7 01       	movw	r26, r14
    9c04:	d2 96       	adiw	r26, 0x32	; 50
    9c06:	4d 91       	ld	r20, X+
    9c08:	5c 91       	ld	r21, X
    9c0a:	da 01       	movw	r26, r20
    9c0c:	2c 91       	ld	r18, X
    9c0e:	d7 01       	movw	r26, r14
    9c10:	d8 96       	adiw	r26, 0x38	; 56
    9c12:	3c 91       	ld	r19, X
    9c14:	23 2b       	or	r18, r19
    9c16:	da 01       	movw	r26, r20
    9c18:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    9c1a:	d7 01       	movw	r26, r14
    9c1c:	d0 96       	adiw	r26, 0x30	; 48
    9c1e:	4d 91       	ld	r20, X+
    9c20:	5c 91       	ld	r21, X
    9c22:	da 01       	movw	r26, r20
    9c24:	2c 91       	ld	r18, X
    9c26:	d7 01       	movw	r26, r14
    9c28:	db 96       	adiw	r26, 0x3b	; 59
    9c2a:	3c 91       	ld	r19, X
    9c2c:	23 23       	and	r18, r19
    9c2e:	da 01       	movw	r26, r20
    9c30:	2c 93       	st	X, r18
    9c32:	12 b8       	out	0x02, r1	; 2
    9c34:	d7 01       	movw	r26, r14
    9c36:	d2 96       	adiw	r26, 0x32	; 50
    9c38:	4d 91       	ld	r20, X+
    9c3a:	5c 91       	ld	r21, X
    9c3c:	da 01       	movw	r26, r20
    9c3e:	2c 91       	ld	r18, X
    9c40:	d7 01       	movw	r26, r14
    9c42:	dc 96       	adiw	r26, 0x3c	; 60
    9c44:	3c 91       	ld	r19, X
    9c46:	23 23       	and	r18, r19
    9c48:	da 01       	movw	r26, r20
    9c4a:	2c 93       	st	X, r18
    9c4c:	d7 01       	movw	r26, r14
    9c4e:	d2 96       	adiw	r26, 0x32	; 50
    9c50:	4d 91       	ld	r20, X+
    9c52:	5c 91       	ld	r21, X
    9c54:	da 01       	movw	r26, r20
    9c56:	2c 91       	ld	r18, X
    9c58:	d7 01       	movw	r26, r14
    9c5a:	d8 96       	adiw	r26, 0x38	; 56
    9c5c:	3c 91       	ld	r19, X
    9c5e:	23 2b       	or	r18, r19
    9c60:	da 01       	movw	r26, r20
    9c62:	2c 93       	st	X, r18
    9c64:	20 e2       	ldi	r18, 0x20	; 32
    9c66:	22 b9       	out	0x02, r18	; 2
    9c68:	d7 01       	movw	r26, r14
    9c6a:	d2 96       	adiw	r26, 0x32	; 50
    9c6c:	4d 91       	ld	r20, X+
    9c6e:	5c 91       	ld	r21, X
    9c70:	da 01       	movw	r26, r20
    9c72:	2c 91       	ld	r18, X
    9c74:	d7 01       	movw	r26, r14
    9c76:	dc 96       	adiw	r26, 0x3c	; 60
    9c78:	3c 91       	ld	r19, X
    9c7a:	23 23       	and	r18, r19
    9c7c:	da 01       	movw	r26, r20
    9c7e:	2c 93       	st	X, r18
    9c80:	d7 01       	movw	r26, r14
    9c82:	d2 96       	adiw	r26, 0x32	; 50
    9c84:	4d 91       	ld	r20, X+
    9c86:	5c 91       	ld	r21, X
    9c88:	da 01       	movw	r26, r20
    9c8a:	2c 91       	ld	r18, X
    9c8c:	d7 01       	movw	r26, r14
    9c8e:	d8 96       	adiw	r26, 0x38	; 56
    9c90:	3c 91       	ld	r19, X
    9c92:	23 2b       	or	r18, r19
    9c94:	da 01       	movw	r26, r20
    9c96:	2c 93       	st	X, r18
    9c98:	d7 01       	movw	r26, r14
    9c9a:	d0 96       	adiw	r26, 0x30	; 48
    9c9c:	4d 91       	ld	r20, X+
    9c9e:	5c 91       	ld	r21, X
    9ca0:	da 01       	movw	r26, r20
    9ca2:	2c 91       	ld	r18, X
    9ca4:	d7 01       	movw	r26, r14
    9ca6:	d7 96       	adiw	r26, 0x37	; 55
    9ca8:	3c 91       	ld	r19, X
    9caa:	23 2b       	or	r18, r19
    9cac:	da 01       	movw	r26, r20
    9cae:	2c 93       	st	X, r18
    9cb0:	f2 b9       	out	0x02, r31	; 2
    9cb2:	d7 01       	movw	r26, r14
    9cb4:	d2 96       	adiw	r26, 0x32	; 50
    9cb6:	4d 91       	ld	r20, X+
    9cb8:	5c 91       	ld	r21, X
    9cba:	da 01       	movw	r26, r20
    9cbc:	2c 91       	ld	r18, X
    9cbe:	d7 01       	movw	r26, r14
    9cc0:	dc 96       	adiw	r26, 0x3c	; 60
    9cc2:	3c 91       	ld	r19, X
    9cc4:	23 23       	and	r18, r19
    9cc6:	da 01       	movw	r26, r20
    9cc8:	2c 93       	st	X, r18
    9cca:	d7 01       	movw	r26, r14
    9ccc:	d2 96       	adiw	r26, 0x32	; 50
    9cce:	4d 91       	ld	r20, X+
    9cd0:	5c 91       	ld	r21, X
    9cd2:	da 01       	movw	r26, r20
    9cd4:	2c 91       	ld	r18, X
    9cd6:	d7 01       	movw	r26, r14
    9cd8:	d8 96       	adiw	r26, 0x38	; 56
    9cda:	3c 91       	ld	r19, X
    9cdc:	23 2b       	or	r18, r19
    9cde:	da 01       	movw	r26, r20
    9ce0:	2c 93       	st	X, r18
    9ce2:	e2 b9       	out	0x02, r30	; 2
    9ce4:	d7 01       	movw	r26, r14
    9ce6:	d2 96       	adiw	r26, 0x32	; 50
    9ce8:	ed 91       	ld	r30, X+
    9cea:	fc 91       	ld	r31, X
    9cec:	d3 97       	sbiw	r26, 0x33	; 51
    9cee:	20 81       	ld	r18, Z
    9cf0:	dc 96       	adiw	r26, 0x3c	; 60
    9cf2:	3c 91       	ld	r19, X
    9cf4:	dc 97       	sbiw	r26, 0x3c	; 60
    9cf6:	23 23       	and	r18, r19
    9cf8:	20 83       	st	Z, r18
    9cfa:	d2 96       	adiw	r26, 0x32	; 50
    9cfc:	ed 91       	ld	r30, X+
    9cfe:	fc 91       	ld	r31, X
    9d00:	d3 97       	sbiw	r26, 0x33	; 51
    9d02:	20 81       	ld	r18, Z
    9d04:	d8 96       	adiw	r26, 0x38	; 56
    9d06:	3c 91       	ld	r19, X
    9d08:	d8 97       	sbiw	r26, 0x38	; 56
    9d0a:	23 2b       	or	r18, r19
    9d0c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    9d0e:	d0 96       	adiw	r26, 0x30	; 48
    9d10:	ed 91       	ld	r30, X+
    9d12:	fc 91       	ld	r31, X
    9d14:	d1 97       	sbiw	r26, 0x31	; 49
    9d16:	20 81       	ld	r18, Z
    9d18:	db 96       	adiw	r26, 0x3b	; 59
    9d1a:	3c 91       	ld	r19, X
    9d1c:	db 97       	sbiw	r26, 0x3b	; 59
    9d1e:	23 23       	and	r18, r19
    9d20:	20 83       	st	Z, r18
    9d22:	12 b8       	out	0x02, r1	; 2
    9d24:	d2 96       	adiw	r26, 0x32	; 50
    9d26:	ed 91       	ld	r30, X+
    9d28:	fc 91       	ld	r31, X
    9d2a:	d3 97       	sbiw	r26, 0x33	; 51
    9d2c:	20 81       	ld	r18, Z
    9d2e:	dc 96       	adiw	r26, 0x3c	; 60
    9d30:	3c 91       	ld	r19, X
    9d32:	dc 97       	sbiw	r26, 0x3c	; 60
    9d34:	23 23       	and	r18, r19
    9d36:	20 83       	st	Z, r18
    9d38:	d2 96       	adiw	r26, 0x32	; 50
    9d3a:	ed 91       	ld	r30, X+
    9d3c:	fc 91       	ld	r31, X
    9d3e:	d3 97       	sbiw	r26, 0x33	; 51
    9d40:	20 81       	ld	r18, Z
    9d42:	d8 96       	adiw	r26, 0x38	; 56
    9d44:	3c 91       	ld	r19, X
    9d46:	d8 97       	sbiw	r26, 0x38	; 56
    9d48:	23 2b       	or	r18, r19
    9d4a:	20 83       	st	Z, r18
    9d4c:	21 e2       	ldi	r18, 0x21	; 33
    9d4e:	22 b9       	out	0x02, r18	; 2
    9d50:	d2 96       	adiw	r26, 0x32	; 50
    9d52:	ed 91       	ld	r30, X+
    9d54:	fc 91       	ld	r31, X
    9d56:	d3 97       	sbiw	r26, 0x33	; 51
    9d58:	20 81       	ld	r18, Z
    9d5a:	dc 96       	adiw	r26, 0x3c	; 60
    9d5c:	3c 91       	ld	r19, X
    9d5e:	dc 97       	sbiw	r26, 0x3c	; 60
    9d60:	23 23       	and	r18, r19
    9d62:	20 83       	st	Z, r18
    9d64:	d2 96       	adiw	r26, 0x32	; 50
    9d66:	ed 91       	ld	r30, X+
    9d68:	fc 91       	ld	r31, X
    9d6a:	d3 97       	sbiw	r26, 0x33	; 51
    9d6c:	20 81       	ld	r18, Z
    9d6e:	d8 96       	adiw	r26, 0x38	; 56
    9d70:	3c 91       	ld	r19, X
    9d72:	d8 97       	sbiw	r26, 0x38	; 56
    9d74:	23 2b       	or	r18, r19
    9d76:	20 83       	st	Z, r18
    9d78:	d0 96       	adiw	r26, 0x30	; 48
    9d7a:	ed 91       	ld	r30, X+
    9d7c:	fc 91       	ld	r31, X
    9d7e:	d1 97       	sbiw	r26, 0x31	; 49
    9d80:	20 81       	ld	r18, Z
    9d82:	d7 96       	adiw	r26, 0x37	; 55
    9d84:	3c 91       	ld	r19, X
    9d86:	d7 97       	sbiw	r26, 0x37	; 55
    9d88:	23 2b       	or	r18, r19
    9d8a:	20 83       	st	Z, r18
    9d8c:	92 b9       	out	0x02, r25	; 2
    9d8e:	d2 96       	adiw	r26, 0x32	; 50
    9d90:	ed 91       	ld	r30, X+
    9d92:	fc 91       	ld	r31, X
    9d94:	d3 97       	sbiw	r26, 0x33	; 51
    9d96:	90 81       	ld	r25, Z
    9d98:	dc 96       	adiw	r26, 0x3c	; 60
    9d9a:	2c 91       	ld	r18, X
    9d9c:	dc 97       	sbiw	r26, 0x3c	; 60
    9d9e:	92 23       	and	r25, r18
    9da0:	90 83       	st	Z, r25
    9da2:	d2 96       	adiw	r26, 0x32	; 50
    9da4:	ed 91       	ld	r30, X+
    9da6:	fc 91       	ld	r31, X
    9da8:	d3 97       	sbiw	r26, 0x33	; 51
    9daa:	90 81       	ld	r25, Z
    9dac:	d8 96       	adiw	r26, 0x38	; 56
    9dae:	2c 91       	ld	r18, X
    9db0:	d8 97       	sbiw	r26, 0x38	; 56
    9db2:	92 2b       	or	r25, r18
    9db4:	90 83       	st	Z, r25
    9db6:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    9db8:	d2 96       	adiw	r26, 0x32	; 50
    9dba:	ed 91       	ld	r30, X+
    9dbc:	fc 91       	ld	r31, X
    9dbe:	d3 97       	sbiw	r26, 0x33	; 51
    9dc0:	80 81       	ld	r24, Z
    9dc2:	dc 96       	adiw	r26, 0x3c	; 60
    9dc4:	9c 91       	ld	r25, X
    9dc6:	dc 97       	sbiw	r26, 0x3c	; 60
    9dc8:	89 23       	and	r24, r25
    9dca:	80 83       	st	Z, r24
    9dcc:	d2 96       	adiw	r26, 0x32	; 50
    9dce:	ed 91       	ld	r30, X+
    9dd0:	fc 91       	ld	r31, X
    9dd2:	d3 97       	sbiw	r26, 0x33	; 51
    9dd4:	80 81       	ld	r24, Z
    9dd6:	d8 96       	adiw	r26, 0x38	; 56
    9dd8:	9c 91       	ld	r25, X
    9dda:	89 2b       	or	r24, r25
    9ddc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    9dde:	d7 01       	movw	r26, r14
    9de0:	9e 96       	adiw	r26, 0x2e	; 46
    9de2:	ed 91       	ld	r30, X+
    9de4:	fc 91       	ld	r31, X
    9de6:	9f 97       	sbiw	r26, 0x2f	; 47
    9de8:	80 81       	ld	r24, Z
    9dea:	d6 96       	adiw	r26, 0x36	; 54
    9dec:	9c 91       	ld	r25, X
    9dee:	89 2b       	or	r24, r25
    9df0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    9df2:	28 96       	adiw	r28, 0x08	; 8
    9df4:	0f b6       	in	r0, 0x3f	; 63
    9df6:	f8 94       	cli
    9df8:	de bf       	out	0x3e, r29	; 62
    9dfa:	0f be       	out	0x3f, r0	; 63
    9dfc:	cd bf       	out	0x3d, r28	; 61
    9dfe:	df 91       	pop	r29
    9e00:	cf 91       	pop	r28
    9e02:	1f 91       	pop	r17
    9e04:	0f 91       	pop	r16
    9e06:	ff 90       	pop	r15
    9e08:	ef 90       	pop	r14
    9e0a:	df 90       	pop	r13
    9e0c:	cf 90       	pop	r12
    9e0e:	bf 90       	pop	r11
    9e10:	af 90       	pop	r10
    9e12:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    9e14:	f7 01       	movw	r30, r14
    9e16:	a6 85       	ldd	r26, Z+14	; 0x0e
    9e18:	b7 85       	ldd	r27, Z+15	; 0x0f
    9e1a:	59 01       	movw	r10, r18
    9e1c:	a0 94       	com	r10
    9e1e:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    9e20:	9d 01       	movw	r18, r26
    9e22:	26 1b       	sub	r18, r22
    9e24:	37 0b       	sbc	r19, r23
    9e26:	21 50       	subi	r18, 0x01	; 1
    9e28:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    9e2a:	60 89       	ldd	r22, Z+16	; 0x10
    9e2c:	71 89       	ldd	r23, Z+17	; 0x11
    9e2e:	68 01       	movw	r12, r16
    9e30:	c0 94       	com	r12
    9e32:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    9e34:	8a 01       	movw	r16, r20
    9e36:	00 95       	com	r16
    9e38:	10 95       	com	r17
    9e3a:	06 0f       	add	r16, r22
    9e3c:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    9e3e:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    9e40:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    9e42:	a6 01       	movw	r20, r12
    9e44:	46 0f       	add	r20, r22
    9e46:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    9e48:	b5 01       	movw	r22, r10
    9e4a:	f1 cc       	rjmp	.-1566   	; 0x982e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    9e4c:	f7 01       	movw	r30, r14
    9e4e:	a0 89       	ldd	r26, Z+16	; 0x10
    9e50:	b1 89       	ldd	r27, Z+17	; 0x11
    9e52:	69 01       	movw	r12, r18
    9e54:	c0 94       	com	r12
    9e56:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    9e58:	cd 01       	movw	r24, r26
    9e5a:	86 1b       	sub	r24, r22
    9e5c:	97 0b       	sbc	r25, r23
    9e5e:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    9e60:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    9e62:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    9e64:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    9e66:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    9e68:	a6 01       	movw	r20, r12
    9e6a:	4a 0f       	add	r20, r26
    9e6c:	5b 1f       	adc	r21, r27
    9e6e:	e1 cc       	rjmp	.-1598   	; 0x9832 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    9e70:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    9e72:	fb 01       	movw	r30, r22
    9e74:	de cc       	rjmp	.-1604   	; 0x9832 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    9e76:	01 97       	sbiw	r24, 0x01	; 1
    9e78:	09 f0       	breq	.+2      	; 0x9e7c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    9e7a:	e5 c1       	rjmp	.+970    	; 0xa246 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    9e7c:	d0 96       	adiw	r26, 0x30	; 48
    9e7e:	ed 91       	ld	r30, X+
    9e80:	fc 91       	ld	r31, X
    9e82:	d1 97       	sbiw	r26, 0x31	; 49
    9e84:	80 81       	ld	r24, Z
    9e86:	db 96       	adiw	r26, 0x3b	; 59
    9e88:	9c 91       	ld	r25, X
    9e8a:	db 97       	sbiw	r26, 0x3b	; 59
    9e8c:	89 23       	and	r24, r25
    9e8e:	80 83       	st	Z, r24
    9e90:	82 e0       	ldi	r24, 0x02	; 2
    9e92:	82 b9       	out	0x02, r24	; 2
    9e94:	d2 96       	adiw	r26, 0x32	; 50
    9e96:	ed 91       	ld	r30, X+
    9e98:	fc 91       	ld	r31, X
    9e9a:	d3 97       	sbiw	r26, 0x33	; 51
    9e9c:	80 81       	ld	r24, Z
    9e9e:	dc 96       	adiw	r26, 0x3c	; 60
    9ea0:	9c 91       	ld	r25, X
    9ea2:	dc 97       	sbiw	r26, 0x3c	; 60
    9ea4:	89 23       	and	r24, r25
    9ea6:	80 83       	st	Z, r24
    9ea8:	d2 96       	adiw	r26, 0x32	; 50
    9eaa:	ed 91       	ld	r30, X+
    9eac:	fc 91       	ld	r31, X
    9eae:	d3 97       	sbiw	r26, 0x33	; 51
    9eb0:	80 81       	ld	r24, Z
    9eb2:	d8 96       	adiw	r26, 0x38	; 56
    9eb4:	9c 91       	ld	r25, X
    9eb6:	d8 97       	sbiw	r26, 0x38	; 56
    9eb8:	89 2b       	or	r24, r25
    9eba:	80 83       	st	Z, r24
    9ebc:	d0 96       	adiw	r26, 0x30	; 48
    9ebe:	ed 91       	ld	r30, X+
    9ec0:	fc 91       	ld	r31, X
    9ec2:	d1 97       	sbiw	r26, 0x31	; 49
    9ec4:	80 81       	ld	r24, Z
    9ec6:	d7 96       	adiw	r26, 0x37	; 55
    9ec8:	9c 91       	ld	r25, X
    9eca:	d7 97       	sbiw	r26, 0x37	; 55
    9ecc:	89 2b       	or	r24, r25
    9ece:	80 83       	st	Z, r24
    9ed0:	72 b9       	out	0x02, r23	; 2
    9ed2:	d2 96       	adiw	r26, 0x32	; 50
    9ed4:	ed 91       	ld	r30, X+
    9ed6:	fc 91       	ld	r31, X
    9ed8:	d3 97       	sbiw	r26, 0x33	; 51
    9eda:	80 81       	ld	r24, Z
    9edc:	dc 96       	adiw	r26, 0x3c	; 60
    9ede:	9c 91       	ld	r25, X
    9ee0:	dc 97       	sbiw	r26, 0x3c	; 60
    9ee2:	89 23       	and	r24, r25
    9ee4:	80 83       	st	Z, r24
    9ee6:	d2 96       	adiw	r26, 0x32	; 50
    9ee8:	ed 91       	ld	r30, X+
    9eea:	fc 91       	ld	r31, X
    9eec:	d3 97       	sbiw	r26, 0x33	; 51
    9eee:	80 81       	ld	r24, Z
    9ef0:	d8 96       	adiw	r26, 0x38	; 56
    9ef2:	9c 91       	ld	r25, X
    9ef4:	d8 97       	sbiw	r26, 0x38	; 56
    9ef6:	89 2b       	or	r24, r25
    9ef8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    9efa:	d0 96       	adiw	r26, 0x30	; 48
    9efc:	ed 91       	ld	r30, X+
    9efe:	fc 91       	ld	r31, X
    9f00:	d1 97       	sbiw	r26, 0x31	; 49
    9f02:	80 81       	ld	r24, Z
    9f04:	db 96       	adiw	r26, 0x3b	; 59
    9f06:	9c 91       	ld	r25, X
    9f08:	db 97       	sbiw	r26, 0x3b	; 59
    9f0a:	89 23       	and	r24, r25
    9f0c:	80 83       	st	Z, r24
    9f0e:	83 e0       	ldi	r24, 0x03	; 3
    9f10:	82 b9       	out	0x02, r24	; 2
    9f12:	d2 96       	adiw	r26, 0x32	; 50
    9f14:	ed 91       	ld	r30, X+
    9f16:	fc 91       	ld	r31, X
    9f18:	d3 97       	sbiw	r26, 0x33	; 51
    9f1a:	80 81       	ld	r24, Z
    9f1c:	dc 96       	adiw	r26, 0x3c	; 60
    9f1e:	9c 91       	ld	r25, X
    9f20:	dc 97       	sbiw	r26, 0x3c	; 60
    9f22:	89 23       	and	r24, r25
    9f24:	80 83       	st	Z, r24
    9f26:	d2 96       	adiw	r26, 0x32	; 50
    9f28:	ed 91       	ld	r30, X+
    9f2a:	fc 91       	ld	r31, X
    9f2c:	d3 97       	sbiw	r26, 0x33	; 51
    9f2e:	80 81       	ld	r24, Z
    9f30:	d8 96       	adiw	r26, 0x38	; 56
    9f32:	9c 91       	ld	r25, X
    9f34:	d8 97       	sbiw	r26, 0x38	; 56
    9f36:	89 2b       	or	r24, r25
    9f38:	80 83       	st	Z, r24
    9f3a:	d0 96       	adiw	r26, 0x30	; 48
    9f3c:	ed 91       	ld	r30, X+
    9f3e:	fc 91       	ld	r31, X
    9f40:	d1 97       	sbiw	r26, 0x31	; 49
    9f42:	80 81       	ld	r24, Z
    9f44:	d7 96       	adiw	r26, 0x37	; 55
    9f46:	9c 91       	ld	r25, X
    9f48:	d7 97       	sbiw	r26, 0x37	; 55
    9f4a:	89 2b       	or	r24, r25
    9f4c:	80 83       	st	Z, r24
    9f4e:	62 b9       	out	0x02, r22	; 2
    9f50:	d2 96       	adiw	r26, 0x32	; 50
    9f52:	ed 91       	ld	r30, X+
    9f54:	fc 91       	ld	r31, X
    9f56:	d3 97       	sbiw	r26, 0x33	; 51
    9f58:	80 81       	ld	r24, Z
    9f5a:	dc 96       	adiw	r26, 0x3c	; 60
    9f5c:	9c 91       	ld	r25, X
    9f5e:	dc 97       	sbiw	r26, 0x3c	; 60
    9f60:	89 23       	and	r24, r25
    9f62:	80 83       	st	Z, r24
    9f64:	d2 96       	adiw	r26, 0x32	; 50
    9f66:	ed 91       	ld	r30, X+
    9f68:	fc 91       	ld	r31, X
    9f6a:	d3 97       	sbiw	r26, 0x33	; 51
    9f6c:	80 81       	ld	r24, Z
    9f6e:	d8 96       	adiw	r26, 0x38	; 56
    9f70:	9c 91       	ld	r25, X
    9f72:	d8 97       	sbiw	r26, 0x38	; 56
    9f74:	89 2b       	or	r24, r25
    9f76:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    9f78:	d0 96       	adiw	r26, 0x30	; 48
    9f7a:	ed 91       	ld	r30, X+
    9f7c:	fc 91       	ld	r31, X
    9f7e:	d1 97       	sbiw	r26, 0x31	; 49
    9f80:	80 81       	ld	r24, Z
    9f82:	db 96       	adiw	r26, 0x3b	; 59
    9f84:	9c 91       	ld	r25, X
    9f86:	db 97       	sbiw	r26, 0x3b	; 59
    9f88:	89 23       	and	r24, r25
    9f8a:	80 83       	st	Z, r24
    9f8c:	86 e0       	ldi	r24, 0x06	; 6
    9f8e:	82 b9       	out	0x02, r24	; 2
    9f90:	d2 96       	adiw	r26, 0x32	; 50
    9f92:	ed 91       	ld	r30, X+
    9f94:	fc 91       	ld	r31, X
    9f96:	d3 97       	sbiw	r26, 0x33	; 51
    9f98:	80 81       	ld	r24, Z
    9f9a:	dc 96       	adiw	r26, 0x3c	; 60
    9f9c:	9c 91       	ld	r25, X
    9f9e:	dc 97       	sbiw	r26, 0x3c	; 60
    9fa0:	89 23       	and	r24, r25
    9fa2:	80 83       	st	Z, r24
    9fa4:	d2 96       	adiw	r26, 0x32	; 50
    9fa6:	ed 91       	ld	r30, X+
    9fa8:	fc 91       	ld	r31, X
    9faa:	d3 97       	sbiw	r26, 0x33	; 51
    9fac:	80 81       	ld	r24, Z
    9fae:	d8 96       	adiw	r26, 0x38	; 56
    9fb0:	9c 91       	ld	r25, X
    9fb2:	d8 97       	sbiw	r26, 0x38	; 56
    9fb4:	89 2b       	or	r24, r25
    9fb6:	80 83       	st	Z, r24
    9fb8:	d0 96       	adiw	r26, 0x30	; 48
    9fba:	ed 91       	ld	r30, X+
    9fbc:	fc 91       	ld	r31, X
    9fbe:	d1 97       	sbiw	r26, 0x31	; 49
    9fc0:	80 81       	ld	r24, Z
    9fc2:	d7 96       	adiw	r26, 0x37	; 55
    9fc4:	9c 91       	ld	r25, X
    9fc6:	d7 97       	sbiw	r26, 0x37	; 55
    9fc8:	89 2b       	or	r24, r25
    9fca:	80 83       	st	Z, r24
    9fcc:	52 b9       	out	0x02, r21	; 2
    9fce:	d2 96       	adiw	r26, 0x32	; 50
    9fd0:	ed 91       	ld	r30, X+
    9fd2:	fc 91       	ld	r31, X
    9fd4:	d3 97       	sbiw	r26, 0x33	; 51
    9fd6:	80 81       	ld	r24, Z
    9fd8:	dc 96       	adiw	r26, 0x3c	; 60
    9fda:	9c 91       	ld	r25, X
    9fdc:	dc 97       	sbiw	r26, 0x3c	; 60
    9fde:	89 23       	and	r24, r25
    9fe0:	80 83       	st	Z, r24
    9fe2:	d2 96       	adiw	r26, 0x32	; 50
    9fe4:	ed 91       	ld	r30, X+
    9fe6:	fc 91       	ld	r31, X
    9fe8:	d3 97       	sbiw	r26, 0x33	; 51
    9fea:	80 81       	ld	r24, Z
    9fec:	d8 96       	adiw	r26, 0x38	; 56
    9fee:	9c 91       	ld	r25, X
    9ff0:	d8 97       	sbiw	r26, 0x38	; 56
    9ff2:	89 2b       	or	r24, r25
    9ff4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    9ff6:	d0 96       	adiw	r26, 0x30	; 48
    9ff8:	ed 91       	ld	r30, X+
    9ffa:	fc 91       	ld	r31, X
    9ffc:	d1 97       	sbiw	r26, 0x31	; 49
    9ffe:	80 81       	ld	r24, Z
    a000:	db 96       	adiw	r26, 0x3b	; 59
    a002:	9c 91       	ld	r25, X
    a004:	db 97       	sbiw	r26, 0x3b	; 59
    a006:	89 23       	and	r24, r25
    a008:	80 83       	st	Z, r24
    a00a:	87 e0       	ldi	r24, 0x07	; 7
    a00c:	82 b9       	out	0x02, r24	; 2
    a00e:	d2 96       	adiw	r26, 0x32	; 50
    a010:	ed 91       	ld	r30, X+
    a012:	fc 91       	ld	r31, X
    a014:	d3 97       	sbiw	r26, 0x33	; 51
    a016:	80 81       	ld	r24, Z
    a018:	dc 96       	adiw	r26, 0x3c	; 60
    a01a:	9c 91       	ld	r25, X
    a01c:	dc 97       	sbiw	r26, 0x3c	; 60
    a01e:	89 23       	and	r24, r25
    a020:	80 83       	st	Z, r24
    a022:	d2 96       	adiw	r26, 0x32	; 50
    a024:	ed 91       	ld	r30, X+
    a026:	fc 91       	ld	r31, X
    a028:	d3 97       	sbiw	r26, 0x33	; 51
    a02a:	80 81       	ld	r24, Z
    a02c:	d8 96       	adiw	r26, 0x38	; 56
    a02e:	9c 91       	ld	r25, X
    a030:	d8 97       	sbiw	r26, 0x38	; 56
    a032:	89 2b       	or	r24, r25
    a034:	80 83       	st	Z, r24
    a036:	d0 96       	adiw	r26, 0x30	; 48
    a038:	ed 91       	ld	r30, X+
    a03a:	fc 91       	ld	r31, X
    a03c:	d1 97       	sbiw	r26, 0x31	; 49
    a03e:	80 81       	ld	r24, Z
    a040:	d7 96       	adiw	r26, 0x37	; 55
    a042:	9c 91       	ld	r25, X
    a044:	d7 97       	sbiw	r26, 0x37	; 55
    a046:	89 2b       	or	r24, r25
    a048:	80 83       	st	Z, r24
    a04a:	42 b9       	out	0x02, r20	; 2
    a04c:	d2 96       	adiw	r26, 0x32	; 50
    a04e:	ed 91       	ld	r30, X+
    a050:	fc 91       	ld	r31, X
    a052:	d3 97       	sbiw	r26, 0x33	; 51
    a054:	80 81       	ld	r24, Z
    a056:	dc 96       	adiw	r26, 0x3c	; 60
    a058:	9c 91       	ld	r25, X
    a05a:	dc 97       	sbiw	r26, 0x3c	; 60
    a05c:	89 23       	and	r24, r25
    a05e:	80 83       	st	Z, r24
    a060:	d2 96       	adiw	r26, 0x32	; 50
    a062:	ed 91       	ld	r30, X+
    a064:	fc 91       	ld	r31, X
    a066:	d3 97       	sbiw	r26, 0x33	; 51
    a068:	80 81       	ld	r24, Z
    a06a:	d8 96       	adiw	r26, 0x38	; 56
    a06c:	9c 91       	ld	r25, X
    a06e:	d8 97       	sbiw	r26, 0x38	; 56
    a070:	89 2b       	or	r24, r25
    a072:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    a074:	d0 96       	adiw	r26, 0x30	; 48
    a076:	ed 91       	ld	r30, X+
    a078:	fc 91       	ld	r31, X
    a07a:	d1 97       	sbiw	r26, 0x31	; 49
    a07c:	80 81       	ld	r24, Z
    a07e:	db 96       	adiw	r26, 0x3b	; 59
    a080:	9c 91       	ld	r25, X
    a082:	db 97       	sbiw	r26, 0x3b	; 59
    a084:	89 23       	and	r24, r25
    a086:	80 83       	st	Z, r24
    a088:	84 e0       	ldi	r24, 0x04	; 4
    a08a:	82 b9       	out	0x02, r24	; 2
    a08c:	d2 96       	adiw	r26, 0x32	; 50
    a08e:	ed 91       	ld	r30, X+
    a090:	fc 91       	ld	r31, X
    a092:	d3 97       	sbiw	r26, 0x33	; 51
    a094:	80 81       	ld	r24, Z
    a096:	dc 96       	adiw	r26, 0x3c	; 60
    a098:	9c 91       	ld	r25, X
    a09a:	dc 97       	sbiw	r26, 0x3c	; 60
    a09c:	89 23       	and	r24, r25
    a09e:	80 83       	st	Z, r24
    a0a0:	d2 96       	adiw	r26, 0x32	; 50
    a0a2:	ed 91       	ld	r30, X+
    a0a4:	fc 91       	ld	r31, X
    a0a6:	d3 97       	sbiw	r26, 0x33	; 51
    a0a8:	80 81       	ld	r24, Z
    a0aa:	d8 96       	adiw	r26, 0x38	; 56
    a0ac:	9c 91       	ld	r25, X
    a0ae:	d8 97       	sbiw	r26, 0x38	; 56
    a0b0:	89 2b       	or	r24, r25
    a0b2:	80 83       	st	Z, r24
    a0b4:	d0 96       	adiw	r26, 0x30	; 48
    a0b6:	ed 91       	ld	r30, X+
    a0b8:	fc 91       	ld	r31, X
    a0ba:	d1 97       	sbiw	r26, 0x31	; 49
    a0bc:	80 81       	ld	r24, Z
    a0be:	d7 96       	adiw	r26, 0x37	; 55
    a0c0:	9c 91       	ld	r25, X
    a0c2:	d7 97       	sbiw	r26, 0x37	; 55
    a0c4:	89 2b       	or	r24, r25
    a0c6:	80 83       	st	Z, r24
    a0c8:	32 b9       	out	0x02, r19	; 2
    a0ca:	d2 96       	adiw	r26, 0x32	; 50
    a0cc:	ed 91       	ld	r30, X+
    a0ce:	fc 91       	ld	r31, X
    a0d0:	d3 97       	sbiw	r26, 0x33	; 51
    a0d2:	80 81       	ld	r24, Z
    a0d4:	dc 96       	adiw	r26, 0x3c	; 60
    a0d6:	9c 91       	ld	r25, X
    a0d8:	dc 97       	sbiw	r26, 0x3c	; 60
    a0da:	89 23       	and	r24, r25
    a0dc:	80 83       	st	Z, r24
    a0de:	d2 96       	adiw	r26, 0x32	; 50
    a0e0:	ed 91       	ld	r30, X+
    a0e2:	fc 91       	ld	r31, X
    a0e4:	d3 97       	sbiw	r26, 0x33	; 51
    a0e6:	80 81       	ld	r24, Z
    a0e8:	d8 96       	adiw	r26, 0x38	; 56
    a0ea:	9c 91       	ld	r25, X
    a0ec:	d8 97       	sbiw	r26, 0x38	; 56
    a0ee:	89 2b       	or	r24, r25
    a0f0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    a0f2:	d0 96       	adiw	r26, 0x30	; 48
    a0f4:	ed 91       	ld	r30, X+
    a0f6:	fc 91       	ld	r31, X
    a0f8:	d1 97       	sbiw	r26, 0x31	; 49
    a0fa:	80 81       	ld	r24, Z
    a0fc:	db 96       	adiw	r26, 0x3b	; 59
    a0fe:	9c 91       	ld	r25, X
    a100:	db 97       	sbiw	r26, 0x3b	; 59
    a102:	89 23       	and	r24, r25
    a104:	80 83       	st	Z, r24
    a106:	85 e0       	ldi	r24, 0x05	; 5
    a108:	82 b9       	out	0x02, r24	; 2
    a10a:	d2 96       	adiw	r26, 0x32	; 50
    a10c:	ed 91       	ld	r30, X+
    a10e:	fc 91       	ld	r31, X
    a110:	d3 97       	sbiw	r26, 0x33	; 51
    a112:	80 81       	ld	r24, Z
    a114:	dc 96       	adiw	r26, 0x3c	; 60
    a116:	9c 91       	ld	r25, X
    a118:	dc 97       	sbiw	r26, 0x3c	; 60
    a11a:	89 23       	and	r24, r25
    a11c:	80 83       	st	Z, r24
    a11e:	d2 96       	adiw	r26, 0x32	; 50
    a120:	ed 91       	ld	r30, X+
    a122:	fc 91       	ld	r31, X
    a124:	d3 97       	sbiw	r26, 0x33	; 51
    a126:	80 81       	ld	r24, Z
    a128:	d8 96       	adiw	r26, 0x38	; 56
    a12a:	9c 91       	ld	r25, X
    a12c:	d8 97       	sbiw	r26, 0x38	; 56
    a12e:	89 2b       	or	r24, r25
    a130:	80 83       	st	Z, r24
    a132:	d0 96       	adiw	r26, 0x30	; 48
    a134:	ed 91       	ld	r30, X+
    a136:	fc 91       	ld	r31, X
    a138:	d1 97       	sbiw	r26, 0x31	; 49
    a13a:	80 81       	ld	r24, Z
    a13c:	d7 96       	adiw	r26, 0x37	; 55
    a13e:	9c 91       	ld	r25, X
    a140:	d7 97       	sbiw	r26, 0x37	; 55
    a142:	89 2b       	or	r24, r25
    a144:	80 83       	st	Z, r24
    a146:	22 b9       	out	0x02, r18	; 2
    a148:	d2 96       	adiw	r26, 0x32	; 50
    a14a:	ed 91       	ld	r30, X+
    a14c:	fc 91       	ld	r31, X
    a14e:	d3 97       	sbiw	r26, 0x33	; 51
    a150:	80 81       	ld	r24, Z
    a152:	dc 96       	adiw	r26, 0x3c	; 60
    a154:	9c 91       	ld	r25, X
    a156:	dc 97       	sbiw	r26, 0x3c	; 60
    a158:	89 23       	and	r24, r25
    a15a:	80 83       	st	Z, r24
    a15c:	d2 96       	adiw	r26, 0x32	; 50
    a15e:	ed 91       	ld	r30, X+
    a160:	fc 91       	ld	r31, X
    a162:	d3 97       	sbiw	r26, 0x33	; 51
    a164:	80 81       	ld	r24, Z
    a166:	d8 96       	adiw	r26, 0x38	; 56
    a168:	9c 91       	ld	r25, X
    a16a:	d8 97       	sbiw	r26, 0x38	; 56
    a16c:	89 2b       	or	r24, r25
    a16e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    a170:	d0 96       	adiw	r26, 0x30	; 48
    a172:	ed 91       	ld	r30, X+
    a174:	fc 91       	ld	r31, X
    a176:	d1 97       	sbiw	r26, 0x31	; 49
    a178:	80 81       	ld	r24, Z
    a17a:	db 96       	adiw	r26, 0x3b	; 59
    a17c:	9c 91       	ld	r25, X
    a17e:	db 97       	sbiw	r26, 0x3b	; 59
    a180:	89 23       	and	r24, r25
    a182:	80 83       	st	Z, r24
    a184:	88 e0       	ldi	r24, 0x08	; 8
    a186:	82 b9       	out	0x02, r24	; 2
    a188:	d2 96       	adiw	r26, 0x32	; 50
    a18a:	ed 91       	ld	r30, X+
    a18c:	fc 91       	ld	r31, X
    a18e:	d3 97       	sbiw	r26, 0x33	; 51
    a190:	80 81       	ld	r24, Z
    a192:	dc 96       	adiw	r26, 0x3c	; 60
    a194:	9c 91       	ld	r25, X
    a196:	dc 97       	sbiw	r26, 0x3c	; 60
    a198:	89 23       	and	r24, r25
    a19a:	80 83       	st	Z, r24
    a19c:	d2 96       	adiw	r26, 0x32	; 50
    a19e:	ed 91       	ld	r30, X+
    a1a0:	fc 91       	ld	r31, X
    a1a2:	d3 97       	sbiw	r26, 0x33	; 51
    a1a4:	80 81       	ld	r24, Z
    a1a6:	d8 96       	adiw	r26, 0x38	; 56
    a1a8:	9c 91       	ld	r25, X
    a1aa:	d8 97       	sbiw	r26, 0x38	; 56
    a1ac:	89 2b       	or	r24, r25
    a1ae:	80 83       	st	Z, r24
    a1b0:	d0 96       	adiw	r26, 0x30	; 48
    a1b2:	ed 91       	ld	r30, X+
    a1b4:	fc 91       	ld	r31, X
    a1b6:	d1 97       	sbiw	r26, 0x31	; 49
    a1b8:	80 81       	ld	r24, Z
    a1ba:	d7 96       	adiw	r26, 0x37	; 55
    a1bc:	9c 91       	ld	r25, X
    a1be:	d7 97       	sbiw	r26, 0x37	; 55
    a1c0:	89 2b       	or	r24, r25
    a1c2:	80 83       	st	Z, r24
    a1c4:	12 b9       	out	0x02, r17	; 2
    a1c6:	d2 96       	adiw	r26, 0x32	; 50
    a1c8:	ed 91       	ld	r30, X+
    a1ca:	fc 91       	ld	r31, X
    a1cc:	d3 97       	sbiw	r26, 0x33	; 51
    a1ce:	80 81       	ld	r24, Z
    a1d0:	dc 96       	adiw	r26, 0x3c	; 60
    a1d2:	9c 91       	ld	r25, X
    a1d4:	dc 97       	sbiw	r26, 0x3c	; 60
    a1d6:	89 23       	and	r24, r25
    a1d8:	80 83       	st	Z, r24
    a1da:	d2 96       	adiw	r26, 0x32	; 50
    a1dc:	ed 91       	ld	r30, X+
    a1de:	fc 91       	ld	r31, X
    a1e0:	d3 97       	sbiw	r26, 0x33	; 51
    a1e2:	80 81       	ld	r24, Z
    a1e4:	d8 96       	adiw	r26, 0x38	; 56
    a1e6:	9c 91       	ld	r25, X
    a1e8:	d8 97       	sbiw	r26, 0x38	; 56
    a1ea:	89 2b       	or	r24, r25
    a1ec:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    a1ee:	d0 96       	adiw	r26, 0x30	; 48
    a1f0:	ed 91       	ld	r30, X+
    a1f2:	fc 91       	ld	r31, X
    a1f4:	d1 97       	sbiw	r26, 0x31	; 49
    a1f6:	80 81       	ld	r24, Z
    a1f8:	db 96       	adiw	r26, 0x3b	; 59
    a1fa:	9c 91       	ld	r25, X
    a1fc:	db 97       	sbiw	r26, 0x3b	; 59
    a1fe:	89 23       	and	r24, r25
    a200:	80 83       	st	Z, r24
    a202:	89 e0       	ldi	r24, 0x09	; 9
    a204:	82 b9       	out	0x02, r24	; 2
    a206:	d2 96       	adiw	r26, 0x32	; 50
    a208:	ed 91       	ld	r30, X+
    a20a:	fc 91       	ld	r31, X
    a20c:	d3 97       	sbiw	r26, 0x33	; 51
    a20e:	80 81       	ld	r24, Z
    a210:	dc 96       	adiw	r26, 0x3c	; 60
    a212:	9c 91       	ld	r25, X
    a214:	dc 97       	sbiw	r26, 0x3c	; 60
    a216:	89 23       	and	r24, r25
    a218:	80 83       	st	Z, r24
    a21a:	d2 96       	adiw	r26, 0x32	; 50
    a21c:	ed 91       	ld	r30, X+
    a21e:	fc 91       	ld	r31, X
    a220:	d3 97       	sbiw	r26, 0x33	; 51
    a222:	80 81       	ld	r24, Z
    a224:	d8 96       	adiw	r26, 0x38	; 56
    a226:	9c 91       	ld	r25, X
    a228:	d8 97       	sbiw	r26, 0x38	; 56
    a22a:	89 2b       	or	r24, r25
    a22c:	80 83       	st	Z, r24
    a22e:	d0 96       	adiw	r26, 0x30	; 48
    a230:	ed 91       	ld	r30, X+
    a232:	fc 91       	ld	r31, X
    a234:	d1 97       	sbiw	r26, 0x31	; 49
    a236:	80 81       	ld	r24, Z
    a238:	d7 96       	adiw	r26, 0x37	; 55
    a23a:	9c 91       	ld	r25, X
    a23c:	d7 97       	sbiw	r26, 0x37	; 55
    a23e:	89 2b       	or	r24, r25
    a240:	80 83       	st	Z, r24
    a242:	02 b9       	out	0x02, r16	; 2
    a244:	b9 cd       	rjmp	.-1166   	; 0x9db8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    a246:	7d 83       	std	Y+5, r23	; 0x05
    a248:	6e 83       	std	Y+6, r22	; 0x06
    a24a:	3f 83       	std	Y+7, r19	; 0x07
    a24c:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    a24e:	59 83       	std	Y+1, r21	; 0x01
    a250:	4a 83       	std	Y+2, r20	; 0x02
    a252:	1b 83       	std	Y+3, r17	; 0x03
    a254:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    a256:	f7 01       	movw	r30, r14
    a258:	64 8d       	ldd	r22, Z+28	; 0x1c
    a25a:	75 8d       	ldd	r23, Z+29	; 0x1d
    a25c:	24 e0       	ldi	r18, 0x04	; 4
    a25e:	ae 01       	movw	r20, r28
    a260:	4b 5f       	subi	r20, 0xFB	; 251
    a262:	5f 4f       	sbci	r21, 0xFF	; 255
    a264:	c7 01       	movw	r24, r14
    a266:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    a26a:	d7 01       	movw	r26, r14
    a26c:	5e 96       	adiw	r26, 0x1e	; 30
    a26e:	6d 91       	ld	r22, X+
    a270:	7c 91       	ld	r23, X
    a272:	24 e0       	ldi	r18, 0x04	; 4
    a274:	ae 01       	movw	r20, r28
    a276:	4f 5f       	subi	r20, 0xFF	; 255
    a278:	5f 4f       	sbci	r21, 0xFF	; 255
    a27a:	c7 01       	movw	r24, r14
    a27c:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    a280:	ae cd       	rjmp	.-1188   	; 0x9dde <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

0000a282 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3790
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    a282:	af 92       	push	r10
    a284:	bf 92       	push	r11
    a286:	cf 92       	push	r12
    a288:	df 92       	push	r13
    a28a:	ff 92       	push	r15
    a28c:	0f 93       	push	r16
    a28e:	1f 93       	push	r17
    a290:	cf 93       	push	r28
    a292:	df 93       	push	r29
    a294:	cd b7       	in	r28, 0x3d	; 61
    a296:	de b7       	in	r29, 0x3e	; 62
    a298:	a0 97       	sbiw	r28, 0x20	; 32
    a29a:	0f b6       	in	r0, 0x3f	; 63
    a29c:	f8 94       	cli
    a29e:	de bf       	out	0x3e, r29	; 62
    a2a0:	0f be       	out	0x3f, r0	; 63
    a2a2:	cd bf       	out	0x3d, r28	; 61
    a2a4:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    a2a6:	a8 2e       	mov	r10, r24
    a2a8:	b1 2c       	mov	r11, r1
    a2aa:	65 01       	movw	r12, r10
    a2ac:	cc 0c       	add	r12, r12
    a2ae:	dd 1c       	adc	r13, r13
    a2b0:	cc 0c       	add	r12, r12
    a2b2:	dd 1c       	adc	r13, r13
    a2b4:	f6 01       	movw	r30, r12
    a2b6:	e5 52       	subi	r30, 0x25	; 37
    a2b8:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    a2ba:	60 81       	ld	r22, Z
    a2bc:	71 81       	ldd	r23, Z+1	; 0x01
    a2be:	82 81       	ldd	r24, Z+2	; 0x02
    a2c0:	93 81       	ldd	r25, Z+3	; 0x03
    a2c2:	8e 01       	movw	r16, r28
    a2c4:	0f 5f       	subi	r16, 0xFF	; 255
    a2c6:	1f 4f       	sbci	r17, 0xFF	; 255
    a2c8:	22 e0       	ldi	r18, 0x02	; 2
    a2ca:	47 e0       	ldi	r20, 0x07	; 7
    a2cc:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    a2d0:	98 01       	movw	r18, r16
    a2d2:	44 e8       	ldi	r20, 0x84	; 132
    a2d4:	56 e0       	ldi	r21, 0x06	; 6
    a2d6:	6f 2d       	mov	r22, r15
    a2d8:	82 e5       	ldi	r24, 0x52	; 82
    a2da:	93 e0       	ldi	r25, 0x03	; 3
    a2dc:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_get_pid_i():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    a2e0:	f6 01       	movw	r30, r12
    a2e2:	e1 51       	subi	r30, 0x11	; 17
    a2e4:	f6 4f       	sbci	r31, 0xF6	; 246
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    a2e6:	60 81       	ld	r22, Z
    a2e8:	71 81       	ldd	r23, Z+1	; 0x01
    a2ea:	82 81       	ldd	r24, Z+2	; 0x02
    a2ec:	93 81       	ldd	r25, Z+3	; 0x03
    a2ee:	22 e0       	ldi	r18, 0x02	; 2
    a2f0:	47 e0       	ldi	r20, 0x07	; 7
    a2f2:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3795
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    a2f6:	98 01       	movw	r18, r16
    a2f8:	4b e8       	ldi	r20, 0x8B	; 139
    a2fa:	56 e0       	ldi	r21, 0x06	; 6
    a2fc:	6f 2d       	mov	r22, r15
    a2fe:	82 e5       	ldi	r24, 0x52	; 82
    a300:	93 e0       	ldi	r25, 0x03	; 3
    a302:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_get_pid_d():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    a306:	f6 01       	movw	r30, r12
    a308:	ed 5f       	subi	r30, 0xFD	; 253
    a30a:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    a30c:	60 81       	ld	r22, Z
    a30e:	71 81       	ldd	r23, Z+1	; 0x01
    a310:	82 81       	ldd	r24, Z+2	; 0x02
    a312:	93 81       	ldd	r25, Z+3	; 0x03
    a314:	22 e0       	ldi	r18, 0x02	; 2
    a316:	47 e0       	ldi	r20, 0x07	; 7
    a318:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    a31c:	98 01       	movw	r18, r16
    a31e:	42 e9       	ldi	r20, 0x92	; 146
    a320:	56 e0       	ldi	r21, 0x06	; 6
    a322:	6f 2d       	mov	r22, r15
    a324:	82 e5       	ldi	r24, 0x52	; 82
    a326:	93 e0       	ldi	r25, 0x03	; 3
    a328:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_get_pid_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    a32c:	f5 01       	movw	r30, r10
    a32e:	e9 5e       	subi	r30, 0xE9	; 233
    a330:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3798
  itoa(thermostat_get_pid_time(idx), payload, 10);
    a332:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a334:	4a e0       	ldi	r20, 0x0A	; 10
    a336:	b8 01       	movw	r22, r16
    a338:	90 e0       	ldi	r25, 0x00	; 0
    a33a:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    a33e:	98 01       	movw	r18, r16
    a340:	49 e9       	ldi	r20, 0x99	; 153
    a342:	56 e0       	ldi	r21, 0x06	; 6
    a344:	6f 2d       	mov	r22, r15
    a346:	82 e5       	ldi	r24, 0x52	; 82
    a348:	93 e0       	ldi	r25, 0x03	; 3
    a34a:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3800
}
    a34e:	a0 96       	adiw	r28, 0x20	; 32
    a350:	0f b6       	in	r0, 0x3f	; 63
    a352:	f8 94       	cli
    a354:	de bf       	out	0x3e, r29	; 62
    a356:	0f be       	out	0x3f, r0	; 63
    a358:	cd bf       	out	0x3d, r28	; 61
    a35a:	df 91       	pop	r29
    a35c:	cf 91       	pop	r28
    a35e:	1f 91       	pop	r17
    a360:	0f 91       	pop	r16
    a362:	ff 90       	pop	r15
    a364:	df 90       	pop	r13
    a366:	cf 90       	pop	r12
    a368:	bf 90       	pop	r11
    a36a:	af 90       	pop	r10
    a36c:	08 95       	ret

0000a36e <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    a36e:	4f 92       	push	r4
    a370:	5f 92       	push	r5
    a372:	6f 92       	push	r6
    a374:	7f 92       	push	r7
    a376:	8f 92       	push	r8
    a378:	9f 92       	push	r9
    a37a:	af 92       	push	r10
    a37c:	bf 92       	push	r11
    a37e:	cf 92       	push	r12
    a380:	df 92       	push	r13
    a382:	ef 92       	push	r14
    a384:	ff 92       	push	r15
    a386:	0f 93       	push	r16
    a388:	1f 93       	push	r17
    a38a:	cf 93       	push	r28
    a38c:	df 93       	push	r29
    a38e:	1f 92       	push	r1
    a390:	cd b7       	in	r28, 0x3d	; 61
    a392:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
  uint16_t color_background;
  uint8_t args1;
  const Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    a394:	ce 01       	movw	r24, r28
    a396:	01 96       	adiw	r24, 0x01	; 1
    a398:	0e 94 01 3a 	call	0x7402	; 0x7402 <MenuHistoryGetMenu(unsigned char*)>
    a39c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
  attr = pgm_read_byte(&current->atributes);
    a39e:	fc 01       	movw	r30, r24
    a3a0:	e2 53       	subi	r30, 0x32	; 50
    a3a2:	fd 4f       	sbci	r31, 0xFD	; 253
    a3a4:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
  x = pgm_read_word(&current->x);
    a3a6:	38 97       	sbiw	r30, 0x08	; 8
    a3a8:	c5 90       	lpm	r12, Z+
    a3aa:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
  y = pgm_read_word(&current->y);
    a3ac:	fc 01       	movw	r30, r24
    a3ae:	e8 53       	subi	r30, 0x38	; 56
    a3b0:	fd 4f       	sbci	r31, 0xFD	; 253
    a3b2:	e5 90       	lpm	r14, Z+
    a3b4:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
  size_x = pgm_read_word(&current->size_x);
    a3b6:	fc 01       	movw	r30, r24
    a3b8:	e6 53       	subi	r30, 0x36	; 54
    a3ba:	fd 4f       	sbci	r31, 0xFD	; 253
    a3bc:	a5 90       	lpm	r10, Z+
    a3be:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
  size_y = pgm_read_word(&current->size_y);
    a3c0:	fc 01       	movw	r30, r24
    a3c2:	e4 53       	subi	r30, 0x34	; 52
    a3c4:	fd 4f       	sbci	r31, 0xFD	; 253
    a3c6:	65 90       	lpm	r6, Z+
    a3c8:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2082
  color_background = pgm_read_word(&current->color_background);
    a3ca:	fc 01       	movw	r30, r24
    a3cc:	e1 53       	subi	r30, 0x31	; 49
    a3ce:	fd 4f       	sbci	r31, 0xFD	; 253
    a3d0:	85 90       	lpm	r8, Z+
    a3d2:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    a3d4:	50 fe       	sbrs	r5, 0
    a3d6:	03 c0       	rjmp	.+6      	; 0xa3de <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    a3d8:	c4 01       	movw	r24, r8
    a3da:	0e 94 c9 9b 	call	0x13792	; 0x13792 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.165]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    a3de:	51 fe       	sbrs	r5, 1
    a3e0:	0e c0       	rjmp	.+28     	; 0xa3fe <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a3e2:	90 92 4e 0e 	sts	0x0E4E, r9	; 0x800e4e <my_lcd+0xb>
    a3e6:	80 92 4d 0e 	sts	0x0E4D, r8	; 0x800e4d <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    a3ea:	97 01       	movw	r18, r14
    a3ec:	26 0d       	add	r18, r6
    a3ee:	37 1d       	adc	r19, r7
    a3f0:	a6 01       	movw	r20, r12
    a3f2:	4a 0d       	add	r20, r10
    a3f4:	5b 1d       	adc	r21, r11
    a3f6:	b7 01       	movw	r22, r14
    a3f8:	c6 01       	movw	r24, r12
    a3fa:	0e 94 5f 9b 	call	0x136be	; 0x136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    a3fe:	52 fe       	sbrs	r5, 2
    a400:	2a c0       	rjmp	.+84     	; 0xa456 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    a402:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    a406:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    a40a:	91 2c       	mov	r9, r1
    a40c:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    a40e:	6e 0c       	add	r6, r14
    a410:	7f 1c       	adc	r7, r15
    a412:	26 01       	movw	r4, r12
    a414:	4a 0c       	add	r4, r10
    a416:	5b 1c       	adc	r5, r11
    a418:	93 01       	movw	r18, r6
    a41a:	28 19       	sub	r18, r8
    a41c:	39 09       	sbc	r19, r9
    a41e:	a2 01       	movw	r20, r4
    a420:	48 19       	sub	r20, r8
    a422:	59 09       	sbc	r21, r9
    a424:	b7 01       	movw	r22, r14
    a426:	c6 01       	movw	r24, r12
    a428:	88 0d       	add	r24, r8
    a42a:	99 1d       	adc	r25, r9
    a42c:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    a430:	a5 01       	movw	r20, r10
    a432:	48 19       	sub	r20, r8
    a434:	59 09       	sbc	r21, r9
    a436:	b7 01       	movw	r22, r14
    a438:	69 5e       	subi	r22, 0xE9	; 233
    a43a:	7f 4f       	sbci	r23, 0xFF	; 255
    a43c:	c6 01       	movw	r24, r12
    a43e:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>
    a442:	8f ef       	ldi	r24, 0xFF	; 255
    a444:	88 1a       	sub	r8, r24
    a446:	98 0a       	sbc	r9, r24
    a448:	ef ef       	ldi	r30, 0xFF	; 255
    a44a:	ee 1a       	sub	r14, r30
    a44c:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    a44e:	f4 e0       	ldi	r31, 0x04	; 4
    a450:	8f 16       	cp	r8, r31
    a452:	91 04       	cpc	r9, r1
    a454:	09 f7       	brne	.-62     	; 0xa418 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2104
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt = (ret_fptr*)pgm_read_word(&current->preload_function);
    a456:	f8 01       	movw	r30, r16
    a458:	e8 52       	subi	r30, 0x28	; 40
    a45a:	fd 4f       	sbci	r31, 0xFD	; 253
    a45c:	25 91       	lpm	r18, Z+
    a45e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    a460:	f8 01       	movw	r30, r16
    a462:	eb 53       	subi	r30, 0x3B	; 59
    a464:	fd 4f       	sbci	r31, 0xFD	; 253
    a466:	e4 91       	lpm	r30, Z
    a468:	40 e0       	ldi	r20, 0x00	; 0
    a46a:	70 e0       	ldi	r23, 0x00	; 0
    a46c:	60 e0       	ldi	r22, 0x00	; 0
    a46e:	8e 2f       	mov	r24, r30
    a470:	90 e0       	ldi	r25, 0x00	; 0
    a472:	f9 01       	movw	r30, r18
    a474:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107

}
    a476:	0f 90       	pop	r0
    a478:	df 91       	pop	r29
    a47a:	cf 91       	pop	r28
    a47c:	1f 91       	pop	r17
    a47e:	0f 91       	pop	r16
    a480:	ff 90       	pop	r15
    a482:	ef 90       	pop	r14
    a484:	df 90       	pop	r13
    a486:	cf 90       	pop	r12
    a488:	bf 90       	pop	r11
    a48a:	af 90       	pop	r10
    a48c:	9f 90       	pop	r9
    a48e:	8f 90       	pop	r8
    a490:	7f 90       	pop	r7
    a492:	6f 90       	pop	r6
    a494:	5f 90       	pop	r5
    a496:	4f 90       	pop	r4
    a498:	08 95       	ret

0000a49a <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2126
  }
}
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t args3)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    a49a:	20 91 f5 0b 	lds	r18, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
    a49e:	2a 30       	cpi	r18, 0x0A	; 10
    a4a0:	70 f4       	brcc	.+28     	; 0xa4be <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
  {
    MenuHistoryIndex++;
    a4a2:	2f 5f       	subi	r18, 0xFF	; 255
    a4a4:	20 93 f5 0b 	sts	0x0BF5, r18	; 0x800bf5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
    MenuHistory[MenuHistoryIndex] = id;
    a4a8:	30 e0       	ldi	r19, 0x00	; 0
    a4aa:	f9 01       	movw	r30, r18
    a4ac:	e5 51       	subi	r30, 0x15	; 21
    a4ae:	f4 4f       	sbci	r31, 0xF4	; 244
    a4b0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
    Global_menu_args1[MenuHistoryIndex] = args1;
    a4b2:	2f 51       	subi	r18, 0x1F	; 31
    a4b4:	34 4f       	sbci	r19, 0xF4	; 244
    a4b6:	f9 01       	movw	r30, r18
    a4b8:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
    MenuPrepareStyle();
    a4ba:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
  }
}
    a4be:	08 95       	ret

0000a4c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
    a4c0:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
    a4c4:	88 23       	and	r24, r24
    a4c6:	29 f0       	breq	.+10     	; 0xa4d2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
  {
    MenuHistoryIndex--;
    a4c8:	81 50       	subi	r24, 0x01	; 1
    a4ca:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
    MenuPrepareStyle();
    a4ce:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
  }
}
    a4d2:	08 95       	ret

0000a4d4 <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1596




bool draw_menu(bool redraw)
{
    a4d4:	2f 92       	push	r2
    a4d6:	3f 92       	push	r3
    a4d8:	4f 92       	push	r4
    a4da:	5f 92       	push	r5
    a4dc:	6f 92       	push	r6
    a4de:	7f 92       	push	r7
    a4e0:	8f 92       	push	r8
    a4e2:	9f 92       	push	r9
    a4e4:	af 92       	push	r10
    a4e6:	bf 92       	push	r11
    a4e8:	cf 92       	push	r12
    a4ea:	df 92       	push	r13
    a4ec:	ef 92       	push	r14
    a4ee:	ff 92       	push	r15
    a4f0:	0f 93       	push	r16
    a4f2:	1f 93       	push	r17
    a4f4:	cf 93       	push	r28
    a4f6:	df 93       	push	r29
    a4f8:	cd b7       	in	r28, 0x3d	; 61
    a4fa:	de b7       	in	r29, 0x3e	; 62
    a4fc:	c3 5e       	subi	r28, 0xE3	; 227
    a4fe:	d1 09       	sbc	r29, r1
    a500:	0f b6       	in	r0, 0x3f	; 63
    a502:	f8 94       	cli
    a504:	de bf       	out	0x3e, r29	; 62
    a506:	0f be       	out	0x3f, r0	; 63
    a508:	cd bf       	out	0x3d, r28	; 61
    a50a:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
    a50c:	ce 01       	movw	r24, r28
    a50e:	8d 54       	subi	r24, 0x4D	; 77
    a510:	9f 4f       	sbci	r25, 0xFF	; 255
    a512:	0e 94 01 3a 	call	0x7402	; 0x7402 <MenuHistoryGetMenu(unsigned char*)>
    a516:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    a518:	e0 91 3c 0e 	lds	r30, 0x0E3C	; 0x800e3c <my_touch+0x17>
    a51c:	f0 91 3d 0e 	lds	r31, 0x0E3D	; 0x800e3d <my_touch+0x18>
    a520:	80 81       	ld	r24, Z
    a522:	90 91 42 0e 	lds	r25, 0x0E42	; 0x800e42 <my_touch+0x1d>
    a526:	89 23       	and	r24, r25
    a528:	09 f0       	breq	.+2      	; 0xa52c <draw_menu(bool)+0x58>
    a52a:	9b c2       	rjmp	.+1334   	; 0xaa62 <draw_menu(bool)+0x58e>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    a52c:	80 ed       	ldi	r24, 0xD0	; 208
    a52e:	0e 94 90 9c 	call	0x13920	; 0x13920 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]>
    a532:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    a534:	80 e9       	ldi	r24, 0x90	; 144
    a536:	0e 94 90 9c 	call	0x13920	; 0x13920 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]>
    a53a:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    a53c:	80 ed       	ldi	r24, 0xD0	; 208
    a53e:	0e 94 90 9c 	call	0x13920	; 0x13920 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]>
    a542:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    a544:	80 e9       	ldi	r24, 0x90	; 144
    a546:	0e 94 90 9c 	call	0x13920	; 0x13920 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]>
    a54a:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    a54c:	e8 14       	cp	r14, r8
    a54e:	f9 04       	cpc	r15, r9
    a550:	48 f0       	brcs	.+18     	; 0xa564 <draw_menu(bool)+0x90>
    a552:	c4 01       	movw	r24, r8
    a554:	c2 96       	adiw	r24, 0x32	; 50
    a556:	e8 16       	cp	r14, r24
    a558:	f9 06       	cpc	r15, r25
    a55a:	50 f0       	brcs	.+20     	; 0xa570 <draw_menu(bool)+0x9c>
    a55c:	8e 14       	cp	r8, r14
    a55e:	9f 04       	cpc	r9, r15
    a560:	08 f4       	brcc	.+2      	; 0xa564 <draw_menu(bool)+0x90>
    a562:	52 c0       	rjmp	.+164    	; 0xa608 <draw_menu(bool)+0x134>
    a564:	c7 01       	movw	r24, r14
    a566:	c2 96       	adiw	r24, 0x32	; 50
    a568:	88 16       	cp	r8, r24
    a56a:	99 06       	cpc	r9, r25
    a56c:	08 f0       	brcs	.+2      	; 0xa570 <draw_menu(bool)+0x9c>
    a56e:	4c c0       	rjmp	.+152    	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    a570:	0c 15       	cp	r16, r12
    a572:	1d 05       	cpc	r17, r13
    a574:	48 f0       	brcs	.+18     	; 0xa588 <draw_menu(bool)+0xb4>
    a576:	c6 01       	movw	r24, r12
    a578:	c2 96       	adiw	r24, 0x32	; 50
    a57a:	08 17       	cp	r16, r24
    a57c:	19 07       	cpc	r17, r25
    a57e:	48 f0       	brcs	.+18     	; 0xa592 <draw_menu(bool)+0xbe>
    a580:	c0 16       	cp	r12, r16
    a582:	d1 06       	cpc	r13, r17
    a584:	08 f4       	brcc	.+2      	; 0xa588 <draw_menu(bool)+0xb4>
    a586:	40 c0       	rjmp	.+128    	; 0xa608 <draw_menu(bool)+0x134>
    a588:	c8 01       	movw	r24, r16
    a58a:	c2 96       	adiw	r24, 0x32	; 50
    a58c:	c8 16       	cp	r12, r24
    a58e:	d9 06       	cpc	r13, r25
    a590:	d8 f5       	brcc	.+118    	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    a592:	e8 0c       	add	r14, r8
    a594:	f9 1c       	adc	r15, r9
    a596:	97 01       	movw	r18, r14
    a598:	36 95       	lsr	r19
    a59a:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    a59c:	a4 e5       	ldi	r26, 0x54	; 84
    a59e:	b3 e0       	ldi	r27, 0x03	; 3
    a5a0:	0e 94 2f ce 	call	0x19c5e	; 0x19c5e <__umulhisi3>
    a5a4:	20 e1       	ldi	r18, 0x10	; 16
    a5a6:	22 2e       	mov	r2, r18
    a5a8:	27 e2       	ldi	r18, 0x27	; 39
    a5aa:	32 2e       	mov	r3, r18
    a5ac:	41 2c       	mov	r4, r1
    a5ae:	51 2c       	mov	r5, r1
    a5b0:	a2 01       	movw	r20, r4
    a5b2:	91 01       	movw	r18, r2
    a5b4:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
    a5b8:	79 01       	movw	r14, r18
    a5ba:	6e e0       	ldi	r22, 0x0E	; 14
    a5bc:	e6 1a       	sub	r14, r22
    a5be:	f1 08       	sbc	r15, r1
    a5c0:	f0 92 2a 0e 	sts	0x0E2A, r15	; 0x800e2a <my_touch+0x5>
    a5c4:	e0 92 29 0e 	sts	0x0E29, r14	; 0x800e29 <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    a5c8:	0c 0d       	add	r16, r12
    a5ca:	1d 1d       	adc	r17, r13
    a5cc:	98 01       	movw	r18, r16
    a5ce:	36 95       	lsr	r19
    a5d0:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    a5d2:	a4 e0       	ldi	r26, 0x04	; 4
    a5d4:	b5 e0       	ldi	r27, 0x05	; 5
    a5d6:	0e 94 2f ce 	call	0x19c5e	; 0x19c5e <__umulhisi3>
    a5da:	a2 01       	movw	r20, r4
    a5dc:	91 01       	movw	r18, r2
    a5de:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
    a5e2:	2e 51       	subi	r18, 0x1E	; 30
    a5e4:	31 09       	sbc	r19, r1
    a5e6:	30 93 2c 0e 	sts	0x0E2C, r19	; 0x800e2c <my_touch+0x7>
    a5ea:	20 93 2b 0e 	sts	0x0E2B, r18	; 0x800e2b <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    a5ee:	80 91 32 0e 	lds	r24, 0x0E32	; 0x800e32 <my_touch+0xd>
    a5f2:	81 30       	cpi	r24, 0x01	; 1
    a5f4:	09 f4       	brne	.+2      	; 0xa5f8 <draw_menu(bool)+0x124>
    a5f6:	eb c1       	rjmp	.+982    	; 0xa9ce <draw_menu(bool)+0x4fa>
    a5f8:	08 f4       	brcc	.+2      	; 0xa5fc <draw_menu(bool)+0x128>
    a5fa:	b8 c1       	rjmp	.+880    	; 0xa96c <draw_menu(bool)+0x498>
    a5fc:	82 30       	cpi	r24, 0x02	; 2
    a5fe:	09 f4       	brne	.+2      	; 0xa602 <draw_menu(bool)+0x12e>
    a600:	17 c2       	rjmp	.+1070   	; 0xaa30 <draw_menu(bool)+0x55c>
    a602:	83 30       	cpi	r24, 0x03	; 3
    a604:	09 f4       	brne	.+2      	; 0xa608 <draw_menu(bool)+0x134>
    a606:	20 c2       	rjmp	.+1088   	; 0xaa48 <draw_menu(bool)+0x574>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    a608:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_touch+0xc>
    a60c:	87 fd       	sbrc	r24, 7
    a60e:	13 c0       	rjmp	.+38     	; 0xa636 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    a610:	80 ec       	ldi	r24, 0xC0	; 192
    a612:	80 93 31 0e 	sts	0x0E31, r24	; 0x800e31 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    a616:	80 91 29 0e 	lds	r24, 0x0E29	; 0x800e29 <my_touch+0x4>
    a61a:	90 91 2a 0e 	lds	r25, 0x0E2A	; 0x800e2a <my_touch+0x5>
    a61e:	90 93 26 0e 	sts	0x0E26, r25	; 0x800e26 <my_touch+0x1>
    a622:	80 93 25 0e 	sts	0x0E25, r24	; 0x800e25 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    a626:	80 91 2b 0e 	lds	r24, 0x0E2B	; 0x800e2b <my_touch+0x6>
    a62a:	90 91 2c 0e 	lds	r25, 0x0E2C	; 0x800e2c <my_touch+0x7>
    a62e:	90 93 28 0e 	sts	0x0E28, r25	; 0x800e28 <my_touch+0x3>
    a632:	80 93 27 0e 	sts	0x0E27, r24	; 0x800e27 <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    a636:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_touch+0xc>
    a63a:	87 ff       	sbrs	r24, 7
    a63c:	2d c2       	rjmp	.+1114   	; 0xaa98 <draw_menu(bool)+0x5c4>
    a63e:	b1 10       	cpse	r11, r1
    a640:	2b c2       	rjmp	.+1110   	; 0xaa98 <draw_menu(bool)+0x5c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
  {
    click_x = my_touch.x;
    a642:	80 91 29 0e 	lds	r24, 0x0E29	; 0x800e29 <my_touch+0x4>
    a646:	90 91 2a 0e 	lds	r25, 0x0E2A	; 0x800e2a <my_touch+0x5>
    a64a:	cc 53       	subi	r28, 0x3C	; 60
    a64c:	df 4f       	sbci	r29, 0xFF	; 255
    a64e:	99 83       	std	Y+1, r25	; 0x01
    a650:	88 83       	st	Y, r24
    a652:	c4 5c       	subi	r28, 0xC4	; 196
    a654:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1637
    click_y = my_touch.y;
    a656:	e0 91 2b 0e 	lds	r30, 0x0E2B	; 0x800e2b <my_touch+0x6>
    a65a:	f0 91 2c 0e 	lds	r31, 0x0E2C	; 0x800e2c <my_touch+0x7>
    a65e:	ca 53       	subi	r28, 0x3A	; 58
    a660:	df 4f       	sbci	r29, 0xFF	; 255
    a662:	f9 83       	std	Y+1, r31	; 0x01
    a664:	e8 83       	st	Y, r30
    a666:	c6 5c       	subi	r28, 0xC6	; 198
    a668:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1640
  }

  global_x = pgm_read_word(&current->x);
    a66a:	83 01       	movw	r16, r6
    a66c:	0a 53       	subi	r16, 0x3A	; 58
    a66e:	1d 4f       	sbci	r17, 0xFD	; 253
    a670:	f8 01       	movw	r30, r16
    a672:	25 91       	lpm	r18, Z+
    a674:	34 91       	lpm	r19, Z
    a676:	c8 54       	subi	r28, 0x48	; 72
    a678:	df 4f       	sbci	r29, 0xFF	; 255
    a67a:	39 83       	std	Y+1, r19	; 0x01
    a67c:	28 83       	st	Y, r18
    a67e:	c8 5b       	subi	r28, 0xB8	; 184
    a680:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1641
  global_y = pgm_read_word(&current->y);
    a682:	73 01       	movw	r14, r6
    a684:	38 e3       	ldi	r19, 0x38	; 56
    a686:	e3 1a       	sub	r14, r19
    a688:	3d ef       	ldi	r19, 0xFD	; 253
    a68a:	f3 0a       	sbc	r15, r19
    a68c:	f7 01       	movw	r30, r14
    a68e:	45 91       	lpm	r20, Z+
    a690:	54 91       	lpm	r21, Z
    a692:	c6 54       	subi	r28, 0x46	; 70
    a694:	df 4f       	sbci	r29, 0xFF	; 255
    a696:	59 83       	std	Y+1, r21	; 0x01
    a698:	48 83       	st	Y, r20
    a69a:	ca 5b       	subi	r28, 0xBA	; 186
    a69c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1644


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
    a69e:	f3 01       	movw	r30, r6
    a6a0:	ee 52       	subi	r30, 0x2E	; 46
    a6a2:	fd 4f       	sbci	r31, 0xFD	; 253
    a6a4:	25 91       	lpm	r18, Z+
    a6a6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1645
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    a6a8:	63 01       	movw	r12, r6
    a6aa:	5b e3       	ldi	r21, 0x3B	; 59
    a6ac:	c5 1a       	sub	r12, r21
    a6ae:	5d ef       	ldi	r21, 0xFD	; 253
    a6b0:	d5 0a       	sbc	r13, r21
    a6b2:	f6 01       	movw	r30, r12
    a6b4:	84 91       	lpm	r24, Z
    a6b6:	cd 54       	subi	r28, 0x4D	; 77
    a6b8:	df 4f       	sbci	r29, 0xFF	; 255
    a6ba:	68 81       	ld	r22, Y
    a6bc:	c3 5b       	subi	r28, 0xB3	; 179
    a6be:	d0 40       	sbci	r29, 0x00	; 0
    a6c0:	70 e0       	ldi	r23, 0x00	; 0
    a6c2:	4f ef       	ldi	r20, 0xFF	; 255
    a6c4:	90 e0       	ldi	r25, 0x00	; 0
    a6c6:	f9 01       	movw	r30, r18
    a6c8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1647
  if (rdr == 0)
    cbi(redraw_class, 0);
    a6ca:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
  global_y = pgm_read_word(&current->y);


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    a6cc:	88 23       	and	r24, r24
    a6ce:	11 f0       	breq	.+4      	; 0xa6d4 <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1649
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    a6d0:	aa 24       	eor	r10, r10
    a6d2:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
    a6d4:	f3 01       	movw	r30, r6
    a6d6:	ec 52       	subi	r30, 0x2C	; 44
    a6d8:	fd 4f       	sbci	r31, 0xFD	; 253
    a6da:	25 91       	lpm	r18, Z+
    a6dc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1652
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    a6de:	f6 01       	movw	r30, r12
    a6e0:	84 91       	lpm	r24, Z
    a6e2:	cd 54       	subi	r28, 0x4D	; 77
    a6e4:	df 4f       	sbci	r29, 0xFF	; 255
    a6e6:	68 81       	ld	r22, Y
    a6e8:	c3 5b       	subi	r28, 0xB3	; 179
    a6ea:	d0 40       	sbci	r29, 0x00	; 0
    a6ec:	70 e0       	ldi	r23, 0x00	; 0
    a6ee:	4f ef       	ldi	r20, 0xFF	; 255
    a6f0:	90 e0       	ldi	r25, 0x00	; 0
    a6f2:	f9 01       	movw	r30, r18
    a6f4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1653
  if (rdr == 0)
    a6f6:	81 11       	cpse	r24, r1
    a6f8:	dc c1       	rjmp	.+952    	; 0xaab2 <draw_menu(bool)+0x5de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654
    cbi(redraw_class, 1);
    a6fa:	e8 94       	clt
    a6fc:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1658
  else
    sbi(redraw_class, 1);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
    a6fe:	f3 01       	movw	r30, r6
    a700:	ea 52       	subi	r30, 0x2A	; 42
    a702:	fd 4f       	sbci	r31, 0xFD	; 253
    a704:	25 91       	lpm	r18, Z+
    a706:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1659
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    a708:	f6 01       	movw	r30, r12
    a70a:	84 91       	lpm	r24, Z
    a70c:	cd 54       	subi	r28, 0x4D	; 77
    a70e:	df 4f       	sbci	r29, 0xFF	; 255
    a710:	68 81       	ld	r22, Y
    a712:	c3 5b       	subi	r28, 0xB3	; 179
    a714:	d0 40       	sbci	r29, 0x00	; 0
    a716:	70 e0       	ldi	r23, 0x00	; 0
    a718:	4f ef       	ldi	r20, 0xFF	; 255
    a71a:	90 e0       	ldi	r25, 0x00	; 0
    a71c:	f9 01       	movw	r30, r18
    a71e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1660
  if (rdr == 0)
    a720:	81 11       	cpse	r24, r1
    a722:	ca c1       	rjmp	.+916    	; 0xaab8 <draw_menu(bool)+0x5e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1661
    cbi(redraw_class, 2);
    a724:	8a 2d       	mov	r24, r10
    a726:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    a728:	b1 10       	cpse	r11, r1
    a72a:	c9 c1       	rjmp	.+914    	; 0xaabe <draw_menu(bool)+0x5ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
    cbi(redraw_class, 3);
    a72c:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  else
    sbi(redraw_class, 3);
    a72e:	cf 52       	subi	r28, 0x2F	; 47
    a730:	df 4f       	sbci	r29, 0xFF	; 255
    a732:	88 83       	st	Y, r24
    a734:	c1 5d       	subi	r28, 0xD1	; 209
    a736:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    a738:	f3 01       	movw	r30, r6
    a73a:	ef 52       	subi	r30, 0x2F	; 47
    a73c:	fd 4f       	sbci	r31, 0xFD	; 253
    a73e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  if (enable_redraw(rdr, redraw_class) == true)
    a740:	cf 52       	subi	r28, 0x2F	; 47
    a742:	df 4f       	sbci	r29, 0xFF	; 255
    a744:	68 81       	ld	r22, Y
    a746:	c1 5d       	subi	r28, 0xD1	; 209
    a748:	d0 40       	sbci	r29, 0x00	; 0
    a74a:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    a74e:	88 23       	and	r24, r24
    a750:	d9 f0       	breq	.+54     	; 0xa788 <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1674
  {
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    a752:	f3 01       	movw	r30, r6
    a754:	65 91       	lpm	r22, Z+
    a756:	74 91       	lpm	r23, Z
    a758:	ce 01       	movw	r24, r28
    a75a:	01 96       	adiw	r24, 0x01	; 1
    a75c:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1675
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    a760:	f7 01       	movw	r30, r14
    a762:	45 91       	lpm	r20, Z+
    a764:	54 91       	lpm	r21, Z
    a766:	f8 01       	movw	r30, r16
    a768:	65 91       	lpm	r22, Z+
    a76a:	74 91       	lpm	r23, Z
    a76c:	4b 5f       	subi	r20, 0xFB	; 251
    a76e:	5f 4f       	sbci	r21, 0xFF	; 255
    a770:	6b 5f       	subi	r22, 0xFB	; 251
    a772:	7f 4f       	sbci	r23, 0xFF	; 255
    a774:	ee 24       	eor	r14, r14
    a776:	ea 94       	dec	r14
    a778:	fe 2c       	mov	r15, r14
    a77a:	10 e0       	ldi	r17, 0x00	; 0
    a77c:	00 e0       	ldi	r16, 0x00	; 0
    a77e:	22 e0       	ldi	r18, 0x02	; 2
    a780:	ce 01       	movw	r24, r28
    a782:	01 96       	adiw	r24, 0x01	; 1
    a784:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    a788:	91 2c       	mov	r9, r1
    a78a:	c4 53       	subi	r28, 0x34	; 52
    a78c:	df 4f       	sbci	r29, 0xFF	; 255
    a78e:	18 82       	st	Y, r1
    a790:	cc 5c       	subi	r28, 0xCC	; 204
    a792:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    a794:	93 01       	movw	r18, r6
    a796:	23 54       	subi	r18, 0x43	; 67
    a798:	3d 4f       	sbci	r19, 0xFD	; 253
    a79a:	ca 54       	subi	r28, 0x4A	; 74
    a79c:	df 4f       	sbci	r29, 0xFF	; 255
    a79e:	39 83       	std	Y+1, r19	; 0x01
    a7a0:	28 83       	st	Y, r18
    a7a2:	c6 5b       	subi	r28, 0xB6	; 182
    a7a4:	d0 40       	sbci	r29, 0x00	; 0
    a7a6:	ca 54       	subi	r28, 0x4A	; 74
    a7a8:	df 4f       	sbci	r29, 0xFF	; 255
    a7aa:	e8 81       	ld	r30, Y
    a7ac:	f9 81       	ldd	r31, Y+1	; 0x01
    a7ae:	c6 5b       	subi	r28, 0xB6	; 182
    a7b0:	d0 40       	sbci	r29, 0x00	; 0
    a7b2:	84 91       	lpm	r24, Z
    a7b4:	98 16       	cp	r9, r24
    a7b6:	08 f0       	brcs	.+2      	; 0xa7ba <draw_menu(bool)+0x2e6>
    a7b8:	84 c1       	rjmp	.+776    	; 0xaac2 <draw_menu(bool)+0x5ee>
    a7ba:	89 2d       	mov	r24, r9
    a7bc:	90 e0       	ldi	r25, 0x00	; 0
    a7be:	01 96       	adiw	r24, 0x01	; 1
    a7c0:	f1 e1       	ldi	r31, 0x11	; 17
    a7c2:	f8 9f       	mul	r31, r24
    a7c4:	20 01       	movw	r4, r0
    a7c6:	f9 9f       	mul	r31, r25
    a7c8:	50 0c       	add	r5, r0
    a7ca:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
  {
    button_1 = &current->button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_1->enable_show);
    a7cc:	f3 01       	movw	r30, r6
    a7ce:	e4 0d       	add	r30, r4
    a7d0:	f5 1d       	adc	r31, r5
    a7d2:	25 91       	lpm	r18, Z+
    a7d4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1683
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, idx);
    a7d6:	12 01       	movw	r2, r4
    a7d8:	44 e0       	ldi	r20, 0x04	; 4
    a7da:	24 1a       	sub	r2, r20
    a7dc:	31 08       	sbc	r3, r1
    a7de:	26 0c       	add	r2, r6
    a7e0:	37 1c       	adc	r3, r7
    a7e2:	f1 01       	movw	r30, r2
    a7e4:	84 91       	lpm	r24, Z
    a7e6:	cd 54       	subi	r28, 0x4D	; 77
    a7e8:	df 4f       	sbci	r29, 0xFF	; 255
    a7ea:	68 81       	ld	r22, Y
    a7ec:	c3 5b       	subi	r28, 0xB3	; 179
    a7ee:	d0 40       	sbci	r29, 0x00	; 0
    a7f0:	70 e0       	ldi	r23, 0x00	; 0
    a7f2:	49 2d       	mov	r20, r9
    a7f4:	90 e0       	ldi	r25, 0x00	; 0
    a7f6:	f9 01       	movw	r30, r18
    a7f8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
    if (active == 0) continue;
    a7fa:	88 23       	and	r24, r24
    a7fc:	09 f4       	brne	.+2      	; 0xa800 <draw_menu(bool)+0x32c>
    a7fe:	b4 c0       	rjmp	.+360    	; 0xa968 <draw_menu(bool)+0x494>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
    rdr = pgm_read_byte(&button_1->redraw_class);
    a800:	f2 01       	movw	r30, r4
    a802:	31 97       	sbiw	r30, 0x01	; 1
    a804:	e6 0d       	add	r30, r6
    a806:	f7 1d       	adc	r31, r7
    a808:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1686
    if (enable_redraw(rdr, redraw_class) == true)
    a80a:	cf 52       	subi	r28, 0x2F	; 47
    a80c:	df 4f       	sbci	r29, 0xFF	; 255
    a80e:	68 81       	ld	r22, Y
    a810:	c1 5d       	subi	r28, 0xD1	; 209
    a812:	d0 40       	sbci	r29, 0x00	; 0
    a814:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    a818:	88 23       	and	r24, r24
    a81a:	09 f4       	brne	.+2      	; 0xa81e <draw_menu(bool)+0x34a>
    a81c:	43 c0       	rjmp	.+134    	; 0xa8a4 <draw_menu(bool)+0x3d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_1->name));
    a81e:	f2 01       	movw	r30, r4
    a820:	3f 97       	sbiw	r30, 0x0f	; 15
    a822:	e6 0d       	add	r30, r6
    a824:	f7 1d       	adc	r31, r7
    a826:	65 91       	lpm	r22, Z+
    a828:	74 91       	lpm	r23, Z
    a82a:	ce 01       	movw	r24, r28
    a82c:	8f 57       	subi	r24, 0x7F	; 127
    a82e:	9f 4f       	sbci	r25, 0xFF	; 255
    a830:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1689
      str1[0] = 0;
    a834:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1690
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    a836:	f2 01       	movw	r30, r4
    a838:	35 97       	sbiw	r30, 0x05	; 5
    a83a:	e6 0d       	add	r30, r6
    a83c:	f7 1d       	adc	r31, r7
    a83e:	e4 90       	lpm	r14, Z
    a840:	04 91       	lpm	r16, Z
    a842:	f2 01       	movw	r30, r4
    a844:	37 97       	sbiw	r30, 0x07	; 7
    a846:	e6 0d       	add	r30, r6
    a848:	f7 1d       	adc	r31, r7
    a84a:	25 91       	lpm	r18, Z+
    a84c:	34 91       	lpm	r19, Z
    a84e:	f2 01       	movw	r30, r4
    a850:	39 97       	sbiw	r30, 0x09	; 9
    a852:	e6 0d       	add	r30, r6
    a854:	f7 1d       	adc	r31, r7
    a856:	45 91       	lpm	r20, Z+
    a858:	54 91       	lpm	r21, Z
    a85a:	f2 01       	movw	r30, r4
    a85c:	3b 97       	sbiw	r30, 0x0b	; 11
    a85e:	e6 0d       	add	r30, r6
    a860:	f7 1d       	adc	r31, r7
    a862:	65 91       	lpm	r22, Z+
    a864:	74 91       	lpm	r23, Z
    a866:	f2 01       	movw	r30, r4
    a868:	3d 97       	sbiw	r30, 0x0d	; 13
    a86a:	e6 0d       	add	r30, r6
    a86c:	f7 1d       	adc	r31, r7
    a86e:	85 91       	lpm	r24, Z+
    a870:	94 91       	lpm	r25, Z
    a872:	c6 54       	subi	r28, 0x46	; 70
    a874:	df 4f       	sbci	r29, 0xFF	; 255
    a876:	e8 81       	ld	r30, Y
    a878:	f9 81       	ldd	r31, Y+1	; 0x01
    a87a:	ca 5b       	subi	r28, 0xBA	; 186
    a87c:	d0 40       	sbci	r29, 0x00	; 0
    a87e:	6e 0f       	add	r22, r30
    a880:	7f 1f       	adc	r23, r31
    a882:	81 2c       	mov	r8, r1
    a884:	fe 01       	movw	r30, r28
    a886:	31 96       	adiw	r30, 0x01	; 1
    a888:	5f 01       	movw	r10, r30
    a88a:	e0 58       	subi	r30, 0x80	; 128
    a88c:	ff 4f       	sbci	r31, 0xFF	; 255
    a88e:	6f 01       	movw	r12, r30
    a890:	c8 54       	subi	r28, 0x48	; 72
    a892:	df 4f       	sbci	r29, 0xFF	; 255
    a894:	e8 81       	ld	r30, Y
    a896:	f9 81       	ldd	r31, Y+1	; 0x01
    a898:	c8 5b       	subi	r28, 0xB8	; 184
    a89a:	d0 40       	sbci	r29, 0x00	; 0
    a89c:	8e 0f       	add	r24, r30
    a89e:	9f 1f       	adc	r25, r31
    a8a0:	0e 94 19 43 	call	0x8632	; 0x8632 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1692
    }
    if (click_x > 0 && click_y > 0)
    a8a4:	cc 53       	subi	r28, 0x3C	; 60
    a8a6:	df 4f       	sbci	r29, 0xFF	; 255
    a8a8:	28 81       	ld	r18, Y
    a8aa:	39 81       	ldd	r19, Y+1	; 0x01
    a8ac:	c4 5c       	subi	r28, 0xC4	; 196
    a8ae:	d0 40       	sbci	r29, 0x00	; 0
    a8b0:	23 2b       	or	r18, r19
    a8b2:	09 f4       	brne	.+2      	; 0xa8b6 <draw_menu(bool)+0x3e2>
    a8b4:	59 c0       	rjmp	.+178    	; 0xa968 <draw_menu(bool)+0x494>
    a8b6:	ca 53       	subi	r28, 0x3A	; 58
    a8b8:	df 4f       	sbci	r29, 0xFF	; 255
    a8ba:	48 81       	ld	r20, Y
    a8bc:	59 81       	ldd	r21, Y+1	; 0x01
    a8be:	c6 5c       	subi	r28, 0xC6	; 198
    a8c0:	d0 40       	sbci	r29, 0x00	; 0
    a8c2:	45 2b       	or	r20, r21
    a8c4:	09 f4       	brne	.+2      	; 0xa8c8 <draw_menu(bool)+0x3f4>
    a8c6:	50 c0       	rjmp	.+160    	; 0xa968 <draw_menu(bool)+0x494>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1693
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    a8c8:	f2 01       	movw	r30, r4
    a8ca:	37 97       	sbiw	r30, 0x07	; 7
    a8cc:	e6 0d       	add	r30, r6
    a8ce:	f7 1d       	adc	r31, r7
    a8d0:	25 91       	lpm	r18, Z+
    a8d2:	34 91       	lpm	r19, Z
    a8d4:	f2 01       	movw	r30, r4
    a8d6:	39 97       	sbiw	r30, 0x09	; 9
    a8d8:	e6 0d       	add	r30, r6
    a8da:	f7 1d       	adc	r31, r7
    a8dc:	45 91       	lpm	r20, Z+
    a8de:	54 91       	lpm	r21, Z
    a8e0:	f2 01       	movw	r30, r4
    a8e2:	3b 97       	sbiw	r30, 0x0b	; 11
    a8e4:	e6 0d       	add	r30, r6
    a8e6:	f7 1d       	adc	r31, r7
    a8e8:	65 91       	lpm	r22, Z+
    a8ea:	74 91       	lpm	r23, Z
    a8ec:	f2 01       	movw	r30, r4
    a8ee:	3d 97       	sbiw	r30, 0x0d	; 13
    a8f0:	e6 0d       	add	r30, r6
    a8f2:	f7 1d       	adc	r31, r7
    a8f4:	85 91       	lpm	r24, Z+
    a8f6:	94 91       	lpm	r25, Z
    a8f8:	c6 54       	subi	r28, 0x46	; 70
    a8fa:	df 4f       	sbci	r29, 0xFF	; 255
    a8fc:	e8 81       	ld	r30, Y
    a8fe:	f9 81       	ldd	r31, Y+1	; 0x01
    a900:	ca 5b       	subi	r28, 0xBA	; 186
    a902:	d0 40       	sbci	r29, 0x00	; 0
    a904:	6e 0f       	add	r22, r30
    a906:	7f 1f       	adc	r23, r31
    a908:	ca 53       	subi	r28, 0x3A	; 58
    a90a:	df 4f       	sbci	r29, 0xFF	; 255
    a90c:	e8 80       	ld	r14, Y
    a90e:	f9 80       	ldd	r15, Y+1	; 0x01
    a910:	c6 5c       	subi	r28, 0xC6	; 198
    a912:	d0 40       	sbci	r29, 0x00	; 0
    a914:	cc 53       	subi	r28, 0x3C	; 60
    a916:	df 4f       	sbci	r29, 0xFF	; 255
    a918:	08 81       	ld	r16, Y
    a91a:	19 81       	ldd	r17, Y+1	; 0x01
    a91c:	c4 5c       	subi	r28, 0xC4	; 196
    a91e:	d0 40       	sbci	r29, 0x00	; 0
    a920:	c8 54       	subi	r28, 0x48	; 72
    a922:	df 4f       	sbci	r29, 0xFF	; 255
    a924:	e8 81       	ld	r30, Y
    a926:	f9 81       	ldd	r31, Y+1	; 0x01
    a928:	c8 5b       	subi	r28, 0xB8	; 184
    a92a:	d0 40       	sbci	r29, 0x00	; 0
    a92c:	8e 0f       	add	r24, r30
    a92e:	9f 1f       	adc	r25, r31
    a930:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    a934:	18 2f       	mov	r17, r24
    a936:	88 23       	and	r24, r24
    a938:	b9 f0       	breq	.+46     	; 0xa968 <draw_menu(bool)+0x494>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
    a93a:	f2 01       	movw	r30, r4
    a93c:	33 97       	sbiw	r30, 0x03	; 3
    a93e:	e6 0d       	add	r30, r6
    a940:	f7 1d       	adc	r31, r7
    a942:	25 91       	lpm	r18, Z+
    a944:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1696
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
    a946:	f1 01       	movw	r30, r2
    a948:	84 91       	lpm	r24, Z
    a94a:	cd 54       	subi	r28, 0x4D	; 77
    a94c:	df 4f       	sbci	r29, 0xFF	; 255
    a94e:	68 81       	ld	r22, Y
    a950:	c3 5b       	subi	r28, 0xB3	; 179
    a952:	d0 40       	sbci	r29, 0x00	; 0
    a954:	70 e0       	ldi	r23, 0x00	; 0
    a956:	49 2d       	mov	r20, r9
    a958:	90 e0       	ldi	r25, 0x00	; 0
    a95a:	f9 01       	movw	r30, r18
    a95c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
        ret = true;
    a95e:	c4 53       	subi	r28, 0x34	; 52
    a960:	df 4f       	sbci	r29, 0xFF	; 255
    a962:	18 83       	st	Y, r17
    a964:	cc 5c       	subi	r28, 0xCC	; 204
    a966:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    a968:	93 94       	inc	r9
    a96a:	1d cf       	rjmp	.-454    	; 0xa7a6 <draw_menu(bool)+0x2d2>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    a96c:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <my_touch+0xe>
    a970:	88 23       	and	r24, r24
    a972:	09 f4       	brne	.+2      	; 0xa976 <draw_menu(bool)+0x4a2>
    a974:	49 ce       	rjmp	.-878    	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    a976:	81 30       	cpi	r24, 0x01	; 1
    a978:	59 f4       	brne	.+22     	; 0xa990 <draw_menu(bool)+0x4bc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    a97a:	30 93 2a 0e 	sts	0x0E2A, r19	; 0x800e2a <my_touch+0x5>
    a97e:	20 93 29 0e 	sts	0x0E29, r18	; 0x800e29 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    a982:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <my_touch+0xa>
    a986:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <my_touch+0xb>
    a98a:	8e 19       	sub	r24, r14
    a98c:	9f 09       	sbc	r25, r15
    a98e:	3d c0       	rjmp	.+122    	; 0xaa0a <draw_menu(bool)+0x536>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    a990:	82 30       	cpi	r24, 0x02	; 2
    a992:	59 f4       	brne	.+22     	; 0xa9aa <draw_menu(bool)+0x4d6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    a994:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_touch+0x8>
    a998:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_touch+0x9>
    a99c:	8e 19       	sub	r24, r14
    a99e:	9f 09       	sbc	r25, r15
    a9a0:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_touch+0x5>
    a9a4:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_touch+0x4>
    a9a8:	2a c0       	rjmp	.+84     	; 0xa9fe <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    a9aa:	83 30       	cpi	r24, 0x03	; 3
    a9ac:	09 f0       	breq	.+2      	; 0xa9b0 <draw_menu(bool)+0x4dc>
    a9ae:	2c ce       	rjmp	.-936    	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    a9b0:	f0 92 2c 0e 	sts	0x0E2C, r15	; 0x800e2c <my_touch+0x7>
    a9b4:	e0 92 2b 0e 	sts	0x0E2B, r14	; 0x800e2b <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    a9b8:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_touch+0x8>
    a9bc:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_touch+0x9>
    a9c0:	82 1b       	sub	r24, r18
    a9c2:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    a9c4:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_touch+0x5>
    a9c8:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_touch+0x4>
    a9cc:	1d ce       	rjmp	.-966    	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    a9ce:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <my_touch+0xe>
    a9d2:	81 11       	cpse	r24, r1
    a9d4:	07 c0       	rjmp	.+14     	; 0xa9e4 <draw_menu(bool)+0x510>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    a9d6:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_touch+0x8>
    a9da:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_touch+0x9>
    a9de:	8e 19       	sub	r24, r14
    a9e0:	9f 09       	sbc	r25, r15
    a9e2:	f0 cf       	rjmp	.-32     	; 0xa9c4 <draw_menu(bool)+0x4f0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    a9e4:	81 30       	cpi	r24, 0x01	; 1
    a9e6:	49 f4       	brne	.+18     	; 0xa9fa <draw_menu(bool)+0x526>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    a9e8:	30 93 2a 0e 	sts	0x0E2A, r19	; 0x800e2a <my_touch+0x5>
    a9ec:	20 93 29 0e 	sts	0x0E29, r18	; 0x800e29 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    a9f0:	f0 92 2c 0e 	sts	0x0E2C, r15	; 0x800e2c <my_touch+0x7>
    a9f4:	e0 92 2b 0e 	sts	0x0E2B, r14	; 0x800e2b <my_touch+0x6>
    a9f8:	07 ce       	rjmp	.-1010   	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    a9fa:	82 30       	cpi	r24, 0x02	; 2
    a9fc:	59 f4       	brne	.+22     	; 0xaa14 <draw_menu(bool)+0x540>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    a9fe:	80 91 2f 0e 	lds	r24, 0x0E2F	; 0x800e2f <my_touch+0xa>
    aa02:	90 91 30 0e 	lds	r25, 0x0E30	; 0x800e30 <my_touch+0xb>
    aa06:	82 1b       	sub	r24, r18
    aa08:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    aa0a:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_touch+0x7>
    aa0e:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_touch+0x6>
    aa12:	fa cd       	rjmp	.-1036   	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    aa14:	83 30       	cpi	r24, 0x03	; 3
    aa16:	09 f0       	breq	.+2      	; 0xaa1a <draw_menu(bool)+0x546>
    aa18:	f7 cd       	rjmp	.-1042   	; 0xa608 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    aa1a:	80 91 2d 0e 	lds	r24, 0x0E2D	; 0x800e2d <my_touch+0x8>
    aa1e:	90 91 2e 0e 	lds	r25, 0x0E2E	; 0x800e2e <my_touch+0x9>
    aa22:	82 1b       	sub	r24, r18
    aa24:	93 0b       	sbc	r25, r19
    aa26:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_touch+0x5>
    aa2a:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_touch+0x4>
    aa2e:	a9 cf       	rjmp	.-174    	; 0xa982 <draw_menu(bool)+0x4ae>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    aa30:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <my_touch+0xe>
    aa34:	88 23       	and	r24, r24
    aa36:	09 f4       	brne	.+2      	; 0xaa3a <draw_menu(bool)+0x566>
    aa38:	ad cf       	rjmp	.-166    	; 0xa994 <draw_menu(bool)+0x4c0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    aa3a:	81 30       	cpi	r24, 0x01	; 1
    aa3c:	09 f4       	brne	.+2      	; 0xaa40 <draw_menu(bool)+0x56c>
    aa3e:	b8 cf       	rjmp	.-144    	; 0xa9b0 <draw_menu(bool)+0x4dc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    aa40:	83 30       	cpi	r24, 0x03	; 3
    aa42:	09 f0       	breq	.+2      	; 0xaa46 <draw_menu(bool)+0x572>
    aa44:	e1 cd       	rjmp	.-1086   	; 0xa608 <draw_menu(bool)+0x134>
    aa46:	99 cf       	rjmp	.-206    	; 0xa97a <draw_menu(bool)+0x4a6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    aa48:	80 91 33 0e 	lds	r24, 0x0E33	; 0x800e33 <my_touch+0xe>
    aa4c:	88 23       	and	r24, r24
    aa4e:	b9 f2       	breq	.-82     	; 0xa9fe <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    aa50:	81 30       	cpi	r24, 0x01	; 1
    aa52:	19 f3       	breq	.-58     	; 0xaa1a <draw_menu(bool)+0x546>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    aa54:	82 30       	cpi	r24, 0x02	; 2
    aa56:	09 f4       	brne	.+2      	; 0xaa5a <draw_menu(bool)+0x586>
    aa58:	be cf       	rjmp	.-132    	; 0xa9d6 <draw_menu(bool)+0x502>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    aa5a:	83 30       	cpi	r24, 0x03	; 3
    aa5c:	09 f0       	breq	.+2      	; 0xaa60 <draw_menu(bool)+0x58c>
    aa5e:	d4 cd       	rjmp	.-1112   	; 0xa608 <draw_menu(bool)+0x134>
    aa60:	c3 cf       	rjmp	.-122    	; 0xa9e8 <draw_menu(bool)+0x514>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    aa62:	80 91 31 0e 	lds	r24, 0x0E31	; 0x800e31 <my_touch+0xc>
    aa66:	87 ff       	sbrs	r24, 7
    aa68:	04 c0       	rjmp	.+8      	; 0xaa72 <draw_menu(bool)+0x59e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    aa6a:	8f 77       	andi	r24, 0x7F	; 127
    aa6c:	80 93 31 0e 	sts	0x0E31, r24	; 0x800e31 <my_touch+0xc>
    aa70:	e2 cd       	rjmp	.-1084   	; 0xa636 <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    aa72:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <my_touch+0x1>
    aa76:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    aa7a:	10 92 28 0e 	sts	0x0E28, r1	; 0x800e28 <my_touch+0x3>
    aa7e:	10 92 27 0e 	sts	0x0E27, r1	; 0x800e27 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    aa82:	8f ef       	ldi	r24, 0xFF	; 255
    aa84:	9f ef       	ldi	r25, 0xFF	; 255
    aa86:	90 93 2a 0e 	sts	0x0E2A, r25	; 0x800e2a <my_touch+0x5>
    aa8a:	80 93 29 0e 	sts	0x0E29, r24	; 0x800e29 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    aa8e:	90 93 2c 0e 	sts	0x0E2C, r25	; 0x800e2c <my_touch+0x7>
    aa92:	80 93 2b 0e 	sts	0x0E2B, r24	; 0x800e2b <my_touch+0x6>
    aa96:	cf cd       	rjmp	.-1122   	; 0xa636 <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1631
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    aa98:	ca 53       	subi	r28, 0x3A	; 58
    aa9a:	df 4f       	sbci	r29, 0xFF	; 255
    aa9c:	19 82       	std	Y+1, r1	; 0x01
    aa9e:	18 82       	st	Y, r1
    aaa0:	c6 5c       	subi	r28, 0xC6	; 198
    aaa2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    aaa4:	cc 53       	subi	r28, 0x3C	; 60
    aaa6:	df 4f       	sbci	r29, 0xFF	; 255
    aaa8:	19 82       	std	Y+1, r1	; 0x01
    aaaa:	18 82       	st	Y, r1
    aaac:	c4 5c       	subi	r28, 0xC4	; 196
    aaae:	d0 40       	sbci	r29, 0x00	; 0
    aab0:	dc cd       	rjmp	.-1096   	; 0xa66a <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1656
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    aab2:	68 94       	set
    aab4:	a1 f8       	bld	r10, 1
    aab6:	23 ce       	rjmp	.-954    	; 0xa6fe <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1663
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    aab8:	8a 2d       	mov	r24, r10
    aaba:	84 60       	ori	r24, 0x04	; 4
    aabc:	35 ce       	rjmp	.-918    	; 0xa728 <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    aabe:	88 60       	ori	r24, 0x08	; 8
    aac0:	36 ce       	rjmp	.-916    	; 0xa72e <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1700
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    aac2:	c4 53       	subi	r28, 0x34	; 52
    aac4:	df 4f       	sbci	r29, 0xFF	; 255
    aac6:	f8 81       	ld	r31, Y
    aac8:	cc 5c       	subi	r28, 0xCC	; 204
    aaca:	d0 40       	sbci	r29, 0x00	; 0
    aacc:	f1 11       	cpse	r31, r1
    aace:	0c 94 6d 65 	jmp	0xcada	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    aad2:	91 2c       	mov	r9, r1
    aad4:	93 01       	movw	r18, r6
    aad6:	22 54       	subi	r18, 0x42	; 66
    aad8:	3d 4f       	sbci	r19, 0xFD	; 253
    aada:	c4 54       	subi	r28, 0x44	; 68
    aadc:	df 4f       	sbci	r29, 0xFF	; 255
    aade:	39 83       	std	Y+1, r19	; 0x01
    aae0:	28 83       	st	Y, r18
    aae2:	cc 5b       	subi	r28, 0xBC	; 188
    aae4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1711
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
    aae6:	1e 01       	movw	r2, r28
    aae8:	31 e8       	ldi	r19, 0x81	; 129
    aaea:	23 0e       	add	r2, r19
    aaec:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    aaee:	c4 54       	subi	r28, 0x44	; 68
    aaf0:	df 4f       	sbci	r29, 0xFF	; 255
    aaf2:	e8 81       	ld	r30, Y
    aaf4:	f9 81       	ldd	r31, Y+1	; 0x01
    aaf6:	cc 5b       	subi	r28, 0xBC	; 188
    aaf8:	d0 40       	sbci	r29, 0x00	; 0
    aafa:	84 91       	lpm	r24, Z
    aafc:	98 16       	cp	r9, r24
    aafe:	08 f0       	brcs	.+2      	; 0xab02 <draw_menu(bool)+0x62e>
    ab00:	1c c1       	rjmp	.+568    	; 0xad3a <draw_menu(bool)+0x866>
    ab02:	f7 e1       	ldi	r31, 0x17	; 23
    ab04:	9f 9e       	mul	r9, r31
    ab06:	20 01       	movw	r4, r0
    ab08:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1705
  {
    button_2 = &current->button_2[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_2->enable_show);
    ab0a:	f2 01       	movw	r30, r4
    ab0c:	ef 53       	subi	r30, 0x3F	; 63
    ab0e:	ff 4f       	sbci	r31, 0xFF	; 255
    ab10:	e6 0d       	add	r30, r6
    ab12:	f7 1d       	adc	r31, r7
    ab14:	25 91       	lpm	r18, Z+
    ab16:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1706
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    ab18:	c2 01       	movw	r24, r4
    ab1a:	85 54       	subi	r24, 0x45	; 69
    ab1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab1e:	a3 01       	movw	r20, r6
    ab20:	48 0f       	add	r20, r24
    ab22:	59 1f       	adc	r21, r25
    ab24:	ca 54       	subi	r28, 0x4A	; 74
    ab26:	df 4f       	sbci	r29, 0xFF	; 255
    ab28:	59 83       	std	Y+1, r21	; 0x01
    ab2a:	48 83       	st	Y, r20
    ab2c:	c6 5b       	subi	r28, 0xB6	; 182
    ab2e:	d0 40       	sbci	r29, 0x00	; 0
    ab30:	fa 01       	movw	r30, r20
    ab32:	84 91       	lpm	r24, Z
    ab34:	cd 54       	subi	r28, 0x4D	; 77
    ab36:	df 4f       	sbci	r29, 0xFF	; 255
    ab38:	68 81       	ld	r22, Y
    ab3a:	c3 5b       	subi	r28, 0xB3	; 179
    ab3c:	d0 40       	sbci	r29, 0x00	; 0
    ab3e:	70 e0       	ldi	r23, 0x00	; 0
    ab40:	49 2d       	mov	r20, r9
    ab42:	90 e0       	ldi	r25, 0x00	; 0
    ab44:	f9 01       	movw	r30, r18
    ab46:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1707
    if (active == 0) continue;
    ab48:	88 23       	and	r24, r24
    ab4a:	09 f4       	brne	.+2      	; 0xab4e <draw_menu(bool)+0x67a>
    ab4c:	f4 c0       	rjmp	.+488    	; 0xad36 <draw_menu(bool)+0x862>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1708
    rdr = pgm_read_byte(&button_2->redraw_class);
    ab4e:	f2 01       	movw	r30, r4
    ab50:	e0 54       	subi	r30, 0x40	; 64
    ab52:	ff 4f       	sbci	r31, 0xFF	; 255
    ab54:	e6 0d       	add	r30, r6
    ab56:	f7 1d       	adc	r31, r7
    ab58:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1709
    if (enable_redraw(rdr, redraw_class) == true)
    ab5a:	cf 52       	subi	r28, 0x2F	; 47
    ab5c:	df 4f       	sbci	r29, 0xFF	; 255
    ab5e:	68 81       	ld	r22, Y
    ab60:	c1 5d       	subi	r28, 0xD1	; 209
    ab62:	d0 40       	sbci	r29, 0x00	; 0
    ab64:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    ab68:	88 23       	and	r24, r24
    ab6a:	09 f4       	brne	.+2      	; 0xab6e <draw_menu(bool)+0x69a>
    ab6c:	78 c0       	rjmp	.+240    	; 0xac5e <draw_menu(bool)+0x78a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1711
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
    ab6e:	f2 01       	movw	r30, r4
    ab70:	e4 55       	subi	r30, 0x54	; 84
    ab72:	ff 4f       	sbci	r31, 0xFF	; 255
    ab74:	e6 0d       	add	r30, r6
    ab76:	f7 1d       	adc	r31, r7
    ab78:	65 91       	lpm	r22, Z+
    ab7a:	74 91       	lpm	r23, Z
    ab7c:	c1 01       	movw	r24, r2
    ab7e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1712
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
    ab82:	f2 01       	movw	r30, r4
    ab84:	e2 54       	subi	r30, 0x42	; 66
    ab86:	ff 4f       	sbci	r31, 0xFF	; 255
    ab88:	e6 0d       	add	r30, r6
    ab8a:	f7 1d       	adc	r31, r7
    ab8c:	25 91       	lpm	r18, Z+
    ab8e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1713
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    ab90:	ca 54       	subi	r28, 0x4A	; 74
    ab92:	df 4f       	sbci	r29, 0xFF	; 255
    ab94:	e8 81       	ld	r30, Y
    ab96:	f9 81       	ldd	r31, Y+1	; 0x01
    ab98:	c6 5b       	subi	r28, 0xB6	; 182
    ab9a:	d0 40       	sbci	r29, 0x00	; 0
    ab9c:	84 91       	lpm	r24, Z
    ab9e:	cd 54       	subi	r28, 0x4D	; 77
    aba0:	df 4f       	sbci	r29, 0xFF	; 255
    aba2:	68 81       	ld	r22, Y
    aba4:	c3 5b       	subi	r28, 0xB3	; 179
    aba6:	d0 40       	sbci	r29, 0x00	; 0
    aba8:	70 e0       	ldi	r23, 0x00	; 0
    abaa:	49 2d       	mov	r20, r9
    abac:	90 e0       	ldi	r25, 0x00	; 0
    abae:	f9 01       	movw	r30, r18
    abb0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1714
      str1[0] = 0;
    abb2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1719
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    abb4:	f2 01       	movw	r30, r4
    abb6:	e7 54       	subi	r30, 0x47	; 71
    abb8:	ff 4f       	sbci	r31, 0xFF	; 255
    abba:	e6 0d       	add	r30, r6
    abbc:	f7 1d       	adc	r31, r7
    abbe:	a5 90       	lpm	r10, Z+
    abc0:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1718
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    abc2:	f2 01       	movw	r30, r4
    abc4:	e9 54       	subi	r30, 0x49	; 73
    abc6:	ff 4f       	sbci	r31, 0xFF	; 255
    abc8:	e6 0d       	add	r30, r6
    abca:	f7 1d       	adc	r31, r7
    abcc:	c5 90       	lpm	r12, Z+
    abce:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1717
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    abd0:	82 01       	movw	r16, r4
    abd2:	0a 54       	subi	r16, 0x4A	; 74
    abd4:	1f 4f       	sbci	r17, 0xFF	; 255
    abd6:	06 0d       	add	r16, r6
    abd8:	17 1d       	adc	r17, r7
    abda:	f8 01       	movw	r30, r16
    abdc:	04 91       	lpm	r16, Z
    abde:	f2 01       	movw	r30, r4
    abe0:	ec 54       	subi	r30, 0x4C	; 76
    abe2:	ff 4f       	sbci	r31, 0xFF	; 255
    abe4:	e6 0d       	add	r30, r6
    abe6:	f7 1d       	adc	r31, r7
    abe8:	25 91       	lpm	r18, Z+
    abea:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1716
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    abec:	f2 01       	movw	r30, r4
    abee:	ee 54       	subi	r30, 0x4E	; 78
    abf0:	ff 4f       	sbci	r31, 0xFF	; 255
    abf2:	e6 0d       	add	r30, r6
    abf4:	f7 1d       	adc	r31, r7
    abf6:	45 91       	lpm	r20, Z+
    abf8:	54 91       	lpm	r21, Z
    abfa:	f2 01       	movw	r30, r4
    abfc:	e0 55       	subi	r30, 0x50	; 80
    abfe:	ff 4f       	sbci	r31, 0xFF	; 255
    ac00:	e6 0d       	add	r30, r6
    ac02:	f7 1d       	adc	r31, r7
    ac04:	65 91       	lpm	r22, Z+
    ac06:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1715
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    ac08:	f2 01       	movw	r30, r4
    ac0a:	e2 55       	subi	r30, 0x52	; 82
    ac0c:	ff 4f       	sbci	r31, 0xFF	; 255
    ac0e:	e6 0d       	add	r30, r6
    ac10:	f7 1d       	adc	r31, r7
    ac12:	a5 91       	lpm	r26, Z+
    ac14:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1713
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    ac16:	88 24       	eor	r8, r8
    ac18:	83 94       	inc	r8
    ac1a:	81 11       	cpse	r24, r1
    ac1c:	01 c0       	rjmp	.+2      	; 0xac20 <draw_menu(bool)+0x74c>
    ac1e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1715
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    ac20:	c6 54       	subi	r28, 0x46	; 70
    ac22:	df 4f       	sbci	r29, 0xFF	; 255
    ac24:	88 81       	ld	r24, Y
    ac26:	99 81       	ldd	r25, Y+1	; 0x01
    ac28:	ca 5b       	subi	r28, 0xBA	; 186
    ac2a:	d0 40       	sbci	r29, 0x00	; 0
    ac2c:	68 0f       	add	r22, r24
    ac2e:	79 1f       	adc	r23, r25
    ac30:	e1 e0       	ldi	r30, 0x01	; 1
    ac32:	f0 e0       	ldi	r31, 0x00	; 0
    ac34:	ec 0f       	add	r30, r28
    ac36:	fd 1f       	adc	r31, r29
    ac38:	ff 93       	push	r31
    ac3a:	ef 93       	push	r30
    ac3c:	3f 92       	push	r3
    ac3e:	2f 92       	push	r2
    ac40:	e1 2c       	mov	r14, r1
    ac42:	c8 54       	subi	r28, 0x48	; 72
    ac44:	df 4f       	sbci	r29, 0xFF	; 255
    ac46:	88 81       	ld	r24, Y
    ac48:	99 81       	ldd	r25, Y+1	; 0x01
    ac4a:	c8 5b       	subi	r28, 0xB8	; 184
    ac4c:	d0 40       	sbci	r29, 0x00	; 0
    ac4e:	8a 0f       	add	r24, r26
    ac50:	9b 1f       	adc	r25, r27
    ac52:	0e 94 14 42 	call	0x8428	; 0x8428 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    ac56:	0f 90       	pop	r0
    ac58:	0f 90       	pop	r0
    ac5a:	0f 90       	pop	r0
    ac5c:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1721
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    ac5e:	cc 53       	subi	r28, 0x3C	; 60
    ac60:	df 4f       	sbci	r29, 0xFF	; 255
    ac62:	28 81       	ld	r18, Y
    ac64:	39 81       	ldd	r19, Y+1	; 0x01
    ac66:	c4 5c       	subi	r28, 0xC4	; 196
    ac68:	d0 40       	sbci	r29, 0x00	; 0
    ac6a:	23 2b       	or	r18, r19
    ac6c:	09 f4       	brne	.+2      	; 0xac70 <draw_menu(bool)+0x79c>
    ac6e:	63 c0       	rjmp	.+198    	; 0xad36 <draw_menu(bool)+0x862>
    ac70:	ca 53       	subi	r28, 0x3A	; 58
    ac72:	df 4f       	sbci	r29, 0xFF	; 255
    ac74:	48 81       	ld	r20, Y
    ac76:	59 81       	ldd	r21, Y+1	; 0x01
    ac78:	c6 5c       	subi	r28, 0xC6	; 198
    ac7a:	d0 40       	sbci	r29, 0x00	; 0
    ac7c:	45 2b       	or	r20, r21
    ac7e:	09 f4       	brne	.+2      	; 0xac82 <draw_menu(bool)+0x7ae>
    ac80:	5a c0       	rjmp	.+180    	; 0xad36 <draw_menu(bool)+0x862>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    ac82:	f2 01       	movw	r30, r4
    ac84:	ec 54       	subi	r30, 0x4C	; 76
    ac86:	ff 4f       	sbci	r31, 0xFF	; 255
    ac88:	e6 0d       	add	r30, r6
    ac8a:	f7 1d       	adc	r31, r7
    ac8c:	25 91       	lpm	r18, Z+
    ac8e:	34 91       	lpm	r19, Z
    ac90:	f2 01       	movw	r30, r4
    ac92:	ee 54       	subi	r30, 0x4E	; 78
    ac94:	ff 4f       	sbci	r31, 0xFF	; 255
    ac96:	e6 0d       	add	r30, r6
    ac98:	f7 1d       	adc	r31, r7
    ac9a:	45 91       	lpm	r20, Z+
    ac9c:	54 91       	lpm	r21, Z
    ac9e:	f2 01       	movw	r30, r4
    aca0:	e0 55       	subi	r30, 0x50	; 80
    aca2:	ff 4f       	sbci	r31, 0xFF	; 255
    aca4:	e6 0d       	add	r30, r6
    aca6:	f7 1d       	adc	r31, r7
    aca8:	65 91       	lpm	r22, Z+
    acaa:	74 91       	lpm	r23, Z
    acac:	f2 01       	movw	r30, r4
    acae:	e2 55       	subi	r30, 0x52	; 82
    acb0:	ff 4f       	sbci	r31, 0xFF	; 255
    acb2:	e6 0d       	add	r30, r6
    acb4:	f7 1d       	adc	r31, r7
    acb6:	85 91       	lpm	r24, Z+
    acb8:	94 91       	lpm	r25, Z
    acba:	c6 54       	subi	r28, 0x46	; 70
    acbc:	df 4f       	sbci	r29, 0xFF	; 255
    acbe:	e8 81       	ld	r30, Y
    acc0:	f9 81       	ldd	r31, Y+1	; 0x01
    acc2:	ca 5b       	subi	r28, 0xBA	; 186
    acc4:	d0 40       	sbci	r29, 0x00	; 0
    acc6:	6e 0f       	add	r22, r30
    acc8:	7f 1f       	adc	r23, r31
    acca:	ca 53       	subi	r28, 0x3A	; 58
    accc:	df 4f       	sbci	r29, 0xFF	; 255
    acce:	e8 80       	ld	r14, Y
    acd0:	f9 80       	ldd	r15, Y+1	; 0x01
    acd2:	c6 5c       	subi	r28, 0xC6	; 198
    acd4:	d0 40       	sbci	r29, 0x00	; 0
    acd6:	cc 53       	subi	r28, 0x3C	; 60
    acd8:	df 4f       	sbci	r29, 0xFF	; 255
    acda:	08 81       	ld	r16, Y
    acdc:	19 81       	ldd	r17, Y+1	; 0x01
    acde:	c4 5c       	subi	r28, 0xC4	; 196
    ace0:	d0 40       	sbci	r29, 0x00	; 0
    ace2:	c8 54       	subi	r28, 0x48	; 72
    ace4:	df 4f       	sbci	r29, 0xFF	; 255
    ace6:	e8 81       	ld	r30, Y
    ace8:	f9 81       	ldd	r31, Y+1	; 0x01
    acea:	c8 5b       	subi	r28, 0xB8	; 184
    acec:	d0 40       	sbci	r29, 0x00	; 0
    acee:	8e 0f       	add	r24, r30
    acf0:	9f 1f       	adc	r25, r31
    acf2:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    acf6:	18 2f       	mov	r17, r24
    acf8:	88 23       	and	r24, r24
    acfa:	e9 f0       	breq	.+58     	; 0xad36 <draw_menu(bool)+0x862>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
    acfc:	f2 01       	movw	r30, r4
    acfe:	e4 54       	subi	r30, 0x44	; 68
    ad00:	ff 4f       	sbci	r31, 0xFF	; 255
    ad02:	e6 0d       	add	r30, r6
    ad04:	f7 1d       	adc	r31, r7
    ad06:	25 91       	lpm	r18, Z+
    ad08:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
    ad0a:	ca 54       	subi	r28, 0x4A	; 74
    ad0c:	df 4f       	sbci	r29, 0xFF	; 255
    ad0e:	e8 81       	ld	r30, Y
    ad10:	f9 81       	ldd	r31, Y+1	; 0x01
    ad12:	c6 5b       	subi	r28, 0xB6	; 182
    ad14:	d0 40       	sbci	r29, 0x00	; 0
    ad16:	84 91       	lpm	r24, Z
    ad18:	cd 54       	subi	r28, 0x4D	; 77
    ad1a:	df 4f       	sbci	r29, 0xFF	; 255
    ad1c:	68 81       	ld	r22, Y
    ad1e:	c3 5b       	subi	r28, 0xB3	; 179
    ad20:	d0 40       	sbci	r29, 0x00	; 0
    ad22:	70 e0       	ldi	r23, 0x00	; 0
    ad24:	49 2d       	mov	r20, r9
    ad26:	90 e0       	ldi	r25, 0x00	; 0
    ad28:	f9 01       	movw	r30, r18
    ad2a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
        ret = true;
    ad2c:	c4 53       	subi	r28, 0x34	; 52
    ad2e:	df 4f       	sbci	r29, 0xFF	; 255
    ad30:	18 83       	st	Y, r17
    ad32:	cc 5c       	subi	r28, 0xCC	; 204
    ad34:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1702
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    ad36:	93 94       	inc	r9
    ad38:	da ce       	rjmp	.-588    	; 0xaaee <draw_menu(bool)+0x61a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    ad3a:	c4 53       	subi	r28, 0x34	; 52
    ad3c:	df 4f       	sbci	r29, 0xFF	; 255
    ad3e:	f8 81       	ld	r31, Y
    ad40:	cc 5c       	subi	r28, 0xCC	; 204
    ad42:	d0 40       	sbci	r29, 0x00	; 0
    ad44:	f1 11       	cpse	r31, r1
    ad46:	0c 94 6d 65 	jmp	0xcada	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    ad4a:	b1 2c       	mov	r11, r1
    ad4c:	13 01       	movw	r2, r6
    ad4e:	21 e4       	ldi	r18, 0x41	; 65
    ad50:	22 1a       	sub	r2, r18
    ad52:	2d ef       	ldi	r18, 0xFD	; 253
    ad54:	32 0a       	sbc	r3, r18
    ad56:	b2 e1       	ldi	r27, 0x12	; 18
    ad58:	5b 2e       	mov	r5, r27
    ad5a:	f1 01       	movw	r30, r2
    ad5c:	84 91       	lpm	r24, Z
    ad5e:	b8 16       	cp	r11, r24
    ad60:	08 f0       	brcs	.+2      	; 0xad64 <draw_menu(bool)+0x890>
    ad62:	cc c0       	rjmp	.+408    	; 0xaefc <draw_menu(bool)+0xa28>
    ad64:	b5 9c       	mul	r11, r5
    ad66:	40 01       	movw	r8, r0
    ad68:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
  {
    function_1 = &current->function_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&function_1->enable_show);
    ad6a:	f4 01       	movw	r30, r8
    ad6c:	e3 5d       	subi	r30, 0xD3	; 211
    ad6e:	fe 4f       	sbci	r31, 0xFE	; 254
    ad70:	e6 0d       	add	r30, r6
    ad72:	f7 1d       	adc	r31, r7
    ad74:	25 91       	lpm	r18, Z+
    ad76:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
    ad78:	84 01       	movw	r16, r8
    ad7a:	0d 5d       	subi	r16, 0xDD	; 221
    ad7c:	1e 4f       	sbci	r17, 0xFE	; 254
    ad7e:	06 0d       	add	r16, r6
    ad80:	17 1d       	adc	r17, r7
    ad82:	f8 01       	movw	r30, r16
    ad84:	84 91       	lpm	r24, Z
    ad86:	cd 54       	subi	r28, 0x4D	; 77
    ad88:	df 4f       	sbci	r29, 0xFF	; 255
    ad8a:	68 81       	ld	r22, Y
    ad8c:	c3 5b       	subi	r28, 0xB3	; 179
    ad8e:	d0 40       	sbci	r29, 0x00	; 0
    ad90:	70 e0       	ldi	r23, 0x00	; 0
    ad92:	4b 2d       	mov	r20, r11
    ad94:	90 e0       	ldi	r25, 0x00	; 0
    ad96:	f9 01       	movw	r30, r18
    ad98:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1736
    if (active == 0) continue;
    ad9a:	88 23       	and	r24, r24
    ad9c:	09 f4       	brne	.+2      	; 0xada0 <draw_menu(bool)+0x8cc>
    ad9e:	ac c0       	rjmp	.+344    	; 0xaef8 <draw_menu(bool)+0xa24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1737
    rdr = pgm_read_byte(&function_1->redraw_class);
    ada0:	f4 01       	movw	r30, r8
    ada2:	e6 5d       	subi	r30, 0xD6	; 214
    ada4:	fe 4f       	sbci	r31, 0xFE	; 254
    ada6:	e6 0d       	add	r30, r6
    ada8:	f7 1d       	adc	r31, r7
    adaa:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
    if (enable_redraw(rdr, redraw_class) == true)
    adac:	cf 52       	subi	r28, 0x2F	; 47
    adae:	df 4f       	sbci	r29, 0xFF	; 255
    adb0:	68 81       	ld	r22, Y
    adb2:	c1 5d       	subi	r28, 0xD1	; 209
    adb4:	d0 40       	sbci	r29, 0x00	; 0
    adb6:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    adba:	88 23       	and	r24, r24
    adbc:	09 f4       	brne	.+2      	; 0xadc0 <draw_menu(bool)+0x8ec>
    adbe:	4a c0       	rjmp	.+148    	; 0xae54 <draw_menu(bool)+0x980>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1740
    {
      strcpy_P(str1, (char*)pgm_read_word(&function_1->name));
    adc0:	f4 01       	movw	r30, r8
    adc2:	e1 5d       	subi	r30, 0xD1	; 209
    adc4:	fe 4f       	sbci	r31, 0xFE	; 254
    adc6:	e6 0d       	add	r30, r6
    adc8:	f7 1d       	adc	r31, r7
    adca:	65 91       	lpm	r22, Z+
    adcc:	74 91       	lpm	r23, Z
    adce:	ce 01       	movw	r24, r28
    add0:	01 96       	adiw	r24, 0x01	; 1
    add2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
      fnt_coordinate_xy =  (fptr_coordinate_xy*)pgm_read_word(&function_1->fnt_coordinate_xy);
    add6:	f4 01       	movw	r30, r8
    add8:	ec 5d       	subi	r30, 0xDC	; 220
    adda:	fe 4f       	sbci	r31, 0xFE	; 254
    addc:	e6 0d       	add	r30, r6
    adde:	f7 1d       	adc	r31, r7
    ade0:	a5 91       	lpm	r26, Z+
    ade2:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1, str1);
    ade4:	f8 01       	movw	r30, r16
    ade6:	04 91       	lpm	r16, Z
    ade8:	f4 01       	movw	r30, r8
    adea:	e8 5d       	subi	r30, 0xD8	; 216
    adec:	fe 4f       	sbci	r31, 0xFE	; 254
    adee:	e6 0d       	add	r30, r6
    adf0:	f7 1d       	adc	r31, r7
    adf2:	25 91       	lpm	r18, Z+
    adf4:	34 91       	lpm	r19, Z
    adf6:	f4 01       	movw	r30, r8
    adf8:	ea 5d       	subi	r30, 0xDA	; 218
    adfa:	fe 4f       	sbci	r31, 0xFE	; 254
    adfc:	e6 0d       	add	r30, r6
    adfe:	f7 1d       	adc	r31, r7
    ae00:	45 91       	lpm	r20, Z+
    ae02:	54 91       	lpm	r21, Z
    ae04:	f4 01       	movw	r30, r8
    ae06:	ef 5d       	subi	r30, 0xDF	; 223
    ae08:	fe 4f       	sbci	r31, 0xFE	; 254
    ae0a:	e6 0d       	add	r30, r6
    ae0c:	f7 1d       	adc	r31, r7
    ae0e:	65 91       	lpm	r22, Z+
    ae10:	74 91       	lpm	r23, Z
    ae12:	f4 01       	movw	r30, r8
    ae14:	e1 5e       	subi	r30, 0xE1	; 225
    ae16:	fe 4f       	sbci	r31, 0xFE	; 254
    ae18:	e6 0d       	add	r30, r6
    ae1a:	f7 1d       	adc	r31, r7
    ae1c:	85 91       	lpm	r24, Z+
    ae1e:	94 91       	lpm	r25, Z
    ae20:	c6 54       	subi	r28, 0x46	; 70
    ae22:	df 4f       	sbci	r29, 0xFF	; 255
    ae24:	e8 81       	ld	r30, Y
    ae26:	f9 81       	ldd	r31, Y+1	; 0x01
    ae28:	ca 5b       	subi	r28, 0xBA	; 186
    ae2a:	d0 40       	sbci	r29, 0x00	; 0
    ae2c:	6e 0f       	add	r22, r30
    ae2e:	7f 1f       	adc	r23, r31
    ae30:	fe 01       	movw	r30, r28
    ae32:	31 96       	adiw	r30, 0x01	; 1
    ae34:	6f 01       	movw	r12, r30
    ae36:	cd 54       	subi	r28, 0x4D	; 77
    ae38:	df 4f       	sbci	r29, 0xFF	; 255
    ae3a:	e8 80       	ld	r14, Y
    ae3c:	c3 5b       	subi	r28, 0xB3	; 179
    ae3e:	d0 40       	sbci	r29, 0x00	; 0
    ae40:	c8 54       	subi	r28, 0x48	; 72
    ae42:	df 4f       	sbci	r29, 0xFF	; 255
    ae44:	e8 81       	ld	r30, Y
    ae46:	f9 81       	ldd	r31, Y+1	; 0x01
    ae48:	c8 5b       	subi	r28, 0xB8	; 184
    ae4a:	d0 40       	sbci	r29, 0x00	; 0
    ae4c:	8e 0f       	add	r24, r30
    ae4e:	9f 1f       	adc	r25, r31
    ae50:	fd 01       	movw	r30, r26
    ae52:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
    }
    if (click_x > 0 && click_y > 0)
    ae54:	cc 53       	subi	r28, 0x3C	; 60
    ae56:	df 4f       	sbci	r29, 0xFF	; 255
    ae58:	28 81       	ld	r18, Y
    ae5a:	39 81       	ldd	r19, Y+1	; 0x01
    ae5c:	c4 5c       	subi	r28, 0xC4	; 196
    ae5e:	d0 40       	sbci	r29, 0x00	; 0
    ae60:	23 2b       	or	r18, r19
    ae62:	09 f4       	brne	.+2      	; 0xae66 <draw_menu(bool)+0x992>
    ae64:	49 c0       	rjmp	.+146    	; 0xaef8 <draw_menu(bool)+0xa24>
    ae66:	ca 53       	subi	r28, 0x3A	; 58
    ae68:	df 4f       	sbci	r29, 0xFF	; 255
    ae6a:	48 81       	ld	r20, Y
    ae6c:	59 81       	ldd	r21, Y+1	; 0x01
    ae6e:	c6 5c       	subi	r28, 0xC6	; 198
    ae70:	d0 40       	sbci	r29, 0x00	; 0
    ae72:	45 2b       	or	r20, r21
    ae74:	09 f4       	brne	.+2      	; 0xae78 <draw_menu(bool)+0x9a4>
    ae76:	40 c0       	rjmp	.+128    	; 0xaef8 <draw_menu(bool)+0xa24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1745
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    ae78:	f4 01       	movw	r30, r8
    ae7a:	e8 5d       	subi	r30, 0xD8	; 216
    ae7c:	fe 4f       	sbci	r31, 0xFE	; 254
    ae7e:	e6 0d       	add	r30, r6
    ae80:	f7 1d       	adc	r31, r7
    ae82:	25 91       	lpm	r18, Z+
    ae84:	34 91       	lpm	r19, Z
    ae86:	f4 01       	movw	r30, r8
    ae88:	ea 5d       	subi	r30, 0xDA	; 218
    ae8a:	fe 4f       	sbci	r31, 0xFE	; 254
    ae8c:	e6 0d       	add	r30, r6
    ae8e:	f7 1d       	adc	r31, r7
    ae90:	45 91       	lpm	r20, Z+
    ae92:	54 91       	lpm	r21, Z
    ae94:	f4 01       	movw	r30, r8
    ae96:	ef 5d       	subi	r30, 0xDF	; 223
    ae98:	fe 4f       	sbci	r31, 0xFE	; 254
    ae9a:	e6 0d       	add	r30, r6
    ae9c:	f7 1d       	adc	r31, r7
    ae9e:	65 91       	lpm	r22, Z+
    aea0:	74 91       	lpm	r23, Z
    aea2:	f4 01       	movw	r30, r8
    aea4:	e1 5e       	subi	r30, 0xE1	; 225
    aea6:	fe 4f       	sbci	r31, 0xFE	; 254
    aea8:	e6 0d       	add	r30, r6
    aeaa:	f7 1d       	adc	r31, r7
    aeac:	85 91       	lpm	r24, Z+
    aeae:	94 91       	lpm	r25, Z
    aeb0:	c6 54       	subi	r28, 0x46	; 70
    aeb2:	df 4f       	sbci	r29, 0xFF	; 255
    aeb4:	e8 81       	ld	r30, Y
    aeb6:	f9 81       	ldd	r31, Y+1	; 0x01
    aeb8:	ca 5b       	subi	r28, 0xBA	; 186
    aeba:	d0 40       	sbci	r29, 0x00	; 0
    aebc:	6e 0f       	add	r22, r30
    aebe:	7f 1f       	adc	r23, r31
    aec0:	ca 53       	subi	r28, 0x3A	; 58
    aec2:	df 4f       	sbci	r29, 0xFF	; 255
    aec4:	e8 80       	ld	r14, Y
    aec6:	f9 80       	ldd	r15, Y+1	; 0x01
    aec8:	c6 5c       	subi	r28, 0xC6	; 198
    aeca:	d0 40       	sbci	r29, 0x00	; 0
    aecc:	cc 53       	subi	r28, 0x3C	; 60
    aece:	df 4f       	sbci	r29, 0xFF	; 255
    aed0:	08 81       	ld	r16, Y
    aed2:	19 81       	ldd	r17, Y+1	; 0x01
    aed4:	c4 5c       	subi	r28, 0xC4	; 196
    aed6:	d0 40       	sbci	r29, 0x00	; 0
    aed8:	c8 54       	subi	r28, 0x48	; 72
    aeda:	df 4f       	sbci	r29, 0xFF	; 255
    aedc:	e8 81       	ld	r30, Y
    aede:	f9 81       	ldd	r31, Y+1	; 0x01
    aee0:	c8 5b       	subi	r28, 0xB8	; 184
    aee2:	d0 40       	sbci	r29, 0x00	; 0
    aee4:	8e 0f       	add	r24, r30
    aee6:	9f 1f       	adc	r25, r31
    aee8:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    aeec:	88 23       	and	r24, r24
    aeee:	21 f0       	breq	.+8      	; 0xaef8 <draw_menu(bool)+0xa24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1750
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    aef0:	86 e5       	ldi	r24, 0x56	; 86
    aef2:	93 e0       	ldi	r25, 0x03	; 3
    aef4:	0e 94 b2 d0 	call	0x1a164	; 0x1a164 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1731
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    aef8:	b3 94       	inc	r11
    aefa:	2f cf       	rjmp	.-418    	; 0xad5a <draw_menu(bool)+0x886>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    aefc:	ca 54       	subi	r28, 0x4A	; 74
    aefe:	df 4f       	sbci	r29, 0xFF	; 255
    af00:	18 82       	st	Y, r1
    af02:	c6 5b       	subi	r28, 0xB6	; 182
    af04:	d0 40       	sbci	r29, 0x00	; 0
    af06:	93 01       	movw	r18, r6
    af08:	20 54       	subi	r18, 0x40	; 64
    af0a:	3d 4f       	sbci	r19, 0xFD	; 253
    af0c:	c8 53       	subi	r28, 0x38	; 56
    af0e:	df 4f       	sbci	r29, 0xFF	; 255
    af10:	39 83       	std	Y+1, r19	; 0x01
    af12:	28 83       	st	Y, r18
    af14:	c8 5c       	subi	r28, 0xC8	; 200
    af16:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
    af18:	4e 01       	movw	r8, r28
    af1a:	31 e8       	ldi	r19, 0x81	; 129
    af1c:	83 0e       	add	r8, r19
    af1e:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    af20:	ae 01       	movw	r20, r28
    af22:	4f 5f       	subi	r20, 0xFF	; 255
    af24:	5f 4f       	sbci	r21, 0xFF	; 255
    af26:	cc 54       	subi	r28, 0x4C	; 76
    af28:	df 4f       	sbci	r29, 0xFF	; 255
    af2a:	59 83       	std	Y+1, r21	; 0x01
    af2c:	48 83       	st	Y, r20
    af2e:	c4 5b       	subi	r28, 0xB4	; 180
    af30:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    af32:	c8 53       	subi	r28, 0x38	; 56
    af34:	df 4f       	sbci	r29, 0xFF	; 255
    af36:	e8 81       	ld	r30, Y
    af38:	f9 81       	ldd	r31, Y+1	; 0x01
    af3a:	c8 5c       	subi	r28, 0xC8	; 200
    af3c:	d0 40       	sbci	r29, 0x00	; 0
    af3e:	84 91       	lpm	r24, Z
    af40:	ca 54       	subi	r28, 0x4A	; 74
    af42:	df 4f       	sbci	r29, 0xFF	; 255
    af44:	f8 81       	ld	r31, Y
    af46:	c6 5b       	subi	r28, 0xB6	; 182
    af48:	d0 40       	sbci	r29, 0x00	; 0
    af4a:	f8 17       	cp	r31, r24
    af4c:	08 f0       	brcs	.+2      	; 0xaf50 <draw_menu(bool)+0xa7c>
    af4e:	d1 c1       	rjmp	.+930    	; 0xb2f2 <draw_menu(bool)+0xe1e>
    af50:	27 e1       	ldi	r18, 0x17	; 23
    af52:	f2 9f       	mul	r31, r18
    af54:	60 01       	movw	r12, r0
    af56:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    af58:	f6 01       	movw	r30, r12
    af5a:	e3 58       	subi	r30, 0x83	; 131
    af5c:	fe 4f       	sbci	r31, 0xFE	; 254
    af5e:	e6 0d       	add	r30, r6
    af60:	f7 1d       	adc	r31, r7
    af62:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
    if (enable_redraw(rdr, redraw_class) == true)
    af64:	cf 52       	subi	r28, 0x2F	; 47
    af66:	df 4f       	sbci	r29, 0xFF	; 255
    af68:	68 81       	ld	r22, Y
    af6a:	c1 5d       	subi	r28, 0xD1	; 209
    af6c:	d0 40       	sbci	r29, 0x00	; 0
    af6e:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    af72:	88 23       	and	r24, r24
    af74:	09 f4       	brne	.+2      	; 0xaf78 <draw_menu(bool)+0xaa4>
    af76:	42 c1       	rjmp	.+644    	; 0xb1fc <draw_menu(bool)+0xd28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
    af78:	f6 01       	movw	r30, r12
    af7a:	e9 59       	subi	r30, 0x99	; 153
    af7c:	fe 4f       	sbci	r31, 0xFE	; 254
    af7e:	e6 0d       	add	r30, r6
    af80:	f7 1d       	adc	r31, r7
    af82:	65 91       	lpm	r22, Z+
    af84:	74 91       	lpm	r23, Z
    af86:	c4 01       	movw	r24, r8
    af88:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1763
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
    af8c:	f6 01       	movw	r30, r12
    af8e:	e7 58       	subi	r30, 0x87	; 135
    af90:	fe 4f       	sbci	r31, 0xFE	; 254
    af92:	e6 0d       	add	r30, r6
    af94:	f7 1d       	adc	r31, r7
    af96:	25 91       	lpm	r18, Z+
    af98:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1764
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
    af9a:	f6 01       	movw	r30, r12
    af9c:	e5 58       	subi	r30, 0x85	; 133
    af9e:	fe 4f       	sbci	r31, 0xFE	; 254
    afa0:	e6 0d       	add	r30, r6
    afa2:	f7 1d       	adc	r31, r7
    afa4:	e5 90       	lpm	r14, Z+
    afa6:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1765
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    afa8:	86 01       	movw	r16, r12
    afaa:	0a 58       	subi	r16, 0x8A	; 138
    afac:	1e 4f       	sbci	r17, 0xFE	; 254
    afae:	06 0d       	add	r16, r6
    afb0:	17 1d       	adc	r17, r7
    afb2:	f8 01       	movw	r30, r16
    afb4:	84 91       	lpm	r24, Z
    afb6:	cd 54       	subi	r28, 0x4D	; 77
    afb8:	df 4f       	sbci	r29, 0xFF	; 255
    afba:	68 81       	ld	r22, Y
    afbc:	c3 5b       	subi	r28, 0xB3	; 179
    afbe:	d0 40       	sbci	r29, 0x00	; 0
    afc0:	70 e0       	ldi	r23, 0x00	; 0
    afc2:	ca 54       	subi	r28, 0x4A	; 74
    afc4:	df 4f       	sbci	r29, 0xFF	; 255
    afc6:	48 81       	ld	r20, Y
    afc8:	c6 5b       	subi	r28, 0xB6	; 182
    afca:	d0 40       	sbci	r29, 0x00	; 0
    afcc:	90 e0       	ldi	r25, 0x00	; 0
    afce:	f9 01       	movw	r30, r18
    afd0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1766
      str3[0] = 0;
    afd2:	cf 55       	subi	r28, 0x5F	; 95
    afd4:	df 4f       	sbci	r29, 0xFF	; 255
    afd6:	18 82       	st	Y, r1
    afd8:	c1 5a       	subi	r28, 0xA1	; 161
    afda:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
    afdc:	f8 01       	movw	r30, r16
    afde:	44 91       	lpm	r20, Z
    afe0:	84 91       	lpm	r24, Z
    afe2:	8e 01       	movw	r16, r28
    afe4:	0f 55       	subi	r16, 0x5F	; 95
    afe6:	1f 4f       	sbci	r17, 0xFF	; 255
    afe8:	9e 01       	movw	r18, r28
    afea:	2f 5f       	subi	r18, 0xFF	; 255
    afec:	3f 4f       	sbci	r19, 0xFF	; 255
    afee:	cd 54       	subi	r28, 0x4D	; 77
    aff0:	df 4f       	sbci	r29, 0xFF	; 255
    aff2:	68 81       	ld	r22, Y
    aff4:	c3 5b       	subi	r28, 0xB3	; 179
    aff6:	d0 40       	sbci	r29, 0x00	; 0
    aff8:	f7 01       	movw	r30, r14
    affa:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    affc:	f6 01       	movw	r30, r12
    affe:	ef 58       	subi	r30, 0x8F	; 143
    b000:	fe 4f       	sbci	r31, 0xFE	; 254
    b002:	e6 0d       	add	r30, r6
    b004:	f7 1d       	adc	r31, r7
    b006:	25 91       	lpm	r18, Z+
    b008:	34 91       	lpm	r19, Z
    b00a:	c4 54       	subi	r28, 0x44	; 68
    b00c:	df 4f       	sbci	r29, 0xFF	; 255
    b00e:	39 83       	std	Y+1, r19	; 0x01
    b010:	28 83       	st	Y, r18
    b012:	cc 5b       	subi	r28, 0xBC	; 188
    b014:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1771
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    b016:	f6 01       	movw	r30, r12
    b018:	e1 59       	subi	r30, 0x91	; 145
    b01a:	fe 4f       	sbci	r31, 0xFE	; 254
    b01c:	e6 0d       	add	r30, r6
    b01e:	f7 1d       	adc	r31, r7
    b020:	45 90       	lpm	r4, Z+
    b022:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1770
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    b024:	f6 01       	movw	r30, r12
    b026:	e3 59       	subi	r30, 0x93	; 147
    b028:	fe 4f       	sbci	r31, 0xFE	; 254
    b02a:	e6 0d       	add	r30, r6
    b02c:	f7 1d       	adc	r31, r7
    b02e:	85 91       	lpm	r24, Z+
    b030:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1769
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    b032:	f6 01       	movw	r30, r12
    b034:	e5 59       	subi	r30, 0x95	; 149
    b036:	fe 4f       	sbci	r31, 0xFE	; 254
    b038:	e6 0d       	add	r30, r6
    b03a:	f7 1d       	adc	r31, r7
    b03c:	25 90       	lpm	r2, Z+
    b03e:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1768
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    b040:	c6 54       	subi	r28, 0x46	; 70
    b042:	df 4f       	sbci	r29, 0xFF	; 255
    b044:	48 81       	ld	r20, Y
    b046:	59 81       	ldd	r21, Y+1	; 0x01
    b048:	ca 5b       	subi	r28, 0xBA	; 186
    b04a:	d0 40       	sbci	r29, 0x00	; 0
    b04c:	24 0e       	add	r2, r20
    b04e:	35 1e       	adc	r3, r21
    b050:	f6 01       	movw	r30, r12
    b052:	e7 59       	subi	r30, 0x97	; 151
    b054:	fe 4f       	sbci	r31, 0xFE	; 254
    b056:	e6 0d       	add	r30, r6
    b058:	f7 1d       	adc	r31, r7
    b05a:	a5 90       	lpm	r10, Z+
    b05c:	b4 90       	lpm	r11, Z
    b05e:	c8 54       	subi	r28, 0x48	; 72
    b060:	df 4f       	sbci	r29, 0xFF	; 255
    b062:	68 81       	ld	r22, Y
    b064:	79 81       	ldd	r23, Y+1	; 0x01
    b066:	c8 5b       	subi	r28, 0xB8	; 184
    b068:	d0 40       	sbci	r29, 0x00	; 0
    b06a:	a6 0e       	add	r10, r22
    b06c:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b06e:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    b072:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
    b076:	10 e0       	ldi	r17, 0x00	; 0
    b078:	00 e0       	ldi	r16, 0x00	; 0
    b07a:	55 24       	eor	r5, r5
    b07c:	fc 01       	movw	r30, r24
    b07e:	ff 27       	eor	r31, r31
    b080:	c2 54       	subi	r28, 0x42	; 66
    b082:	df 4f       	sbci	r29, 0xFF	; 255
    b084:	f9 83       	std	Y+1, r31	; 0x01
    b086:	e8 83       	st	Y, r30
    b088:	ce 5b       	subi	r28, 0xBE	; 190
    b08a:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5129
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    b08c:	91 01       	movw	r18, r2
    b08e:	24 0d       	add	r18, r4
    b090:	35 1d       	adc	r19, r5
    b092:	c6 53       	subi	r28, 0x36	; 54
    b094:	df 4f       	sbci	r29, 0xFF	; 255
    b096:	39 83       	std	Y+1, r19	; 0x01
    b098:	28 83       	st	Y, r18
    b09a:	ca 5c       	subi	r28, 0xCA	; 202
    b09c:	d0 40       	sbci	r29, 0x00	; 0
    b09e:	7f 01       	movw	r14, r30
    b0a0:	ea 0c       	add	r14, r10
    b0a2:	fb 1c       	adc	r15, r11
    b0a4:	c6 53       	subi	r28, 0x36	; 54
    b0a6:	df 4f       	sbci	r29, 0xFF	; 255
    b0a8:	28 81       	ld	r18, Y
    b0aa:	39 81       	ldd	r19, Y+1	; 0x01
    b0ac:	ca 5c       	subi	r28, 0xCA	; 202
    b0ae:	d0 40       	sbci	r29, 0x00	; 0
    b0b0:	20 1b       	sub	r18, r16
    b0b2:	31 0b       	sbc	r19, r17
    b0b4:	a7 01       	movw	r20, r14
    b0b6:	40 1b       	sub	r20, r16
    b0b8:	51 0b       	sbc	r21, r17
    b0ba:	b1 01       	movw	r22, r2
    b0bc:	60 0f       	add	r22, r16
    b0be:	71 1f       	adc	r23, r17
    b0c0:	c5 01       	movw	r24, r10
    b0c2:	80 0f       	add	r24, r16
    b0c4:	91 1f       	adc	r25, r17
    b0c6:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
    b0ca:	0f 5f       	subi	r16, 0xFF	; 255
    b0cc:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    b0ce:	03 30       	cpi	r16, 0x03	; 3
    b0d0:	11 05       	cpc	r17, r1
    b0d2:	41 f7       	brne	.-48     	; 0xb0a4 <draw_menu(bool)+0xbd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5131
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    b0d4:	f4 01       	movw	r30, r8
    b0d6:	01 90       	ld	r0, Z+
    b0d8:	00 20       	and	r0, r0
    b0da:	e9 f7       	brne	.-6      	; 0xb0d6 <draw_menu(bool)+0xc02>
    b0dc:	31 97       	sbiw	r30, 0x01	; 1
    b0de:	e8 19       	sub	r30, r8
    b0e0:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    b0e2:	c4 54       	subi	r28, 0x44	; 68
    b0e4:	df 4f       	sbci	r29, 0xFF	; 255
    b0e6:	88 81       	ld	r24, Y
    b0e8:	cc 5b       	subi	r28, 0xBC	; 188
    b0ea:	d0 40       	sbci	r29, 0x00	; 0
    b0ec:	88 0f       	add	r24, r24
    b0ee:	c4 54       	subi	r28, 0x44	; 68
    b0f0:	df 4f       	sbci	r29, 0xFF	; 255
    b0f2:	38 81       	ld	r19, Y
    b0f4:	cc 5b       	subi	r28, 0xBC	; 188
    b0f6:	d0 40       	sbci	r29, 0x00	; 0
    b0f8:	83 0f       	add	r24, r19
    b0fa:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5133
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    b0fc:	a2 01       	movw	r20, r4
    b0fe:	48 1b       	sub	r20, r24
    b100:	51 09       	sbc	r21, r1
    b102:	57 ff       	sbrs	r21, 7
    b104:	02 c0       	rjmp	.+4      	; 0xb10a <draw_menu(bool)+0xc36>
    b106:	4d 5f       	subi	r20, 0xFD	; 253
    b108:	5f 4f       	sbci	r21, 0xFF	; 255
    b10a:	55 95       	asr	r21
    b10c:	47 95       	ror	r20
    b10e:	55 95       	asr	r21
    b110:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    b112:	42 0d       	add	r20, r2
    b114:	53 2d       	mov	r21, r3
    b116:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    b118:	66 e0       	ldi	r22, 0x06	; 6
    b11a:	e6 9f       	mul	r30, r22
    b11c:	f0 01       	movw	r30, r0
    b11e:	11 24       	eor	r1, r1
    b120:	c4 54       	subi	r28, 0x44	; 68
    b122:	df 4f       	sbci	r29, 0xFF	; 255
    b124:	78 81       	ld	r23, Y
    b126:	cc 5b       	subi	r28, 0xBC	; 188
    b128:	d0 40       	sbci	r29, 0x00	; 0
    b12a:	7e 9f       	mul	r23, r30
    b12c:	c0 01       	movw	r24, r0
    b12e:	7f 9f       	mul	r23, r31
    b130:	90 0d       	add	r25, r0
    b132:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5132
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    b134:	99 27       	eor	r25, r25
    b136:	c2 54       	subi	r28, 0x42	; 66
    b138:	df 4f       	sbci	r29, 0xFF	; 255
    b13a:	68 81       	ld	r22, Y
    b13c:	79 81       	ldd	r23, Y+1	; 0x01
    b13e:	ce 5b       	subi	r28, 0xBE	; 190
    b140:	d0 40       	sbci	r29, 0x00	; 0
    b142:	68 1b       	sub	r22, r24
    b144:	79 0b       	sbc	r23, r25
    b146:	77 ff       	sbrs	r23, 7
    b148:	02 c0       	rjmp	.+4      	; 0xb14e <draw_menu(bool)+0xc7a>
    b14a:	6f 5f       	subi	r22, 0xFF	; 255
    b14c:	7f 4f       	sbci	r23, 0xFF	; 255
    b14e:	75 95       	asr	r23
    b150:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    b152:	6a 0d       	add	r22, r10
    b154:	7b 2d       	mov	r23, r11
    b156:	71 1d       	adc	r23, r1
    b158:	ee 24       	eor	r14, r14
    b15a:	ea 94       	dec	r14
    b15c:	fe 2c       	mov	r15, r14
    b15e:	10 e0       	ldi	r17, 0x00	; 0
    b160:	00 e0       	ldi	r16, 0x00	; 0
    b162:	c4 54       	subi	r28, 0x44	; 68
    b164:	df 4f       	sbci	r29, 0xFF	; 255
    b166:	28 81       	ld	r18, Y
    b168:	cc 5b       	subi	r28, 0xBC	; 188
    b16a:	d0 40       	sbci	r29, 0x00	; 0
    b16c:	c4 01       	movw	r24, r8
    b16e:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5136
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    b172:	cc 54       	subi	r28, 0x4C	; 76
    b174:	df 4f       	sbci	r29, 0xFF	; 255
    b176:	e8 81       	ld	r30, Y
    b178:	f9 81       	ldd	r31, Y+1	; 0x01
    b17a:	c4 5b       	subi	r28, 0xB4	; 180
    b17c:	d0 40       	sbci	r29, 0x00	; 0
    b17e:	01 90       	ld	r0, Z+
    b180:	00 20       	and	r0, r0
    b182:	e9 f7       	brne	.-6      	; 0xb17e <draw_menu(bool)+0xcaa>
    b184:	31 97       	sbiw	r30, 0x01	; 1
    b186:	cc 54       	subi	r28, 0x4C	; 76
    b188:	df 4f       	sbci	r29, 0xFF	; 255
    b18a:	88 81       	ld	r24, Y
    b18c:	99 81       	ldd	r25, Y+1	; 0x01
    b18e:	c4 5b       	subi	r28, 0xB4	; 180
    b190:	d0 40       	sbci	r29, 0x00	; 0
    b192:	e8 1b       	sub	r30, r24
    b194:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5138
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    b196:	a2 01       	movw	r20, r4
    b198:	46 50       	subi	r20, 0x06	; 6
    b19a:	51 09       	sbc	r21, r1
    b19c:	57 ff       	sbrs	r21, 7
    b19e:	02 c0       	rjmp	.+4      	; 0xb1a4 <draw_menu(bool)+0xcd0>
    b1a0:	4d 5f       	subi	r20, 0xFD	; 253
    b1a2:	5f 4f       	sbci	r21, 0xFF	; 255
    b1a4:	55 95       	asr	r21
    b1a6:	47 95       	ror	r20
    b1a8:	55 95       	asr	r21
    b1aa:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5139
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    b1ac:	55 27       	eor	r21, r21
    b1ae:	ca 01       	movw	r24, r20
    b1b0:	88 0f       	add	r24, r24
    b1b2:	99 1f       	adc	r25, r25
    b1b4:	48 0f       	add	r20, r24
    b1b6:	59 1f       	adc	r21, r25
    b1b8:	42 0d       	add	r20, r2
    b1ba:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    b1bc:	96 e0       	ldi	r25, 0x06	; 6
    b1be:	e9 9f       	mul	r30, r25
    b1c0:	f0 01       	movw	r30, r0
    b1c2:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5137
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    b1c4:	ff 27       	eor	r31, r31
    b1c6:	c2 54       	subi	r28, 0x42	; 66
    b1c8:	df 4f       	sbci	r29, 0xFF	; 255
    b1ca:	68 81       	ld	r22, Y
    b1cc:	79 81       	ldd	r23, Y+1	; 0x01
    b1ce:	ce 5b       	subi	r28, 0xBE	; 190
    b1d0:	d0 40       	sbci	r29, 0x00	; 0
    b1d2:	6e 1b       	sub	r22, r30
    b1d4:	7f 0b       	sbc	r23, r31
    b1d6:	77 ff       	sbrs	r23, 7
    b1d8:	02 c0       	rjmp	.+4      	; 0xb1de <draw_menu(bool)+0xd0a>
    b1da:	6f 5f       	subi	r22, 0xFF	; 255
    b1dc:	7f 4f       	sbci	r23, 0xFF	; 255
    b1de:	75 95       	asr	r23
    b1e0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5139
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    b1e2:	6a 0d       	add	r22, r10
    b1e4:	7b 2d       	mov	r23, r11
    b1e6:	71 1d       	adc	r23, r1
    b1e8:	ee 24       	eor	r14, r14
    b1ea:	ea 94       	dec	r14
    b1ec:	fe 2c       	mov	r15, r14
    b1ee:	10 e0       	ldi	r17, 0x00	; 0
    b1f0:	00 e0       	ldi	r16, 0x00	; 0
    b1f2:	21 e0       	ldi	r18, 0x01	; 1
    b1f4:	ce 01       	movw	r24, r28
    b1f6:	01 96       	adiw	r24, 0x01	; 1
    b1f8:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1775
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    b1fc:	cc 53       	subi	r28, 0x3C	; 60
    b1fe:	df 4f       	sbci	r29, 0xFF	; 255
    b200:	e8 81       	ld	r30, Y
    b202:	f9 81       	ldd	r31, Y+1	; 0x01
    b204:	c4 5c       	subi	r28, 0xC4	; 196
    b206:	d0 40       	sbci	r29, 0x00	; 0
    b208:	ef 2b       	or	r30, r31
    b20a:	09 f4       	brne	.+2      	; 0xb20e <draw_menu(bool)+0xd3a>
    b20c:	66 c0       	rjmp	.+204    	; 0xb2da <draw_menu(bool)+0xe06>
    b20e:	ca 53       	subi	r28, 0x3A	; 58
    b210:	df 4f       	sbci	r29, 0xFF	; 255
    b212:	28 81       	ld	r18, Y
    b214:	39 81       	ldd	r19, Y+1	; 0x01
    b216:	c6 5c       	subi	r28, 0xC6	; 198
    b218:	d0 40       	sbci	r29, 0x00	; 0
    b21a:	23 2b       	or	r18, r19
    b21c:	09 f4       	brne	.+2      	; 0xb220 <draw_menu(bool)+0xd4c>
    b21e:	5d c0       	rjmp	.+186    	; 0xb2da <draw_menu(bool)+0xe06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    b220:	f6 01       	movw	r30, r12
    b222:	e1 59       	subi	r30, 0x91	; 145
    b224:	fe 4f       	sbci	r31, 0xFE	; 254
    b226:	e6 0d       	add	r30, r6
    b228:	f7 1d       	adc	r31, r7
    b22a:	25 91       	lpm	r18, Z+
    b22c:	34 91       	lpm	r19, Z
    b22e:	f6 01       	movw	r30, r12
    b230:	e3 59       	subi	r30, 0x93	; 147
    b232:	fe 4f       	sbci	r31, 0xFE	; 254
    b234:	e6 0d       	add	r30, r6
    b236:	f7 1d       	adc	r31, r7
    b238:	45 91       	lpm	r20, Z+
    b23a:	54 91       	lpm	r21, Z
    b23c:	f6 01       	movw	r30, r12
    b23e:	e5 59       	subi	r30, 0x95	; 149
    b240:	fe 4f       	sbci	r31, 0xFE	; 254
    b242:	e6 0d       	add	r30, r6
    b244:	f7 1d       	adc	r31, r7
    b246:	65 91       	lpm	r22, Z+
    b248:	74 91       	lpm	r23, Z
    b24a:	f6 01       	movw	r30, r12
    b24c:	e7 59       	subi	r30, 0x97	; 151
    b24e:	fe 4f       	sbci	r31, 0xFE	; 254
    b250:	e6 0d       	add	r30, r6
    b252:	f7 1d       	adc	r31, r7
    b254:	85 91       	lpm	r24, Z+
    b256:	94 91       	lpm	r25, Z
    b258:	c6 54       	subi	r28, 0x46	; 70
    b25a:	df 4f       	sbci	r29, 0xFF	; 255
    b25c:	e8 81       	ld	r30, Y
    b25e:	f9 81       	ldd	r31, Y+1	; 0x01
    b260:	ca 5b       	subi	r28, 0xBA	; 186
    b262:	d0 40       	sbci	r29, 0x00	; 0
    b264:	6e 0f       	add	r22, r30
    b266:	7f 1f       	adc	r23, r31
    b268:	ca 53       	subi	r28, 0x3A	; 58
    b26a:	df 4f       	sbci	r29, 0xFF	; 255
    b26c:	e8 80       	ld	r14, Y
    b26e:	f9 80       	ldd	r15, Y+1	; 0x01
    b270:	c6 5c       	subi	r28, 0xC6	; 198
    b272:	d0 40       	sbci	r29, 0x00	; 0
    b274:	cc 53       	subi	r28, 0x3C	; 60
    b276:	df 4f       	sbci	r29, 0xFF	; 255
    b278:	08 81       	ld	r16, Y
    b27a:	19 81       	ldd	r17, Y+1	; 0x01
    b27c:	c4 5c       	subi	r28, 0xC4	; 196
    b27e:	d0 40       	sbci	r29, 0x00	; 0
    b280:	c8 54       	subi	r28, 0x48	; 72
    b282:	df 4f       	sbci	r29, 0xFF	; 255
    b284:	e8 81       	ld	r30, Y
    b286:	f9 81       	ldd	r31, Y+1	; 0x01
    b288:	c8 5b       	subi	r28, 0xB8	; 184
    b28a:	d0 40       	sbci	r29, 0x00	; 0
    b28c:	8e 0f       	add	r24, r30
    b28e:	9f 1f       	adc	r25, r31
    b290:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b294:	18 2f       	mov	r17, r24
    b296:	88 23       	and	r24, r24
    b298:	01 f1       	breq	.+64     	; 0xb2da <draw_menu(bool)+0xe06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
      {
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
    b29a:	f6 01       	movw	r30, r12
    b29c:	e9 58       	subi	r30, 0x89	; 137
    b29e:	fe 4f       	sbci	r31, 0xFE	; 254
    b2a0:	e6 0d       	add	r30, r6
    b2a2:	f7 1d       	adc	r31, r7
    b2a4:	25 91       	lpm	r18, Z+
    b2a6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    b2a8:	f6 01       	movw	r30, r12
    b2aa:	ea 58       	subi	r30, 0x8A	; 138
    b2ac:	fe 4f       	sbci	r31, 0xFE	; 254
    b2ae:	e6 0d       	add	r30, r6
    b2b0:	f7 1d       	adc	r31, r7
    b2b2:	84 91       	lpm	r24, Z
    b2b4:	cd 54       	subi	r28, 0x4D	; 77
    b2b6:	df 4f       	sbci	r29, 0xFF	; 255
    b2b8:	68 81       	ld	r22, Y
    b2ba:	c3 5b       	subi	r28, 0xB3	; 179
    b2bc:	d0 40       	sbci	r29, 0x00	; 0
    b2be:	70 e0       	ldi	r23, 0x00	; 0
    b2c0:	ca 54       	subi	r28, 0x4A	; 74
    b2c2:	df 4f       	sbci	r29, 0xFF	; 255
    b2c4:	48 81       	ld	r20, Y
    b2c6:	c6 5b       	subi	r28, 0xB6	; 182
    b2c8:	d0 40       	sbci	r29, 0x00	; 0
    b2ca:	90 e0       	ldi	r25, 0x00	; 0
    b2cc:	f9 01       	movw	r30, r18
    b2ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
        ret = true;
    b2d0:	c4 53       	subi	r28, 0x34	; 52
    b2d2:	df 4f       	sbci	r29, 0xFF	; 255
    b2d4:	18 83       	st	Y, r17
    b2d6:	cc 5c       	subi	r28, 0xCC	; 204
    b2d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    b2da:	ca 54       	subi	r28, 0x4A	; 74
    b2dc:	df 4f       	sbci	r29, 0xFF	; 255
    b2de:	f8 81       	ld	r31, Y
    b2e0:	c6 5b       	subi	r28, 0xB6	; 182
    b2e2:	d0 40       	sbci	r29, 0x00	; 0
    b2e4:	ff 5f       	subi	r31, 0xFF	; 255
    b2e6:	ca 54       	subi	r28, 0x4A	; 74
    b2e8:	df 4f       	sbci	r29, 0xFF	; 255
    b2ea:	f8 83       	st	Y, r31
    b2ec:	c6 5b       	subi	r28, 0xB6	; 182
    b2ee:	d0 40       	sbci	r29, 0x00	; 0
    b2f0:	20 ce       	rjmp	.-960    	; 0xaf32 <draw_menu(bool)+0xa5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    b2f2:	c4 53       	subi	r28, 0x34	; 52
    b2f4:	df 4f       	sbci	r29, 0xFF	; 255
    b2f6:	28 81       	ld	r18, Y
    b2f8:	cc 5c       	subi	r28, 0xCC	; 204
    b2fa:	d0 40       	sbci	r29, 0x00	; 0
    b2fc:	21 11       	cpse	r18, r1
    b2fe:	0c 94 6d 65 	jmp	0xcada	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    b302:	51 2c       	mov	r5, r1
    b304:	43 01       	movw	r8, r6
    b306:	3e e3       	ldi	r19, 0x3E	; 62
    b308:	83 1a       	sub	r8, r19
    b30a:	3d ef       	ldi	r19, 0xFD	; 253
    b30c:	93 0a       	sbc	r9, r19
    b30e:	f4 01       	movw	r30, r8
    b310:	84 91       	lpm	r24, Z
    b312:	58 16       	cp	r5, r24
    b314:	08 f0       	brcs	.+2      	; 0xb318 <draw_menu(bool)+0xe44>
    b316:	d6 c0       	rjmp	.+428    	; 0xb4c4 <draw_menu(bool)+0xff0>
    b318:	f0 e1       	ldi	r31, 0x10	; 16
    b31a:	5f 9e       	mul	r5, r31
    b31c:	60 01       	movw	r12, r0
    b31e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&symbol_button_1->enable_show);
    b320:	f6 01       	movw	r30, r12
    b322:	e8 51       	subi	r30, 0x18	; 24
    b324:	fe 4f       	sbci	r31, 0xFE	; 254
    b326:	e6 0d       	add	r30, r6
    b328:	f7 1d       	adc	r31, r7
    b32a:	25 91       	lpm	r18, Z+
    b32c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1789
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    b32e:	56 01       	movw	r10, r12
    b330:	4c e1       	ldi	r20, 0x1C	; 28
    b332:	a4 1a       	sub	r10, r20
    b334:	4e ef       	ldi	r20, 0xFE	; 254
    b336:	b4 0a       	sbc	r11, r20
    b338:	a6 0c       	add	r10, r6
    b33a:	b7 1c       	adc	r11, r7
    b33c:	f5 01       	movw	r30, r10
    b33e:	84 91       	lpm	r24, Z
    b340:	cd 54       	subi	r28, 0x4D	; 77
    b342:	df 4f       	sbci	r29, 0xFF	; 255
    b344:	68 81       	ld	r22, Y
    b346:	c3 5b       	subi	r28, 0xB3	; 179
    b348:	d0 40       	sbci	r29, 0x00	; 0
    b34a:	70 e0       	ldi	r23, 0x00	; 0
    b34c:	45 2d       	mov	r20, r5
    b34e:	90 e0       	ldi	r25, 0x00	; 0
    b350:	f9 01       	movw	r30, r18
    b352:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
    if (active == 0) continue;
    b354:	88 23       	and	r24, r24
    b356:	09 f4       	brne	.+2      	; 0xb35a <draw_menu(bool)+0xe86>
    b358:	b3 c0       	rjmp	.+358    	; 0xb4c0 <draw_menu(bool)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1791
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    b35a:	f6 01       	movw	r30, r12
    b35c:	e9 51       	subi	r30, 0x19	; 25
    b35e:	fe 4f       	sbci	r31, 0xFE	; 254
    b360:	e6 0d       	add	r30, r6
    b362:	f7 1d       	adc	r31, r7
    b364:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1792
    if (enable_redraw(rdr, redraw_class) == true)
    b366:	cf 52       	subi	r28, 0x2F	; 47
    b368:	df 4f       	sbci	r29, 0xFF	; 255
    b36a:	68 81       	ld	r22, Y
    b36c:	c1 5d       	subi	r28, 0xD1	; 209
    b36e:	d0 40       	sbci	r29, 0x00	; 0
    b370:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    b374:	88 23       	and	r24, r24
    b376:	09 f4       	brne	.+2      	; 0xb37a <draw_menu(bool)+0xea6>
    b378:	3c c0       	rjmp	.+120    	; 0xb3f2 <draw_menu(bool)+0xf1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    b37a:	f6 01       	movw	r30, r12
    b37c:	e6 52       	subi	r30, 0x26	; 38
    b37e:	fe 4f       	sbci	r31, 0xFE	; 254
    b380:	e6 0d       	add	r30, r6
    b382:	f7 1d       	adc	r31, r7
    b384:	e5 90       	lpm	r14, Z+
    b386:	f4 90       	lpm	r15, Z
    b388:	f6 01       	movw	r30, r12
    b38a:	ed 51       	subi	r30, 0x1D	; 29
    b38c:	fe 4f       	sbci	r31, 0xFE	; 254
    b38e:	e6 0d       	add	r30, r6
    b390:	f7 1d       	adc	r31, r7
    b392:	05 91       	lpm	r16, Z+
    b394:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1795
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    b396:	f6 01       	movw	r30, r12
    b398:	ef 51       	subi	r30, 0x1F	; 31
    b39a:	fe 4f       	sbci	r31, 0xFE	; 254
    b39c:	e6 0d       	add	r30, r6
    b39e:	f7 1d       	adc	r31, r7
    b3a0:	25 91       	lpm	r18, Z+
    b3a2:	34 91       	lpm	r19, Z
    b3a4:	f6 01       	movw	r30, r12
    b3a6:	e1 52       	subi	r30, 0x21	; 33
    b3a8:	fe 4f       	sbci	r31, 0xFE	; 254
    b3aa:	e6 0d       	add	r30, r6
    b3ac:	f7 1d       	adc	r31, r7
    b3ae:	45 91       	lpm	r20, Z+
    b3b0:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1794
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    b3b2:	f6 01       	movw	r30, r12
    b3b4:	e3 52       	subi	r30, 0x23	; 35
    b3b6:	fe 4f       	sbci	r31, 0xFE	; 254
    b3b8:	e6 0d       	add	r30, r6
    b3ba:	f7 1d       	adc	r31, r7
    b3bc:	65 91       	lpm	r22, Z+
    b3be:	74 91       	lpm	r23, Z
    b3c0:	f6 01       	movw	r30, r12
    b3c2:	e5 52       	subi	r30, 0x25	; 37
    b3c4:	fe 4f       	sbci	r31, 0xFE	; 254
    b3c6:	e6 0d       	add	r30, r6
    b3c8:	f7 1d       	adc	r31, r7
    b3ca:	85 91       	lpm	r24, Z+
    b3cc:	94 91       	lpm	r25, Z
    b3ce:	c6 54       	subi	r28, 0x46	; 70
    b3d0:	df 4f       	sbci	r29, 0xFF	; 255
    b3d2:	e8 81       	ld	r30, Y
    b3d4:	f9 81       	ldd	r31, Y+1	; 0x01
    b3d6:	ca 5b       	subi	r28, 0xBA	; 186
    b3d8:	d0 40       	sbci	r29, 0x00	; 0
    b3da:	6e 0f       	add	r22, r30
    b3dc:	7f 1f       	adc	r23, r31
    b3de:	c8 54       	subi	r28, 0x48	; 72
    b3e0:	df 4f       	sbci	r29, 0xFF	; 255
    b3e2:	e8 81       	ld	r30, Y
    b3e4:	f9 81       	ldd	r31, Y+1	; 0x01
    b3e6:	c8 5b       	subi	r28, 0xB8	; 184
    b3e8:	d0 40       	sbci	r29, 0x00	; 0
    b3ea:	8e 0f       	add	r24, r30
    b3ec:	9f 1f       	adc	r25, r31
    b3ee:	0e 94 02 41 	call	0x8204	; 0x8204 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    b3f2:	cc 53       	subi	r28, 0x3C	; 60
    b3f4:	df 4f       	sbci	r29, 0xFF	; 255
    b3f6:	28 81       	ld	r18, Y
    b3f8:	39 81       	ldd	r19, Y+1	; 0x01
    b3fa:	c4 5c       	subi	r28, 0xC4	; 196
    b3fc:	d0 40       	sbci	r29, 0x00	; 0
    b3fe:	23 2b       	or	r18, r19
    b400:	09 f4       	brne	.+2      	; 0xb404 <draw_menu(bool)+0xf30>
    b402:	5e c0       	rjmp	.+188    	; 0xb4c0 <draw_menu(bool)+0xfec>
    b404:	ca 53       	subi	r28, 0x3A	; 58
    b406:	df 4f       	sbci	r29, 0xFF	; 255
    b408:	48 81       	ld	r20, Y
    b40a:	59 81       	ldd	r21, Y+1	; 0x01
    b40c:	c6 5c       	subi	r28, 0xC6	; 198
    b40e:	d0 40       	sbci	r29, 0x00	; 0
    b410:	45 2b       	or	r20, r21
    b412:	09 f4       	brne	.+2      	; 0xb416 <draw_menu(bool)+0xf42>
    b414:	55 c0       	rjmp	.+170    	; 0xb4c0 <draw_menu(bool)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    b416:	f6 01       	movw	r30, r12
    b418:	ef 51       	subi	r30, 0x1F	; 31
    b41a:	fe 4f       	sbci	r31, 0xFE	; 254
    b41c:	e6 0d       	add	r30, r6
    b41e:	f7 1d       	adc	r31, r7
    b420:	25 91       	lpm	r18, Z+
    b422:	34 91       	lpm	r19, Z
    b424:	f6 01       	movw	r30, r12
    b426:	e1 52       	subi	r30, 0x21	; 33
    b428:	fe 4f       	sbci	r31, 0xFE	; 254
    b42a:	e6 0d       	add	r30, r6
    b42c:	f7 1d       	adc	r31, r7
    b42e:	45 91       	lpm	r20, Z+
    b430:	54 91       	lpm	r21, Z
    b432:	f6 01       	movw	r30, r12
    b434:	e3 52       	subi	r30, 0x23	; 35
    b436:	fe 4f       	sbci	r31, 0xFE	; 254
    b438:	e6 0d       	add	r30, r6
    b43a:	f7 1d       	adc	r31, r7
    b43c:	65 91       	lpm	r22, Z+
    b43e:	74 91       	lpm	r23, Z
    b440:	f6 01       	movw	r30, r12
    b442:	e5 52       	subi	r30, 0x25	; 37
    b444:	fe 4f       	sbci	r31, 0xFE	; 254
    b446:	e6 0d       	add	r30, r6
    b448:	f7 1d       	adc	r31, r7
    b44a:	85 91       	lpm	r24, Z+
    b44c:	94 91       	lpm	r25, Z
    b44e:	c6 54       	subi	r28, 0x46	; 70
    b450:	df 4f       	sbci	r29, 0xFF	; 255
    b452:	e8 81       	ld	r30, Y
    b454:	f9 81       	ldd	r31, Y+1	; 0x01
    b456:	ca 5b       	subi	r28, 0xBA	; 186
    b458:	d0 40       	sbci	r29, 0x00	; 0
    b45a:	6e 0f       	add	r22, r30
    b45c:	7f 1f       	adc	r23, r31
    b45e:	ca 53       	subi	r28, 0x3A	; 58
    b460:	df 4f       	sbci	r29, 0xFF	; 255
    b462:	e8 80       	ld	r14, Y
    b464:	f9 80       	ldd	r15, Y+1	; 0x01
    b466:	c6 5c       	subi	r28, 0xC6	; 198
    b468:	d0 40       	sbci	r29, 0x00	; 0
    b46a:	cc 53       	subi	r28, 0x3C	; 60
    b46c:	df 4f       	sbci	r29, 0xFF	; 255
    b46e:	08 81       	ld	r16, Y
    b470:	19 81       	ldd	r17, Y+1	; 0x01
    b472:	c4 5c       	subi	r28, 0xC4	; 196
    b474:	d0 40       	sbci	r29, 0x00	; 0
    b476:	c8 54       	subi	r28, 0x48	; 72
    b478:	df 4f       	sbci	r29, 0xFF	; 255
    b47a:	e8 81       	ld	r30, Y
    b47c:	f9 81       	ldd	r31, Y+1	; 0x01
    b47e:	c8 5b       	subi	r28, 0xB8	; 184
    b480:	d0 40       	sbci	r29, 0x00	; 0
    b482:	8e 0f       	add	r24, r30
    b484:	9f 1f       	adc	r25, r31
    b486:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    b48a:	18 2f       	mov	r17, r24
    b48c:	88 23       	and	r24, r24
    b48e:	c1 f0       	breq	.+48     	; 0xb4c0 <draw_menu(bool)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
      {
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
    b490:	f6 01       	movw	r30, r12
    b492:	eb 51       	subi	r30, 0x1B	; 27
    b494:	fe 4f       	sbci	r31, 0xFE	; 254
    b496:	e6 0d       	add	r30, r6
    b498:	f7 1d       	adc	r31, r7
    b49a:	25 91       	lpm	r18, Z+
    b49c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    b49e:	f5 01       	movw	r30, r10
    b4a0:	84 91       	lpm	r24, Z
    b4a2:	cd 54       	subi	r28, 0x4D	; 77
    b4a4:	df 4f       	sbci	r29, 0xFF	; 255
    b4a6:	68 81       	ld	r22, Y
    b4a8:	c3 5b       	subi	r28, 0xB3	; 179
    b4aa:	d0 40       	sbci	r29, 0x00	; 0
    b4ac:	70 e0       	ldi	r23, 0x00	; 0
    b4ae:	45 2d       	mov	r20, r5
    b4b0:	90 e0       	ldi	r25, 0x00	; 0
    b4b2:	f9 01       	movw	r30, r18
    b4b4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
        ret = true;
    b4b6:	c4 53       	subi	r28, 0x34	; 52
    b4b8:	df 4f       	sbci	r29, 0xFF	; 255
    b4ba:	18 83       	st	Y, r17
    b4bc:	cc 5c       	subi	r28, 0xCC	; 204
    b4be:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    b4c0:	53 94       	inc	r5
    b4c2:	25 cf       	rjmp	.-438    	; 0xb30e <draw_menu(bool)+0xe3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    b4c4:	c4 53       	subi	r28, 0x34	; 52
    b4c6:	df 4f       	sbci	r29, 0xFF	; 255
    b4c8:	f8 81       	ld	r31, Y
    b4ca:	cc 5c       	subi	r28, 0xCC	; 204
    b4cc:	d0 40       	sbci	r29, 0x00	; 0
    b4ce:	f1 11       	cpse	r31, r1
    b4d0:	0c 94 6d 65 	jmp	0xcada	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    b4d4:	51 2c       	mov	r5, r1
    b4d6:	93 01       	movw	r18, r6
    b4d8:	2d 53       	subi	r18, 0x3D	; 61
    b4da:	3d 4f       	sbci	r19, 0xFD	; 253
    b4dc:	cc 52       	subi	r28, 0x2C	; 44
    b4de:	df 4f       	sbci	r29, 0xFF	; 255
    b4e0:	39 83       	std	Y+1, r19	; 0x01
    b4e2:	28 83       	st	Y, r18
    b4e4:	c4 5d       	subi	r28, 0xD4	; 212
    b4e6:	d0 40       	sbci	r29, 0x00	; 0
    b4e8:	cc 52       	subi	r28, 0x2C	; 44
    b4ea:	df 4f       	sbci	r29, 0xFF	; 255
    b4ec:	e8 81       	ld	r30, Y
    b4ee:	f9 81       	ldd	r31, Y+1	; 0x01
    b4f0:	c4 5d       	subi	r28, 0xD4	; 212
    b4f2:	d0 40       	sbci	r29, 0x00	; 0
    b4f4:	84 91       	lpm	r24, Z
    b4f6:	58 16       	cp	r5, r24
    b4f8:	08 f0       	brcs	.+2      	; 0xb4fc <draw_menu(bool)+0x1028>
    b4fa:	60 c3       	rjmp	.+1728   	; 0xbbbc <draw_menu(bool)+0x16e8>
    b4fc:	f7 e1       	ldi	r31, 0x17	; 23
    b4fe:	5f 9e       	mul	r5, r31
    b500:	60 01       	movw	r12, r0
    b502:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1811
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    b504:	f6 01       	movw	r30, r12
    b506:	e0 59       	subi	r30, 0x90	; 144
    b508:	fd 4f       	sbci	r31, 0xFD	; 253
    b50a:	e6 0d       	add	r30, r6
    b50c:	f7 1d       	adc	r31, r7
    b50e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
    if (enable_redraw(rdr, redraw_class) == true)
    b510:	cf 52       	subi	r28, 0x2F	; 47
    b512:	df 4f       	sbci	r29, 0xFF	; 255
    b514:	68 81       	ld	r22, Y
    b516:	c1 5d       	subi	r28, 0xD1	; 209
    b518:	d0 40       	sbci	r29, 0x00	; 0
    b51a:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    b51e:	88 23       	and	r24, r24
    b520:	09 f4       	brne	.+2      	; 0xb524 <draw_menu(bool)+0x1050>
    b522:	98 c1       	rjmp	.+816    	; 0xb854 <draw_menu(bool)+0x1380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1814
    {
      loop_i = 0;
    b524:	ce 54       	subi	r28, 0x4E	; 78
    b526:	df 4f       	sbci	r29, 0xFF	; 255
    b528:	18 82       	st	Y, r1
    b52a:	c2 5b       	subi	r28, 0xB2	; 178
    b52c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1817
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
    b52e:	f6 01       	movw	r30, r12
    b530:	e2 59       	subi	r30, 0x92	; 146
    b532:	fd 4f       	sbci	r31, 0xFD	; 253
    b534:	e6 0d       	add	r30, r6
    b536:	f7 1d       	adc	r31, r7
    b538:	25 91       	lpm	r18, Z+
    b53a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1818
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    b53c:	c6 01       	movw	r24, r12
    b53e:	87 59       	subi	r24, 0x97	; 151
    b540:	9d 4f       	sbci	r25, 0xFD	; 253
    b542:	a3 01       	movw	r20, r6
    b544:	48 0f       	add	r20, r24
    b546:	59 1f       	adc	r21, r25
    b548:	ca 54       	subi	r28, 0x4A	; 74
    b54a:	df 4f       	sbci	r29, 0xFF	; 255
    b54c:	59 83       	std	Y+1, r21	; 0x01
    b54e:	48 83       	st	Y, r20
    b550:	c6 5b       	subi	r28, 0xB6	; 182
    b552:	d0 40       	sbci	r29, 0x00	; 0
    b554:	fa 01       	movw	r30, r20
    b556:	84 91       	lpm	r24, Z
    b558:	cd 54       	subi	r28, 0x4D	; 77
    b55a:	df 4f       	sbci	r29, 0xFF	; 255
    b55c:	68 81       	ld	r22, Y
    b55e:	c3 5b       	subi	r28, 0xB3	; 179
    b560:	d0 40       	sbci	r29, 0x00	; 0
    b562:	70 e0       	ldi	r23, 0x00	; 0
    b564:	40 e0       	ldi	r20, 0x00	; 0
    b566:	90 e0       	ldi	r25, 0x00	; 0
    b568:	f9 01       	movw	r30, r18
    b56a:	19 95       	eicall
    b56c:	cf 54       	subi	r28, 0x4F	; 79
    b56e:	df 4f       	sbci	r29, 0xFF	; 255
    b570:	88 83       	st	Y, r24
    b572:	c1 5b       	subi	r28, 0xB1	; 177
    b574:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
    b576:	f6 01       	movw	r30, r12
    b578:	e6 59       	subi	r30, 0x96	; 150
    b57a:	fd 4f       	sbci	r31, 0xFD	; 253
    b57c:	e6 0d       	add	r30, r6
    b57e:	f7 1d       	adc	r31, r7
    b580:	25 91       	lpm	r18, Z+
    b582:	34 91       	lpm	r19, Z
    b584:	ce 52       	subi	r28, 0x2E	; 46
    b586:	df 4f       	sbci	r29, 0xFF	; 255
    b588:	39 83       	std	Y+1, r19	; 0x01
    b58a:	28 83       	st	Y, r18
    b58c:	c2 5d       	subi	r28, 0xD2	; 210
    b58e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b590:	56 01       	movw	r10, r12
    b592:	36 ea       	ldi	r19, 0xA6	; 166
    b594:	a3 1a       	sub	r10, r19
    b596:	3d ef       	ldi	r19, 0xFD	; 253
    b598:	b3 0a       	sbc	r11, r19
    b59a:	a6 0c       	add	r10, r6
    b59c:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b59e:	46 01       	movw	r8, r12
    b5a0:	44 ea       	ldi	r20, 0xA4	; 164
    b5a2:	84 1a       	sub	r8, r20
    b5a4:	4d ef       	ldi	r20, 0xFD	; 253
    b5a6:	94 0a       	sbc	r9, r20
    b5a8:	86 0c       	add	r8, r6
    b5aa:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    b5ac:	16 01       	movw	r2, r12
    b5ae:	5b e9       	ldi	r21, 0x9B	; 155
    b5b0:	25 1a       	sub	r2, r21
    b5b2:	5d ef       	ldi	r21, 0xFD	; 253
    b5b4:	35 0a       	sbc	r3, r21
    b5b6:	26 0c       	add	r2, r6
    b5b8:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    b5ba:	c6 01       	movw	r24, r12
    b5bc:	8c 59       	subi	r24, 0x9C	; 156
    b5be:	9d 4f       	sbci	r25, 0xFD	; 253
    b5c0:	b3 01       	movw	r22, r6
    b5c2:	68 0f       	add	r22, r24
    b5c4:	79 1f       	adc	r23, r25
    b5c6:	c4 54       	subi	r28, 0x44	; 68
    b5c8:	df 4f       	sbci	r29, 0xFF	; 255
    b5ca:	79 83       	std	Y+1, r23	; 0x01
    b5cc:	68 83       	st	Y, r22
    b5ce:	cc 5b       	subi	r28, 0xBC	; 188
    b5d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    b5d2:	01 97       	sbiw	r24, 0x01	; 1
    b5d4:	f3 01       	movw	r30, r6
    b5d6:	e8 0f       	add	r30, r24
    b5d8:	f9 1f       	adc	r31, r25
    b5da:	c2 54       	subi	r28, 0x42	; 66
    b5dc:	df 4f       	sbci	r29, 0xFF	; 255
    b5de:	f9 83       	std	Y+1, r31	; 0x01
    b5e0:	e8 83       	st	Y, r30
    b5e2:	ce 5b       	subi	r28, 0xBE	; 190
    b5e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1839
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    b5e6:	03 96       	adiw	r24, 0x03	; 3
    b5e8:	93 01       	movw	r18, r6
    b5ea:	28 0f       	add	r18, r24
    b5ec:	39 1f       	adc	r19, r25
    b5ee:	c8 53       	subi	r28, 0x38	; 56
    b5f0:	df 4f       	sbci	r29, 0xFF	; 255
    b5f2:	39 83       	std	Y+1, r19	; 0x01
    b5f4:	28 83       	st	Y, r18
    b5f6:	c8 5c       	subi	r28, 0xC8	; 200
    b5f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    b5fa:	04 97       	sbiw	r24, 0x04	; 4
    b5fc:	a3 01       	movw	r20, r6
    b5fe:	48 0f       	add	r20, r24
    b600:	59 1f       	adc	r21, r25
    b602:	c6 53       	subi	r28, 0x36	; 54
    b604:	df 4f       	sbci	r29, 0xFF	; 255
    b606:	59 83       	std	Y+1, r21	; 0x01
    b608:	48 83       	st	Y, r20
    b60a:	ca 5c       	subi	r28, 0xCA	; 202
    b60c:	d0 40       	sbci	r29, 0x00	; 0
    b60e:	02 97       	sbiw	r24, 0x02	; 2
    b610:	b3 01       	movw	r22, r6
    b612:	68 0f       	add	r22, r24
    b614:	79 1f       	adc	r23, r25
    b616:	c3 53       	subi	r28, 0x33	; 51
    b618:	df 4f       	sbci	r29, 0xFF	; 255
    b61a:	79 83       	std	Y+1, r23	; 0x01
    b61c:	68 83       	st	Y, r22
    b61e:	cd 5c       	subi	r28, 0xCD	; 205
    b620:	d0 40       	sbci	r29, 0x00	; 0
    b622:	02 97       	sbiw	r24, 0x02	; 2
    b624:	f3 01       	movw	r30, r6
    b626:	e8 0f       	add	r30, r24
    b628:	f9 1f       	adc	r31, r25
    b62a:	c1 53       	subi	r28, 0x31	; 49
    b62c:	df 4f       	sbci	r29, 0xFF	; 255
    b62e:	f9 83       	std	Y+1, r31	; 0x01
    b630:	e8 83       	st	Y, r30
    b632:	cf 5c       	subi	r28, 0xCF	; 207
    b634:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    b636:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    b638:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1820
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    b63a:	ce 54       	subi	r28, 0x4E	; 78
    b63c:	df 4f       	sbci	r29, 0xFF	; 255
    b63e:	88 81       	ld	r24, Y
    b640:	c2 5b       	subi	r28, 0xB2	; 178
    b642:	d0 40       	sbci	r29, 0x00	; 0
    b644:	cf 54       	subi	r28, 0x4F	; 79
    b646:	df 4f       	sbci	r29, 0xFF	; 255
    b648:	98 81       	ld	r25, Y
    b64a:	c1 5b       	subi	r28, 0xB1	; 177
    b64c:	d0 40       	sbci	r29, 0x00	; 0
    b64e:	89 17       	cp	r24, r25
    b650:	08 f0       	brcs	.+2      	; 0xb654 <draw_menu(bool)+0x1180>
    b652:	00 c1       	rjmp	.+512    	; 0xb854 <draw_menu(bool)+0x1380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b654:	f5 01       	movw	r30, r10
    b656:	45 91       	lpm	r20, Z+
    b658:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b65a:	f4 01       	movw	r30, r8
    b65c:	25 91       	lpm	r18, Z+
    b65e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    b660:	f1 01       	movw	r30, r2
    b662:	94 91       	lpm	r25, Z
    b664:	99 23       	and	r25, r25
    b666:	09 f4       	brne	.+2      	; 0xb66a <draw_menu(bool)+0x1196>
    b668:	b7 c0       	rjmp	.+366    	; 0xb7d8 <draw_menu(bool)+0x1304>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b66a:	c6 54       	subi	r28, 0x46	; 70
    b66c:	df 4f       	sbci	r29, 0xFF	; 255
    b66e:	68 81       	ld	r22, Y
    b670:	79 81       	ldd	r23, Y+1	; 0x01
    b672:	ca 5b       	subi	r28, 0xBA	; 186
    b674:	d0 40       	sbci	r29, 0x00	; 0
    b676:	62 0f       	add	r22, r18
    b678:	73 1f       	adc	r23, r19
    b67a:	ce 53       	subi	r28, 0x3E	; 62
    b67c:	df 4f       	sbci	r29, 0xFF	; 255
    b67e:	79 83       	std	Y+1, r23	; 0x01
    b680:	68 83       	st	Y, r22
    b682:	c2 5c       	subi	r28, 0xC2	; 194
    b684:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    b686:	f1 01       	movw	r30, r2
    b688:	94 91       	lpm	r25, Z
    b68a:	91 30       	cpi	r25, 0x01	; 1
    b68c:	09 f4       	brne	.+2      	; 0xb690 <draw_menu(bool)+0x11bc>
    b68e:	c3 c0       	rjmp	.+390    	; 0xb816 <draw_menu(bool)+0x1342>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b690:	c8 54       	subi	r28, 0x48	; 72
    b692:	df 4f       	sbci	r29, 0xFF	; 255
    b694:	28 81       	ld	r18, Y
    b696:	39 81       	ldd	r19, Y+1	; 0x01
    b698:	c8 5b       	subi	r28, 0xB8	; 184
    b69a:	d0 40       	sbci	r29, 0x00	; 0
    b69c:	24 0f       	add	r18, r20
    b69e:	35 1f       	adc	r19, r21
    b6a0:	c0 54       	subi	r28, 0x40	; 64
    b6a2:	df 4f       	sbci	r29, 0xFF	; 255
    b6a4:	39 83       	std	Y+1, r19	; 0x01
    b6a6:	28 83       	st	Y, r18
    b6a8:	c0 5c       	subi	r28, 0xC0	; 192
    b6aa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    b6ac:	f1 01       	movw	r30, r2
    b6ae:	94 91       	lpm	r25, Z
    b6b0:	92 30       	cpi	r25, 0x02	; 2
    b6b2:	09 f0       	breq	.+2      	; 0xb6b6 <draw_menu(bool)+0x11e2>
    b6b4:	46 c0       	rjmp	.+140    	; 0xb742 <draw_menu(bool)+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    b6b6:	f5 01       	movw	r30, r10
    b6b8:	25 91       	lpm	r18, Z+
    b6ba:	34 91       	lpm	r19, Z
    b6bc:	c2 54       	subi	r28, 0x42	; 66
    b6be:	df 4f       	sbci	r29, 0xFF	; 255
    b6c0:	e8 81       	ld	r30, Y
    b6c2:	f9 81       	ldd	r31, Y+1	; 0x01
    b6c4:	ce 5b       	subi	r28, 0xBE	; 190
    b6c6:	d0 40       	sbci	r29, 0x00	; 0
    b6c8:	94 91       	lpm	r25, Z
    b6ca:	c8 54       	subi	r28, 0x48	; 72
    b6cc:	df 4f       	sbci	r29, 0xFF	; 255
    b6ce:	48 81       	ld	r20, Y
    b6d0:	59 81       	ldd	r21, Y+1	; 0x01
    b6d2:	c8 5b       	subi	r28, 0xB8	; 184
    b6d4:	d0 40       	sbci	r29, 0x00	; 0
    b6d6:	24 0f       	add	r18, r20
    b6d8:	35 1f       	adc	r19, r21
    b6da:	b9 01       	movw	r22, r18
    b6dc:	9f 9d       	mul	r25, r15
    b6de:	60 0d       	add	r22, r0
    b6e0:	71 1d       	adc	r23, r1
    b6e2:	11 24       	eor	r1, r1
    b6e4:	c0 54       	subi	r28, 0x40	; 64
    b6e6:	df 4f       	sbci	r29, 0xFF	; 255
    b6e8:	79 83       	std	Y+1, r23	; 0x01
    b6ea:	68 83       	st	Y, r22
    b6ec:	c0 5c       	subi	r28, 0xC0	; 192
    b6ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1837
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    b6f0:	f4 01       	movw	r30, r8
    b6f2:	25 91       	lpm	r18, Z+
    b6f4:	34 91       	lpm	r19, Z
    b6f6:	c4 54       	subi	r28, 0x44	; 68
    b6f8:	df 4f       	sbci	r29, 0xFF	; 255
    b6fa:	e8 81       	ld	r30, Y
    b6fc:	f9 81       	ldd	r31, Y+1	; 0x01
    b6fe:	cc 5b       	subi	r28, 0xBC	; 188
    b700:	d0 40       	sbci	r29, 0x00	; 0
    b702:	94 91       	lpm	r25, Z
    b704:	c6 54       	subi	r28, 0x46	; 70
    b706:	df 4f       	sbci	r29, 0xFF	; 255
    b708:	48 81       	ld	r20, Y
    b70a:	59 81       	ldd	r21, Y+1	; 0x01
    b70c:	ca 5b       	subi	r28, 0xBA	; 186
    b70e:	d0 40       	sbci	r29, 0x00	; 0
    b710:	24 0f       	add	r18, r20
    b712:	35 1f       	adc	r19, r21
    b714:	b9 01       	movw	r22, r18
    b716:	94 9d       	mul	r25, r4
    b718:	60 0d       	add	r22, r0
    b71a:	71 1d       	adc	r23, r1
    b71c:	11 24       	eor	r1, r1
    b71e:	ce 53       	subi	r28, 0x3E	; 62
    b720:	df 4f       	sbci	r29, 0xFF	; 255
    b722:	79 83       	std	Y+1, r23	; 0x01
    b724:	68 83       	st	Y, r22
    b726:	c2 5c       	subi	r28, 0xC2	; 194
    b728:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1838
          loop_t++;
    b72a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1839
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    b72c:	c8 53       	subi	r28, 0x38	; 56
    b72e:	df 4f       	sbci	r29, 0xFF	; 255
    b730:	e8 81       	ld	r30, Y
    b732:	f9 81       	ldd	r31, Y+1	; 0x01
    b734:	c8 5c       	subi	r28, 0xC8	; 200
    b736:	d0 40       	sbci	r29, 0x00	; 0
    b738:	94 91       	lpm	r25, Z
    b73a:	f9 16       	cp	r15, r25
    b73c:	10 f0       	brcs	.+4      	; 0xb742 <draw_menu(bool)+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1842
          {
            loop_t = 0;
            loop_r++;
    b73e:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1841
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    b740:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
    b742:	ca 54       	subi	r28, 0x4A	; 74
    b744:	df 4f       	sbci	r29, 0xFF	; 255
    b746:	e8 81       	ld	r30, Y
    b748:	f9 81       	ldd	r31, Y+1	; 0x01
    b74a:	c6 5b       	subi	r28, 0xB6	; 182
    b74c:	d0 40       	sbci	r29, 0x00	; 0
    b74e:	44 91       	lpm	r20, Z
    b750:	8e 01       	movw	r16, r28
    b752:	0f 57       	subi	r16, 0x7F	; 127
    b754:	1f 4f       	sbci	r17, 0xFF	; 255
    b756:	9e 01       	movw	r18, r28
    b758:	2f 5f       	subi	r18, 0xFF	; 255
    b75a:	3f 4f       	sbci	r19, 0xFF	; 255
    b75c:	cd 54       	subi	r28, 0x4D	; 77
    b75e:	df 4f       	sbci	r29, 0xFF	; 255
    b760:	68 81       	ld	r22, Y
    b762:	c3 5b       	subi	r28, 0xB3	; 179
    b764:	d0 40       	sbci	r29, 0x00	; 0
    b766:	ce 52       	subi	r28, 0x2E	; 46
    b768:	df 4f       	sbci	r29, 0xFF	; 255
    b76a:	e8 81       	ld	r30, Y
    b76c:	f9 81       	ldd	r31, Y+1	; 0x01
    b76e:	c2 5d       	subi	r28, 0xD2	; 210
    b770:	d0 40       	sbci	r29, 0x00	; 0
    b772:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    b774:	c6 53       	subi	r28, 0x36	; 54
    b776:	df 4f       	sbci	r29, 0xFF	; 255
    b778:	e8 81       	ld	r30, Y
    b77a:	f9 81       	ldd	r31, Y+1	; 0x01
    b77c:	ca 5c       	subi	r28, 0xCA	; 202
    b77e:	d0 40       	sbci	r29, 0x00	; 0
    b780:	04 91       	lpm	r16, Z
    b782:	c3 53       	subi	r28, 0x33	; 51
    b784:	df 4f       	sbci	r29, 0xFF	; 255
    b786:	e8 81       	ld	r30, Y
    b788:	f9 81       	ldd	r31, Y+1	; 0x01
    b78a:	cd 5c       	subi	r28, 0xCD	; 205
    b78c:	d0 40       	sbci	r29, 0x00	; 0
    b78e:	25 91       	lpm	r18, Z+
    b790:	34 91       	lpm	r19, Z
    b792:	c1 53       	subi	r28, 0x31	; 49
    b794:	df 4f       	sbci	r29, 0xFF	; 255
    b796:	e8 81       	ld	r30, Y
    b798:	f9 81       	ldd	r31, Y+1	; 0x01
    b79a:	cf 5c       	subi	r28, 0xCF	; 207
    b79c:	d0 40       	sbci	r29, 0x00	; 0
    b79e:	45 91       	lpm	r20, Z+
    b7a0:	54 91       	lpm	r21, Z
    b7a2:	e9 80       	ldd	r14, Y+1	; 0x01
    b7a4:	ce 53       	subi	r28, 0x3E	; 62
    b7a6:	df 4f       	sbci	r29, 0xFF	; 255
    b7a8:	68 81       	ld	r22, Y
    b7aa:	79 81       	ldd	r23, Y+1	; 0x01
    b7ac:	c2 5c       	subi	r28, 0xC2	; 194
    b7ae:	d0 40       	sbci	r29, 0x00	; 0
    b7b0:	c0 54       	subi	r28, 0x40	; 64
    b7b2:	df 4f       	sbci	r29, 0xFF	; 255
    b7b4:	88 81       	ld	r24, Y
    b7b6:	99 81       	ldd	r25, Y+1	; 0x01
    b7b8:	c0 5c       	subi	r28, 0xC0	; 192
    b7ba:	d0 40       	sbci	r29, 0x00	; 0
    b7bc:	0e 94 02 41 	call	0x8204	; 0x8204 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1848
        loop_i++;
    b7c0:	ce 54       	subi	r28, 0x4E	; 78
    b7c2:	df 4f       	sbci	r29, 0xFF	; 255
    b7c4:	88 81       	ld	r24, Y
    b7c6:	c2 5b       	subi	r28, 0xB2	; 178
    b7c8:	d0 40       	sbci	r29, 0x00	; 0
    b7ca:	8f 5f       	subi	r24, 0xFF	; 255
    b7cc:	ce 54       	subi	r28, 0x4E	; 78
    b7ce:	df 4f       	sbci	r29, 0xFF	; 255
    b7d0:	88 83       	st	Y, r24
    b7d2:	c2 5b       	subi	r28, 0xB2	; 178
    b7d4:	d0 40       	sbci	r29, 0x00	; 0
    b7d6:	31 cf       	rjmp	.-414    	; 0xb63a <draw_menu(bool)+0x1166>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    b7d8:	f4 01       	movw	r30, r8
    b7da:	25 91       	lpm	r18, Z+
    b7dc:	34 91       	lpm	r19, Z
    b7de:	c4 54       	subi	r28, 0x44	; 68
    b7e0:	df 4f       	sbci	r29, 0xFF	; 255
    b7e2:	e8 81       	ld	r30, Y
    b7e4:	f9 81       	ldd	r31, Y+1	; 0x01
    b7e6:	cc 5b       	subi	r28, 0xBC	; 188
    b7e8:	d0 40       	sbci	r29, 0x00	; 0
    b7ea:	94 91       	lpm	r25, Z
    b7ec:	c6 54       	subi	r28, 0x46	; 70
    b7ee:	df 4f       	sbci	r29, 0xFF	; 255
    b7f0:	68 81       	ld	r22, Y
    b7f2:	79 81       	ldd	r23, Y+1	; 0x01
    b7f4:	ca 5b       	subi	r28, 0xBA	; 186
    b7f6:	d0 40       	sbci	r29, 0x00	; 0
    b7f8:	26 0f       	add	r18, r22
    b7fa:	37 1f       	adc	r19, r23
    b7fc:	f9 01       	movw	r30, r18
    b7fe:	9f 9d       	mul	r25, r15
    b800:	e0 0d       	add	r30, r0
    b802:	f1 1d       	adc	r31, r1
    b804:	11 24       	eor	r1, r1
    b806:	ce 53       	subi	r28, 0x3E	; 62
    b808:	df 4f       	sbci	r29, 0xFF	; 255
    b80a:	f9 83       	std	Y+1, r31	; 0x01
    b80c:	e8 83       	st	Y, r30
    b80e:	c2 5c       	subi	r28, 0xC2	; 194
    b810:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1827
          loop_t++;
    b812:	f3 94       	inc	r15
    b814:	38 cf       	rjmp	.-400    	; 0xb686 <draw_menu(bool)+0x11b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    b816:	f5 01       	movw	r30, r10
    b818:	25 91       	lpm	r18, Z+
    b81a:	34 91       	lpm	r19, Z
    b81c:	c2 54       	subi	r28, 0x42	; 66
    b81e:	df 4f       	sbci	r29, 0xFF	; 255
    b820:	e8 81       	ld	r30, Y
    b822:	f9 81       	ldd	r31, Y+1	; 0x01
    b824:	ce 5b       	subi	r28, 0xBE	; 190
    b826:	d0 40       	sbci	r29, 0x00	; 0
    b828:	94 91       	lpm	r25, Z
    b82a:	c8 54       	subi	r28, 0x48	; 72
    b82c:	df 4f       	sbci	r29, 0xFF	; 255
    b82e:	48 81       	ld	r20, Y
    b830:	59 81       	ldd	r21, Y+1	; 0x01
    b832:	c8 5b       	subi	r28, 0xB8	; 184
    b834:	d0 40       	sbci	r29, 0x00	; 0
    b836:	24 0f       	add	r18, r20
    b838:	35 1f       	adc	r19, r21
    b83a:	b9 01       	movw	r22, r18
    b83c:	9f 9d       	mul	r25, r15
    b83e:	60 0d       	add	r22, r0
    b840:	71 1d       	adc	r23, r1
    b842:	11 24       	eor	r1, r1
    b844:	c0 54       	subi	r28, 0x40	; 64
    b846:	df 4f       	sbci	r29, 0xFF	; 255
    b848:	79 83       	std	Y+1, r23	; 0x01
    b84a:	68 83       	st	Y, r22
    b84c:	c0 5c       	subi	r28, 0xC0	; 192
    b84e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
          loop_t++;
    b850:	f3 94       	inc	r15
    b852:	2c cf       	rjmp	.-424    	; 0xb6ac <draw_menu(bool)+0x11d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    b854:	cc 53       	subi	r28, 0x3C	; 60
    b856:	df 4f       	sbci	r29, 0xFF	; 255
    b858:	28 81       	ld	r18, Y
    b85a:	39 81       	ldd	r19, Y+1	; 0x01
    b85c:	c4 5c       	subi	r28, 0xC4	; 196
    b85e:	d0 40       	sbci	r29, 0x00	; 0
    b860:	23 2b       	or	r18, r19
    b862:	09 f4       	brne	.+2      	; 0xb866 <draw_menu(bool)+0x1392>
    b864:	69 c1       	rjmp	.+722    	; 0xbb38 <draw_menu(bool)+0x1664>
    b866:	ca 53       	subi	r28, 0x3A	; 58
    b868:	df 4f       	sbci	r29, 0xFF	; 255
    b86a:	48 81       	ld	r20, Y
    b86c:	59 81       	ldd	r21, Y+1	; 0x01
    b86e:	c6 5c       	subi	r28, 0xC6	; 198
    b870:	d0 40       	sbci	r29, 0x00	; 0
    b872:	45 2b       	or	r20, r21
    b874:	09 f4       	brne	.+2      	; 0xb878 <draw_menu(bool)+0x13a4>
    b876:	60 c1       	rjmp	.+704    	; 0xbb38 <draw_menu(bool)+0x1664>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
    {
      loop_i = 0;
    b878:	ce 54       	subi	r28, 0x4E	; 78
    b87a:	df 4f       	sbci	r29, 0xFF	; 255
    b87c:	18 82       	st	Y, r1
    b87e:	c2 5b       	subi	r28, 0xB2	; 178
    b880:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
    b882:	f6 01       	movw	r30, r12
    b884:	e2 59       	subi	r30, 0x92	; 146
    b886:	fd 4f       	sbci	r31, 0xFD	; 253
    b888:	e6 0d       	add	r30, r6
    b88a:	f7 1d       	adc	r31, r7
    b88c:	25 91       	lpm	r18, Z+
    b88e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    b890:	c6 01       	movw	r24, r12
    b892:	87 59       	subi	r24, 0x97	; 151
    b894:	9d 4f       	sbci	r25, 0xFD	; 253
    b896:	b3 01       	movw	r22, r6
    b898:	68 0f       	add	r22, r24
    b89a:	79 1f       	adc	r23, r25
    b89c:	c2 54       	subi	r28, 0x42	; 66
    b89e:	df 4f       	sbci	r29, 0xFF	; 255
    b8a0:	79 83       	std	Y+1, r23	; 0x01
    b8a2:	68 83       	st	Y, r22
    b8a4:	ce 5b       	subi	r28, 0xBE	; 190
    b8a6:	d0 40       	sbci	r29, 0x00	; 0
    b8a8:	fb 01       	movw	r30, r22
    b8aa:	84 91       	lpm	r24, Z
    b8ac:	cd 54       	subi	r28, 0x4D	; 77
    b8ae:	df 4f       	sbci	r29, 0xFF	; 255
    b8b0:	68 81       	ld	r22, Y
    b8b2:	c3 5b       	subi	r28, 0xB3	; 179
    b8b4:	d0 40       	sbci	r29, 0x00	; 0
    b8b6:	70 e0       	ldi	r23, 0x00	; 0
    b8b8:	40 e0       	ldi	r20, 0x00	; 0
    b8ba:	90 e0       	ldi	r25, 0x00	; 0
    b8bc:	f9 01       	movw	r30, r18
    b8be:	19 95       	eicall
    b8c0:	c4 54       	subi	r28, 0x44	; 68
    b8c2:	df 4f       	sbci	r29, 0xFF	; 255
    b8c4:	88 83       	st	Y, r24
    b8c6:	cc 5b       	subi	r28, 0xBC	; 188
    b8c8:	d0 40       	sbci	r29, 0x00	; 0
    b8ca:	cf 54       	subi	r28, 0x4F	; 79
    b8cc:	df 4f       	sbci	r29, 0xFF	; 255
    b8ce:	88 83       	st	Y, r24
    b8d0:	c1 5b       	subi	r28, 0xB1	; 177
    b8d2:	d0 40       	sbci	r29, 0x00	; 0
    b8d4:	ce 54       	subi	r28, 0x4E	; 78
    b8d6:	df 4f       	sbci	r29, 0xFF	; 255
    b8d8:	a8 80       	ld	r10, Y
    b8da:	c2 5b       	subi	r28, 0xB2	; 178
    b8dc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b8de:	16 01       	movw	r2, r12
    b8e0:	f6 ea       	ldi	r31, 0xA6	; 166
    b8e2:	2f 1a       	sub	r2, r31
    b8e4:	fd ef       	ldi	r31, 0xFD	; 253
    b8e6:	3f 0a       	sbc	r3, r31
    b8e8:	26 0c       	add	r2, r6
    b8ea:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b8ec:	46 01       	movw	r8, r12
    b8ee:	24 ea       	ldi	r18, 0xA4	; 164
    b8f0:	82 1a       	sub	r8, r18
    b8f2:	2d ef       	ldi	r18, 0xFD	; 253
    b8f4:	92 0a       	sbc	r9, r18
    b8f6:	86 0c       	add	r8, r6
    b8f8:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    b8fa:	c6 01       	movw	r24, r12
    b8fc:	8b 59       	subi	r24, 0x9B	; 155
    b8fe:	9d 4f       	sbci	r25, 0xFD	; 253
    b900:	a3 01       	movw	r20, r6
    b902:	48 0f       	add	r20, r24
    b904:	59 1f       	adc	r21, r25
    b906:	ca 54       	subi	r28, 0x4A	; 74
    b908:	df 4f       	sbci	r29, 0xFF	; 255
    b90a:	59 83       	std	Y+1, r21	; 0x01
    b90c:	48 83       	st	Y, r20
    b90e:	c6 5b       	subi	r28, 0xB6	; 182
    b910:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    b912:	01 97       	sbiw	r24, 0x01	; 1
    b914:	b3 01       	movw	r22, r6
    b916:	68 0f       	add	r22, r24
    b918:	79 1f       	adc	r23, r25
    b91a:	c8 53       	subi	r28, 0x38	; 56
    b91c:	df 4f       	sbci	r29, 0xFF	; 255
    b91e:	79 83       	std	Y+1, r23	; 0x01
    b920:	68 83       	st	Y, r22
    b922:	c8 5c       	subi	r28, 0xC8	; 200
    b924:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    b926:	01 97       	sbiw	r24, 0x01	; 1
    b928:	f3 01       	movw	r30, r6
    b92a:	e8 0f       	add	r30, r24
    b92c:	f9 1f       	adc	r31, r25
    b92e:	c6 53       	subi	r28, 0x36	; 54
    b930:	df 4f       	sbci	r29, 0xFF	; 255
    b932:	f9 83       	std	Y+1, r31	; 0x01
    b934:	e8 83       	st	Y, r30
    b936:	ca 5c       	subi	r28, 0xCA	; 202
    b938:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    b93a:	03 96       	adiw	r24, 0x03	; 3
    b93c:	93 01       	movw	r18, r6
    b93e:	28 0f       	add	r18, r24
    b940:	39 1f       	adc	r19, r25
    b942:	c3 53       	subi	r28, 0x33	; 51
    b944:	df 4f       	sbci	r29, 0xFF	; 255
    b946:	39 83       	std	Y+1, r19	; 0x01
    b948:	28 83       	st	Y, r18
    b94a:	cd 5c       	subi	r28, 0xCD	; 205
    b94c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    b94e:	06 97       	sbiw	r24, 0x06	; 6
    b950:	a3 01       	movw	r20, r6
    b952:	48 0f       	add	r20, r24
    b954:	59 1f       	adc	r21, r25
    b956:	c1 53       	subi	r28, 0x31	; 49
    b958:	df 4f       	sbci	r29, 0xFF	; 255
    b95a:	59 83       	std	Y+1, r21	; 0x01
    b95c:	48 83       	st	Y, r20
    b95e:	cf 5c       	subi	r28, 0xCF	; 207
    b960:	d0 40       	sbci	r29, 0x00	; 0
    b962:	02 97       	sbiw	r24, 0x02	; 2
    b964:	b3 01       	movw	r22, r6
    b966:	68 0f       	add	r22, r24
    b968:	79 1f       	adc	r23, r25
    b96a:	ce 52       	subi	r28, 0x2E	; 46
    b96c:	df 4f       	sbci	r29, 0xFF	; 255
    b96e:	79 83       	std	Y+1, r23	; 0x01
    b970:	68 83       	st	Y, r22
    b972:	c2 5d       	subi	r28, 0xD2	; 210
    b974:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    b976:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    b978:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    b97a:	c4 54       	subi	r28, 0x44	; 68
    b97c:	df 4f       	sbci	r29, 0xFF	; 255
    b97e:	78 81       	ld	r23, Y
    b980:	cc 5b       	subi	r28, 0xBC	; 188
    b982:	d0 40       	sbci	r29, 0x00	; 0
    b984:	a7 16       	cp	r10, r23
    b986:	08 f0       	brcs	.+2      	; 0xb98a <draw_menu(bool)+0x14b6>
    b988:	d7 c0       	rjmp	.+430    	; 0xbb38 <draw_menu(bool)+0x1664>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b98a:	f1 01       	movw	r30, r2
    b98c:	25 91       	lpm	r18, Z+
    b98e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b990:	f4 01       	movw	r30, r8
    b992:	85 91       	lpm	r24, Z+
    b994:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    b996:	ca 54       	subi	r28, 0x4A	; 74
    b998:	df 4f       	sbci	r29, 0xFF	; 255
    b99a:	e8 81       	ld	r30, Y
    b99c:	f9 81       	ldd	r31, Y+1	; 0x01
    b99e:	c6 5b       	subi	r28, 0xB6	; 182
    b9a0:	d0 40       	sbci	r29, 0x00	; 0
    b9a2:	44 91       	lpm	r20, Z
    b9a4:	44 23       	and	r20, r20
    b9a6:	09 f4       	brne	.+2      	; 0xb9aa <draw_menu(bool)+0x14d6>
    b9a8:	cb c0       	rjmp	.+406    	; 0xbb40 <draw_menu(bool)+0x166c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    b9aa:	c6 54       	subi	r28, 0x46	; 70
    b9ac:	df 4f       	sbci	r29, 0xFF	; 255
    b9ae:	48 81       	ld	r20, Y
    b9b0:	59 81       	ldd	r21, Y+1	; 0x01
    b9b2:	ca 5b       	subi	r28, 0xBA	; 186
    b9b4:	d0 40       	sbci	r29, 0x00	; 0
    b9b6:	48 0f       	add	r20, r24
    b9b8:	59 1f       	adc	r21, r25
    b9ba:	ce 53       	subi	r28, 0x3E	; 62
    b9bc:	df 4f       	sbci	r29, 0xFF	; 255
    b9be:	59 83       	std	Y+1, r21	; 0x01
    b9c0:	48 83       	st	Y, r20
    b9c2:	c2 5c       	subi	r28, 0xC2	; 194
    b9c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    b9c6:	ca 54       	subi	r28, 0x4A	; 74
    b9c8:	df 4f       	sbci	r29, 0xFF	; 255
    b9ca:	e8 81       	ld	r30, Y
    b9cc:	f9 81       	ldd	r31, Y+1	; 0x01
    b9ce:	c6 5b       	subi	r28, 0xB6	; 182
    b9d0:	d0 40       	sbci	r29, 0x00	; 0
    b9d2:	84 91       	lpm	r24, Z
    b9d4:	81 30       	cpi	r24, 0x01	; 1
    b9d6:	09 f4       	brne	.+2      	; 0xb9da <draw_menu(bool)+0x1506>
    b9d8:	d2 c0       	rjmp	.+420    	; 0xbb7e <draw_menu(bool)+0x16aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1860
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    b9da:	c8 54       	subi	r28, 0x48	; 72
    b9dc:	df 4f       	sbci	r29, 0xFF	; 255
    b9de:	48 81       	ld	r20, Y
    b9e0:	59 81       	ldd	r21, Y+1	; 0x01
    b9e2:	c8 5b       	subi	r28, 0xB8	; 184
    b9e4:	d0 40       	sbci	r29, 0x00	; 0
    b9e6:	42 0f       	add	r20, r18
    b9e8:	53 1f       	adc	r21, r19
    b9ea:	c0 54       	subi	r28, 0x40	; 64
    b9ec:	df 4f       	sbci	r29, 0xFF	; 255
    b9ee:	59 83       	std	Y+1, r21	; 0x01
    b9f0:	48 83       	st	Y, r20
    b9f2:	c0 5c       	subi	r28, 0xC0	; 192
    b9f4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    b9f6:	ca 54       	subi	r28, 0x4A	; 74
    b9f8:	df 4f       	sbci	r29, 0xFF	; 255
    b9fa:	e8 81       	ld	r30, Y
    b9fc:	f9 81       	ldd	r31, Y+1	; 0x01
    b9fe:	c6 5b       	subi	r28, 0xB6	; 182
    ba00:	d0 40       	sbci	r29, 0x00	; 0
    ba02:	84 91       	lpm	r24, Z
    ba04:	82 30       	cpi	r24, 0x02	; 2
    ba06:	09 f0       	breq	.+2      	; 0xba0a <draw_menu(bool)+0x1536>
    ba08:	46 c0       	rjmp	.+140    	; 0xba96 <draw_menu(bool)+0x15c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1874
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    ba0a:	f1 01       	movw	r30, r2
    ba0c:	85 91       	lpm	r24, Z+
    ba0e:	94 91       	lpm	r25, Z
    ba10:	c6 53       	subi	r28, 0x36	; 54
    ba12:	df 4f       	sbci	r29, 0xFF	; 255
    ba14:	e8 81       	ld	r30, Y
    ba16:	f9 81       	ldd	r31, Y+1	; 0x01
    ba18:	ca 5c       	subi	r28, 0xCA	; 202
    ba1a:	d0 40       	sbci	r29, 0x00	; 0
    ba1c:	24 91       	lpm	r18, Z
    ba1e:	c8 54       	subi	r28, 0x48	; 72
    ba20:	df 4f       	sbci	r29, 0xFF	; 255
    ba22:	48 81       	ld	r20, Y
    ba24:	59 81       	ldd	r21, Y+1	; 0x01
    ba26:	c8 5b       	subi	r28, 0xB8	; 184
    ba28:	d0 40       	sbci	r29, 0x00	; 0
    ba2a:	84 0f       	add	r24, r20
    ba2c:	95 1f       	adc	r25, r21
    ba2e:	bc 01       	movw	r22, r24
    ba30:	2b 9d       	mul	r18, r11
    ba32:	60 0d       	add	r22, r0
    ba34:	71 1d       	adc	r23, r1
    ba36:	11 24       	eor	r1, r1
    ba38:	c0 54       	subi	r28, 0x40	; 64
    ba3a:	df 4f       	sbci	r29, 0xFF	; 255
    ba3c:	79 83       	std	Y+1, r23	; 0x01
    ba3e:	68 83       	st	Y, r22
    ba40:	c0 5c       	subi	r28, 0xC0	; 192
    ba42:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    ba44:	f4 01       	movw	r30, r8
    ba46:	85 91       	lpm	r24, Z+
    ba48:	94 91       	lpm	r25, Z
    ba4a:	c8 53       	subi	r28, 0x38	; 56
    ba4c:	df 4f       	sbci	r29, 0xFF	; 255
    ba4e:	e8 81       	ld	r30, Y
    ba50:	f9 81       	ldd	r31, Y+1	; 0x01
    ba52:	c8 5c       	subi	r28, 0xC8	; 200
    ba54:	d0 40       	sbci	r29, 0x00	; 0
    ba56:	24 91       	lpm	r18, Z
    ba58:	c6 54       	subi	r28, 0x46	; 70
    ba5a:	df 4f       	sbci	r29, 0xFF	; 255
    ba5c:	48 81       	ld	r20, Y
    ba5e:	59 81       	ldd	r21, Y+1	; 0x01
    ba60:	ca 5b       	subi	r28, 0xBA	; 186
    ba62:	d0 40       	sbci	r29, 0x00	; 0
    ba64:	84 0f       	add	r24, r20
    ba66:	95 1f       	adc	r25, r21
    ba68:	bc 01       	movw	r22, r24
    ba6a:	24 9d       	mul	r18, r4
    ba6c:	60 0d       	add	r22, r0
    ba6e:	71 1d       	adc	r23, r1
    ba70:	11 24       	eor	r1, r1
    ba72:	ce 53       	subi	r28, 0x3E	; 62
    ba74:	df 4f       	sbci	r29, 0xFF	; 255
    ba76:	79 83       	std	Y+1, r23	; 0x01
    ba78:	68 83       	st	Y, r22
    ba7a:	c2 5c       	subi	r28, 0xC2	; 194
    ba7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1876
          loop_t++;
    ba7e:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    ba80:	c3 53       	subi	r28, 0x33	; 51
    ba82:	df 4f       	sbci	r29, 0xFF	; 255
    ba84:	e8 81       	ld	r30, Y
    ba86:	f9 81       	ldd	r31, Y+1	; 0x01
    ba88:	cd 5c       	subi	r28, 0xCD	; 205
    ba8a:	d0 40       	sbci	r29, 0x00	; 0
    ba8c:	84 91       	lpm	r24, Z
    ba8e:	b8 16       	cp	r11, r24
    ba90:	10 f0       	brcs	.+4      	; 0xba96 <draw_menu(bool)+0x15c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
          {
            loop_t = 0;
            loop_r++;
    ba92:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    ba94:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    ba96:	c1 53       	subi	r28, 0x31	; 49
    ba98:	df 4f       	sbci	r29, 0xFF	; 255
    ba9a:	e8 81       	ld	r30, Y
    ba9c:	f9 81       	ldd	r31, Y+1	; 0x01
    ba9e:	cf 5c       	subi	r28, 0xCF	; 207
    baa0:	d0 40       	sbci	r29, 0x00	; 0
    baa2:	25 91       	lpm	r18, Z+
    baa4:	34 91       	lpm	r19, Z
    baa6:	ce 52       	subi	r28, 0x2E	; 46
    baa8:	df 4f       	sbci	r29, 0xFF	; 255
    baaa:	e8 81       	ld	r30, Y
    baac:	f9 81       	ldd	r31, Y+1	; 0x01
    baae:	c2 5d       	subi	r28, 0xD2	; 210
    bab0:	d0 40       	sbci	r29, 0x00	; 0
    bab2:	45 91       	lpm	r20, Z+
    bab4:	54 91       	lpm	r21, Z
    bab6:	ca 53       	subi	r28, 0x3A	; 58
    bab8:	df 4f       	sbci	r29, 0xFF	; 255
    baba:	e8 80       	ld	r14, Y
    babc:	f9 80       	ldd	r15, Y+1	; 0x01
    babe:	c6 5c       	subi	r28, 0xC6	; 198
    bac0:	d0 40       	sbci	r29, 0x00	; 0
    bac2:	cc 53       	subi	r28, 0x3C	; 60
    bac4:	df 4f       	sbci	r29, 0xFF	; 255
    bac6:	08 81       	ld	r16, Y
    bac8:	19 81       	ldd	r17, Y+1	; 0x01
    baca:	c4 5c       	subi	r28, 0xC4	; 196
    bacc:	d0 40       	sbci	r29, 0x00	; 0
    bace:	ce 53       	subi	r28, 0x3E	; 62
    bad0:	df 4f       	sbci	r29, 0xFF	; 255
    bad2:	68 81       	ld	r22, Y
    bad4:	79 81       	ldd	r23, Y+1	; 0x01
    bad6:	c2 5c       	subi	r28, 0xC2	; 194
    bad8:	d0 40       	sbci	r29, 0x00	; 0
    bada:	c0 54       	subi	r28, 0x40	; 64
    badc:	df 4f       	sbci	r29, 0xFF	; 255
    bade:	88 81       	ld	r24, Y
    bae0:	99 81       	ldd	r25, Y+1	; 0x01
    bae2:	c0 5c       	subi	r28, 0xC0	; 192
    bae4:	d0 40       	sbci	r29, 0x00	; 0
    bae6:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    baea:	18 2f       	mov	r17, r24
    baec:	81 e0       	ldi	r24, 0x01	; 1
    baee:	8a 0d       	add	r24, r10
    baf0:	11 23       	and	r17, r17
    baf2:	21 f1       	breq	.+72     	; 0xbb3c <draw_menu(bool)+0x1668>
    baf4:	ce 54       	subi	r28, 0x4E	; 78
    baf6:	df 4f       	sbci	r29, 0xFF	; 255
    baf8:	a8 82       	st	Y, r10
    bafa:	c2 5b       	subi	r28, 0xB2	; 178
    bafc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1885
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    bafe:	f6 01       	movw	r30, r12
    bb00:	e4 59       	subi	r30, 0x94	; 148
    bb02:	fd 4f       	sbci	r31, 0xFD	; 253
    bb04:	e6 0d       	add	r30, r6
    bb06:	f7 1d       	adc	r31, r7
    bb08:	25 91       	lpm	r18, Z+
    bb0a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    bb0c:	c2 54       	subi	r28, 0x42	; 66
    bb0e:	df 4f       	sbci	r29, 0xFF	; 255
    bb10:	e8 81       	ld	r30, Y
    bb12:	f9 81       	ldd	r31, Y+1	; 0x01
    bb14:	ce 5b       	subi	r28, 0xBE	; 190
    bb16:	d0 40       	sbci	r29, 0x00	; 0
    bb18:	84 91       	lpm	r24, Z
    bb1a:	cd 54       	subi	r28, 0x4D	; 77
    bb1c:	df 4f       	sbci	r29, 0xFF	; 255
    bb1e:	68 81       	ld	r22, Y
    bb20:	c3 5b       	subi	r28, 0xB3	; 179
    bb22:	d0 40       	sbci	r29, 0x00	; 0
    bb24:	70 e0       	ldi	r23, 0x00	; 0
    bb26:	4a 2d       	mov	r20, r10
    bb28:	90 e0       	ldi	r25, 0x00	; 0
    bb2a:	f9 01       	movw	r30, r18
    bb2c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
          ret = true;
    bb2e:	c4 53       	subi	r28, 0x34	; 52
    bb30:	df 4f       	sbci	r29, 0xFF	; 255
    bb32:	18 83       	st	Y, r17
    bb34:	cc 5c       	subi	r28, 0xCC	; 204
    bb36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    bb38:	53 94       	inc	r5
    bb3a:	d6 cc       	rjmp	.-1620   	; 0xb4e8 <draw_menu(bool)+0x1014>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    bb3c:	a8 2e       	mov	r10, r24
    bb3e:	1d cf       	rjmp	.-454    	; 0xb97a <draw_menu(bool)+0x14a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    bb40:	f4 01       	movw	r30, r8
    bb42:	85 91       	lpm	r24, Z+
    bb44:	94 91       	lpm	r25, Z
    bb46:	c8 53       	subi	r28, 0x38	; 56
    bb48:	df 4f       	sbci	r29, 0xFF	; 255
    bb4a:	e8 81       	ld	r30, Y
    bb4c:	f9 81       	ldd	r31, Y+1	; 0x01
    bb4e:	c8 5c       	subi	r28, 0xC8	; 200
    bb50:	d0 40       	sbci	r29, 0x00	; 0
    bb52:	44 91       	lpm	r20, Z
    bb54:	c6 54       	subi	r28, 0x46	; 70
    bb56:	df 4f       	sbci	r29, 0xFF	; 255
    bb58:	68 81       	ld	r22, Y
    bb5a:	79 81       	ldd	r23, Y+1	; 0x01
    bb5c:	ca 5b       	subi	r28, 0xBA	; 186
    bb5e:	d0 40       	sbci	r29, 0x00	; 0
    bb60:	86 0f       	add	r24, r22
    bb62:	97 1f       	adc	r25, r23
    bb64:	fc 01       	movw	r30, r24
    bb66:	4b 9d       	mul	r20, r11
    bb68:	e0 0d       	add	r30, r0
    bb6a:	f1 1d       	adc	r31, r1
    bb6c:	11 24       	eor	r1, r1
    bb6e:	ce 53       	subi	r28, 0x3E	; 62
    bb70:	df 4f       	sbci	r29, 0xFF	; 255
    bb72:	f9 83       	std	Y+1, r31	; 0x01
    bb74:	e8 83       	st	Y, r30
    bb76:	c2 5c       	subi	r28, 0xC2	; 194
    bb78:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
          loop_t++;
    bb7a:	b3 94       	inc	r11
    bb7c:	24 cf       	rjmp	.-440    	; 0xb9c6 <draw_menu(bool)+0x14f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    bb7e:	f1 01       	movw	r30, r2
    bb80:	85 91       	lpm	r24, Z+
    bb82:	94 91       	lpm	r25, Z
    bb84:	c6 53       	subi	r28, 0x36	; 54
    bb86:	df 4f       	sbci	r29, 0xFF	; 255
    bb88:	e8 81       	ld	r30, Y
    bb8a:	f9 81       	ldd	r31, Y+1	; 0x01
    bb8c:	ca 5c       	subi	r28, 0xCA	; 202
    bb8e:	d0 40       	sbci	r29, 0x00	; 0
    bb90:	24 91       	lpm	r18, Z
    bb92:	c8 54       	subi	r28, 0x48	; 72
    bb94:	df 4f       	sbci	r29, 0xFF	; 255
    bb96:	48 81       	ld	r20, Y
    bb98:	59 81       	ldd	r21, Y+1	; 0x01
    bb9a:	c8 5b       	subi	r28, 0xB8	; 184
    bb9c:	d0 40       	sbci	r29, 0x00	; 0
    bb9e:	84 0f       	add	r24, r20
    bba0:	95 1f       	adc	r25, r21
    bba2:	bc 01       	movw	r22, r24
    bba4:	2b 9d       	mul	r18, r11
    bba6:	60 0d       	add	r22, r0
    bba8:	71 1d       	adc	r23, r1
    bbaa:	11 24       	eor	r1, r1
    bbac:	c0 54       	subi	r28, 0x40	; 64
    bbae:	df 4f       	sbci	r29, 0xFF	; 255
    bbb0:	79 83       	std	Y+1, r23	; 0x01
    bbb2:	68 83       	st	Y, r22
    bbb4:	c0 5c       	subi	r28, 0xC0	; 192
    bbb6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1870
          loop_t++;
    bbb8:	b3 94       	inc	r11
    bbba:	1d cf       	rjmp	.-454    	; 0xb9f6 <draw_menu(bool)+0x1522>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1894
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    bbbc:	c4 53       	subi	r28, 0x34	; 52
    bbbe:	df 4f       	sbci	r29, 0xFF	; 255
    bbc0:	f8 81       	ld	r31, Y
    bbc2:	cc 5c       	subi	r28, 0xCC	; 204
    bbc4:	d0 40       	sbci	r29, 0x00	; 0
    bbc6:	f1 11       	cpse	r31, r1
    bbc8:	0c 94 6d 65 	jmp	0xcada	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    bbcc:	91 2c       	mov	r9, r1
    bbce:	93 01       	movw	r18, r6
    bbd0:	2f 53       	subi	r18, 0x3F	; 63
    bbd2:	3d 4f       	sbci	r19, 0xFD	; 253
    bbd4:	cc 52       	subi	r28, 0x2C	; 44
    bbd6:	df 4f       	sbci	r29, 0xFF	; 255
    bbd8:	39 83       	std	Y+1, r19	; 0x01
    bbda:	28 83       	st	Y, r18
    bbdc:	c4 5d       	subi	r28, 0xD4	; 212
    bbde:	d0 40       	sbci	r29, 0x00	; 0
    bbe0:	cc 52       	subi	r28, 0x2C	; 44
    bbe2:	df 4f       	sbci	r29, 0xFF	; 255
    bbe4:	e8 81       	ld	r30, Y
    bbe6:	f9 81       	ldd	r31, Y+1	; 0x01
    bbe8:	c4 5d       	subi	r28, 0xD4	; 212
    bbea:	d0 40       	sbci	r29, 0x00	; 0
    bbec:	84 91       	lpm	r24, Z
    bbee:	98 16       	cp	r9, r24
    bbf0:	08 f0       	brcs	.+2      	; 0xbbf4 <draw_menu(bool)+0x1720>
    bbf2:	14 c3       	rjmp	.+1576   	; 0xc21c <draw_menu(bool)+0x1d48>
    bbf4:	f7 e1       	ldi	r31, 0x17	; 23
    bbf6:	9f 9e       	mul	r9, r31
    bbf8:	20 01       	movw	r4, r0
    bbfa:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    bbfc:	f2 01       	movw	r30, r4
    bbfe:	ee 53       	subi	r30, 0x3E	; 62
    bc00:	fe 4f       	sbci	r31, 0xFE	; 254
    bc02:	e6 0d       	add	r30, r6
    bc04:	f7 1d       	adc	r31, r7
    bc06:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
    if (enable_redraw(rdr, redraw_class) == true)
    bc08:	cf 52       	subi	r28, 0x2F	; 47
    bc0a:	df 4f       	sbci	r29, 0xFF	; 255
    bc0c:	68 81       	ld	r22, Y
    bc0e:	c1 5d       	subi	r28, 0xD1	; 209
    bc10:	d0 40       	sbci	r29, 0x00	; 0
    bc12:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    bc16:	88 23       	and	r24, r24
    bc18:	09 f4       	brne	.+2      	; 0xbc1c <draw_menu(bool)+0x1748>
    bc1a:	83 c1       	rjmp	.+774    	; 0xbf22 <draw_menu(bool)+0x1a4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
    {
      loop_i = 0;
    bc1c:	ce 54       	subi	r28, 0x4E	; 78
    bc1e:	df 4f       	sbci	r29, 0xFF	; 255
    bc20:	18 82       	st	Y, r1
    bc22:	c2 5b       	subi	r28, 0xB2	; 178
    bc24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1904
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
    bc26:	f2 01       	movw	r30, r4
    bc28:	e0 54       	subi	r30, 0x40	; 64
    bc2a:	fe 4f       	sbci	r31, 0xFE	; 254
    bc2c:	e6 0d       	add	r30, r6
    bc2e:	f7 1d       	adc	r31, r7
    bc30:	25 91       	lpm	r18, Z+
    bc32:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1905
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    bc34:	c2 01       	movw	r24, r4
    bc36:	85 54       	subi	r24, 0x45	; 69
    bc38:	9e 4f       	sbci	r25, 0xFE	; 254
    bc3a:	a3 01       	movw	r20, r6
    bc3c:	48 0f       	add	r20, r24
    bc3e:	59 1f       	adc	r21, r25
    bc40:	ca 54       	subi	r28, 0x4A	; 74
    bc42:	df 4f       	sbci	r29, 0xFF	; 255
    bc44:	59 83       	std	Y+1, r21	; 0x01
    bc46:	48 83       	st	Y, r20
    bc48:	c6 5b       	subi	r28, 0xB6	; 182
    bc4a:	d0 40       	sbci	r29, 0x00	; 0
    bc4c:	fa 01       	movw	r30, r20
    bc4e:	84 91       	lpm	r24, Z
    bc50:	cd 54       	subi	r28, 0x4D	; 77
    bc52:	df 4f       	sbci	r29, 0xFF	; 255
    bc54:	68 81       	ld	r22, Y
    bc56:	c3 5b       	subi	r28, 0xB3	; 179
    bc58:	d0 40       	sbci	r29, 0x00	; 0
    bc5a:	70 e0       	ldi	r23, 0x00	; 0
    bc5c:	40 e0       	ldi	r20, 0x00	; 0
    bc5e:	90 e0       	ldi	r25, 0x00	; 0
    bc60:	f9 01       	movw	r30, r18
    bc62:	19 95       	eicall
    bc64:	cf 54       	subi	r28, 0x4F	; 79
    bc66:	df 4f       	sbci	r29, 0xFF	; 255
    bc68:	88 83       	st	Y, r24
    bc6a:	c1 5b       	subi	r28, 0xB1	; 177
    bc6c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1906
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);
    bc6e:	f2 01       	movw	r30, r4
    bc70:	e4 54       	subi	r30, 0x44	; 68
    bc72:	fe 4f       	sbci	r31, 0xFE	; 254
    bc74:	e6 0d       	add	r30, r6
    bc76:	f7 1d       	adc	r31, r7
    bc78:	25 91       	lpm	r18, Z+
    bc7a:	34 91       	lpm	r19, Z
    bc7c:	ca 52       	subi	r28, 0x2A	; 42
    bc7e:	df 4f       	sbci	r29, 0xFF	; 255
    bc80:	39 83       	std	Y+1, r19	; 0x01
    bc82:	28 83       	st	Y, r18
    bc84:	c6 5d       	subi	r28, 0xD6	; 214
    bc86:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1908

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    bc88:	f2 01       	movw	r30, r4
    bc8a:	e6 54       	subi	r30, 0x46	; 70
    bc8c:	fe 4f       	sbci	r31, 0xFE	; 254
    bc8e:	e6 0d       	add	r30, r6
    bc90:	f7 1d       	adc	r31, r7
    bc92:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
      if (slider_active != MENU_SLIDER_OFF)
    bc94:	4f 3f       	cpi	r20, 0xFF	; 255
    bc96:	b9 f0       	breq	.+46     	; 0xbcc6 <draw_menu(bool)+0x17f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    bc98:	f2 01       	movw	r30, r4
    bc9a:	e8 54       	subi	r30, 0x48	; 72
    bc9c:	fe 4f       	sbci	r31, 0xFE	; 254
    bc9e:	e6 0d       	add	r30, r6
    bca0:	f7 1d       	adc	r31, r7
    bca2:	24 91       	lpm	r18, Z
    bca4:	f2 01       	movw	r30, r4
    bca6:	e7 54       	subi	r30, 0x47	; 71
    bca8:	fe 4f       	sbci	r31, 0xFE	; 254
    bcaa:	e6 0d       	add	r30, r6
    bcac:	f7 1d       	adc	r31, r7
    bcae:	e4 91       	lpm	r30, Z
    bcb0:	2e 9f       	mul	r18, r30
    bcb2:	20 2d       	mov	r18, r0
    bcb4:	11 24       	eor	r1, r1
    bcb6:	be 01       	movw	r22, r28
    bcb8:	6f 54       	subi	r22, 0x4F	; 79
    bcba:	7f 4f       	sbci	r23, 0xFF	; 255
    bcbc:	ce 01       	movw	r24, r28
    bcbe:	8e 54       	subi	r24, 0x4E	; 78
    bcc0:	9f 4f       	sbci	r25, 0xFF	; 255
    bcc2:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    bcc6:	c2 01       	movw	r24, r4
    bcc8:	84 55       	subi	r24, 0x54	; 84
    bcca:	9e 4f       	sbci	r25, 0xFE	; 254
    bccc:	a3 01       	movw	r20, r6
    bcce:	48 0f       	add	r20, r24
    bcd0:	59 1f       	adc	r21, r25
    bcd2:	c4 54       	subi	r28, 0x44	; 68
    bcd4:	df 4f       	sbci	r29, 0xFF	; 255
    bcd6:	59 83       	std	Y+1, r21	; 0x01
    bcd8:	48 83       	st	Y, r20
    bcda:	cc 5b       	subi	r28, 0xBC	; 188
    bcdc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    bcde:	12 01       	movw	r2, r4
    bce0:	52 e5       	ldi	r21, 0x52	; 82
    bce2:	25 1a       	sub	r2, r21
    bce4:	5e ef       	ldi	r21, 0xFE	; 254
    bce6:	35 0a       	sbc	r3, r21
    bce8:	26 0c       	add	r2, r6
    bcea:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    bcec:	0b 96       	adiw	r24, 0x0b	; 11
    bcee:	b3 01       	movw	r22, r6
    bcf0:	68 0f       	add	r22, r24
    bcf2:	79 1f       	adc	r23, r25
    bcf4:	c2 54       	subi	r28, 0x42	; 66
    bcf6:	df 4f       	sbci	r29, 0xFF	; 255
    bcf8:	79 83       	std	Y+1, r23	; 0x01
    bcfa:	68 83       	st	Y, r22
    bcfc:	ce 5b       	subi	r28, 0xBE	; 190
    bcfe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    bd00:	01 97       	sbiw	r24, 0x01	; 1
    bd02:	f3 01       	movw	r30, r6
    bd04:	e8 0f       	add	r30, r24
    bd06:	f9 1f       	adc	r31, r25
    bd08:	c6 53       	subi	r28, 0x36	; 54
    bd0a:	df 4f       	sbci	r29, 0xFF	; 255
    bd0c:	f9 83       	std	Y+1, r31	; 0x01
    bd0e:	e8 83       	st	Y, r30
    bd10:	ca 5c       	subi	r28, 0xCA	; 202
    bd12:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    bd14:	01 97       	sbiw	r24, 0x01	; 1
    bd16:	93 01       	movw	r18, r6
    bd18:	28 0f       	add	r18, r24
    bd1a:	39 1f       	adc	r19, r25
    bd1c:	c3 53       	subi	r28, 0x33	; 51
    bd1e:	df 4f       	sbci	r29, 0xFF	; 255
    bd20:	39 83       	std	Y+1, r19	; 0x01
    bd22:	28 83       	st	Y, r18
    bd24:	cd 5c       	subi	r28, 0xCD	; 205
    bd26:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    bd28:	01 97       	sbiw	r24, 0x01	; 1
    bd2a:	a3 01       	movw	r20, r6
    bd2c:	48 0f       	add	r20, r24
    bd2e:	59 1f       	adc	r21, r25
    bd30:	c8 53       	subi	r28, 0x38	; 56
    bd32:	df 4f       	sbci	r29, 0xFF	; 255
    bd34:	59 83       	std	Y+1, r21	; 0x01
    bd36:	48 83       	st	Y, r20
    bd38:	c8 5c       	subi	r28, 0xC8	; 200
    bd3a:	d0 40       	sbci	r29, 0x00	; 0
    bd3c:	02 97       	sbiw	r24, 0x02	; 2
    bd3e:	b3 01       	movw	r22, r6
    bd40:	68 0f       	add	r22, r24
    bd42:	79 1f       	adc	r23, r25
    bd44:	c1 53       	subi	r28, 0x31	; 49
    bd46:	df 4f       	sbci	r29, 0xFF	; 255
    bd48:	79 83       	std	Y+1, r23	; 0x01
    bd4a:	68 83       	st	Y, r22
    bd4c:	cf 5c       	subi	r28, 0xCF	; 207
    bd4e:	d0 40       	sbci	r29, 0x00	; 0
    bd50:	02 97       	sbiw	r24, 0x02	; 2
    bd52:	f3 01       	movw	r30, r6
    bd54:	e8 0f       	add	r30, r24
    bd56:	f9 1f       	adc	r31, r25
    bd58:	ce 52       	subi	r28, 0x2E	; 46
    bd5a:	df 4f       	sbci	r29, 0xFF	; 255
    bd5c:	f9 83       	std	Y+1, r31	; 0x01
    bd5e:	e8 83       	st	Y, r30
    bd60:	c2 5d       	subi	r28, 0xD2	; 210
    bd62:	d0 40       	sbci	r29, 0x00	; 0
    bd64:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1911
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    bd66:	ce 54       	subi	r28, 0x4E	; 78
    bd68:	df 4f       	sbci	r29, 0xFF	; 255
    bd6a:	88 81       	ld	r24, Y
    bd6c:	c2 5b       	subi	r28, 0xB2	; 178
    bd6e:	d0 40       	sbci	r29, 0x00	; 0
    bd70:	cf 54       	subi	r28, 0x4F	; 79
    bd72:	df 4f       	sbci	r29, 0xFF	; 255
    bd74:	98 81       	ld	r25, Y
    bd76:	c1 5b       	subi	r28, 0xB1	; 177
    bd78:	d0 40       	sbci	r29, 0x00	; 0
    bd7a:	89 17       	cp	r24, r25
    bd7c:	08 f0       	brcs	.+2      	; 0xbd80 <draw_menu(bool)+0x18ac>
    bd7e:	d1 c0       	rjmp	.+418    	; 0xbf22 <draw_menu(bool)+0x1a4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    bd80:	c4 54       	subi	r28, 0x44	; 68
    bd82:	df 4f       	sbci	r29, 0xFF	; 255
    bd84:	e8 81       	ld	r30, Y
    bd86:	f9 81       	ldd	r31, Y+1	; 0x01
    bd88:	cc 5b       	subi	r28, 0xBC	; 188
    bd8a:	d0 40       	sbci	r29, 0x00	; 0
    bd8c:	45 91       	lpm	r20, Z+
    bd8e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    bd90:	f1 01       	movw	r30, r2
    bd92:	25 91       	lpm	r18, Z+
    bd94:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    bd96:	c2 54       	subi	r28, 0x42	; 66
    bd98:	df 4f       	sbci	r29, 0xFF	; 255
    bd9a:	e8 81       	ld	r30, Y
    bd9c:	f9 81       	ldd	r31, Y+1	; 0x01
    bd9e:	ce 5b       	subi	r28, 0xBE	; 190
    bda0:	d0 40       	sbci	r29, 0x00	; 0
    bda2:	94 91       	lpm	r25, Z
    bda4:	99 23       	and	r25, r25
    bda6:	09 f4       	brne	.+2      	; 0xbdaa <draw_menu(bool)+0x18d6>
    bda8:	7b c0       	rjmp	.+246    	; 0xbea0 <draw_menu(bool)+0x19cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    bdaa:	c6 54       	subi	r28, 0x46	; 70
    bdac:	df 4f       	sbci	r29, 0xFF	; 255
    bdae:	68 81       	ld	r22, Y
    bdb0:	79 81       	ldd	r23, Y+1	; 0x01
    bdb2:	ca 5b       	subi	r28, 0xBA	; 186
    bdb4:	d0 40       	sbci	r29, 0x00	; 0
    bdb6:	62 0f       	add	r22, r18
    bdb8:	73 1f       	adc	r23, r19
    bdba:	ce 53       	subi	r28, 0x3E	; 62
    bdbc:	df 4f       	sbci	r29, 0xFF	; 255
    bdbe:	79 83       	std	Y+1, r23	; 0x01
    bdc0:	68 83       	st	Y, r22
    bdc2:	c2 5c       	subi	r28, 0xC2	; 194
    bdc4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1917
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    bdc6:	c2 54       	subi	r28, 0x42	; 66
    bdc8:	df 4f       	sbci	r29, 0xFF	; 255
    bdca:	e8 81       	ld	r30, Y
    bdcc:	f9 81       	ldd	r31, Y+1	; 0x01
    bdce:	ce 5b       	subi	r28, 0xBE	; 190
    bdd0:	d0 40       	sbci	r29, 0x00	; 0
    bdd2:	94 91       	lpm	r25, Z
    bdd4:	91 30       	cpi	r25, 0x01	; 1
    bdd6:	09 f4       	brne	.+2      	; 0xbdda <draw_menu(bool)+0x1906>
    bdd8:	81 c0       	rjmp	.+258    	; 0xbedc <draw_menu(bool)+0x1a08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    bdda:	c8 54       	subi	r28, 0x48	; 72
    bddc:	df 4f       	sbci	r29, 0xFF	; 255
    bdde:	28 81       	ld	r18, Y
    bde0:	39 81       	ldd	r19, Y+1	; 0x01
    bde2:	c8 5b       	subi	r28, 0xB8	; 184
    bde4:	d0 40       	sbci	r29, 0x00	; 0
    bde6:	24 0f       	add	r18, r20
    bde8:	35 1f       	adc	r19, r21
    bdea:	c0 54       	subi	r28, 0x40	; 64
    bdec:	df 4f       	sbci	r29, 0xFF	; 255
    bdee:	39 83       	std	Y+1, r19	; 0x01
    bdf0:	28 83       	st	Y, r18
    bdf2:	c0 5c       	subi	r28, 0xC0	; 192
    bdf4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
    bdf6:	ca 54       	subi	r28, 0x4A	; 74
    bdf8:	df 4f       	sbci	r29, 0xFF	; 255
    bdfa:	e8 81       	ld	r30, Y
    bdfc:	f9 81       	ldd	r31, Y+1	; 0x01
    bdfe:	c6 5b       	subi	r28, 0xB6	; 182
    be00:	d0 40       	sbci	r29, 0x00	; 0
    be02:	44 91       	lpm	r20, Z
    be04:	8e 01       	movw	r16, r28
    be06:	0f 57       	subi	r16, 0x7F	; 127
    be08:	1f 4f       	sbci	r17, 0xFF	; 255
    be0a:	9e 01       	movw	r18, r28
    be0c:	2f 5f       	subi	r18, 0xFF	; 255
    be0e:	3f 4f       	sbci	r19, 0xFF	; 255
    be10:	cd 54       	subi	r28, 0x4D	; 77
    be12:	df 4f       	sbci	r29, 0xFF	; 255
    be14:	68 81       	ld	r22, Y
    be16:	c3 5b       	subi	r28, 0xB3	; 179
    be18:	d0 40       	sbci	r29, 0x00	; 0
    be1a:	ca 52       	subi	r28, 0x2A	; 42
    be1c:	df 4f       	sbci	r29, 0xFF	; 255
    be1e:	e8 81       	ld	r30, Y
    be20:	f9 81       	ldd	r31, Y+1	; 0x01
    be22:	c6 5d       	subi	r28, 0xD6	; 214
    be24:	d0 40       	sbci	r29, 0x00	; 0
    be26:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    be28:	c8 53       	subi	r28, 0x38	; 56
    be2a:	df 4f       	sbci	r29, 0xFF	; 255
    be2c:	e8 81       	ld	r30, Y
    be2e:	f9 81       	ldd	r31, Y+1	; 0x01
    be30:	c8 5c       	subi	r28, 0xC8	; 200
    be32:	d0 40       	sbci	r29, 0x00	; 0
    be34:	e4 90       	lpm	r14, Z
    be36:	04 91       	lpm	r16, Z
    be38:	c1 53       	subi	r28, 0x31	; 49
    be3a:	df 4f       	sbci	r29, 0xFF	; 255
    be3c:	e8 81       	ld	r30, Y
    be3e:	f9 81       	ldd	r31, Y+1	; 0x01
    be40:	cf 5c       	subi	r28, 0xCF	; 207
    be42:	d0 40       	sbci	r29, 0x00	; 0
    be44:	25 91       	lpm	r18, Z+
    be46:	34 91       	lpm	r19, Z
    be48:	ce 52       	subi	r28, 0x2E	; 46
    be4a:	df 4f       	sbci	r29, 0xFF	; 255
    be4c:	e8 81       	ld	r30, Y
    be4e:	f9 81       	ldd	r31, Y+1	; 0x01
    be50:	c2 5d       	subi	r28, 0xD2	; 210
    be52:	d0 40       	sbci	r29, 0x00	; 0
    be54:	45 91       	lpm	r20, Z+
    be56:	54 91       	lpm	r21, Z
    be58:	88 24       	eor	r8, r8
    be5a:	83 94       	inc	r8
    be5c:	be 01       	movw	r22, r28
    be5e:	6f 57       	subi	r22, 0x7F	; 127
    be60:	7f 4f       	sbci	r23, 0xFF	; 255
    be62:	5b 01       	movw	r10, r22
    be64:	ce 01       	movw	r24, r28
    be66:	01 96       	adiw	r24, 0x01	; 1
    be68:	6c 01       	movw	r12, r24
    be6a:	ce 53       	subi	r28, 0x3E	; 62
    be6c:	df 4f       	sbci	r29, 0xFF	; 255
    be6e:	68 81       	ld	r22, Y
    be70:	79 81       	ldd	r23, Y+1	; 0x01
    be72:	c2 5c       	subi	r28, 0xC2	; 194
    be74:	d0 40       	sbci	r29, 0x00	; 0
    be76:	c0 54       	subi	r28, 0x40	; 64
    be78:	df 4f       	sbci	r29, 0xFF	; 255
    be7a:	88 81       	ld	r24, Y
    be7c:	99 81       	ldd	r25, Y+1	; 0x01
    be7e:	c0 5c       	subi	r28, 0xC0	; 192
    be80:	d0 40       	sbci	r29, 0x00	; 0
    be82:	0e 94 19 43 	call	0x8632	; 0x8632 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
        loop_t++;
    be86:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1922
        loop_i++;
    be88:	ce 54       	subi	r28, 0x4E	; 78
    be8a:	df 4f       	sbci	r29, 0xFF	; 255
    be8c:	88 81       	ld	r24, Y
    be8e:	c2 5b       	subi	r28, 0xB2	; 178
    be90:	d0 40       	sbci	r29, 0x00	; 0
    be92:	8f 5f       	subi	r24, 0xFF	; 255
    be94:	ce 54       	subi	r28, 0x4E	; 78
    be96:	df 4f       	sbci	r29, 0xFF	; 255
    be98:	88 83       	st	Y, r24
    be9a:	c2 5b       	subi	r28, 0xB2	; 178
    be9c:	d0 40       	sbci	r29, 0x00	; 0
    be9e:	63 cf       	rjmp	.-314    	; 0xbd66 <draw_menu(bool)+0x1892>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    bea0:	f1 01       	movw	r30, r2
    bea2:	25 91       	lpm	r18, Z+
    bea4:	34 91       	lpm	r19, Z
    bea6:	c6 53       	subi	r28, 0x36	; 54
    bea8:	df 4f       	sbci	r29, 0xFF	; 255
    beaa:	e8 81       	ld	r30, Y
    beac:	f9 81       	ldd	r31, Y+1	; 0x01
    beae:	ca 5c       	subi	r28, 0xCA	; 202
    beb0:	d0 40       	sbci	r29, 0x00	; 0
    beb2:	94 91       	lpm	r25, Z
    beb4:	c6 54       	subi	r28, 0x46	; 70
    beb6:	df 4f       	sbci	r29, 0xFF	; 255
    beb8:	68 81       	ld	r22, Y
    beba:	79 81       	ldd	r23, Y+1	; 0x01
    bebc:	ca 5b       	subi	r28, 0xBA	; 186
    bebe:	d0 40       	sbci	r29, 0x00	; 0
    bec0:	26 0f       	add	r18, r22
    bec2:	37 1f       	adc	r19, r23
    bec4:	f9 01       	movw	r30, r18
    bec6:	9f 9d       	mul	r25, r15
    bec8:	e0 0d       	add	r30, r0
    beca:	f1 1d       	adc	r31, r1
    becc:	11 24       	eor	r1, r1
    bece:	ce 53       	subi	r28, 0x3E	; 62
    bed0:	df 4f       	sbci	r29, 0xFF	; 255
    bed2:	f9 83       	std	Y+1, r31	; 0x01
    bed4:	e8 83       	st	Y, r30
    bed6:	c2 5c       	subi	r28, 0xC2	; 194
    bed8:	d0 40       	sbci	r29, 0x00	; 0
    beda:	75 cf       	rjmp	.-278    	; 0xbdc6 <draw_menu(bool)+0x18f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    bedc:	c4 54       	subi	r28, 0x44	; 68
    bede:	df 4f       	sbci	r29, 0xFF	; 255
    bee0:	e8 81       	ld	r30, Y
    bee2:	f9 81       	ldd	r31, Y+1	; 0x01
    bee4:	cc 5b       	subi	r28, 0xBC	; 188
    bee6:	d0 40       	sbci	r29, 0x00	; 0
    bee8:	25 91       	lpm	r18, Z+
    beea:	34 91       	lpm	r19, Z
    beec:	c3 53       	subi	r28, 0x33	; 51
    beee:	df 4f       	sbci	r29, 0xFF	; 255
    bef0:	e8 81       	ld	r30, Y
    bef2:	f9 81       	ldd	r31, Y+1	; 0x01
    bef4:	cd 5c       	subi	r28, 0xCD	; 205
    bef6:	d0 40       	sbci	r29, 0x00	; 0
    bef8:	94 91       	lpm	r25, Z
    befa:	c8 54       	subi	r28, 0x48	; 72
    befc:	df 4f       	sbci	r29, 0xFF	; 255
    befe:	48 81       	ld	r20, Y
    bf00:	59 81       	ldd	r21, Y+1	; 0x01
    bf02:	c8 5b       	subi	r28, 0xB8	; 184
    bf04:	d0 40       	sbci	r29, 0x00	; 0
    bf06:	24 0f       	add	r18, r20
    bf08:	35 1f       	adc	r19, r21
    bf0a:	b9 01       	movw	r22, r18
    bf0c:	9f 9d       	mul	r25, r15
    bf0e:	60 0d       	add	r22, r0
    bf10:	71 1d       	adc	r23, r1
    bf12:	11 24       	eor	r1, r1
    bf14:	c0 54       	subi	r28, 0x40	; 64
    bf16:	df 4f       	sbci	r29, 0xFF	; 255
    bf18:	79 83       	std	Y+1, r23	; 0x01
    bf1a:	68 83       	st	Y, r22
    bf1c:	c0 5c       	subi	r28, 0xC0	; 192
    bf1e:	d0 40       	sbci	r29, 0x00	; 0
    bf20:	6a cf       	rjmp	.-300    	; 0xbdf6 <draw_menu(bool)+0x1922>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    bf22:	cc 53       	subi	r28, 0x3C	; 60
    bf24:	df 4f       	sbci	r29, 0xFF	; 255
    bf26:	e8 81       	ld	r30, Y
    bf28:	f9 81       	ldd	r31, Y+1	; 0x01
    bf2a:	c4 5c       	subi	r28, 0xC4	; 196
    bf2c:	d0 40       	sbci	r29, 0x00	; 0
    bf2e:	ef 2b       	or	r30, r31
    bf30:	09 f4       	brne	.+2      	; 0xbf34 <draw_menu(bool)+0x1a60>
    bf32:	51 c1       	rjmp	.+674    	; 0xc1d6 <draw_menu(bool)+0x1d02>
    bf34:	ca 53       	subi	r28, 0x3A	; 58
    bf36:	df 4f       	sbci	r29, 0xFF	; 255
    bf38:	28 81       	ld	r18, Y
    bf3a:	39 81       	ldd	r19, Y+1	; 0x01
    bf3c:	c6 5c       	subi	r28, 0xC6	; 198
    bf3e:	d0 40       	sbci	r29, 0x00	; 0
    bf40:	23 2b       	or	r18, r19
    bf42:	09 f4       	brne	.+2      	; 0xbf46 <draw_menu(bool)+0x1a72>
    bf44:	48 c1       	rjmp	.+656    	; 0xc1d6 <draw_menu(bool)+0x1d02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
    {
      loop_i = 0;
    bf46:	ce 54       	subi	r28, 0x4E	; 78
    bf48:	df 4f       	sbci	r29, 0xFF	; 255
    bf4a:	18 82       	st	Y, r1
    bf4c:	c2 5b       	subi	r28, 0xB2	; 178
    bf4e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
    bf50:	f2 01       	movw	r30, r4
    bf52:	e0 54       	subi	r30, 0x40	; 64
    bf54:	fe 4f       	sbci	r31, 0xFE	; 254
    bf56:	e6 0d       	add	r30, r6
    bf58:	f7 1d       	adc	r31, r7
    bf5a:	25 91       	lpm	r18, Z+
    bf5c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    bf5e:	c2 01       	movw	r24, r4
    bf60:	85 54       	subi	r24, 0x45	; 69
    bf62:	9e 4f       	sbci	r25, 0xFE	; 254
    bf64:	a3 01       	movw	r20, r6
    bf66:	48 0f       	add	r20, r24
    bf68:	59 1f       	adc	r21, r25
    bf6a:	ca 54       	subi	r28, 0x4A	; 74
    bf6c:	df 4f       	sbci	r29, 0xFF	; 255
    bf6e:	59 83       	std	Y+1, r21	; 0x01
    bf70:	48 83       	st	Y, r20
    bf72:	c6 5b       	subi	r28, 0xB6	; 182
    bf74:	d0 40       	sbci	r29, 0x00	; 0
    bf76:	fa 01       	movw	r30, r20
    bf78:	84 91       	lpm	r24, Z
    bf7a:	cd 54       	subi	r28, 0x4D	; 77
    bf7c:	df 4f       	sbci	r29, 0xFF	; 255
    bf7e:	68 81       	ld	r22, Y
    bf80:	c3 5b       	subi	r28, 0xB3	; 179
    bf82:	d0 40       	sbci	r29, 0x00	; 0
    bf84:	70 e0       	ldi	r23, 0x00	; 0
    bf86:	40 e0       	ldi	r20, 0x00	; 0
    bf88:	90 e0       	ldi	r25, 0x00	; 0
    bf8a:	f9 01       	movw	r30, r18
    bf8c:	19 95       	eicall
    bf8e:	cf 54       	subi	r28, 0x4F	; 79
    bf90:	df 4f       	sbci	r29, 0xFF	; 255
    bf92:	88 83       	st	Y, r24
    bf94:	c1 5b       	subi	r28, 0xB1	; 177
    bf96:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    bf98:	f2 01       	movw	r30, r4
    bf9a:	e6 54       	subi	r30, 0x46	; 70
    bf9c:	fe 4f       	sbci	r31, 0xFE	; 254
    bf9e:	e6 0d       	add	r30, r6
    bfa0:	f7 1d       	adc	r31, r7
    bfa2:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
      if (slider_active != MENU_SLIDER_OFF)
    bfa4:	4f 3f       	cpi	r20, 0xFF	; 255
    bfa6:	b9 f0       	breq	.+46     	; 0xbfd6 <draw_menu(bool)+0x1b02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    bfa8:	f2 01       	movw	r30, r4
    bfaa:	e8 54       	subi	r30, 0x48	; 72
    bfac:	fe 4f       	sbci	r31, 0xFE	; 254
    bfae:	e6 0d       	add	r30, r6
    bfb0:	f7 1d       	adc	r31, r7
    bfb2:	24 91       	lpm	r18, Z
    bfb4:	f2 01       	movw	r30, r4
    bfb6:	e7 54       	subi	r30, 0x47	; 71
    bfb8:	fe 4f       	sbci	r31, 0xFE	; 254
    bfba:	e6 0d       	add	r30, r6
    bfbc:	f7 1d       	adc	r31, r7
    bfbe:	e4 91       	lpm	r30, Z
    bfc0:	2e 9f       	mul	r18, r30
    bfc2:	20 2d       	mov	r18, r0
    bfc4:	11 24       	eor	r1, r1
    bfc6:	be 01       	movw	r22, r28
    bfc8:	6f 54       	subi	r22, 0x4F	; 79
    bfca:	7f 4f       	sbci	r23, 0xFF	; 255
    bfcc:	ce 01       	movw	r24, r28
    bfce:	8e 54       	subi	r24, 0x4E	; 78
    bfd0:	9f 4f       	sbci	r25, 0xFF	; 255
    bfd2:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    bfd6:	ce 54       	subi	r28, 0x4E	; 78
    bfd8:	df 4f       	sbci	r29, 0xFF	; 255
    bfda:	a8 80       	ld	r10, Y
    bfdc:	c2 5b       	subi	r28, 0xB2	; 178
    bfde:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
      while (loop_i < loop_cnt)
    bfe0:	cf 54       	subi	r28, 0x4F	; 79
    bfe2:	df 4f       	sbci	r29, 0xFF	; 255
    bfe4:	88 80       	ld	r8, Y
    bfe6:	c1 5b       	subi	r28, 0xB1	; 177
    bfe8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    bfea:	c2 01       	movw	r24, r4
    bfec:	84 55       	subi	r24, 0x54	; 84
    bfee:	9e 4f       	sbci	r25, 0xFE	; 254
    bff0:	93 01       	movw	r18, r6
    bff2:	28 0f       	add	r18, r24
    bff4:	39 1f       	adc	r19, r25
    bff6:	c4 54       	subi	r28, 0x44	; 68
    bff8:	df 4f       	sbci	r29, 0xFF	; 255
    bffa:	39 83       	std	Y+1, r19	; 0x01
    bffc:	28 83       	st	Y, r18
    bffe:	cc 5b       	subi	r28, 0xBC	; 188
    c000:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    c002:	12 01       	movw	r2, r4
    c004:	32 e5       	ldi	r19, 0x52	; 82
    c006:	23 1a       	sub	r2, r19
    c008:	3e ef       	ldi	r19, 0xFE	; 254
    c00a:	33 0a       	sbc	r3, r19
    c00c:	26 0c       	add	r2, r6
    c00e:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    c010:	0b 96       	adiw	r24, 0x0b	; 11
    c012:	a3 01       	movw	r20, r6
    c014:	48 0f       	add	r20, r24
    c016:	59 1f       	adc	r21, r25
    c018:	c2 54       	subi	r28, 0x42	; 66
    c01a:	df 4f       	sbci	r29, 0xFF	; 255
    c01c:	59 83       	std	Y+1, r21	; 0x01
    c01e:	48 83       	st	Y, r20
    c020:	ce 5b       	subi	r28, 0xBE	; 190
    c022:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    c024:	01 97       	sbiw	r24, 0x01	; 1
    c026:	b3 01       	movw	r22, r6
    c028:	68 0f       	add	r22, r24
    c02a:	79 1f       	adc	r23, r25
    c02c:	c8 53       	subi	r28, 0x38	; 56
    c02e:	df 4f       	sbci	r29, 0xFF	; 255
    c030:	79 83       	std	Y+1, r23	; 0x01
    c032:	68 83       	st	Y, r22
    c034:	c8 5c       	subi	r28, 0xC8	; 200
    c036:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    c038:	01 97       	sbiw	r24, 0x01	; 1
    c03a:	f3 01       	movw	r30, r6
    c03c:	e8 0f       	add	r30, r24
    c03e:	f9 1f       	adc	r31, r25
    c040:	c6 53       	subi	r28, 0x36	; 54
    c042:	df 4f       	sbci	r29, 0xFF	; 255
    c044:	f9 83       	std	Y+1, r31	; 0x01
    c046:	e8 83       	st	Y, r30
    c048:	ca 5c       	subi	r28, 0xCA	; 202
    c04a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    c04c:	03 97       	sbiw	r24, 0x03	; 3
    c04e:	93 01       	movw	r18, r6
    c050:	28 0f       	add	r18, r24
    c052:	39 1f       	adc	r19, r25
    c054:	c3 53       	subi	r28, 0x33	; 51
    c056:	df 4f       	sbci	r29, 0xFF	; 255
    c058:	39 83       	std	Y+1, r19	; 0x01
    c05a:	28 83       	st	Y, r18
    c05c:	cd 5c       	subi	r28, 0xCD	; 205
    c05e:	d0 40       	sbci	r29, 0x00	; 0
    c060:	02 97       	sbiw	r24, 0x02	; 2
    c062:	a3 01       	movw	r20, r6
    c064:	48 0f       	add	r20, r24
    c066:	59 1f       	adc	r21, r25
    c068:	c1 53       	subi	r28, 0x31	; 49
    c06a:	df 4f       	sbci	r29, 0xFF	; 255
    c06c:	59 83       	std	Y+1, r21	; 0x01
    c06e:	48 83       	st	Y, r20
    c070:	cf 5c       	subi	r28, 0xCF	; 207
    c072:	d0 40       	sbci	r29, 0x00	; 0
    c074:	d1 2c       	mov	r13, r1
    c076:	c1 2c       	mov	r12, r1
    c078:	ba 2c       	mov	r11, r10
    c07a:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    c07c:	b8 14       	cp	r11, r8
    c07e:	08 f0       	brcs	.+2      	; 0xc082 <draw_menu(bool)+0x1bae>
    c080:	aa c0       	rjmp	.+340    	; 0xc1d6 <draw_menu(bool)+0x1d02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    c082:	c4 54       	subi	r28, 0x44	; 68
    c084:	df 4f       	sbci	r29, 0xFF	; 255
    c086:	e8 81       	ld	r30, Y
    c088:	f9 81       	ldd	r31, Y+1	; 0x01
    c08a:	cc 5b       	subi	r28, 0xBC	; 188
    c08c:	d0 40       	sbci	r29, 0x00	; 0
    c08e:	25 91       	lpm	r18, Z+
    c090:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    c092:	f1 01       	movw	r30, r2
    c094:	85 91       	lpm	r24, Z+
    c096:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    c098:	c2 54       	subi	r28, 0x42	; 66
    c09a:	df 4f       	sbci	r29, 0xFF	; 255
    c09c:	e8 81       	ld	r30, Y
    c09e:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a0:	ce 5b       	subi	r28, 0xBE	; 190
    c0a2:	d0 40       	sbci	r29, 0x00	; 0
    c0a4:	44 91       	lpm	r20, Z
    c0a6:	44 23       	and	r20, r20
    c0a8:	09 f4       	brne	.+2      	; 0xc0ac <draw_menu(bool)+0x1bd8>
    c0aa:	97 c0       	rjmp	.+302    	; 0xc1da <draw_menu(bool)+0x1d06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    c0ac:	c6 54       	subi	r28, 0x46	; 70
    c0ae:	df 4f       	sbci	r29, 0xFF	; 255
    c0b0:	48 81       	ld	r20, Y
    c0b2:	59 81       	ldd	r21, Y+1	; 0x01
    c0b4:	ca 5b       	subi	r28, 0xBA	; 186
    c0b6:	d0 40       	sbci	r29, 0x00	; 0
    c0b8:	48 0f       	add	r20, r24
    c0ba:	59 1f       	adc	r21, r25
    c0bc:	ce 53       	subi	r28, 0x3E	; 62
    c0be:	df 4f       	sbci	r29, 0xFF	; 255
    c0c0:	59 83       	std	Y+1, r21	; 0x01
    c0c2:	48 83       	st	Y, r20
    c0c4:	c2 5c       	subi	r28, 0xC2	; 194
    c0c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    c0c8:	c2 54       	subi	r28, 0x42	; 66
    c0ca:	df 4f       	sbci	r29, 0xFF	; 255
    c0cc:	e8 81       	ld	r30, Y
    c0ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c0d0:	ce 5b       	subi	r28, 0xBE	; 190
    c0d2:	d0 40       	sbci	r29, 0x00	; 0
    c0d4:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    c0d6:	c8 54       	subi	r28, 0x48	; 72
    c0d8:	df 4f       	sbci	r29, 0xFF	; 255
    c0da:	48 81       	ld	r20, Y
    c0dc:	59 81       	ldd	r21, Y+1	; 0x01
    c0de:	c8 5b       	subi	r28, 0xB8	; 184
    c0e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    c0e2:	81 30       	cpi	r24, 0x01	; 1
    c0e4:	e9 f4       	brne	.+58     	; 0xc120 <draw_menu(bool)+0x1c4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    c0e6:	c4 54       	subi	r28, 0x44	; 68
    c0e8:	df 4f       	sbci	r29, 0xFF	; 255
    c0ea:	e8 81       	ld	r30, Y
    c0ec:	f9 81       	ldd	r31, Y+1	; 0x01
    c0ee:	cc 5b       	subi	r28, 0xBC	; 188
    c0f0:	d0 40       	sbci	r29, 0x00	; 0
    c0f2:	85 91       	lpm	r24, Z+
    c0f4:	94 91       	lpm	r25, Z
    c0f6:	c6 53       	subi	r28, 0x36	; 54
    c0f8:	df 4f       	sbci	r29, 0xFF	; 255
    c0fa:	e8 81       	ld	r30, Y
    c0fc:	f9 81       	ldd	r31, Y+1	; 0x01
    c0fe:	ca 5c       	subi	r28, 0xCA	; 202
    c100:	d0 40       	sbci	r29, 0x00	; 0
    c102:	44 91       	lpm	r20, Z
    c104:	c8 54       	subi	r28, 0x48	; 72
    c106:	df 4f       	sbci	r29, 0xFF	; 255
    c108:	28 81       	ld	r18, Y
    c10a:	39 81       	ldd	r19, Y+1	; 0x01
    c10c:	c8 5b       	subi	r28, 0xB8	; 184
    c10e:	d0 40       	sbci	r29, 0x00	; 0
    c110:	82 0f       	add	r24, r18
    c112:	93 1f       	adc	r25, r19
    c114:	4c 9d       	mul	r20, r12
    c116:	90 01       	movw	r18, r0
    c118:	4d 9d       	mul	r20, r13
    c11a:	30 0d       	add	r19, r0
    c11c:	11 24       	eor	r1, r1
    c11e:	ac 01       	movw	r20, r24
    c120:	42 0f       	add	r20, r18
    c122:	53 1f       	adc	r21, r19
    c124:	c0 54       	subi	r28, 0x40	; 64
    c126:	df 4f       	sbci	r29, 0xFF	; 255
    c128:	59 83       	std	Y+1, r21	; 0x01
    c12a:	48 83       	st	Y, r20
    c12c:	c0 5c       	subi	r28, 0xC0	; 192
    c12e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    c130:	c3 53       	subi	r28, 0x33	; 51
    c132:	df 4f       	sbci	r29, 0xFF	; 255
    c134:	e8 81       	ld	r30, Y
    c136:	f9 81       	ldd	r31, Y+1	; 0x01
    c138:	cd 5c       	subi	r28, 0xCD	; 205
    c13a:	d0 40       	sbci	r29, 0x00	; 0
    c13c:	25 91       	lpm	r18, Z+
    c13e:	34 91       	lpm	r19, Z
    c140:	c1 53       	subi	r28, 0x31	; 49
    c142:	df 4f       	sbci	r29, 0xFF	; 255
    c144:	e8 81       	ld	r30, Y
    c146:	f9 81       	ldd	r31, Y+1	; 0x01
    c148:	cf 5c       	subi	r28, 0xCF	; 207
    c14a:	d0 40       	sbci	r29, 0x00	; 0
    c14c:	45 91       	lpm	r20, Z+
    c14e:	54 91       	lpm	r21, Z
    c150:	ca 53       	subi	r28, 0x3A	; 58
    c152:	df 4f       	sbci	r29, 0xFF	; 255
    c154:	e8 80       	ld	r14, Y
    c156:	f9 80       	ldd	r15, Y+1	; 0x01
    c158:	c6 5c       	subi	r28, 0xC6	; 198
    c15a:	d0 40       	sbci	r29, 0x00	; 0
    c15c:	cc 53       	subi	r28, 0x3C	; 60
    c15e:	df 4f       	sbci	r29, 0xFF	; 255
    c160:	08 81       	ld	r16, Y
    c162:	19 81       	ldd	r17, Y+1	; 0x01
    c164:	c4 5c       	subi	r28, 0xC4	; 196
    c166:	d0 40       	sbci	r29, 0x00	; 0
    c168:	ce 53       	subi	r28, 0x3E	; 62
    c16a:	df 4f       	sbci	r29, 0xFF	; 255
    c16c:	68 81       	ld	r22, Y
    c16e:	79 81       	ldd	r23, Y+1	; 0x01
    c170:	c2 5c       	subi	r28, 0xC2	; 194
    c172:	d0 40       	sbci	r29, 0x00	; 0
    c174:	c0 54       	subi	r28, 0x40	; 64
    c176:	df 4f       	sbci	r29, 0xFF	; 255
    c178:	88 81       	ld	r24, Y
    c17a:	99 81       	ldd	r25, Y+1	; 0x01
    c17c:	c0 5c       	subi	r28, 0xC0	; 192
    c17e:	d0 40       	sbci	r29, 0x00	; 0
    c180:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c184:	18 2f       	mov	r17, r24
    c186:	5f ef       	ldi	r21, 0xFF	; 255
    c188:	c5 1a       	sub	r12, r21
    c18a:	d5 0a       	sbc	r13, r21
    c18c:	88 23       	and	r24, r24
    c18e:	09 f4       	brne	.+2      	; 0xc192 <draw_menu(bool)+0x1cbe>
    c190:	73 cf       	rjmp	.-282    	; 0xc078 <draw_menu(bool)+0x1ba4>
    c192:	ce 54       	subi	r28, 0x4E	; 78
    c194:	df 4f       	sbci	r29, 0xFF	; 255
    c196:	b8 82       	st	Y, r11
    c198:	c2 5b       	subi	r28, 0xB2	; 178
    c19a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1945
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_button_1->dyn_button_onclick);
    c19c:	f2 01       	movw	r30, r4
    c19e:	e2 54       	subi	r30, 0x42	; 66
    c1a0:	fe 4f       	sbci	r31, 0xFE	; 254
    c1a2:	e6 0d       	add	r30, r6
    c1a4:	f7 1d       	adc	r31, r7
    c1a6:	25 91       	lpm	r18, Z+
    c1a8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    c1aa:	ca 54       	subi	r28, 0x4A	; 74
    c1ac:	df 4f       	sbci	r29, 0xFF	; 255
    c1ae:	e8 81       	ld	r30, Y
    c1b0:	f9 81       	ldd	r31, Y+1	; 0x01
    c1b2:	c6 5b       	subi	r28, 0xB6	; 182
    c1b4:	d0 40       	sbci	r29, 0x00	; 0
    c1b6:	84 91       	lpm	r24, Z
    c1b8:	cd 54       	subi	r28, 0x4D	; 77
    c1ba:	df 4f       	sbci	r29, 0xFF	; 255
    c1bc:	68 81       	ld	r22, Y
    c1be:	c3 5b       	subi	r28, 0xB3	; 179
    c1c0:	d0 40       	sbci	r29, 0x00	; 0
    c1c2:	70 e0       	ldi	r23, 0x00	; 0
    c1c4:	4b 2d       	mov	r20, r11
    c1c6:	90 e0       	ldi	r25, 0x00	; 0
    c1c8:	f9 01       	movw	r30, r18
    c1ca:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
          ret = true;
    c1cc:	c4 53       	subi	r28, 0x34	; 52
    c1ce:	df 4f       	sbci	r29, 0xFF	; 255
    c1d0:	18 83       	st	Y, r17
    c1d2:	cc 5c       	subi	r28, 0xCC	; 204
    c1d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1896
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    c1d6:	93 94       	inc	r9
    c1d8:	03 cd       	rjmp	.-1530   	; 0xbbe0 <draw_menu(bool)+0x170c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    c1da:	f1 01       	movw	r30, r2
    c1dc:	85 91       	lpm	r24, Z+
    c1de:	94 91       	lpm	r25, Z
    c1e0:	c8 53       	subi	r28, 0x38	; 56
    c1e2:	df 4f       	sbci	r29, 0xFF	; 255
    c1e4:	e8 81       	ld	r30, Y
    c1e6:	f9 81       	ldd	r31, Y+1	; 0x01
    c1e8:	c8 5c       	subi	r28, 0xC8	; 200
    c1ea:	d0 40       	sbci	r29, 0x00	; 0
    c1ec:	64 91       	lpm	r22, Z
    c1ee:	c6 54       	subi	r28, 0x46	; 70
    c1f0:	df 4f       	sbci	r29, 0xFF	; 255
    c1f2:	48 81       	ld	r20, Y
    c1f4:	59 81       	ldd	r21, Y+1	; 0x01
    c1f6:	ca 5b       	subi	r28, 0xBA	; 186
    c1f8:	d0 40       	sbci	r29, 0x00	; 0
    c1fa:	84 0f       	add	r24, r20
    c1fc:	95 1f       	adc	r25, r21
    c1fe:	6c 9d       	mul	r22, r12
    c200:	a0 01       	movw	r20, r0
    c202:	6d 9d       	mul	r22, r13
    c204:	50 0d       	add	r21, r0
    c206:	11 24       	eor	r1, r1
    c208:	bc 01       	movw	r22, r24
    c20a:	64 0f       	add	r22, r20
    c20c:	75 1f       	adc	r23, r21
    c20e:	ce 53       	subi	r28, 0x3E	; 62
    c210:	df 4f       	sbci	r29, 0xFF	; 255
    c212:	79 83       	std	Y+1, r23	; 0x01
    c214:	68 83       	st	Y, r22
    c216:	c2 5c       	subi	r28, 0xC2	; 194
    c218:	d0 40       	sbci	r29, 0x00	; 0
    c21a:	56 cf       	rjmp	.-340    	; 0xc0c8 <draw_menu(bool)+0x1bf4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1955
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    c21c:	c4 53       	subi	r28, 0x34	; 52
    c21e:	df 4f       	sbci	r29, 0xFF	; 255
    c220:	f8 81       	ld	r31, Y
    c222:	cc 5c       	subi	r28, 0xCC	; 204
    c224:	d0 40       	sbci	r29, 0x00	; 0
    c226:	f1 11       	cpse	r31, r1
    c228:	58 c4       	rjmp	.+2224   	; 0xcada <draw_menu(bool)+0x2606>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    c22a:	ca 54       	subi	r28, 0x4A	; 74
    c22c:	df 4f       	sbci	r29, 0xFF	; 255
    c22e:	18 82       	st	Y, r1
    c230:	c6 5b       	subi	r28, 0xB6	; 182
    c232:	d0 40       	sbci	r29, 0x00	; 0
    c234:	93 01       	movw	r18, r6
    c236:	2c 53       	subi	r18, 0x3C	; 60
    c238:	3d 4f       	sbci	r19, 0xFD	; 253
    c23a:	c0 52       	subi	r28, 0x20	; 32
    c23c:	df 4f       	sbci	r29, 0xFF	; 255
    c23e:	39 83       	std	Y+1, r19	; 0x01
    c240:	28 83       	st	Y, r18
    c242:	c0 5e       	subi	r28, 0xE0	; 224
    c244:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1996
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    c246:	ae 01       	movw	r20, r28
    c248:	4f 57       	subi	r20, 0x7F	; 127
    c24a:	5f 4f       	sbci	r21, 0xFF	; 255
    c24c:	cc 54       	subi	r28, 0x4C	; 76
    c24e:	df 4f       	sbci	r29, 0xFF	; 255
    c250:	59 83       	std	Y+1, r21	; 0x01
    c252:	48 83       	st	Y, r20
    c254:	c4 5b       	subi	r28, 0xB4	; 180
    c256:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    c258:	c0 52       	subi	r28, 0x20	; 32
    c25a:	df 4f       	sbci	r29, 0xFF	; 255
    c25c:	e8 81       	ld	r30, Y
    c25e:	f9 81       	ldd	r31, Y+1	; 0x01
    c260:	c0 5e       	subi	r28, 0xE0	; 224
    c262:	d0 40       	sbci	r29, 0x00	; 0
    c264:	84 91       	lpm	r24, Z
    c266:	ca 54       	subi	r28, 0x4A	; 74
    c268:	df 4f       	sbci	r29, 0xFF	; 255
    c26a:	f8 81       	ld	r31, Y
    c26c:	c6 5b       	subi	r28, 0xB6	; 182
    c26e:	d0 40       	sbci	r29, 0x00	; 0
    c270:	f8 17       	cp	r31, r24
    c272:	08 f0       	brcs	.+2      	; 0xc276 <draw_menu(bool)+0x1da2>
    c274:	38 c4       	rjmp	.+2160   	; 0xcae6 <draw_menu(bool)+0x2612>
    c276:	2e e1       	ldi	r18, 0x1E	; 30
    c278:	f2 9f       	mul	r31, r18
    c27a:	20 01       	movw	r4, r0
    c27c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1959
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    c27e:	f2 01       	movw	r30, r4
    c280:	e4 54       	subi	r30, 0x44	; 68
    c282:	fd 4f       	sbci	r31, 0xFD	; 253
    c284:	e6 0d       	add	r30, r6
    c286:	f7 1d       	adc	r31, r7
    c288:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
    if (enable_redraw(rdr, redraw_class) == true)
    c28a:	cf 52       	subi	r28, 0x2F	; 47
    c28c:	df 4f       	sbci	r29, 0xFF	; 255
    c28e:	68 81       	ld	r22, Y
    c290:	c1 5d       	subi	r28, 0xD1	; 209
    c292:	d0 40       	sbci	r29, 0x00	; 0
    c294:	0e 94 8e 3a 	call	0x751c	; 0x751c <enable_redraw(unsigned char, unsigned char)>
    c298:	88 23       	and	r24, r24
    c29a:	09 f4       	brne	.+2      	; 0xc29e <draw_menu(bool)+0x1dca>
    c29c:	4c c2       	rjmp	.+1176   	; 0xc736 <draw_menu(bool)+0x2262>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1962
    {
      loop_i = 0;
    c29e:	ce 54       	subi	r28, 0x4E	; 78
    c2a0:	df 4f       	sbci	r29, 0xFF	; 255
    c2a2:	18 82       	st	Y, r1
    c2a4:	c2 5b       	subi	r28, 0xB2	; 178
    c2a6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1965
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
    c2a8:	f2 01       	movw	r30, r4
    c2aa:	e8 54       	subi	r30, 0x48	; 72
    c2ac:	fd 4f       	sbci	r31, 0xFD	; 253
    c2ae:	e6 0d       	add	r30, r6
    c2b0:	f7 1d       	adc	r31, r7
    c2b2:	25 91       	lpm	r18, Z+
    c2b4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    c2b6:	c2 01       	movw	r24, r4
    c2b8:	8d 54       	subi	r24, 0x4D	; 77
    c2ba:	9d 4f       	sbci	r25, 0xFD	; 253
    c2bc:	a3 01       	movw	r20, r6
    c2be:	48 0f       	add	r20, r24
    c2c0:	59 1f       	adc	r21, r25
    c2c2:	c4 54       	subi	r28, 0x44	; 68
    c2c4:	df 4f       	sbci	r29, 0xFF	; 255
    c2c6:	59 83       	std	Y+1, r21	; 0x01
    c2c8:	48 83       	st	Y, r20
    c2ca:	cc 5b       	subi	r28, 0xBC	; 188
    c2cc:	d0 40       	sbci	r29, 0x00	; 0
    c2ce:	fa 01       	movw	r30, r20
    c2d0:	84 91       	lpm	r24, Z
    c2d2:	cd 54       	subi	r28, 0x4D	; 77
    c2d4:	df 4f       	sbci	r29, 0xFF	; 255
    c2d6:	68 81       	ld	r22, Y
    c2d8:	c3 5b       	subi	r28, 0xB3	; 179
    c2da:	d0 40       	sbci	r29, 0x00	; 0
    c2dc:	70 e0       	ldi	r23, 0x00	; 0
    c2de:	40 e0       	ldi	r20, 0x00	; 0
    c2e0:	90 e0       	ldi	r25, 0x00	; 0
    c2e2:	f9 01       	movw	r30, r18
    c2e4:	19 95       	eicall
    c2e6:	cf 54       	subi	r28, 0x4F	; 79
    c2e8:	df 4f       	sbci	r29, 0xFF	; 255
    c2ea:	88 83       	st	Y, r24
    c2ec:	c1 5b       	subi	r28, 0xB1	; 177
    c2ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
    c2f0:	f2 01       	movw	r30, r4
    c2f2:	ec 54       	subi	r30, 0x4C	; 76
    c2f4:	fd 4f       	sbci	r31, 0xFD	; 253
    c2f6:	e6 0d       	add	r30, r6
    c2f8:	f7 1d       	adc	r31, r7
    c2fa:	25 91       	lpm	r18, Z+
    c2fc:	34 91       	lpm	r19, Z
    c2fe:	ce 51       	subi	r28, 0x1E	; 30
    c300:	df 4f       	sbci	r29, 0xFF	; 255
    c302:	39 83       	std	Y+1, r19	; 0x01
    c304:	28 83       	st	Y, r18
    c306:	c2 5e       	subi	r28, 0xE2	; 226
    c308:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1968
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    c30a:	f2 01       	movw	r30, r4
    c30c:	ee 54       	subi	r30, 0x4E	; 78
    c30e:	fd 4f       	sbci	r31, 0xFD	; 253
    c310:	e6 0d       	add	r30, r6
    c312:	f7 1d       	adc	r31, r7
    c314:	44 91       	lpm	r20, Z
    c316:	c2 01       	movw	r24, r4
    c318:	80 55       	subi	r24, 0x50	; 80
    c31a:	9d 4f       	sbci	r25, 0xFD	; 253
    c31c:	b3 01       	movw	r22, r6
    c31e:	68 0f       	add	r22, r24
    c320:	79 1f       	adc	r23, r25
    c322:	c1 53       	subi	r28, 0x31	; 49
    c324:	df 4f       	sbci	r29, 0xFF	; 255
    c326:	79 83       	std	Y+1, r23	; 0x01
    c328:	68 83       	st	Y, r22
    c32a:	cf 5c       	subi	r28, 0xCF	; 207
    c32c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
      if (slider_active != MENU_SLIDER_OFF)
    c32e:	4f 3f       	cpi	r20, 0xFF	; 255
    c330:	99 f0       	breq	.+38     	; 0xc358 <draw_menu(bool)+0x1e84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    c332:	fb 01       	movw	r30, r22
    c334:	24 91       	lpm	r18, Z
    c336:	f2 01       	movw	r30, r4
    c338:	ef 54       	subi	r30, 0x4F	; 79
    c33a:	fd 4f       	sbci	r31, 0xFD	; 253
    c33c:	e6 0d       	add	r30, r6
    c33e:	f7 1d       	adc	r31, r7
    c340:	e4 91       	lpm	r30, Z
    c342:	2e 9f       	mul	r18, r30
    c344:	20 2d       	mov	r18, r0
    c346:	11 24       	eor	r1, r1
    c348:	be 01       	movw	r22, r28
    c34a:	6f 54       	subi	r22, 0x4F	; 79
    c34c:	7f 4f       	sbci	r23, 0xFF	; 255
    c34e:	ce 01       	movw	r24, r28
    c350:	8e 54       	subi	r24, 0x4E	; 78
    c352:	9f 4f       	sbci	r25, 0xFF	; 255
    c354:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    c358:	c2 01       	movw	r24, r4
    c35a:	81 55       	subi	r24, 0x51	; 81
    c35c:	9d 4f       	sbci	r25, 0xFD	; 253
    c35e:	93 01       	movw	r18, r6
    c360:	28 0f       	add	r18, r24
    c362:	39 1f       	adc	r19, r25
    c364:	c2 54       	subi	r28, 0x42	; 66
    c366:	df 4f       	sbci	r29, 0xFF	; 255
    c368:	39 83       	std	Y+1, r19	; 0x01
    c36a:	28 83       	st	Y, r18
    c36c:	ce 5b       	subi	r28, 0xBE	; 190
    c36e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    c370:	40 97       	sbiw	r24, 0x10	; 16
    c372:	a3 01       	movw	r20, r6
    c374:	48 0f       	add	r20, r24
    c376:	59 1f       	adc	r21, r25
    c378:	c8 53       	subi	r28, 0x38	; 56
    c37a:	df 4f       	sbci	r29, 0xFF	; 255
    c37c:	59 83       	std	Y+1, r21	; 0x01
    c37e:	48 83       	st	Y, r20
    c380:	c8 5c       	subi	r28, 0xC8	; 200
    c382:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    c384:	12 01       	movw	r2, r4
    c386:	5f e5       	ldi	r21, 0x5F	; 95
    c388:	25 1a       	sub	r2, r21
    c38a:	5d ef       	ldi	r21, 0xFD	; 253
    c38c:	35 0a       	sbc	r3, r21
    c38e:	26 0c       	add	r2, r6
    c390:	37 1c       	adc	r3, r7
    c392:	0f 96       	adiw	r24, 0x0f	; 15
    c394:	b3 01       	movw	r22, r6
    c396:	68 0f       	add	r22, r24
    c398:	79 1f       	adc	r23, r25
    c39a:	c6 53       	subi	r28, 0x36	; 54
    c39c:	df 4f       	sbci	r29, 0xFF	; 255
    c39e:	79 83       	std	Y+1, r23	; 0x01
    c3a0:	68 83       	st	Y, r22
    c3a2:	ca 5c       	subi	r28, 0xCA	; 202
    c3a4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c3a6:	01 97       	sbiw	r24, 0x01	; 1
    c3a8:	f3 01       	movw	r30, r6
    c3aa:	e8 0f       	add	r30, r24
    c3ac:	f9 1f       	adc	r31, r25
    c3ae:	c3 53       	subi	r28, 0x33	; 51
    c3b0:	df 4f       	sbci	r29, 0xFF	; 255
    c3b2:	f9 83       	std	Y+1, r31	; 0x01
    c3b4:	e8 83       	st	Y, r30
    c3b6:	cd 5c       	subi	r28, 0xCD	; 205
    c3b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
    c3ba:	0d 96       	adiw	r24, 0x0d	; 13
    c3bc:	93 01       	movw	r18, r6
    c3be:	28 0f       	add	r18, r24
    c3c0:	39 1f       	adc	r19, r25
    c3c2:	ce 52       	subi	r28, 0x2E	; 46
    c3c4:	df 4f       	sbci	r29, 0xFF	; 255
    c3c6:	39 83       	std	Y+1, r19	; 0x01
    c3c8:	28 83       	st	Y, r18
    c3ca:	c2 5d       	subi	r28, 0xD2	; 210
    c3cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    c3ce:	0f 97       	sbiw	r24, 0x0f	; 15
    c3d0:	a3 01       	movw	r20, r6
    c3d2:	48 0f       	add	r20, r24
    c3d4:	59 1f       	adc	r21, r25
    c3d6:	cc 52       	subi	r28, 0x2C	; 44
    c3d8:	df 4f       	sbci	r29, 0xFF	; 255
    c3da:	59 83       	std	Y+1, r21	; 0x01
    c3dc:	48 83       	st	Y, r20
    c3de:	c4 5d       	subi	r28, 0xD4	; 212
    c3e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    c3e2:	02 97       	sbiw	r24, 0x02	; 2
    c3e4:	b3 01       	movw	r22, r6
    c3e6:	68 0f       	add	r22, r24
    c3e8:	79 1f       	adc	r23, r25
    c3ea:	ca 52       	subi	r28, 0x2A	; 42
    c3ec:	df 4f       	sbci	r29, 0xFF	; 255
    c3ee:	79 83       	std	Y+1, r23	; 0x01
    c3f0:	68 83       	st	Y, r22
    c3f2:	c6 5d       	subi	r28, 0xD6	; 214
    c3f4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    c3f6:	01 97       	sbiw	r24, 0x01	; 1
    c3f8:	f3 01       	movw	r30, r6
    c3fa:	e8 0f       	add	r30, r24
    c3fc:	f9 1f       	adc	r31, r25
    c3fe:	c8 52       	subi	r28, 0x28	; 40
    c400:	df 4f       	sbci	r29, 0xFF	; 255
    c402:	f9 83       	std	Y+1, r31	; 0x01
    c404:	e8 83       	st	Y, r30
    c406:	c8 5d       	subi	r28, 0xD8	; 216
    c408:	d0 40       	sbci	r29, 0x00	; 0
    c40a:	01 97       	sbiw	r24, 0x01	; 1
    c40c:	93 01       	movw	r18, r6
    c40e:	28 0f       	add	r18, r24
    c410:	39 1f       	adc	r19, r25
    c412:	c6 52       	subi	r28, 0x26	; 38
    c414:	df 4f       	sbci	r29, 0xFF	; 255
    c416:	39 83       	std	Y+1, r19	; 0x01
    c418:	28 83       	st	Y, r18
    c41a:	ca 5d       	subi	r28, 0xDA	; 218
    c41c:	d0 40       	sbci	r29, 0x00	; 0
    c41e:	02 97       	sbiw	r24, 0x02	; 2
    c420:	a3 01       	movw	r20, r6
    c422:	48 0f       	add	r20, r24
    c424:	59 1f       	adc	r21, r25
    c426:	c4 52       	subi	r28, 0x24	; 36
    c428:	df 4f       	sbci	r29, 0xFF	; 255
    c42a:	59 83       	std	Y+1, r21	; 0x01
    c42c:	48 83       	st	Y, r20
    c42e:	cc 5d       	subi	r28, 0xDC	; 220
    c430:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1999
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    c432:	02 97       	sbiw	r24, 0x02	; 2
    c434:	b3 01       	movw	r22, r6
    c436:	68 0f       	add	r22, r24
    c438:	79 1f       	adc	r23, r25
    c43a:	c2 52       	subi	r28, 0x22	; 34
    c43c:	df 4f       	sbci	r29, 0xFF	; 255
    c43e:	79 83       	std	Y+1, r23	; 0x01
    c440:	68 83       	st	Y, r22
    c442:	ce 5d       	subi	r28, 0xDE	; 222
    c444:	d0 40       	sbci	r29, 0x00	; 0
    c446:	91 2c       	mov	r9, r1
    c448:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    c44a:	ce 54       	subi	r28, 0x4E	; 78
    c44c:	df 4f       	sbci	r29, 0xFF	; 255
    c44e:	88 81       	ld	r24, Y
    c450:	c2 5b       	subi	r28, 0xB2	; 178
    c452:	d0 40       	sbci	r29, 0x00	; 0
    c454:	cf 54       	subi	r28, 0x4F	; 79
    c456:	df 4f       	sbci	r29, 0xFF	; 255
    c458:	98 81       	ld	r25, Y
    c45a:	c1 5b       	subi	r28, 0xB1	; 177
    c45c:	d0 40       	sbci	r29, 0x00	; 0
    c45e:	89 17       	cp	r24, r25
    c460:	08 f0       	brcs	.+2      	; 0xc464 <draw_menu(bool)+0x1f90>
    c462:	69 c1       	rjmp	.+722    	; 0xc736 <draw_menu(bool)+0x2262>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    c464:	c2 54       	subi	r28, 0x42	; 66
    c466:	df 4f       	sbci	r29, 0xFF	; 255
    c468:	e8 81       	ld	r30, Y
    c46a:	f9 81       	ldd	r31, Y+1	; 0x01
    c46c:	ce 5b       	subi	r28, 0xBE	; 190
    c46e:	d0 40       	sbci	r29, 0x00	; 0
    c470:	94 91       	lpm	r25, Z
    c472:	91 11       	cpse	r25, r1
    c474:	34 c0       	rjmp	.+104    	; 0xc4de <draw_menu(bool)+0x200a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    c476:	c8 53       	subi	r28, 0x38	; 56
    c478:	df 4f       	sbci	r29, 0xFF	; 255
    c47a:	e8 81       	ld	r30, Y
    c47c:	f9 81       	ldd	r31, Y+1	; 0x01
    c47e:	c8 5c       	subi	r28, 0xC8	; 200
    c480:	d0 40       	sbci	r29, 0x00	; 0
    c482:	25 91       	lpm	r18, Z+
    c484:	34 91       	lpm	r19, Z
    c486:	c8 54       	subi	r28, 0x48	; 72
    c488:	df 4f       	sbci	r29, 0xFF	; 255
    c48a:	48 81       	ld	r20, Y
    c48c:	59 81       	ldd	r21, Y+1	; 0x01
    c48e:	c8 5b       	subi	r28, 0xB8	; 184
    c490:	d0 40       	sbci	r29, 0x00	; 0
    c492:	42 0f       	add	r20, r18
    c494:	53 1f       	adc	r21, r19
    c496:	c0 54       	subi	r28, 0x40	; 64
    c498:	df 4f       	sbci	r29, 0xFF	; 255
    c49a:	59 83       	std	Y+1, r21	; 0x01
    c49c:	48 83       	st	Y, r20
    c49e:	c0 5c       	subi	r28, 0xC0	; 192
    c4a0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1976
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    c4a2:	f1 01       	movw	r30, r2
    c4a4:	25 91       	lpm	r18, Z+
    c4a6:	34 91       	lpm	r19, Z
    c4a8:	c6 53       	subi	r28, 0x36	; 54
    c4aa:	df 4f       	sbci	r29, 0xFF	; 255
    c4ac:	e8 81       	ld	r30, Y
    c4ae:	f9 81       	ldd	r31, Y+1	; 0x01
    c4b0:	ca 5c       	subi	r28, 0xCA	; 202
    c4b2:	d0 40       	sbci	r29, 0x00	; 0
    c4b4:	94 91       	lpm	r25, Z
    c4b6:	c6 54       	subi	r28, 0x46	; 70
    c4b8:	df 4f       	sbci	r29, 0xFF	; 255
    c4ba:	48 81       	ld	r20, Y
    c4bc:	59 81       	ldd	r21, Y+1	; 0x01
    c4be:	ca 5b       	subi	r28, 0xBA	; 186
    c4c0:	d0 40       	sbci	r29, 0x00	; 0
    c4c2:	24 0f       	add	r18, r20
    c4c4:	35 1f       	adc	r19, r21
    c4c6:	b9 01       	movw	r22, r18
    c4c8:	9f 9d       	mul	r25, r15
    c4ca:	60 0d       	add	r22, r0
    c4cc:	71 1d       	adc	r23, r1
    c4ce:	11 24       	eor	r1, r1
    c4d0:	ce 53       	subi	r28, 0x3E	; 62
    c4d2:	df 4f       	sbci	r29, 0xFF	; 255
    c4d4:	79 83       	std	Y+1, r23	; 0x01
    c4d6:	68 83       	st	Y, r22
    c4d8:	c2 5c       	subi	r28, 0xC2	; 194
    c4da:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1977
          loop_t++;
    c4dc:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1979
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    c4de:	c2 54       	subi	r28, 0x42	; 66
    c4e0:	df 4f       	sbci	r29, 0xFF	; 255
    c4e2:	e8 81       	ld	r30, Y
    c4e4:	f9 81       	ldd	r31, Y+1	; 0x01
    c4e6:	ce 5b       	subi	r28, 0xBE	; 190
    c4e8:	d0 40       	sbci	r29, 0x00	; 0
    c4ea:	94 91       	lpm	r25, Z
    c4ec:	91 30       	cpi	r25, 0x01	; 1
    c4ee:	09 f0       	breq	.+2      	; 0xc4f2 <draw_menu(bool)+0x201e>
    c4f0:	34 c0       	rjmp	.+104    	; 0xc55a <draw_menu(bool)+0x2086>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    c4f2:	f1 01       	movw	r30, r2
    c4f4:	25 91       	lpm	r18, Z+
    c4f6:	34 91       	lpm	r19, Z
    c4f8:	c6 54       	subi	r28, 0x46	; 70
    c4fa:	df 4f       	sbci	r29, 0xFF	; 255
    c4fc:	48 81       	ld	r20, Y
    c4fe:	59 81       	ldd	r21, Y+1	; 0x01
    c500:	ca 5b       	subi	r28, 0xBA	; 186
    c502:	d0 40       	sbci	r29, 0x00	; 0
    c504:	42 0f       	add	r20, r18
    c506:	53 1f       	adc	r21, r19
    c508:	ce 53       	subi	r28, 0x3E	; 62
    c50a:	df 4f       	sbci	r29, 0xFF	; 255
    c50c:	59 83       	std	Y+1, r21	; 0x01
    c50e:	48 83       	st	Y, r20
    c510:	c2 5c       	subi	r28, 0xC2	; 194
    c512:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1982
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c514:	c8 53       	subi	r28, 0x38	; 56
    c516:	df 4f       	sbci	r29, 0xFF	; 255
    c518:	e8 81       	ld	r30, Y
    c51a:	f9 81       	ldd	r31, Y+1	; 0x01
    c51c:	c8 5c       	subi	r28, 0xC8	; 200
    c51e:	d0 40       	sbci	r29, 0x00	; 0
    c520:	25 91       	lpm	r18, Z+
    c522:	34 91       	lpm	r19, Z
    c524:	c3 53       	subi	r28, 0x33	; 51
    c526:	df 4f       	sbci	r29, 0xFF	; 255
    c528:	e8 81       	ld	r30, Y
    c52a:	f9 81       	ldd	r31, Y+1	; 0x01
    c52c:	cd 5c       	subi	r28, 0xCD	; 205
    c52e:	d0 40       	sbci	r29, 0x00	; 0
    c530:	94 91       	lpm	r25, Z
    c532:	c8 54       	subi	r28, 0x48	; 72
    c534:	df 4f       	sbci	r29, 0xFF	; 255
    c536:	48 81       	ld	r20, Y
    c538:	59 81       	ldd	r21, Y+1	; 0x01
    c53a:	c8 5b       	subi	r28, 0xB8	; 184
    c53c:	d0 40       	sbci	r29, 0x00	; 0
    c53e:	24 0f       	add	r18, r20
    c540:	35 1f       	adc	r19, r21
    c542:	b9 01       	movw	r22, r18
    c544:	9f 9d       	mul	r25, r15
    c546:	60 0d       	add	r22, r0
    c548:	71 1d       	adc	r23, r1
    c54a:	11 24       	eor	r1, r1
    c54c:	c0 54       	subi	r28, 0x40	; 64
    c54e:	df 4f       	sbci	r29, 0xFF	; 255
    c550:	79 83       	std	Y+1, r23	; 0x01
    c552:	68 83       	st	Y, r22
    c554:	c0 5c       	subi	r28, 0xC0	; 192
    c556:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
          loop_t++;
    c558:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1985
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    c55a:	c2 54       	subi	r28, 0x42	; 66
    c55c:	df 4f       	sbci	r29, 0xFF	; 255
    c55e:	e8 81       	ld	r30, Y
    c560:	f9 81       	ldd	r31, Y+1	; 0x01
    c562:	ce 5b       	subi	r28, 0xBE	; 190
    c564:	d0 40       	sbci	r29, 0x00	; 0
    c566:	94 91       	lpm	r25, Z
    c568:	92 30       	cpi	r25, 0x02	; 2
    c56a:	09 f0       	breq	.+2      	; 0xc56e <draw_menu(bool)+0x209a>
    c56c:	4b c0       	rjmp	.+150    	; 0xc604 <draw_menu(bool)+0x2130>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c56e:	c8 53       	subi	r28, 0x38	; 56
    c570:	df 4f       	sbci	r29, 0xFF	; 255
    c572:	e8 81       	ld	r30, Y
    c574:	f9 81       	ldd	r31, Y+1	; 0x01
    c576:	c8 5c       	subi	r28, 0xC8	; 200
    c578:	d0 40       	sbci	r29, 0x00	; 0
    c57a:	25 91       	lpm	r18, Z+
    c57c:	34 91       	lpm	r19, Z
    c57e:	c3 53       	subi	r28, 0x33	; 51
    c580:	df 4f       	sbci	r29, 0xFF	; 255
    c582:	e8 81       	ld	r30, Y
    c584:	f9 81       	ldd	r31, Y+1	; 0x01
    c586:	cd 5c       	subi	r28, 0xCD	; 205
    c588:	d0 40       	sbci	r29, 0x00	; 0
    c58a:	94 91       	lpm	r25, Z
    c58c:	c8 54       	subi	r28, 0x48	; 72
    c58e:	df 4f       	sbci	r29, 0xFF	; 255
    c590:	48 81       	ld	r20, Y
    c592:	59 81       	ldd	r21, Y+1	; 0x01
    c594:	c8 5b       	subi	r28, 0xB8	; 184
    c596:	d0 40       	sbci	r29, 0x00	; 0
    c598:	24 0f       	add	r18, r20
    c59a:	35 1f       	adc	r19, r21
    c59c:	b9 01       	movw	r22, r18
    c59e:	9f 9d       	mul	r25, r15
    c5a0:	60 0d       	add	r22, r0
    c5a2:	71 1d       	adc	r23, r1
    c5a4:	11 24       	eor	r1, r1
    c5a6:	c0 54       	subi	r28, 0x40	; 64
    c5a8:	df 4f       	sbci	r29, 0xFF	; 255
    c5aa:	79 83       	std	Y+1, r23	; 0x01
    c5ac:	68 83       	st	Y, r22
    c5ae:	c0 5c       	subi	r28, 0xC0	; 192
    c5b0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1988
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    c5b2:	f1 01       	movw	r30, r2
    c5b4:	25 91       	lpm	r18, Z+
    c5b6:	34 91       	lpm	r19, Z
    c5b8:	c6 53       	subi	r28, 0x36	; 54
    c5ba:	df 4f       	sbci	r29, 0xFF	; 255
    c5bc:	e8 81       	ld	r30, Y
    c5be:	f9 81       	ldd	r31, Y+1	; 0x01
    c5c0:	ca 5c       	subi	r28, 0xCA	; 202
    c5c2:	d0 40       	sbci	r29, 0x00	; 0
    c5c4:	94 91       	lpm	r25, Z
    c5c6:	c6 54       	subi	r28, 0x46	; 70
    c5c8:	df 4f       	sbci	r29, 0xFF	; 255
    c5ca:	48 81       	ld	r20, Y
    c5cc:	59 81       	ldd	r21, Y+1	; 0x01
    c5ce:	ca 5b       	subi	r28, 0xBA	; 186
    c5d0:	d0 40       	sbci	r29, 0x00	; 0
    c5d2:	24 0f       	add	r18, r20
    c5d4:	35 1f       	adc	r19, r21
    c5d6:	b9 01       	movw	r22, r18
    c5d8:	99 9d       	mul	r25, r9
    c5da:	60 0d       	add	r22, r0
    c5dc:	71 1d       	adc	r23, r1
    c5de:	11 24       	eor	r1, r1
    c5e0:	ce 53       	subi	r28, 0x3E	; 62
    c5e2:	df 4f       	sbci	r29, 0xFF	; 255
    c5e4:	79 83       	std	Y+1, r23	; 0x01
    c5e6:	68 83       	st	Y, r22
    c5e8:	c2 5c       	subi	r28, 0xC2	; 194
    c5ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
          loop_t++;
    c5ec:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1990
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    c5ee:	c1 53       	subi	r28, 0x31	; 49
    c5f0:	df 4f       	sbci	r29, 0xFF	; 255
    c5f2:	e8 81       	ld	r30, Y
    c5f4:	f9 81       	ldd	r31, Y+1	; 0x01
    c5f6:	cf 5c       	subi	r28, 0xCF	; 207
    c5f8:	d0 40       	sbci	r29, 0x00	; 0
    c5fa:	94 91       	lpm	r25, Z
    c5fc:	f9 16       	cp	r15, r25
    c5fe:	10 f0       	brcs	.+4      	; 0xc604 <draw_menu(bool)+0x2130>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
          {
            loop_t = 0;
            loop_r++;
    c600:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    c602:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1996
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
    c604:	c4 54       	subi	r28, 0x44	; 68
    c606:	df 4f       	sbci	r29, 0xFF	; 255
    c608:	e8 81       	ld	r30, Y
    c60a:	f9 81       	ldd	r31, Y+1	; 0x01
    c60c:	cc 5b       	subi	r28, 0xBC	; 188
    c60e:	d0 40       	sbci	r29, 0x00	; 0
    c610:	44 91       	lpm	r20, Z
    c612:	8e 01       	movw	r16, r28
    c614:	0f 57       	subi	r16, 0x7F	; 127
    c616:	1f 4f       	sbci	r17, 0xFF	; 255
    c618:	9e 01       	movw	r18, r28
    c61a:	2f 5f       	subi	r18, 0xFF	; 255
    c61c:	3f 4f       	sbci	r19, 0xFF	; 255
    c61e:	cd 54       	subi	r28, 0x4D	; 77
    c620:	df 4f       	sbci	r29, 0xFF	; 255
    c622:	68 81       	ld	r22, Y
    c624:	c3 5b       	subi	r28, 0xB3	; 179
    c626:	d0 40       	sbci	r29, 0x00	; 0
    c628:	ce 51       	subi	r28, 0x1E	; 30
    c62a:	df 4f       	sbci	r29, 0xFF	; 255
    c62c:	e8 81       	ld	r30, Y
    c62e:	f9 81       	ldd	r31, Y+1	; 0x01
    c630:	c2 5e       	subi	r28, 0xE2	; 226
    c632:	d0 40       	sbci	r29, 0x00	; 0
    c634:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
    c636:	ce 52       	subi	r28, 0x2E	; 46
    c638:	df 4f       	sbci	r29, 0xFF	; 255
    c63a:	e8 81       	ld	r30, Y
    c63c:	f9 81       	ldd	r31, Y+1	; 0x01
    c63e:	c2 5d       	subi	r28, 0xD2	; 210
    c640:	d0 40       	sbci	r29, 0x00	; 0
    c642:	25 91       	lpm	r18, Z+
    c644:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    c646:	c4 54       	subi	r28, 0x44	; 68
    c648:	df 4f       	sbci	r29, 0xFF	; 255
    c64a:	e8 81       	ld	r30, Y
    c64c:	f9 81       	ldd	r31, Y+1	; 0x01
    c64e:	cc 5b       	subi	r28, 0xBC	; 188
    c650:	d0 40       	sbci	r29, 0x00	; 0
    c652:	84 91       	lpm	r24, Z
    c654:	cd 54       	subi	r28, 0x4D	; 77
    c656:	df 4f       	sbci	r29, 0xFF	; 255
    c658:	68 81       	ld	r22, Y
    c65a:	c3 5b       	subi	r28, 0xB3	; 179
    c65c:	d0 40       	sbci	r29, 0x00	; 0
    c65e:	70 e0       	ldi	r23, 0x00	; 0
    c660:	ce 54       	subi	r28, 0x4E	; 78
    c662:	df 4f       	sbci	r29, 0xFF	; 255
    c664:	48 81       	ld	r20, Y
    c666:	c2 5b       	subi	r28, 0xB2	; 178
    c668:	d0 40       	sbci	r29, 0x00	; 0
    c66a:	90 e0       	ldi	r25, 0x00	; 0
    c66c:	f9 01       	movw	r30, r18
    c66e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    c670:	cc 52       	subi	r28, 0x2C	; 44
    c672:	df 4f       	sbci	r29, 0xFF	; 255
    c674:	e8 81       	ld	r30, Y
    c676:	f9 81       	ldd	r31, Y+1	; 0x01
    c678:	c4 5d       	subi	r28, 0xD4	; 212
    c67a:	d0 40       	sbci	r29, 0x00	; 0
    c67c:	a5 90       	lpm	r10, Z+
    c67e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    c680:	ca 52       	subi	r28, 0x2A	; 42
    c682:	df 4f       	sbci	r29, 0xFF	; 255
    c684:	e8 81       	ld	r30, Y
    c686:	f9 81       	ldd	r31, Y+1	; 0x01
    c688:	c6 5d       	subi	r28, 0xD6	; 214
    c68a:	d0 40       	sbci	r29, 0x00	; 0
    c68c:	c5 90       	lpm	r12, Z+
    c68e:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    c690:	c8 52       	subi	r28, 0x28	; 40
    c692:	df 4f       	sbci	r29, 0xFF	; 255
    c694:	e8 81       	ld	r30, Y
    c696:	f9 81       	ldd	r31, Y+1	; 0x01
    c698:	c8 5d       	subi	r28, 0xD8	; 216
    c69a:	d0 40       	sbci	r29, 0x00	; 0
    c69c:	e4 90       	lpm	r14, Z
    c69e:	c6 52       	subi	r28, 0x26	; 38
    c6a0:	df 4f       	sbci	r29, 0xFF	; 255
    c6a2:	e8 81       	ld	r30, Y
    c6a4:	f9 81       	ldd	r31, Y+1	; 0x01
    c6a6:	ca 5d       	subi	r28, 0xDA	; 218
    c6a8:	d0 40       	sbci	r29, 0x00	; 0
    c6aa:	04 91       	lpm	r16, Z
    c6ac:	c4 52       	subi	r28, 0x24	; 36
    c6ae:	df 4f       	sbci	r29, 0xFF	; 255
    c6b0:	e8 81       	ld	r30, Y
    c6b2:	f9 81       	ldd	r31, Y+1	; 0x01
    c6b4:	cc 5d       	subi	r28, 0xDC	; 220
    c6b6:	d0 40       	sbci	r29, 0x00	; 0
    c6b8:	25 91       	lpm	r18, Z+
    c6ba:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1999
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    c6bc:	c2 52       	subi	r28, 0x22	; 34
    c6be:	df 4f       	sbci	r29, 0xFF	; 255
    c6c0:	e8 81       	ld	r30, Y
    c6c2:	f9 81       	ldd	r31, Y+1	; 0x01
    c6c4:	ce 5d       	subi	r28, 0xDE	; 222
    c6c6:	d0 40       	sbci	r29, 0x00	; 0
    c6c8:	45 91       	lpm	r20, Z+
    c6ca:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    c6cc:	88 24       	eor	r8, r8
    c6ce:	83 94       	inc	r8
    c6d0:	81 11       	cpse	r24, r1
    c6d2:	01 c0       	rjmp	.+2      	; 0xc6d6 <draw_menu(bool)+0x2202>
    c6d4:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1999
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    c6d6:	cb 54       	subi	r28, 0x4B	; 75
    c6d8:	df 4f       	sbci	r29, 0xFF	; 255
    c6da:	f8 81       	ld	r31, Y
    c6dc:	c5 5b       	subi	r28, 0xB5	; 181
    c6de:	d0 40       	sbci	r29, 0x00	; 0
    c6e0:	ff 93       	push	r31
    c6e2:	cc 54       	subi	r28, 0x4C	; 76
    c6e4:	df 4f       	sbci	r29, 0xFF	; 255
    c6e6:	68 81       	ld	r22, Y
    c6e8:	c4 5b       	subi	r28, 0xB4	; 180
    c6ea:	d0 40       	sbci	r29, 0x00	; 0
    c6ec:	6f 93       	push	r22
    c6ee:	81 e0       	ldi	r24, 0x01	; 1
    c6f0:	90 e0       	ldi	r25, 0x00	; 0
    c6f2:	8c 0f       	add	r24, r28
    c6f4:	9d 1f       	adc	r25, r29
    c6f6:	9f 93       	push	r25
    c6f8:	8f 93       	push	r24
    c6fa:	ce 53       	subi	r28, 0x3E	; 62
    c6fc:	df 4f       	sbci	r29, 0xFF	; 255
    c6fe:	68 81       	ld	r22, Y
    c700:	79 81       	ldd	r23, Y+1	; 0x01
    c702:	c2 5c       	subi	r28, 0xC2	; 194
    c704:	d0 40       	sbci	r29, 0x00	; 0
    c706:	c0 54       	subi	r28, 0x40	; 64
    c708:	df 4f       	sbci	r29, 0xFF	; 255
    c70a:	88 81       	ld	r24, Y
    c70c:	99 81       	ldd	r25, Y+1	; 0x01
    c70e:	c0 5c       	subi	r28, 0xC0	; 192
    c710:	d0 40       	sbci	r29, 0x00	; 0
    c712:	0e 94 14 42 	call	0x8428	; 0x8428 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    c716:	ce 54       	subi	r28, 0x4E	; 78
    c718:	df 4f       	sbci	r29, 0xFF	; 255
    c71a:	88 81       	ld	r24, Y
    c71c:	c2 5b       	subi	r28, 0xB2	; 178
    c71e:	d0 40       	sbci	r29, 0x00	; 0
    c720:	8f 5f       	subi	r24, 0xFF	; 255
    c722:	ce 54       	subi	r28, 0x4E	; 78
    c724:	df 4f       	sbci	r29, 0xFF	; 255
    c726:	88 83       	st	Y, r24
    c728:	c2 5b       	subi	r28, 0xB2	; 178
    c72a:	d0 40       	sbci	r29, 0x00	; 0
    c72c:	0f 90       	pop	r0
    c72e:	0f 90       	pop	r0
    c730:	0f 90       	pop	r0
    c732:	0f 90       	pop	r0
    c734:	8a ce       	rjmp	.-748    	; 0xc44a <draw_menu(bool)+0x1f76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
      }
    }
    if (click_x > 0 && click_y > 0)
    c736:	cc 53       	subi	r28, 0x3C	; 60
    c738:	df 4f       	sbci	r29, 0xFF	; 255
    c73a:	e8 81       	ld	r30, Y
    c73c:	f9 81       	ldd	r31, Y+1	; 0x01
    c73e:	c4 5c       	subi	r28, 0xC4	; 196
    c740:	d0 40       	sbci	r29, 0x00	; 0
    c742:	ef 2b       	or	r30, r31
    c744:	09 f4       	brne	.+2      	; 0xc748 <draw_menu(bool)+0x2274>
    c746:	bb c1       	rjmp	.+886    	; 0xcabe <draw_menu(bool)+0x25ea>
    c748:	ca 53       	subi	r28, 0x3A	; 58
    c74a:	df 4f       	sbci	r29, 0xFF	; 255
    c74c:	28 81       	ld	r18, Y
    c74e:	39 81       	ldd	r19, Y+1	; 0x01
    c750:	c6 5c       	subi	r28, 0xC6	; 198
    c752:	d0 40       	sbci	r29, 0x00	; 0
    c754:	23 2b       	or	r18, r19
    c756:	09 f4       	brne	.+2      	; 0xc75a <draw_menu(bool)+0x2286>
    c758:	b2 c1       	rjmp	.+868    	; 0xcabe <draw_menu(bool)+0x25ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
    {
      loop_i = 0;
    c75a:	ce 54       	subi	r28, 0x4E	; 78
    c75c:	df 4f       	sbci	r29, 0xFF	; 255
    c75e:	18 82       	st	Y, r1
    c760:	c2 5b       	subi	r28, 0xB2	; 178
    c762:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2011
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
    c764:	f2 01       	movw	r30, r4
    c766:	e8 54       	subi	r30, 0x48	; 72
    c768:	fd 4f       	sbci	r31, 0xFD	; 253
    c76a:	e6 0d       	add	r30, r6
    c76c:	f7 1d       	adc	r31, r7
    c76e:	25 91       	lpm	r18, Z+
    c770:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    c772:	c2 01       	movw	r24, r4
    c774:	8d 54       	subi	r24, 0x4D	; 77
    c776:	9d 4f       	sbci	r25, 0xFD	; 253
    c778:	a3 01       	movw	r20, r6
    c77a:	48 0f       	add	r20, r24
    c77c:	59 1f       	adc	r21, r25
    c77e:	c2 54       	subi	r28, 0x42	; 66
    c780:	df 4f       	sbci	r29, 0xFF	; 255
    c782:	59 83       	std	Y+1, r21	; 0x01
    c784:	48 83       	st	Y, r20
    c786:	ce 5b       	subi	r28, 0xBE	; 190
    c788:	d0 40       	sbci	r29, 0x00	; 0
    c78a:	fa 01       	movw	r30, r20
    c78c:	84 91       	lpm	r24, Z
    c78e:	cd 54       	subi	r28, 0x4D	; 77
    c790:	df 4f       	sbci	r29, 0xFF	; 255
    c792:	68 81       	ld	r22, Y
    c794:	c3 5b       	subi	r28, 0xB3	; 179
    c796:	d0 40       	sbci	r29, 0x00	; 0
    c798:	70 e0       	ldi	r23, 0x00	; 0
    c79a:	40 e0       	ldi	r20, 0x00	; 0
    c79c:	90 e0       	ldi	r25, 0x00	; 0
    c79e:	f9 01       	movw	r30, r18
    c7a0:	19 95       	eicall
    c7a2:	cf 54       	subi	r28, 0x4F	; 79
    c7a4:	df 4f       	sbci	r29, 0xFF	; 255
    c7a6:	88 83       	st	Y, r24
    c7a8:	c1 5b       	subi	r28, 0xB1	; 177
    c7aa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2013
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    c7ac:	f2 01       	movw	r30, r4
    c7ae:	ee 54       	subi	r30, 0x4E	; 78
    c7b0:	fd 4f       	sbci	r31, 0xFD	; 253
    c7b2:	e6 0d       	add	r30, r6
    c7b4:	f7 1d       	adc	r31, r7
    c7b6:	44 91       	lpm	r20, Z
    c7b8:	c2 01       	movw	r24, r4
    c7ba:	80 55       	subi	r24, 0x50	; 80
    c7bc:	9d 4f       	sbci	r25, 0xFD	; 253
    c7be:	93 01       	movw	r18, r6
    c7c0:	28 0f       	add	r18, r24
    c7c2:	39 1f       	adc	r19, r25
    c7c4:	c3 53       	subi	r28, 0x33	; 51
    c7c6:	df 4f       	sbci	r29, 0xFF	; 255
    c7c8:	39 83       	std	Y+1, r19	; 0x01
    c7ca:	28 83       	st	Y, r18
    c7cc:	cd 5c       	subi	r28, 0xCD	; 205
    c7ce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
      if (slider_active != MENU_SLIDER_OFF)
    c7d0:	4f 3f       	cpi	r20, 0xFF	; 255
    c7d2:	99 f0       	breq	.+38     	; 0xc7fa <draw_menu(bool)+0x2326>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    c7d4:	f9 01       	movw	r30, r18
    c7d6:	24 91       	lpm	r18, Z
    c7d8:	f2 01       	movw	r30, r4
    c7da:	ef 54       	subi	r30, 0x4F	; 79
    c7dc:	fd 4f       	sbci	r31, 0xFD	; 253
    c7de:	e6 0d       	add	r30, r6
    c7e0:	f7 1d       	adc	r31, r7
    c7e2:	e4 91       	lpm	r30, Z
    c7e4:	2e 9f       	mul	r18, r30
    c7e6:	20 2d       	mov	r18, r0
    c7e8:	11 24       	eor	r1, r1
    c7ea:	be 01       	movw	r22, r28
    c7ec:	6f 54       	subi	r22, 0x4F	; 79
    c7ee:	7f 4f       	sbci	r23, 0xFF	; 255
    c7f0:	ce 01       	movw	r24, r28
    c7f2:	8e 54       	subi	r24, 0x4E	; 78
    c7f4:	9f 4f       	sbci	r25, 0xFF	; 255
    c7f6:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    c7fa:	ce 54       	subi	r28, 0x4E	; 78
    c7fc:	df 4f       	sbci	r29, 0xFF	; 255
    c7fe:	88 80       	ld	r8, Y
    c800:	c2 5b       	subi	r28, 0xB2	; 178
    c802:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
      while (loop_i < loop_cnt)
    c804:	cf 54       	subi	r28, 0x4F	; 79
    c806:	df 4f       	sbci	r29, 0xFF	; 255
    c808:	28 80       	ld	r2, Y
    c80a:	c1 5b       	subi	r28, 0xB1	; 177
    c80c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    c80e:	c2 01       	movw	r24, r4
    c810:	81 55       	subi	r24, 0x51	; 81
    c812:	9d 4f       	sbci	r25, 0xFD	; 253
    c814:	93 01       	movw	r18, r6
    c816:	28 0f       	add	r18, r24
    c818:	39 1f       	adc	r19, r25
    c81a:	c4 54       	subi	r28, 0x44	; 68
    c81c:	df 4f       	sbci	r29, 0xFF	; 255
    c81e:	39 83       	std	Y+1, r19	; 0x01
    c820:	28 83       	st	Y, r18
    c822:	cc 5b       	subi	r28, 0xBC	; 188
    c824:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    c826:	62 01       	movw	r12, r4
    c828:	31 e6       	ldi	r19, 0x61	; 97
    c82a:	c3 1a       	sub	r12, r19
    c82c:	3d ef       	ldi	r19, 0xFD	; 253
    c82e:	d3 0a       	sbc	r13, r19
    c830:	c6 0c       	add	r12, r6
    c832:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    c834:	52 01       	movw	r10, r4
    c836:	4f e5       	ldi	r20, 0x5F	; 95
    c838:	a4 1a       	sub	r10, r20
    c83a:	4d ef       	ldi	r20, 0xFD	; 253
    c83c:	b4 0a       	sbc	r11, r20
    c83e:	a6 0c       	add	r10, r6
    c840:	b7 1c       	adc	r11, r7
    c842:	01 97       	sbiw	r24, 0x01	; 1
    c844:	b3 01       	movw	r22, r6
    c846:	68 0f       	add	r22, r24
    c848:	79 1f       	adc	r23, r25
    c84a:	c8 53       	subi	r28, 0x38	; 56
    c84c:	df 4f       	sbci	r29, 0xFF	; 255
    c84e:	79 83       	std	Y+1, r23	; 0x01
    c850:	68 83       	st	Y, r22
    c852:	c8 5c       	subi	r28, 0xC8	; 200
    c854:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c856:	01 97       	sbiw	r24, 0x01	; 1
    c858:	f3 01       	movw	r30, r6
    c85a:	e8 0f       	add	r30, r24
    c85c:	f9 1f       	adc	r31, r25
    c85e:	c6 53       	subi	r28, 0x36	; 54
    c860:	df 4f       	sbci	r29, 0xFF	; 255
    c862:	f9 83       	std	Y+1, r31	; 0x01
    c864:	e8 83       	st	Y, r30
    c866:	ca 5c       	subi	r28, 0xCA	; 202
    c868:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    c86a:	08 97       	sbiw	r24, 0x08	; 8
    c86c:	93 01       	movw	r18, r6
    c86e:	28 0f       	add	r18, r24
    c870:	39 1f       	adc	r19, r25
    c872:	c1 53       	subi	r28, 0x31	; 49
    c874:	df 4f       	sbci	r29, 0xFF	; 255
    c876:	39 83       	std	Y+1, r19	; 0x01
    c878:	28 83       	st	Y, r18
    c87a:	cf 5c       	subi	r28, 0xCF	; 207
    c87c:	d0 40       	sbci	r29, 0x00	; 0
    c87e:	02 97       	sbiw	r24, 0x02	; 2
    c880:	a3 01       	movw	r20, r6
    c882:	48 0f       	add	r20, r24
    c884:	59 1f       	adc	r21, r25
    c886:	ce 52       	subi	r28, 0x2E	; 46
    c888:	df 4f       	sbci	r29, 0xFF	; 255
    c88a:	59 83       	std	Y+1, r21	; 0x01
    c88c:	48 83       	st	Y, r20
    c88e:	c2 5d       	subi	r28, 0xD2	; 210
    c890:	d0 40       	sbci	r29, 0x00	; 0
    c892:	31 2c       	mov	r3, r1
    c894:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    c896:	82 14       	cp	r8, r2
    c898:	08 f0       	brcs	.+2      	; 0xc89c <draw_menu(bool)+0x23c8>
    c89a:	11 c1       	rjmp	.+546    	; 0xcabe <draw_menu(bool)+0x25ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    c89c:	c4 54       	subi	r28, 0x44	; 68
    c89e:	df 4f       	sbci	r29, 0xFF	; 255
    c8a0:	e8 81       	ld	r30, Y
    c8a2:	f9 81       	ldd	r31, Y+1	; 0x01
    c8a4:	cc 5b       	subi	r28, 0xBC	; 188
    c8a6:	d0 40       	sbci	r29, 0x00	; 0
    c8a8:	84 91       	lpm	r24, Z
    c8aa:	81 11       	cpse	r24, r1
    c8ac:	2f c0       	rjmp	.+94     	; 0xc90c <draw_menu(bool)+0x2438>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    c8ae:	f6 01       	movw	r30, r12
    c8b0:	85 91       	lpm	r24, Z+
    c8b2:	94 91       	lpm	r25, Z
    c8b4:	c8 54       	subi	r28, 0x48	; 72
    c8b6:	df 4f       	sbci	r29, 0xFF	; 255
    c8b8:	28 81       	ld	r18, Y
    c8ba:	39 81       	ldd	r19, Y+1	; 0x01
    c8bc:	c8 5b       	subi	r28, 0xB8	; 184
    c8be:	d0 40       	sbci	r29, 0x00	; 0
    c8c0:	28 0f       	add	r18, r24
    c8c2:	39 1f       	adc	r19, r25
    c8c4:	c0 54       	subi	r28, 0x40	; 64
    c8c6:	df 4f       	sbci	r29, 0xFF	; 255
    c8c8:	39 83       	std	Y+1, r19	; 0x01
    c8ca:	28 83       	st	Y, r18
    c8cc:	c0 5c       	subi	r28, 0xC0	; 192
    c8ce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    c8d0:	f5 01       	movw	r30, r10
    c8d2:	85 91       	lpm	r24, Z+
    c8d4:	94 91       	lpm	r25, Z
    c8d6:	c8 53       	subi	r28, 0x38	; 56
    c8d8:	df 4f       	sbci	r29, 0xFF	; 255
    c8da:	e8 81       	ld	r30, Y
    c8dc:	f9 81       	ldd	r31, Y+1	; 0x01
    c8de:	c8 5c       	subi	r28, 0xC8	; 200
    c8e0:	d0 40       	sbci	r29, 0x00	; 0
    c8e2:	24 91       	lpm	r18, Z
    c8e4:	c6 54       	subi	r28, 0x46	; 70
    c8e6:	df 4f       	sbci	r29, 0xFF	; 255
    c8e8:	48 81       	ld	r20, Y
    c8ea:	59 81       	ldd	r21, Y+1	; 0x01
    c8ec:	ca 5b       	subi	r28, 0xBA	; 186
    c8ee:	d0 40       	sbci	r29, 0x00	; 0
    c8f0:	84 0f       	add	r24, r20
    c8f2:	95 1f       	adc	r25, r21
    c8f4:	bc 01       	movw	r22, r24
    c8f6:	29 9d       	mul	r18, r9
    c8f8:	60 0d       	add	r22, r0
    c8fa:	71 1d       	adc	r23, r1
    c8fc:	11 24       	eor	r1, r1
    c8fe:	ce 53       	subi	r28, 0x3E	; 62
    c900:	df 4f       	sbci	r29, 0xFF	; 255
    c902:	79 83       	std	Y+1, r23	; 0x01
    c904:	68 83       	st	Y, r22
    c906:	c2 5c       	subi	r28, 0xC2	; 194
    c908:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
          loop_t++;
    c90a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2024
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    c90c:	c4 54       	subi	r28, 0x44	; 68
    c90e:	df 4f       	sbci	r29, 0xFF	; 255
    c910:	e8 81       	ld	r30, Y
    c912:	f9 81       	ldd	r31, Y+1	; 0x01
    c914:	cc 5b       	subi	r28, 0xBC	; 188
    c916:	d0 40       	sbci	r29, 0x00	; 0
    c918:	84 91       	lpm	r24, Z
    c91a:	81 30       	cpi	r24, 0x01	; 1
    c91c:	79 f5       	brne	.+94     	; 0xc97c <draw_menu(bool)+0x24a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    c91e:	f5 01       	movw	r30, r10
    c920:	85 91       	lpm	r24, Z+
    c922:	94 91       	lpm	r25, Z
    c924:	c6 54       	subi	r28, 0x46	; 70
    c926:	df 4f       	sbci	r29, 0xFF	; 255
    c928:	28 81       	ld	r18, Y
    c92a:	39 81       	ldd	r19, Y+1	; 0x01
    c92c:	ca 5b       	subi	r28, 0xBA	; 186
    c92e:	d0 40       	sbci	r29, 0x00	; 0
    c930:	28 0f       	add	r18, r24
    c932:	39 1f       	adc	r19, r25
    c934:	ce 53       	subi	r28, 0x3E	; 62
    c936:	df 4f       	sbci	r29, 0xFF	; 255
    c938:	39 83       	std	Y+1, r19	; 0x01
    c93a:	28 83       	st	Y, r18
    c93c:	c2 5c       	subi	r28, 0xC2	; 194
    c93e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c940:	f6 01       	movw	r30, r12
    c942:	85 91       	lpm	r24, Z+
    c944:	94 91       	lpm	r25, Z
    c946:	c6 53       	subi	r28, 0x36	; 54
    c948:	df 4f       	sbci	r29, 0xFF	; 255
    c94a:	e8 81       	ld	r30, Y
    c94c:	f9 81       	ldd	r31, Y+1	; 0x01
    c94e:	ca 5c       	subi	r28, 0xCA	; 202
    c950:	d0 40       	sbci	r29, 0x00	; 0
    c952:	24 91       	lpm	r18, Z
    c954:	c8 54       	subi	r28, 0x48	; 72
    c956:	df 4f       	sbci	r29, 0xFF	; 255
    c958:	48 81       	ld	r20, Y
    c95a:	59 81       	ldd	r21, Y+1	; 0x01
    c95c:	c8 5b       	subi	r28, 0xB8	; 184
    c95e:	d0 40       	sbci	r29, 0x00	; 0
    c960:	84 0f       	add	r24, r20
    c962:	95 1f       	adc	r25, r21
    c964:	bc 01       	movw	r22, r24
    c966:	29 9d       	mul	r18, r9
    c968:	60 0d       	add	r22, r0
    c96a:	71 1d       	adc	r23, r1
    c96c:	11 24       	eor	r1, r1
    c96e:	c0 54       	subi	r28, 0x40	; 64
    c970:	df 4f       	sbci	r29, 0xFF	; 255
    c972:	79 83       	std	Y+1, r23	; 0x01
    c974:	68 83       	st	Y, r22
    c976:	c0 5c       	subi	r28, 0xC0	; 192
    c978:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
          loop_t++;
    c97a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    c97c:	c4 54       	subi	r28, 0x44	; 68
    c97e:	df 4f       	sbci	r29, 0xFF	; 255
    c980:	e8 81       	ld	r30, Y
    c982:	f9 81       	ldd	r31, Y+1	; 0x01
    c984:	cc 5b       	subi	r28, 0xBC	; 188
    c986:	d0 40       	sbci	r29, 0x00	; 0
    c988:	84 91       	lpm	r24, Z
    c98a:	82 30       	cpi	r24, 0x02	; 2
    c98c:	09 f0       	breq	.+2      	; 0xc990 <draw_menu(bool)+0x24bc>
    c98e:	46 c0       	rjmp	.+140    	; 0xca1c <draw_menu(bool)+0x2548>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    c990:	f6 01       	movw	r30, r12
    c992:	85 91       	lpm	r24, Z+
    c994:	94 91       	lpm	r25, Z
    c996:	c6 53       	subi	r28, 0x36	; 54
    c998:	df 4f       	sbci	r29, 0xFF	; 255
    c99a:	e8 81       	ld	r30, Y
    c99c:	f9 81       	ldd	r31, Y+1	; 0x01
    c99e:	ca 5c       	subi	r28, 0xCA	; 202
    c9a0:	d0 40       	sbci	r29, 0x00	; 0
    c9a2:	24 91       	lpm	r18, Z
    c9a4:	c8 54       	subi	r28, 0x48	; 72
    c9a6:	df 4f       	sbci	r29, 0xFF	; 255
    c9a8:	48 81       	ld	r20, Y
    c9aa:	59 81       	ldd	r21, Y+1	; 0x01
    c9ac:	c8 5b       	subi	r28, 0xB8	; 184
    c9ae:	d0 40       	sbci	r29, 0x00	; 0
    c9b0:	84 0f       	add	r24, r20
    c9b2:	95 1f       	adc	r25, r21
    c9b4:	bc 01       	movw	r22, r24
    c9b6:	29 9d       	mul	r18, r9
    c9b8:	60 0d       	add	r22, r0
    c9ba:	71 1d       	adc	r23, r1
    c9bc:	11 24       	eor	r1, r1
    c9be:	c0 54       	subi	r28, 0x40	; 64
    c9c0:	df 4f       	sbci	r29, 0xFF	; 255
    c9c2:	79 83       	std	Y+1, r23	; 0x01
    c9c4:	68 83       	st	Y, r22
    c9c6:	c0 5c       	subi	r28, 0xC0	; 192
    c9c8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2033
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    c9ca:	f5 01       	movw	r30, r10
    c9cc:	85 91       	lpm	r24, Z+
    c9ce:	94 91       	lpm	r25, Z
    c9d0:	c8 53       	subi	r28, 0x38	; 56
    c9d2:	df 4f       	sbci	r29, 0xFF	; 255
    c9d4:	e8 81       	ld	r30, Y
    c9d6:	f9 81       	ldd	r31, Y+1	; 0x01
    c9d8:	c8 5c       	subi	r28, 0xC8	; 200
    c9da:	d0 40       	sbci	r29, 0x00	; 0
    c9dc:	24 91       	lpm	r18, Z
    c9de:	c6 54       	subi	r28, 0x46	; 70
    c9e0:	df 4f       	sbci	r29, 0xFF	; 255
    c9e2:	48 81       	ld	r20, Y
    c9e4:	59 81       	ldd	r21, Y+1	; 0x01
    c9e6:	ca 5b       	subi	r28, 0xBA	; 186
    c9e8:	d0 40       	sbci	r29, 0x00	; 0
    c9ea:	84 0f       	add	r24, r20
    c9ec:	95 1f       	adc	r25, r21
    c9ee:	bc 01       	movw	r22, r24
    c9f0:	23 9d       	mul	r18, r3
    c9f2:	60 0d       	add	r22, r0
    c9f4:	71 1d       	adc	r23, r1
    c9f6:	11 24       	eor	r1, r1
    c9f8:	ce 53       	subi	r28, 0x3E	; 62
    c9fa:	df 4f       	sbci	r29, 0xFF	; 255
    c9fc:	79 83       	std	Y+1, r23	; 0x01
    c9fe:	68 83       	st	Y, r22
    ca00:	c2 5c       	subi	r28, 0xC2	; 194
    ca02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
          loop_t++;
    ca04:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2035
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    ca06:	c3 53       	subi	r28, 0x33	; 51
    ca08:	df 4f       	sbci	r29, 0xFF	; 255
    ca0a:	e8 81       	ld	r30, Y
    ca0c:	f9 81       	ldd	r31, Y+1	; 0x01
    ca0e:	cd 5c       	subi	r28, 0xCD	; 205
    ca10:	d0 40       	sbci	r29, 0x00	; 0
    ca12:	84 91       	lpm	r24, Z
    ca14:	98 16       	cp	r9, r24
    ca16:	10 f0       	brcs	.+4      	; 0xca1c <draw_menu(bool)+0x2548>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2038
          {
            loop_t = 0;
            loop_r++;
    ca18:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2037
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    ca1a:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    ca1c:	c1 53       	subi	r28, 0x31	; 49
    ca1e:	df 4f       	sbci	r29, 0xFF	; 255
    ca20:	e8 81       	ld	r30, Y
    ca22:	f9 81       	ldd	r31, Y+1	; 0x01
    ca24:	cf 5c       	subi	r28, 0xCF	; 207
    ca26:	d0 40       	sbci	r29, 0x00	; 0
    ca28:	25 91       	lpm	r18, Z+
    ca2a:	34 91       	lpm	r19, Z
    ca2c:	ce 52       	subi	r28, 0x2E	; 46
    ca2e:	df 4f       	sbci	r29, 0xFF	; 255
    ca30:	e8 81       	ld	r30, Y
    ca32:	f9 81       	ldd	r31, Y+1	; 0x01
    ca34:	c2 5d       	subi	r28, 0xD2	; 210
    ca36:	d0 40       	sbci	r29, 0x00	; 0
    ca38:	45 91       	lpm	r20, Z+
    ca3a:	54 91       	lpm	r21, Z
    ca3c:	ca 53       	subi	r28, 0x3A	; 58
    ca3e:	df 4f       	sbci	r29, 0xFF	; 255
    ca40:	e8 80       	ld	r14, Y
    ca42:	f9 80       	ldd	r15, Y+1	; 0x01
    ca44:	c6 5c       	subi	r28, 0xC6	; 198
    ca46:	d0 40       	sbci	r29, 0x00	; 0
    ca48:	cc 53       	subi	r28, 0x3C	; 60
    ca4a:	df 4f       	sbci	r29, 0xFF	; 255
    ca4c:	08 81       	ld	r16, Y
    ca4e:	19 81       	ldd	r17, Y+1	; 0x01
    ca50:	c4 5c       	subi	r28, 0xC4	; 196
    ca52:	d0 40       	sbci	r29, 0x00	; 0
    ca54:	ce 53       	subi	r28, 0x3E	; 62
    ca56:	df 4f       	sbci	r29, 0xFF	; 255
    ca58:	68 81       	ld	r22, Y
    ca5a:	79 81       	ldd	r23, Y+1	; 0x01
    ca5c:	c2 5c       	subi	r28, 0xC2	; 194
    ca5e:	d0 40       	sbci	r29, 0x00	; 0
    ca60:	c0 54       	subi	r28, 0x40	; 64
    ca62:	df 4f       	sbci	r29, 0xFF	; 255
    ca64:	88 81       	ld	r24, Y
    ca66:	99 81       	ldd	r25, Y+1	; 0x01
    ca68:	c0 5c       	subi	r28, 0xC0	; 192
    ca6a:	d0 40       	sbci	r29, 0x00	; 0
    ca6c:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    ca70:	18 2f       	mov	r17, r24
    ca72:	81 e0       	ldi	r24, 0x01	; 1
    ca74:	88 0d       	add	r24, r8
    ca76:	11 23       	and	r17, r17
    ca78:	71 f1       	breq	.+92     	; 0xcad6 <draw_menu(bool)+0x2602>
    ca7a:	ce 54       	subi	r28, 0x4E	; 78
    ca7c:	df 4f       	sbci	r29, 0xFF	; 255
    ca7e:	88 82       	st	Y, r8
    ca80:	c2 5b       	subi	r28, 0xB2	; 178
    ca82:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    ca84:	f2 01       	movw	r30, r4
    ca86:	ea 54       	subi	r30, 0x4A	; 74
    ca88:	fd 4f       	sbci	r31, 0xFD	; 253
    ca8a:	e6 0d       	add	r30, r6
    ca8c:	f7 1d       	adc	r31, r7
    ca8e:	25 91       	lpm	r18, Z+
    ca90:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2044
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    ca92:	c2 54       	subi	r28, 0x42	; 66
    ca94:	df 4f       	sbci	r29, 0xFF	; 255
    ca96:	e8 81       	ld	r30, Y
    ca98:	f9 81       	ldd	r31, Y+1	; 0x01
    ca9a:	ce 5b       	subi	r28, 0xBE	; 190
    ca9c:	d0 40       	sbci	r29, 0x00	; 0
    ca9e:	84 91       	lpm	r24, Z
    caa0:	cd 54       	subi	r28, 0x4D	; 77
    caa2:	df 4f       	sbci	r29, 0xFF	; 255
    caa4:	68 81       	ld	r22, Y
    caa6:	c3 5b       	subi	r28, 0xB3	; 179
    caa8:	d0 40       	sbci	r29, 0x00	; 0
    caaa:	70 e0       	ldi	r23, 0x00	; 0
    caac:	48 2d       	mov	r20, r8
    caae:	90 e0       	ldi	r25, 0x00	; 0
    cab0:	f9 01       	movw	r30, r18
    cab2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2045
          ret = true;
    cab4:	c4 53       	subi	r28, 0x34	; 52
    cab6:	df 4f       	sbci	r29, 0xFF	; 255
    cab8:	18 83       	st	Y, r17
    caba:	cc 5c       	subi	r28, 0xCC	; 204
    cabc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    cabe:	ca 54       	subi	r28, 0x4A	; 74
    cac0:	df 4f       	sbci	r29, 0xFF	; 255
    cac2:	f8 81       	ld	r31, Y
    cac4:	c6 5b       	subi	r28, 0xB6	; 182
    cac6:	d0 40       	sbci	r29, 0x00	; 0
    cac8:	ff 5f       	subi	r31, 0xFF	; 255
    caca:	ca 54       	subi	r28, 0x4A	; 74
    cacc:	df 4f       	sbci	r29, 0xFF	; 255
    cace:	f8 83       	st	Y, r31
    cad0:	c6 5b       	subi	r28, 0xB6	; 182
    cad2:	d0 40       	sbci	r29, 0x00	; 0
    cad4:	c1 cb       	rjmp	.-2174   	; 0xc258 <draw_menu(bool)+0x1d84>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2041
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    cad6:	88 2e       	mov	r8, r24
    cad8:	de ce       	rjmp	.-580    	; 0xc896 <draw_menu(bool)+0x23c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2045
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
    cada:	21 e0       	ldi	r18, 0x01	; 1
    cadc:	c4 53       	subi	r28, 0x34	; 52
    cade:	df 4f       	sbci	r29, 0xFF	; 255
    cae0:	28 83       	st	Y, r18
    cae2:	cc 5c       	subi	r28, 0xCC	; 204
    cae4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
  }


draw_menu_end:
  return ret;
}
    cae6:	c4 53       	subi	r28, 0x34	; 52
    cae8:	df 4f       	sbci	r29, 0xFF	; 255
    caea:	88 81       	ld	r24, Y
    caec:	cc 5c       	subi	r28, 0xCC	; 204
    caee:	d0 40       	sbci	r29, 0x00	; 0
    caf0:	cd 51       	subi	r28, 0x1D	; 29
    caf2:	df 4f       	sbci	r29, 0xFF	; 255
    caf4:	0f b6       	in	r0, 0x3f	; 63
    caf6:	f8 94       	cli
    caf8:	de bf       	out	0x3e, r29	; 62
    cafa:	0f be       	out	0x3f, r0	; 63
    cafc:	cd bf       	out	0x3d, r28	; 61
    cafe:	df 91       	pop	r29
    cb00:	cf 91       	pop	r28
    cb02:	1f 91       	pop	r17
    cb04:	0f 91       	pop	r16
    cb06:	ff 90       	pop	r15
    cb08:	ef 90       	pop	r14
    cb0a:	df 90       	pop	r13
    cb0c:	cf 90       	pop	r12
    cb0e:	bf 90       	pop	r11
    cb10:	af 90       	pop	r10
    cb12:	9f 90       	pop	r9
    cb14:	8f 90       	pop	r8
    cb16:	7f 90       	pop	r7
    cb18:	6f 90       	pop	r6
    cb1a:	5f 90       	pop	r5
    cb1c:	4f 90       	pop	r4
    cb1e:	3f 90       	pop	r3
    cb20:	2f 90       	pop	r2
    cb22:	08 95       	ret

0000cb24 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    cb24:	2d e4       	ldi	r18, 0x4D	; 77
    cb26:	82 9f       	mul	r24, r18
    cb28:	c0 01       	movw	r24, r0
    cb2a:	11 24       	eor	r1, r1
    cb2c:	26 e0       	ldi	r18, 0x06	; 6
    cb2e:	62 9f       	mul	r22, r18
    cb30:	80 0d       	add	r24, r0
    cb32:	91 1d       	adc	r25, r1
    cb34:	11 24       	eor	r1, r1
    cb36:	64 2f       	mov	r22, r20
    cb38:	8e 50       	subi	r24, 0x0E	; 14
    cb3a:	9e 4f       	sbci	r25, 0xFE	; 254
    cb3c:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cb40 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    cb40:	1f 93       	push	r17
    cb42:	cf 93       	push	r28
    cb44:	df 93       	push	r29
    cb46:	14 2f       	mov	r17, r20
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    cb48:	9d e4       	ldi	r25, 0x4D	; 77
    cb4a:	89 9f       	mul	r24, r25
    cb4c:	e0 01       	movw	r28, r0
    cb4e:	11 24       	eor	r1, r1
    cb50:	cf 50       	subi	r28, 0x0F	; 15
    cb52:	de 4f       	sbci	r29, 0xFE	; 254
    cb54:	86 e0       	ldi	r24, 0x06	; 6
    cb56:	68 9f       	mul	r22, r24
    cb58:	c0 0d       	add	r28, r0
    cb5a:	d1 1d       	adc	r29, r1
    cb5c:	11 24       	eor	r1, r1
    cb5e:	65 2f       	mov	r22, r21
    cb60:	ce 01       	movw	r24, r28
    cb62:	05 96       	adiw	r24, 0x05	; 5
    cb64:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    cb68:	61 2f       	mov	r22, r17
    cb6a:	ce 01       	movw	r24, r28
    cb6c:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:333
}
    cb6e:	df 91       	pop	r29
    cb70:	cf 91       	pop	r28
    cb72:	1f 91       	pop	r17
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    cb74:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cb78 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    cb78:	cf 92       	push	r12
    cb7a:	ef 92       	push	r14
    cb7c:	0f 93       	push	r16
    cb7e:	1f 93       	push	r17
    cb80:	cf 93       	push	r28
    cb82:	df 93       	push	r29
    cb84:	c8 2f       	mov	r28, r24
    cb86:	56 2f       	mov	r21, r22
    cb88:	8e 2d       	mov	r24, r14
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    cb8a:	3f e0       	ldi	r19, 0x0F	; 15
    cb8c:	63 2f       	mov	r22, r19
    cb8e:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
    cb92:	83 70       	andi	r24, 0x03	; 3
    cb94:	98 e0       	ldi	r25, 0x08	; 8
    cb96:	09 9f       	mul	r16, r25
    cb98:	80 01       	movw	r16, r0
    cb9a:	11 24       	eor	r1, r1
    cb9c:	08 0f       	add	r16, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    cb9e:	8d e4       	ldi	r24, 0x4D	; 77
    cba0:	c8 9f       	mul	r28, r24
    cba2:	e0 01       	movw	r28, r0
    cba4:	11 24       	eor	r1, r1
    cba6:	cf 50       	subi	r28, 0x0F	; 15
    cba8:	de 4f       	sbci	r29, 0xFE	; 254
    cbaa:	96 e0       	ldi	r25, 0x06	; 6
    cbac:	59 9f       	mul	r21, r25
    cbae:	c0 0d       	add	r28, r0
    cbb0:	d1 1d       	adc	r29, r1
    cbb2:	11 24       	eor	r1, r1
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    cbb4:	82 2f       	mov	r24, r18
    cbb6:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
    cbba:	68 2f       	mov	r22, r24
    cbbc:	66 0f       	add	r22, r22
    cbbe:	66 70       	andi	r22, 0x06	; 6
    cbc0:	88 e0       	ldi	r24, 0x08	; 8
    cbc2:	48 9f       	mul	r20, r24
    cbc4:	a0 01       	movw	r20, r0
    cbc6:	11 24       	eor	r1, r1
    cbc8:	9c 2d       	mov	r25, r12
    cbca:	91 70       	andi	r25, 0x01	; 1
    cbcc:	c9 2e       	mov	r12, r25
    cbce:	c4 0e       	add	r12, r20
    cbd0:	6c 0d       	add	r22, r12
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    cbd2:	ce 01       	movw	r24, r28
    cbd4:	02 96       	adiw	r24, 0x02	; 2
    cbd6:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    cbda:	60 2f       	mov	r22, r16
    cbdc:	ce 01       	movw	r24, r28
    cbde:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:318
}
    cbe0:	df 91       	pop	r29
    cbe2:	cf 91       	pop	r28
    cbe4:	1f 91       	pop	r17
    cbe6:	0f 91       	pop	r16
    cbe8:	ef 90       	pop	r14
    cbea:	cf 90       	pop	r12
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    cbec:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cbf0 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    cbf0:	ef 92       	push	r14
    cbf2:	ff 92       	push	r15
    cbf4:	0f 93       	push	r16
    cbf6:	1f 93       	push	r17
    cbf8:	cf 93       	push	r28
    cbfa:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    cbfc:	9d e4       	ldi	r25, 0x4D	; 77
    cbfe:	89 9f       	mul	r24, r25
    cc00:	80 01       	movw	r16, r0
    cc02:	11 24       	eor	r1, r1
    cc04:	eb 01       	movw	r28, r22
    cc06:	78 01       	movw	r14, r16
    cc08:	8c ec       	ldi	r24, 0xCC	; 204
    cc0a:	e8 1a       	sub	r14, r24
    cc0c:	8d ef       	ldi	r24, 0xFD	; 253
    cc0e:	f8 0a       	sbc	r15, r24
    cc10:	02 5c       	subi	r16, 0xC2	; 194
    cc12:	1d 4f       	sbci	r17, 0xFD	; 253
    cc14:	69 91       	ld	r22, Y+
    cc16:	c7 01       	movw	r24, r14
    cc18:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    cc1c:	fe 01       	movw	r30, r28
    cc1e:	31 97       	sbiw	r30, 0x01	; 1
    cc20:	80 81       	ld	r24, Z
    cc22:	88 23       	and	r24, r24
    cc24:	31 f0       	breq	.+12     	; 0xcc32 <thermostat_program_set_name(unsigned char, char*)+0x42>
    cc26:	9f ef       	ldi	r25, 0xFF	; 255
    cc28:	e9 1a       	sub	r14, r25
    cc2a:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    cc2c:	e0 16       	cp	r14, r16
    cc2e:	f1 06       	cpc	r15, r17
    cc30:	89 f7       	brne	.-30     	; 0xcc14 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    cc32:	df 91       	pop	r29
    cc34:	cf 91       	pop	r28
    cc36:	1f 91       	pop	r17
    cc38:	0f 91       	pop	r16
    cc3a:	ff 90       	pop	r15
    cc3c:	ef 90       	pop	r14
    cc3e:	08 95       	ret

0000cc40 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    cc40:	ef 92       	push	r14
    cc42:	ff 92       	push	r15
    cc44:	0f 93       	push	r16
    cc46:	1f 93       	push	r17
    cc48:	cf 93       	push	r28
    cc4a:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    cc4c:	e8 2e       	mov	r14, r24
    cc4e:	f1 2c       	mov	r15, r1
    cc50:	91 e2       	ldi	r25, 0x21	; 33
    cc52:	89 9f       	mul	r24, r25
    cc54:	e0 01       	movw	r28, r0
    cc56:	11 24       	eor	r1, r1
    cc58:	87 01       	movw	r16, r14
    cc5a:	00 0f       	add	r16, r16
    cc5c:	11 1f       	adc	r17, r17
    cc5e:	00 0f       	add	r16, r16
    cc60:	11 1f       	adc	r17, r17
    cc62:	f8 01       	movw	r30, r16
    cc64:	e5 52       	subi	r30, 0x25	; 37
    cc66:	f6 4f       	sbci	r31, 0xF6	; 246
    cc68:	40 81       	ld	r20, Z
    cc6a:	51 81       	ldd	r21, Z+1	; 0x01
    cc6c:	62 81       	ldd	r22, Z+2	; 0x02
    cc6e:	73 81       	ldd	r23, Z+3	; 0x03
    cc70:	ce 01       	movw	r24, r28
    cc72:	80 5a       	subi	r24, 0xA0	; 160
    cc74:	9e 4f       	sbci	r25, 0xFE	; 254
    cc76:	0e 94 ed af 	call	0x15fda	; 0x15fda <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    cc7a:	f8 01       	movw	r30, r16
    cc7c:	e1 51       	subi	r30, 0x11	; 17
    cc7e:	f6 4f       	sbci	r31, 0xF6	; 246
    cc80:	40 81       	ld	r20, Z
    cc82:	51 81       	ldd	r21, Z+1	; 0x01
    cc84:	62 81       	ldd	r22, Z+2	; 0x02
    cc86:	73 81       	ldd	r23, Z+3	; 0x03
    cc88:	ce 01       	movw	r24, r28
    cc8a:	8c 59       	subi	r24, 0x9C	; 156
    cc8c:	9e 4f       	sbci	r25, 0xFE	; 254
    cc8e:	0e 94 ed af 	call	0x15fda	; 0x15fda <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    cc92:	f8 01       	movw	r30, r16
    cc94:	ed 5f       	subi	r30, 0xFD	; 253
    cc96:	f5 4f       	sbci	r31, 0xF5	; 245
    cc98:	40 81       	ld	r20, Z
    cc9a:	51 81       	ldd	r21, Z+1	; 0x01
    cc9c:	62 81       	ldd	r22, Z+2	; 0x02
    cc9e:	73 81       	ldd	r23, Z+3	; 0x03
    cca0:	ce 01       	movw	r24, r28
    cca2:	88 59       	subi	r24, 0x98	; 152
    cca4:	9e 4f       	sbci	r25, 0xFE	; 254
    cca6:	0e 94 ed af 	call	0x15fda	; 0x15fda <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ccaa:	f7 01       	movw	r30, r14
    ccac:	e9 5e       	subi	r30, 0xE9	; 233
    ccae:	f5 4f       	sbci	r31, 0xF5	; 245
    ccb0:	60 81       	ld	r22, Z
    ccb2:	ce 01       	movw	r24, r28
    ccb4:	84 59       	subi	r24, 0x94	; 148
    ccb6:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:237
}
    ccb8:	df 91       	pop	r29
    ccba:	cf 91       	pop	r28
    ccbc:	1f 91       	pop	r17
    ccbe:	0f 91       	pop	r16
    ccc0:	ff 90       	pop	r15
    ccc2:	ef 90       	pop	r14
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    ccc4:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000ccc8 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
    ccc8:	cf 93       	push	r28
    ccca:	df 93       	push	r29
    cccc:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    ccce:	fc 01       	movw	r30, r24
    ccd0:	ff 27       	eor	r31, r31
    ccd2:	e9 5e       	subi	r30, 0xE9	; 233
    ccd4:	f5 4f       	sbci	r31, 0xF5	; 245
    ccd6:	20 83       	st	Z, r18
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    ccd8:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    ccdc:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
  thermostat_ring_pid_set_time(args1, args3);
}
    ccde:	df 91       	pop	r29
    cce0:	cf 91       	pop	r28
thermostat_ring_pid_set_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:262
    cce2:	0c 94 20 66 	jmp	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000cce6 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
    cce6:	cf 93       	push	r28
    cce8:	df 93       	push	r29
    ccea:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    ccec:	fc 01       	movw	r30, r24
    ccee:	ff 27       	eor	r31, r31
    ccf0:	ee 0f       	add	r30, r30
    ccf2:	ff 1f       	adc	r31, r31
    ccf4:	ee 0f       	add	r30, r30
    ccf6:	ff 1f       	adc	r31, r31
    ccf8:	ed 5f       	subi	r30, 0xFD	; 253
    ccfa:	f5 4f       	sbci	r31, 0xF5	; 245
    ccfc:	40 83       	st	Z, r20
    ccfe:	51 83       	std	Z+1, r21	; 0x01
    cd00:	62 83       	std	Z+2, r22	; 0x02
    cd02:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    cd04:	8c 2f       	mov	r24, r28
    cd06:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    cd0a:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
  thermostat_ring_pid_set_kd(args1, args2);
}
    cd0c:	df 91       	pop	r29
    cd0e:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:255
    cd10:	0c 94 20 66 	jmp	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000cd14 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2210
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
    cd14:	cf 93       	push	r28
    cd16:	df 93       	push	r29
    cd18:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    cd1a:	fc 01       	movw	r30, r24
    cd1c:	ff 27       	eor	r31, r31
    cd1e:	ee 0f       	add	r30, r30
    cd20:	ff 1f       	adc	r31, r31
    cd22:	ee 0f       	add	r30, r30
    cd24:	ff 1f       	adc	r31, r31
    cd26:	e1 51       	subi	r30, 0x11	; 17
    cd28:	f6 4f       	sbci	r31, 0xF6	; 246
    cd2a:	40 83       	st	Z, r20
    cd2c:	51 83       	std	Z+1, r21	; 0x01
    cd2e:	62 83       	std	Z+2, r22	; 0x02
    cd30:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    cd32:	8c 2f       	mov	r24, r28
    cd34:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    cd38:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
  thermostat_ring_pid_set_ki(args1, args2);
}
    cd3a:	df 91       	pop	r29
    cd3c:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:249
    cd3e:	0c 94 20 66 	jmp	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000cd42 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
    cd42:	cf 93       	push	r28
    cd44:	df 93       	push	r29
    cd46:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    cd48:	fc 01       	movw	r30, r24
    cd4a:	ff 27       	eor	r31, r31
    cd4c:	ee 0f       	add	r30, r30
    cd4e:	ff 1f       	adc	r31, r31
    cd50:	ee 0f       	add	r30, r30
    cd52:	ff 1f       	adc	r31, r31
    cd54:	e5 52       	subi	r30, 0x25	; 37
    cd56:	f6 4f       	sbci	r31, 0xF6	; 246
    cd58:	40 83       	st	Z, r20
    cd5a:	51 83       	std	Z+1, r21	; 0x01
    cd5c:	62 83       	std	Z+2, r22	; 0x02
    cd5e:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    cd60:	8c 2f       	mov	r24, r28
    cd62:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    cd66:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
  thermostat_ring_pid_set_kp(args1, args2);
}
    cd68:	df 91       	pop	r29
    cd6a:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:243
    cd6c:	0c 94 20 66 	jmp	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000cd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    cd70:	21 e2       	ldi	r18, 0x21	; 33
    cd72:	82 9f       	mul	r24, r18
    cd74:	c0 01       	movw	r24, r0
    cd76:	11 24       	eor	r1, r1
    cd78:	82 5a       	subi	r24, 0xA2	; 162
    cd7a:	9e 4f       	sbci	r25, 0xFE	; 254
    cd7c:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cd80 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5874
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/
void button_click_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cd80:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5875
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    cd82:	60 e0       	ldi	r22, 0x00	; 0
    cd84:	44 23       	and	r20, r20
    cd86:	61 f0       	breq	.+24     	; 0xcda0 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5876
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    cd88:	61 e0       	ldi	r22, 0x01	; 1
    cd8a:	41 30       	cpi	r20, 0x01	; 1
    cd8c:	49 f0       	breq	.+18     	; 0xcda0 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5877
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    cd8e:	67 e0       	ldi	r22, 0x07	; 7
    cd90:	42 30       	cpi	r20, 0x02	; 2
    cd92:	31 f0       	breq	.+12     	; 0xcda0 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5878
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    cd94:	62 e0       	ldi	r22, 0x02	; 2
    cd96:	43 30       	cpi	r20, 0x03	; 3
    cd98:	19 f0       	breq	.+6      	; 0xcda0 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5879
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    cd9a:	44 30       	cpi	r20, 0x04	; 4
    cd9c:	19 f4       	brne	.+6      	; 0xcda4 <button_click_term_set_mode(unsigned int, unsigned int, unsigned char)+0x24>
    cd9e:	68 e0       	ldi	r22, 0x08	; 8
    cda0:	0c 94 b8 66 	jmp	0xcd70	; 0xcd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5880
}
    cda4:	08 95       	ret

0000cda6 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    cda6:	1f 93       	push	r17
    cda8:	cf 93       	push	r28
    cdaa:	df 93       	push	r29
    cdac:	16 2f       	mov	r17, r22
    cdae:	67 2f       	mov	r22, r23
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    cdb0:	91 e2       	ldi	r25, 0x21	; 33
    cdb2:	89 9f       	mul	r24, r25
    cdb4:	e0 01       	movw	r28, r0
    cdb6:	11 24       	eor	r1, r1
    cdb8:	ce 01       	movw	r24, r28
    cdba:	8a 5a       	subi	r24, 0xAA	; 170
    cdbc:	9e 4f       	sbci	r25, 0xFE	; 254
    cdbe:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    cdc2:	61 2f       	mov	r22, r17
    cdc4:	ce 01       	movw	r24, r28
    cdc6:	89 5a       	subi	r24, 0xA9	; 169
    cdc8:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:160
}
    cdca:	df 91       	pop	r29
    cdcc:	cf 91       	pop	r28
    cdce:	1f 91       	pop	r17
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    cdd0:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cdd4 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
    cdd4:	cf 93       	push	r28
    cdd6:	c8 2f       	mov	r28, r24
    cdd8:	cb 01       	movw	r24, r22
    cdda:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    cddc:	20 e0       	ldi	r18, 0x00	; 0
    cdde:	30 e0       	ldi	r19, 0x00	; 0
    cde0:	40 e2       	ldi	r20, 0x20	; 32
    cde2:	51 e4       	ldi	r21, 0x41	; 65
    cde4:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
    cde8:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
    cdec:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
}
    cdee:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    cdf0:	0c 94 d3 66 	jmp	0xcda6	; 0xcda6 <thermostat_ring_set_mezni(unsigned char, int)>

0000cdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>:
_Z30thermostat_ring_set_program_idhh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    cdf4:	21 e2       	ldi	r18, 0x21	; 33
    cdf6:	82 9f       	mul	r24, r18
    cdf8:	c0 01       	movw	r24, r0
    cdfa:	11 24       	eor	r1, r1
    cdfc:	85 5a       	subi	r24, 0xA5	; 165
    cdfe:	9e 4f       	sbci	r25, 0xFE	; 254
    ce00:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000ce04 <button_click_deassociate_default_ring_program_for_term(unsigned int, unsigned int, unsigned char)>:
_Z54button_click_deassociate_default_ring_program_for_termjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5620
/*
   funkce uvolneni programu od termostatu
*/
void button_click_deassociate_default_ring_program_for_term(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_set_program_id(default_ring, PROG_FREE);
    ce04:	6f ef       	ldi	r22, 0xFF	; 255
    ce06:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    ce0a:	0c 94 fa 66 	jmp	0xcdf4	; 0xcdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

0000ce0e <button_click_set_show_default_ring_program(unsigned int, unsigned int, unsigned char)>:
_Z42button_click_set_show_default_ring_programjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5596
   akce na klik na menu
   args3 je index polozky menu tj. id programu
*/
void button_click_set_show_default_ring_program(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_set_program_id(default_ring, args3);
    ce0e:	64 2f       	mov	r22, r20
    ce10:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    ce14:	0c 94 fa 66 	jmp	0xcdf4	; 0xcdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>

0000ce18 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    ce18:	df 92       	push	r13
    ce1a:	ef 92       	push	r14
    ce1c:	ff 92       	push	r15
    ce1e:	0f 93       	push	r16
    ce20:	1f 93       	push	r17
    ce22:	cf 93       	push	r28
    ce24:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    ce26:	91 e2       	ldi	r25, 0x21	; 33
    ce28:	89 9f       	mul	r24, r25
    ce2a:	e0 01       	movw	r28, r0
    ce2c:	11 24       	eor	r1, r1
    ce2e:	7b 01       	movw	r14, r22
    ce30:	8e 01       	movw	r16, r28
    ce32:	04 5b       	subi	r16, 0xB4	; 180
    ce34:	1e 4f       	sbci	r17, 0xFE	; 254
    ce36:	cb 5a       	subi	r28, 0xAB	; 171
    ce38:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    ce3a:	f7 01       	movw	r30, r14
    ce3c:	d1 90       	ld	r13, Z+
    ce3e:	7f 01       	movw	r14, r30
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    ce40:	6d 2d       	mov	r22, r13
    ce42:	c8 01       	movw	r24, r16
    ce44:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    ce48:	dd 20       	and	r13, r13
    ce4a:	29 f0       	breq	.+10     	; 0xce56 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    ce4c:	0f 5f       	subi	r16, 0xFF	; 255
    ce4e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    ce50:	0c 17       	cp	r16, r28
    ce52:	1d 07       	cpc	r17, r29
    ce54:	91 f7       	brne	.-28     	; 0xce3a <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    ce56:	df 91       	pop	r29
    ce58:	cf 91       	pop	r28
    ce5a:	1f 91       	pop	r17
    ce5c:	0f 91       	pop	r16
    ce5e:	ff 90       	pop	r15
    ce60:	ef 90       	pop	r14
    ce62:	df 90       	pop	r13
    ce64:	08 95       	ret

0000ce66 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    ce66:	8f 92       	push	r8
    ce68:	9f 92       	push	r9
    ce6a:	af 92       	push	r10
    ce6c:	bf 92       	push	r11
    ce6e:	ef 92       	push	r14
    ce70:	ff 92       	push	r15
    ce72:	0f 93       	push	r16
    ce74:	1f 93       	push	r17
    ce76:	cf 93       	push	r28
    ce78:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    ce7a:	08 2f       	mov	r16, r24
    ce7c:	10 e0       	ldi	r17, 0x00	; 0
    ce7e:	78 01       	movw	r14, r16
    ce80:	ee 0c       	add	r14, r14
    ce82:	ff 1c       	adc	r15, r15
    ce84:	ee 0c       	add	r14, r14
    ce86:	ff 1c       	adc	r15, r15
    ce88:	f7 01       	movw	r30, r14
    ce8a:	e5 52       	subi	r30, 0x25	; 37
    ce8c:	f6 4f       	sbci	r31, 0xF6	; 246
    ce8e:	81 2c       	mov	r8, r1
    ce90:	91 2c       	mov	r9, r1
    ce92:	90 e8       	ldi	r25, 0x80	; 128
    ce94:	a9 2e       	mov	r10, r25
    ce96:	9f e3       	ldi	r25, 0x3F	; 63
    ce98:	b9 2e       	mov	r11, r25
    ce9a:	80 82       	st	Z, r8
    ce9c:	91 82       	std	Z+1, r9	; 0x01
    ce9e:	a2 82       	std	Z+2, r10	; 0x02
    cea0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    cea2:	8c 2f       	mov	r24, r28
    cea4:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    cea8:	8c 2f       	mov	r24, r28
    ceaa:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    ceae:	f7 01       	movw	r30, r14
    ceb0:	e1 51       	subi	r30, 0x11	; 17
    ceb2:	f6 4f       	sbci	r31, 0xF6	; 246
    ceb4:	80 e0       	ldi	r24, 0x00	; 0
    ceb6:	90 e0       	ldi	r25, 0x00	; 0
    ceb8:	a0 e0       	ldi	r26, 0x00	; 0
    ceba:	bf e3       	ldi	r27, 0x3F	; 63
    cebc:	80 83       	st	Z, r24
    cebe:	91 83       	std	Z+1, r25	; 0x01
    cec0:	a2 83       	std	Z+2, r26	; 0x02
    cec2:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    cec4:	8c 2f       	mov	r24, r28
    cec6:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    ceca:	8c 2f       	mov	r24, r28
    cecc:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    ced0:	f7 01       	movw	r30, r14
    ced2:	ed 5f       	subi	r30, 0xFD	; 253
    ced4:	f5 4f       	sbci	r31, 0xF5	; 245
    ced6:	80 82       	st	Z, r8
    ced8:	91 82       	std	Z+1, r9	; 0x01
    ceda:	a2 82       	std	Z+2, r10	; 0x02
    cedc:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    cede:	8c 2f       	mov	r24, r28
    cee0:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    cee4:	8c 2f       	mov	r24, r28
    cee6:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    ceea:	f8 01       	movw	r30, r16
    ceec:	e9 5e       	subi	r30, 0xE9	; 233
    ceee:	f5 4f       	sbci	r31, 0xF5	; 245
    cef0:	8c e3       	ldi	r24, 0x3C	; 60
    cef2:	80 83       	st	Z, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    cef4:	8c 2f       	mov	r24, r28
    cef6:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    cefa:	8c 2f       	mov	r24, r28
    cefc:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    cf00:	81 e2       	ldi	r24, 0x21	; 33
    cf02:	c8 9f       	mul	r28, r24
    cf04:	70 01       	movw	r14, r0
    cf06:	11 24       	eor	r1, r1
    cf08:	6f ef       	ldi	r22, 0xFF	; 255
    cf0a:	c7 01       	movw	r24, r14
    cf0c:	84 5a       	subi	r24, 0xA4	; 164
    cf0e:	9e 4f       	sbci	r25, 0xFE	; 254
    cf10:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
    cf14:	6c ed       	ldi	r22, 0xDC	; 220
    cf16:	70 e0       	ldi	r23, 0x00	; 0
    cf18:	8c 2f       	mov	r24, r28
    cf1a:	0e 94 d3 66 	call	0xcda6	; 0xcda6 <thermostat_ring_set_mezni(unsigned char, int)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:425
  thermostat_ring_set_program_id(idx, PROG_FREE);
    cf1e:	6f ef       	ldi	r22, 0xFF	; 255
    cf20:	8c 2f       	mov	r24, r28
    cf22:	0e 94 fa 66 	call	0xcdf4	; 0xcdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
thermostat_ring_set_state():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    cf26:	f8 01       	movw	r30, r16
    cf28:	ed 57       	subi	r30, 0x7D	; 125
    cf2a:	f5 4f       	sbci	r31, 0xF5	; 245
    cf2c:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    cf2e:	6f ef       	ldi	r22, 0xFF	; 255
    cf30:	c7 01       	movw	r24, r14
    cf32:	83 5a       	subi	r24, 0xA3	; 163
    cf34:	9e 4f       	sbci	r25, 0xFE	; 254
    cf36:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
thermostat_ring_set_output():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    cf3a:	6f ef       	ldi	r22, 0xFF	; 255
    cf3c:	c7 01       	movw	r24, r14
    cf3e:	81 5a       	subi	r24, 0xA1	; 161
    cf40:	9e 4f       	sbci	r25, 0xFE	; 254
    cf42:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    cf46:	60 e0       	ldi	r22, 0x00	; 0
    cf48:	8c 2f       	mov	r24, r28
    cf4a:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    cf4e:	63 e6       	ldi	r22, 0x63	; 99
    cf50:	73 e0       	ldi	r23, 0x03	; 3
    cf52:	8c 2f       	mov	r24, r28
    cf54:	0e 94 0c 67 	call	0xce18	; 0xce18 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    cf58:	60 e0       	ldi	r22, 0x00	; 0
    cf5a:	c7 01       	movw	r24, r14
    cf5c:	88 5a       	subi	r24, 0xA8	; 168
    cf5e:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    cf60:	cf 91       	pop	r28
    cf62:	1f 91       	pop	r17
    cf64:	0f 91       	pop	r16
    cf66:	ff 90       	pop	r15
    cf68:	ef 90       	pop	r14
    cf6a:	bf 90       	pop	r11
    cf6c:	af 90       	pop	r10
    cf6e:	9f 90       	pop	r9
    cf70:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    cf72:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cf76 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z25helper_set_term_ring_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5777
   args2
   args3
   promene nemaji zadny vyznam
*/
void helper_set_term_ring_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    cf76:	cf 93       	push	r28
    cf78:	df 93       	push	r29
    cf7a:	00 d0       	rcall	.+0      	; 0xcf7c <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    cf7c:	00 d0       	rcall	.+0      	; 0xcf7e <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    cf7e:	00 d0       	rcall	.+0      	; 0xcf80 <helper_set_term_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    cf80:	1f 92       	push	r1
    cf82:	cd b7       	in	r28, 0x3d	; 61
    cf84:	de b7       	in	r29, 0x3e	; 62
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    cf86:	66 e3       	ldi	r22, 0x36	; 54
    cf88:	79 e0       	ldi	r23, 0x09	; 9
    cf8a:	ce 01       	movw	r24, r28
    cf8c:	01 96       	adiw	r24, 0x01	; 1
    cf8e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z25helper_set_term_ring_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5781
void helper_set_term_ring_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[10];
  display_element_get_string(name);
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    cf92:	be 01       	movw	r22, r28
    cf94:	6f 5f       	subi	r22, 0xFF	; 255
    cf96:	7f 4f       	sbci	r23, 0xFF	; 255
    cf98:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <dialog_set_string_args>
    cf9c:	0e 94 0c 67 	call	0xce18	; 0xce18 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5782
}
    cfa0:	2a 96       	adiw	r28, 0x0a	; 10
    cfa2:	0f b6       	in	r0, 0x3f	; 63
    cfa4:	f8 94       	cli
    cfa6:	de bf       	out	0x3e, r29	; 62
    cfa8:	0f be       	out	0x3f, r0	; 63
    cfaa:	cd bf       	out	0x3d, r28	; 61
    cfac:	df 91       	pop	r29
    cfae:	cf 91       	pop	r28
    cfb0:	08 95       	ret

0000cfb2 <button_click_deassociate_default_ring_input_sensor_for_term(unsigned int, unsigned int, unsigned char)>:
_Z59button_click_deassociate_default_ring_input_sensor_for_termjjh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    cfb2:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    cfb6:	21 e2       	ldi	r18, 0x21	; 33
    cfb8:	82 9f       	mul	r24, r18
    cfba:	c0 01       	movw	r24, r0
    cfbc:	11 24       	eor	r1, r1
    cfbe:	6f ef       	ldi	r22, 0xFF	; 255
    cfc0:	84 5a       	subi	r24, 0xA4	; 164
    cfc2:	9e 4f       	sbci	r25, 0xFE	; 254
    cfc4:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cfc8 <button_click_set_show_default_ring_input(unsigned int, unsigned int, unsigned char)>:
_Z40button_click_set_show_default_ring_inputjjh():
    cfc8:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    cfcc:	21 e2       	ldi	r18, 0x21	; 33
    cfce:	82 9f       	mul	r24, r18
    cfd0:	c0 01       	movw	r24, r0
    cfd2:	11 24       	eor	r1, r1
    cfd4:	64 2f       	mov	r22, r20
    cfd6:	84 5a       	subi	r24, 0xA4	; 164
    cfd8:	9e 4f       	sbci	r25, 0xFE	; 254
    cfda:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000cfde <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    cfde:	af 92       	push	r10
    cfe0:	bf 92       	push	r11
    cfe2:	cf 92       	push	r12
    cfe4:	df 92       	push	r13
    cfe6:	ef 92       	push	r14
    cfe8:	ff 92       	push	r15
    cfea:	0f 93       	push	r16
    cfec:	1f 93       	push	r17
    cfee:	cf 93       	push	r28
    cff0:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    cff2:	86 30       	cpi	r24, 0x06	; 6
    cff4:	08 f0       	brcs	.+2      	; 0xcff8 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    cff6:	49 c0       	rjmp	.+146    	; 0xd08a <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    cff8:	6b 01       	movw	r12, r22
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    cffa:	96 e1       	ldi	r25, 0x16	; 22
    cffc:	89 9f       	mul	r24, r25
    cffe:	e0 01       	movw	r28, r0
    d000:	11 24       	eor	r1, r1
    d002:	f6 01       	movw	r30, r12
    d004:	61 91       	ld	r22, Z+
    d006:	7f 01       	movw	r14, r30
    d008:	ce 01       	movw	r24, r28
    d00a:	88 53       	subi	r24, 0x38	; 56
    d00c:	9f 4f       	sbci	r25, 0xFF	; 255
    d00e:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d012:	8e 01       	movw	r16, r28
    d014:	07 53       	subi	r16, 0x37	; 55
    d016:	1f 4f       	sbci	r17, 0xFF	; 255
    d018:	5e 01       	movw	r10, r28
    d01a:	f1 ed       	ldi	r31, 0xD1	; 209
    d01c:	af 0e       	add	r10, r31
    d01e:	b1 1c       	adc	r11, r1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    d020:	f7 01       	movw	r30, r14
    d022:	61 91       	ld	r22, Z+
    d024:	7f 01       	movw	r14, r30
    d026:	c8 01       	movw	r24, r16
    d028:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    d02c:	f7 01       	movw	r30, r14
    d02e:	62 85       	ldd	r22, Z+10	; 0x0a
    d030:	c8 01       	movw	r24, r16
    d032:	0b 96       	adiw	r24, 0x0b	; 11
    d034:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d038:	0f 5f       	subi	r16, 0xFF	; 255
    d03a:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    d03c:	0a 15       	cp	r16, r10
    d03e:	1b 05       	cpc	r17, r11
    d040:	79 f7       	brne	.-34     	; 0xd020 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    d042:	f6 01       	movw	r30, r12
    d044:	61 85       	ldd	r22, Z+9	; 0x09
    d046:	c8 01       	movw	r24, r16
    d048:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    d04c:	f6 01       	movw	r30, r12
    d04e:	63 85       	ldd	r22, Z+11	; 0x0b
    d050:	ce 01       	movw	r24, r28
    d052:	8e 52       	subi	r24, 0x2E	; 46
    d054:	9f 4f       	sbci	r25, 0xFF	; 255
    d056:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    d05a:	f6 01       	movw	r30, r12
    d05c:	62 85       	ldd	r22, Z+10	; 0x0a
    d05e:	ce 01       	movw	r24, r28
    d060:	8d 52       	subi	r24, 0x2D	; 45
    d062:	9f 4f       	sbci	r25, 0xFF	; 255
    d064:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    d068:	f6 01       	movw	r30, r12
    d06a:	64 89       	ldd	r22, Z+20	; 0x14
    d06c:	ce 01       	movw	r24, r28
    d06e:	84 52       	subi	r24, 0x24	; 36
    d070:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:69
  }
}
    d072:	df 91       	pop	r29
    d074:	cf 91       	pop	r28
    d076:	1f 91       	pop	r17
    d078:	0f 91       	pop	r16
    d07a:	ff 90       	pop	r15
    d07c:	ef 90       	pop	r14
    d07e:	df 90       	pop	r13
    d080:	cf 90       	pop	r12
    d082:	bf 90       	pop	r11
    d084:	af 90       	pop	r10
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    d086:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:69
  }
}
    d08a:	df 91       	pop	r29
    d08c:	cf 91       	pop	r28
    d08e:	1f 91       	pop	r17
    d090:	0f 91       	pop	r16
    d092:	ff 90       	pop	r15
    d094:	ef 90       	pop	r14
    d096:	df 90       	pop	r13
    d098:	cf 90       	pop	r12
    d09a:	bf 90       	pop	r11
    d09c:	af 90       	pop	r10
    d09e:	08 95       	ret

0000d0a0 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    d0a0:	ff 92       	push	r15
    d0a2:	0f 93       	push	r16
    d0a4:	1f 93       	push	r17
    d0a6:	cf 93       	push	r28
    d0a8:	df 93       	push	r29
    d0aa:	8c 01       	movw	r16, r24
    d0ac:	d0 e0       	ldi	r29, 0x00	; 0
    d0ae:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    d0b0:	f8 01       	movw	r30, r16
    d0b2:	f1 90       	ld	r15, Z+
    d0b4:	8f 01       	movw	r16, r30
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    d0b6:	6f 2d       	mov	r22, r15
    d0b8:	ce 01       	movw	r24, r28
    d0ba:	8c 59       	subi	r24, 0x9C	; 156
    d0bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d0be:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    d0c2:	f1 10       	cpse	r15, r1
    d0c4:	0b c0       	rjmp	.+22     	; 0xd0dc <device_set_name(char*)+0x3c>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    d0c6:	60 e0       	ldi	r22, 0x00	; 0
    d0c8:	ce 01       	movw	r24, r28
    d0ca:	8b 59       	subi	r24, 0x9B	; 155
    d0cc:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    d0ce:	df 91       	pop	r29
    d0d0:	cf 91       	pop	r28
    d0d2:	1f 91       	pop	r17
    d0d4:	0f 91       	pop	r16
    d0d6:	ff 90       	pop	r15
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    d0d8:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d0dc:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    d0de:	c9 30       	cpi	r28, 0x09	; 9
    d0e0:	d1 05       	cpc	r29, r1
    d0e2:	31 f7       	brne	.-52     	; 0xd0b0 <device_set_name(char*)+0x10>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    d0e4:	df 91       	pop	r29
    d0e6:	cf 91       	pop	r28
    d0e8:	1f 91       	pop	r17
    d0ea:	0f 91       	pop	r16
    d0ec:	ff 90       	pop	r15
    d0ee:	08 95       	ret

0000d0f0 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    d0f0:	ef 92       	push	r14
    d0f2:	ff 92       	push	r15
    d0f4:	0f 93       	push	r16
    d0f6:	1f 93       	push	r17
    d0f8:	cf 93       	push	r28
    d0fa:	df 93       	push	r29
    d0fc:	08 ea       	ldi	r16, 0xA8	; 168
    d0fe:	1c e0       	ldi	r17, 0x0C	; 12
    d100:	ce e6       	ldi	r28, 0x6E	; 110
    d102:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    d104:	f8 01       	movw	r30, r16
    d106:	61 91       	ld	r22, Z+
    d108:	8f 01       	movw	r16, r30
    d10a:	ce 01       	movw	r24, r28
    d10c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d110:	21 96       	adiw	r28, 0x01	; 1
    d112:	c4 37       	cpi	r28, 0x74	; 116
    d114:	d1 05       	cpc	r29, r1
    d116:	b1 f7       	brne	.-20     	; 0xd104 <save_setup_network()+0x14>
    d118:	0e ea       	ldi	r16, 0xAE	; 174
    d11a:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    d11c:	f8 01       	movw	r30, r16
    d11e:	61 91       	ld	r22, Z+
    d120:	8f 01       	movw	r16, r30
    d122:	ce 01       	movw	r24, r28
    d124:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d128:	21 96       	adiw	r28, 0x01	; 1
    d12a:	c8 37       	cpi	r28, 0x78	; 120
    d12c:	d1 05       	cpc	r29, r1
    d12e:	b1 f7       	brne	.-20     	; 0xd11c <save_setup_network()+0x2c>
    d130:	02 eb       	ldi	r16, 0xB2	; 178
    d132:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    d134:	f8 01       	movw	r30, r16
    d136:	61 91       	ld	r22, Z+
    d138:	8f 01       	movw	r16, r30
    d13a:	ce 01       	movw	r24, r28
    d13c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d140:	21 96       	adiw	r28, 0x01	; 1
    d142:	cc 37       	cpi	r28, 0x7C	; 124
    d144:	d1 05       	cpc	r29, r1
    d146:	b1 f7       	brne	.-20     	; 0xd134 <save_setup_network()+0x44>
    d148:	2a eb       	ldi	r18, 0xBA	; 186
    d14a:	e2 2e       	mov	r14, r18
    d14c:	2c e0       	ldi	r18, 0x0C	; 12
    d14e:	f2 2e       	mov	r15, r18
    d150:	00 e8       	ldi	r16, 0x80	; 128
    d152:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    d154:	f7 01       	movw	r30, r14
    d156:	61 91       	ld	r22, Z+
    d158:	7f 01       	movw	r14, r30
    d15a:	c8 01       	movw	r24, r16
    d15c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d160:	0f 5f       	subi	r16, 0xFF	; 255
    d162:	1f 4f       	sbci	r17, 0xFF	; 255
    d164:	04 38       	cpi	r16, 0x84	; 132
    d166:	11 05       	cpc	r17, r1
    d168:	a9 f7       	brne	.-22     	; 0xd154 <save_setup_network()+0x64>
    d16a:	96 eb       	ldi	r25, 0xB6	; 182
    d16c:	e9 2e       	mov	r14, r25
    d16e:	9c e0       	ldi	r25, 0x0C	; 12
    d170:	f9 2e       	mov	r15, r25
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    d172:	f7 01       	movw	r30, r14
    d174:	61 91       	ld	r22, Z+
    d176:	7f 01       	movw	r14, r30
    d178:	ce 01       	movw	r24, r28
    d17a:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d17e:	21 96       	adiw	r28, 0x01	; 1
    d180:	c0 38       	cpi	r28, 0x80	; 128
    d182:	d1 05       	cpc	r29, r1
    d184:	b1 f7       	brne	.-20     	; 0xd172 <save_setup_network()+0x82>
    d186:	8e eb       	ldi	r24, 0xBE	; 190
    d188:	e8 2e       	mov	r14, r24
    d18a:	8c e0       	ldi	r24, 0x0C	; 12
    d18c:	f8 2e       	mov	r15, r24
    d18e:	c4 e6       	ldi	r28, 0x64	; 100
    d190:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    d192:	f7 01       	movw	r30, r14
    d194:	61 91       	ld	r22, Z+
    d196:	7f 01       	movw	r14, r30
    d198:	ce 01       	movw	r24, r28
    d19a:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d19e:	21 96       	adiw	r28, 0x01	; 1
    d1a0:	cd 36       	cpi	r28, 0x6D	; 109
    d1a2:	d1 05       	cpc	r29, r1
    d1a4:	b1 f7       	brne	.-20     	; 0xd192 <save_setup_network()+0xa2>
    d1a6:	c8 ec       	ldi	r28, 0xC8	; 200
    d1a8:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    d1aa:	69 91       	ld	r22, Y+
    d1ac:	c8 01       	movw	r24, r16
    d1ae:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d1b2:	0f 5f       	subi	r16, 0xFF	; 255
    d1b4:	1f 4f       	sbci	r17, 0xFF	; 255
    d1b6:	08 38       	cpi	r16, 0x88	; 136
    d1b8:	11 05       	cpc	r17, r1
    d1ba:	b9 f7       	brne	.-18     	; 0xd1aa <save_setup_network()+0xba>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    d1bc:	60 91 cd 0c 	lds	r22, 0x0CCD	; 0x800ccd <device+0x25>
    d1c0:	88 e8       	ldi	r24, 0x88	; 136
    d1c2:	90 e0       	ldi	r25, 0x00	; 0
    d1c4:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    d1c8:	60 91 cc 0c 	lds	r22, 0x0CCC	; 0x800ccc <device+0x24>
    d1cc:	89 e8       	ldi	r24, 0x89	; 137
    d1ce:	90 e0       	ldi	r25, 0x00	; 0
    d1d0:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d1d4:	0e ec       	ldi	r16, 0xCE	; 206
    d1d6:	1c e0       	ldi	r17, 0x0C	; 12
    d1d8:	ca e8       	ldi	r28, 0x8A	; 138
    d1da:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    d1dc:	f8 01       	movw	r30, r16
    d1de:	61 91       	ld	r22, Z+
    d1e0:	8f 01       	movw	r16, r30
    d1e2:	ce 01       	movw	r24, r28
    d1e4:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d1e8:	21 96       	adiw	r28, 0x01	; 1
    d1ea:	ce 39       	cpi	r28, 0x9E	; 158
    d1ec:	d1 05       	cpc	r29, r1
    d1ee:	b1 f7       	brne	.-20     	; 0xd1dc <save_setup_network()+0xec>
    d1f0:	02 ee       	ldi	r16, 0xE2	; 226
    d1f2:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    d1f4:	f8 01       	movw	r30, r16
    d1f6:	61 91       	ld	r22, Z+
    d1f8:	8f 01       	movw	r16, r30
    d1fa:	ce 01       	movw	r24, r28
    d1fc:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d200:	21 96       	adiw	r28, 0x01	; 1
    d202:	c2 3b       	cpi	r28, 0xB2	; 178
    d204:	d1 05       	cpc	r29, r1
    d206:	b1 f7       	brne	.-20     	; 0xd1f4 <save_setup_network()+0x104>
    d208:	06 ef       	ldi	r16, 0xF6	; 246
    d20a:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    d20c:	f8 01       	movw	r30, r16
    d20e:	61 91       	ld	r22, Z+
    d210:	8f 01       	movw	r16, r30
    d212:	ce 01       	movw	r24, r28
    d214:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
    d218:	21 96       	adiw	r28, 0x01	; 1
    d21a:	c6 3b       	cpi	r28, 0xB6	; 182
    d21c:	d1 05       	cpc	r29, r1
    d21e:	b1 f7       	brne	.-20     	; 0xd20c <save_setup_network()+0x11c>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:54
}
    d220:	df 91       	pop	r29
    d222:	cf 91       	pop	r28
    d224:	1f 91       	pop	r17
    d226:	0f 91       	pop	r16
    d228:	ff 90       	pop	r15
    d22a:	ef 90       	pop	r14
    d22c:	08 95       	ret

0000d22e <remote_tds_set_name(unsigned char, char*) [clone .part.23]>:
_Z19remote_tds_set_namehPc.part.23():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    d22e:	df 92       	push	r13
    d230:	ef 92       	push	r14
    d232:	ff 92       	push	r15
    d234:	0f 93       	push	r16
    d236:	1f 93       	push	r17
    d238:	cf 93       	push	r28
    d23a:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    d23c:	94 e1       	ldi	r25, 0x14	; 20
    d23e:	89 9f       	mul	r24, r25
    d240:	e0 01       	movw	r28, r0
    d242:	11 24       	eor	r1, r1
    d244:	7b 01       	movw	r14, r22
    d246:	8e 01       	movw	r16, r28
    d248:	06 55       	subi	r16, 0x56	; 86
    d24a:	1a 4f       	sbci	r17, 0xFA	; 250
    d24c:	c4 54       	subi	r28, 0x44	; 68
    d24e:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    d250:	f7 01       	movw	r30, r14
    d252:	d1 90       	ld	r13, Z+
    d254:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2654
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    d256:	6d 2d       	mov	r22, r13
    d258:	c8 01       	movw	r24, r16
    d25a:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
      if (t == 0) break;
    d25e:	dd 20       	and	r13, r13
    d260:	29 f0       	breq	.+10     	; 0xd26c <remote_tds_set_name(unsigned char, char*) [clone .part.23]+0x3e>
    d262:	0f 5f       	subi	r16, 0xFF	; 255
    d264:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2651
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    d266:	0c 17       	cp	r16, r28
    d268:	1d 07       	cpc	r17, r29
    d26a:	91 f7       	brne	.-28     	; 0xd250 <remote_tds_set_name(unsigned char, char*) [clone .part.23]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    d26c:	df 91       	pop	r29
    d26e:	cf 91       	pop	r28
    d270:	1f 91       	pop	r17
    d272:	0f 91       	pop	r16
    d274:	ff 90       	pop	r15
    d276:	ef 90       	pop	r14
    d278:	df 90       	pop	r13
    d27a:	08 95       	ret

0000d27c <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5637
    return 1;
  return 0;
}
////
void term_ring_do_activate(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d27c:	cf 93       	push	r28
    d27e:	c8 2f       	mov	r28, r24
thermostat_ring_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    d280:	21 e2       	ldi	r18, 0x21	; 33
    d282:	82 9f       	mul	r24, r18
    d284:	c0 01       	movw	r24, r0
    d286:	11 24       	eor	r1, r1
    d288:	61 e0       	ldi	r22, 0x01	; 1
    d28a:	83 5a       	subi	r24, 0xA3	; 163
    d28c:	9e 4f       	sbci	r25, 0xFE	; 254
    d28e:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5639
  thermostat_ring_set_active(args1, 1);
  default_ring = args1;
    d292:	c0 93 82 0a 	sts	0x0A82, r28	; 0x800a82 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    d296:	6c 2f       	mov	r22, r28
    d298:	8c e5       	ldi	r24, 0x5C	; 92
    d29a:	90 e0       	ldi	r25, 0x00	; 0
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5641
void term_ring_do_activate(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_set_active(args1, 1);
  default_ring = args1;
  set_default_ring(default_ring);
}
    d29c:	cf 91       	pop	r28
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    d29e:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000d2a2 <button_click_deactivate_term_ring(unsigned int, unsigned int, unsigned char)>:
_Z33button_click_deactivate_term_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5555
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring, args3);
}
////
void button_click_deactivate_term_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_clear(default_ring);
    d2a2:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d2a6:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5556
  default_ring = NO_DEFAULT_RING;
    d2aa:	8f ef       	ldi	r24, 0xFF	; 255
    d2ac:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    d2b0:	6f ef       	ldi	r22, 0xFF	; 255
    d2b2:	8c e5       	ldi	r24, 0x5C	; 92
    d2b4:	90 e0       	ldi	r25, 0x00	; 0
    d2b6:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z33button_click_deactivate_term_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5558
void button_click_deactivate_term_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_clear(default_ring);
  default_ring = NO_DEFAULT_RING;
  set_default_ring(default_ring);
  MenuHistoryPrevMenu(0, 0, 0);
    d2ba:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

0000d2be <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5495
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  default_show_temp = args3;
    d2be:	40 93 0d 09 	sts	0x090D, r20	; 0x80090d <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    d2c2:	64 2f       	mov	r22, r20
    d2c4:	8d e5       	ldi	r24, 0x5D	; 93
    d2c6:	90 e0       	ldi	r25, 0x00	; 0
    d2c8:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>

0000d2cc <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    d2cc:	cf 93       	push	r28
    d2ce:	df 93       	push	r29
    d2d0:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    d2d2:	8a 30       	cpi	r24, 0x0A	; 10
    d2d4:	78 f4       	brcc	.+30     	; 0xd2f4 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    d2d6:	ba 01       	movw	r22, r20
    d2d8:	c8 2f       	mov	r28, r24
    d2da:	0e 94 17 69 	call	0xd22e	; 0xd22e <remote_tds_set_name(unsigned char, char*) [clone .part.23]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    d2de:	24 e1       	ldi	r18, 0x14	; 20
    d2e0:	c2 9f       	mul	r28, r18
    d2e2:	c0 01       	movw	r24, r0
    d2e4:	11 24       	eor	r1, r1
    d2e6:	6d 2f       	mov	r22, r29
    d2e8:	83 54       	subi	r24, 0x43	; 67
    d2ea:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    d2ec:	df 91       	pop	r29
    d2ee:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2673
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    d2f0:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    d2f4:	df 91       	pop	r29
    d2f6:	cf 91       	pop	r28
    d2f8:	08 95       	ret

0000d2fa <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    d2fa:	cf 93       	push	r28
    d2fc:	df 93       	push	r29
    d2fe:	cd b7       	in	r28, 0x3d	; 61
    d300:	de b7       	in	r29, 0x3e	; 62
    d302:	62 97       	sbiw	r28, 0x12	; 18
    d304:	0f b6       	in	r0, 0x3f	; 63
    d306:	f8 94       	cli
    d308:	de bf       	out	0x3e, r29	; 62
    d30a:	0f be       	out	0x3f, r0	; 63
    d30c:	cd bf       	out	0x3d, r28	; 61
    d30e:	e1 e0       	ldi	r30, 0x01	; 1
    d310:	f0 e0       	ldi	r31, 0x00	; 0
    d312:	ec 0f       	add	r30, r28
    d314:	fd 1f       	adc	r31, r29
    d316:	e8 0f       	add	r30, r24
    d318:	f1 1d       	adc	r31, r1
    d31a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    d31c:	ae 01       	movw	r20, r28
    d31e:	4f 5f       	subi	r20, 0xFF	; 255
    d320:	5f 4f       	sbci	r21, 0xFF	; 255
    d322:	60 e0       	ldi	r22, 0x00	; 0
    d324:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
}
    d328:	62 96       	adiw	r28, 0x12	; 18
    d32a:	0f b6       	in	r0, 0x3f	; 63
    d32c:	f8 94       	cli
    d32e:	de bf       	out	0x3e, r29	; 62
    d330:	0f be       	out	0x3f, r0	; 63
    d332:	cd bf       	out	0x3d, r28	; 61
    d334:	df 91       	pop	r29
    d336:	cf 91       	pop	r28
    d338:	08 95       	ret

0000d33a <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5220
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d33a:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5222
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    d33c:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5223
  MenuHistoryPrevMenu(0, 0, 0);
    d340:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

0000d344 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
    d344:	7f 92       	push	r7
    d346:	8f 92       	push	r8
    d348:	9f 92       	push	r9
    d34a:	af 92       	push	r10
    d34c:	bf 92       	push	r11
    d34e:	cf 92       	push	r12
    d350:	df 92       	push	r13
    d352:	ef 92       	push	r14
    d354:	ff 92       	push	r15
    d356:	0f 93       	push	r16
    d358:	1f 93       	push	r17
    d35a:	cf 93       	push	r28
    d35c:	df 93       	push	r29
    d35e:	5a 01       	movw	r10, r20
    d360:	e9 01       	movw	r28, r18
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    d362:	9d e4       	ldi	r25, 0x4D	; 77
    d364:	89 9f       	mul	r24, r25
    d366:	40 01       	movw	r8, r0
    d368:	11 24       	eor	r1, r1
    d36a:	ef e0       	ldi	r30, 0x0F	; 15
    d36c:	8e 1a       	sub	r8, r30
    d36e:	ee ef       	ldi	r30, 0xFE	; 254
    d370:	9e 0a       	sbc	r9, r30
    d372:	f6 e0       	ldi	r31, 0x06	; 6
    d374:	6f 9f       	mul	r22, r31
    d376:	80 0c       	add	r8, r0
    d378:	91 1c       	adc	r9, r1
    d37a:	11 24       	eor	r1, r1
    d37c:	c4 01       	movw	r24, r8
    d37e:	02 96       	adiw	r24, 0x02	; 2
    d380:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    d384:	78 2e       	mov	r7, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    d386:	c4 01       	movw	r24, r8
    d388:	03 96       	adiw	r24, 0x03	; 3
    d38a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    d38e:	97 2d       	mov	r25, r7
    d390:	96 95       	lsr	r25
    d392:	96 95       	lsr	r25
    d394:	96 95       	lsr	r25
    d396:	f5 01       	movw	r30, r10
    d398:	90 83       	st	Z, r25
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    d39a:	27 2d       	mov	r18, r7
    d39c:	30 e0       	ldi	r19, 0x00	; 0
    d39e:	35 95       	asr	r19
    d3a0:	27 95       	ror	r18
    d3a2:	23 70       	andi	r18, 0x03	; 3
    d3a4:	9f e0       	ldi	r25, 0x0F	; 15
    d3a6:	29 9f       	mul	r18, r25
    d3a8:	20 2d       	mov	r18, r0
    d3aa:	11 24       	eor	r1, r1
    d3ac:	28 83       	st	Y, r18
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    d3ae:	28 2f       	mov	r18, r24
    d3b0:	26 95       	lsr	r18
    d3b2:	26 95       	lsr	r18
    d3b4:	26 95       	lsr	r18
    d3b6:	f8 01       	movw	r30, r16
    d3b8:	20 83       	st	Z, r18
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    d3ba:	83 70       	andi	r24, 0x03	; 3
    d3bc:	89 9f       	mul	r24, r25
    d3be:	80 2d       	mov	r24, r0
    d3c0:	11 24       	eor	r1, r1
    d3c2:	f7 01       	movw	r30, r14
    d3c4:	80 83       	st	Z, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    d3c6:	87 2d       	mov	r24, r7
    d3c8:	81 70       	andi	r24, 0x01	; 1
    d3ca:	f6 01       	movw	r30, r12
    d3cc:	80 83       	st	Z, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:309
}
    d3ce:	df 91       	pop	r29
    d3d0:	cf 91       	pop	r28
    d3d2:	1f 91       	pop	r17
    d3d4:	0f 91       	pop	r16
    d3d6:	ff 90       	pop	r15
    d3d8:	ef 90       	pop	r14
    d3da:	df 90       	pop	r13
    d3dc:	cf 90       	pop	r12
    d3de:	bf 90       	pop	r11
    d3e0:	af 90       	pop	r10
    d3e2:	9f 90       	pop	r9
    d3e4:	8f 90       	pop	r8
    d3e6:	7f 90       	pop	r7
    d3e8:	08 95       	ret

0000d3ea <thermostat_program_get_name(unsigned char, char*)>:
_Z27thermostat_program_get_namehPc():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:270


//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
    d3ea:	ef 92       	push	r14
    d3ec:	ff 92       	push	r15
    d3ee:	0f 93       	push	r16
    d3f0:	1f 93       	push	r17
    d3f2:	cf 93       	push	r28
    d3f4:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:274
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    d3f6:	9d e4       	ldi	r25, 0x4D	; 77
    d3f8:	89 9f       	mul	r24, r25
    d3fa:	e0 01       	movw	r28, r0
    d3fc:	11 24       	eor	r1, r1
    d3fe:	8e 01       	movw	r16, r28
    d400:	0c 5c       	subi	r16, 0xCC	; 204
    d402:	1d 4f       	sbci	r17, 0xFD	; 253
    d404:	7b 01       	movw	r14, r22
    d406:	c2 5c       	subi	r28, 0xC2	; 194
    d408:	dd 4f       	sbci	r29, 0xFD	; 253
    d40a:	c8 01       	movw	r24, r16
    d40c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:275
    name[i] = t;
    d410:	f7 01       	movw	r30, r14
    d412:	81 93       	st	Z+, r24
    d414:	7f 01       	movw	r14, r30
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
    d416:	88 23       	and	r24, r24
    d418:	29 f0       	breq	.+10     	; 0xd424 <thermostat_program_get_name(unsigned char, char*)+0x3a>
    d41a:	0f 5f       	subi	r16, 0xFF	; 255
    d41c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:272
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    d41e:	0c 17       	cp	r16, r28
    d420:	1d 07       	cpc	r17, r29
    d422:	99 f7       	brne	.-26     	; 0xd40a <thermostat_program_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:278
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
    name[i] = t;
    if (t == 0) break;
  }
}
    d424:	df 91       	pop	r29
    d426:	cf 91       	pop	r28
    d428:	1f 91       	pop	r17
    d42a:	0f 91       	pop	r16
    d42c:	ff 90       	pop	r15
    d42e:	ef 90       	pop	r14
    d430:	08 95       	ret

0000d432 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    d432:	21 e2       	ldi	r18, 0x21	; 33
    d434:	82 9f       	mul	r24, r18
    d436:	c0 01       	movw	r24, r0
    d438:	11 24       	eor	r1, r1
    d43a:	82 5a       	subi	r24, 0xA2	; 162
    d43c:	9e 4f       	sbci	r25, 0xFE	; 254
    d43e:	0c 94 97 ae 	jmp	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>

0000d442 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)>:
_Z34display_enable_show_term_mode_progjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5991



uint8_t display_enable_show_term_mode_prog(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    d442:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d446:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5992
  if (mode == TERM_MODE_PROG)
    d44a:	91 e0       	ldi	r25, 0x01	; 1
    d44c:	82 30       	cpi	r24, 0x02	; 2
    d44e:	09 f0       	breq	.+2      	; 0xd452 <display_enable_show_term_mode_prog(unsigned int, unsigned int, unsigned char)+0x10>
    d450:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5995
    return 1;
  return 0;
}
    d452:	89 2f       	mov	r24, r25
    d454:	08 95       	ret

0000d456 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5978
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = 0;
  if (default_ring != NO_DEFAULT_RING)
    d456:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d45a:	8f 3f       	cpi	r24, 0xFF	; 255
    d45c:	51 f0       	breq	.+20     	; 0xd472 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
  {
    mode = thermostat_ring_get_mode(default_ring);
    d45e:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
    d462:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5982
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
      return 1;
    d464:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5981
{
  uint8_t mode = 0;
  if (default_ring != NO_DEFAULT_RING)
  {
    mode = thermostat_ring_get_mode(default_ring);
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    d466:	93 30       	cpi	r25, 0x03	; 3
    d468:	31 f0       	breq	.+12     	; 0xd476 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x20>
    d46a:	95 30       	cpi	r25, 0x05	; 5
    d46c:	29 f0       	breq	.+10     	; 0xd478 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
    d46e:	98 30       	cpi	r25, 0x08	; 8
    d470:	19 f0       	breq	.+6      	; 0xd478 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5984
      return 1;
  }
  return 0;
    d472:	80 e0       	ldi	r24, 0x00	; 0
    d474:	08 95       	ret
    d476:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5985
}
    d478:	08 95       	ret

0000d47a <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5855
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d47a:	cf 93       	push	r28
    d47c:	86 2f       	mov	r24, r22
    d47e:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
    d480:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
    d484:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5859
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    d486:	c1 11       	cpse	r28, r1
    d488:	05 c0       	rjmp	.+10     	; 0xd494 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    d48a:	81 e0       	ldi	r24, 0x01	; 1
    d48c:	99 23       	and	r25, r25
    d48e:	39 f0       	breq	.+14     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 0;
    d490:	80 e0       	ldi	r24, 0x00	; 0
    d492:	05 c0       	rjmp	.+10     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5860
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    d494:	c1 30       	cpi	r28, 0x01	; 1
    d496:	29 f4       	brne	.+10     	; 0xd4a2 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    d498:	81 e0       	ldi	r24, 0x01	; 1
    d49a:	91 30       	cpi	r25, 0x01	; 1
    d49c:	c9 f7       	brne	.-14     	; 0xd490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5865
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  return ret;
}
    d49e:	cf 91       	pop	r28
    d4a0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5861
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    d4a2:	c2 30       	cpi	r28, 0x02	; 2
    d4a4:	21 f4       	brne	.+8      	; 0xd4ae <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x34>
    d4a6:	81 e0       	ldi	r24, 0x01	; 1
    d4a8:	97 30       	cpi	r25, 0x07	; 7
    d4aa:	91 f7       	brne	.-28     	; 0xd490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    d4ac:	f8 cf       	rjmp	.-16     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    d4ae:	c3 30       	cpi	r28, 0x03	; 3
    d4b0:	21 f4       	brne	.+8      	; 0xd4ba <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x40>
    d4b2:	81 e0       	ldi	r24, 0x01	; 1
    d4b4:	92 30       	cpi	r25, 0x02	; 2
    d4b6:	61 f7       	brne	.-40     	; 0xd490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    d4b8:	f2 cf       	rjmp	.-28     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5863
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    d4ba:	c4 30       	cpi	r28, 0x04	; 4
    d4bc:	49 f7       	brne	.-46     	; 0xd490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    d4be:	81 e0       	ldi	r24, 0x01	; 1
    d4c0:	98 30       	cpi	r25, 0x08	; 8
    d4c2:	69 f3       	breq	.-38     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    d4c4:	93 30       	cpi	r25, 0x03	; 3
    d4c6:	59 f3       	breq	.-42     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    d4c8:	95 30       	cpi	r25, 0x05	; 5
    d4ca:	11 f7       	brne	.-60     	; 0xd490 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    d4cc:	e8 cf       	rjmp	.-48     	; 0xd49e <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>

0000d4ce <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5840
   prevodni funkce pro dynamicke tlacitko popisku vybraneho operacniho modu
   prevede id modu na textovy popisek
   zadne vstupni parametry
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d4ce:	0f 93       	push	r16
    d4d0:	1f 93       	push	r17
    d4d2:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5841
  strcpy_P(line1, text_current_ring_mode);
    d4d4:	61 ef       	ldi	r22, 0xF1	; 241
    d4d6:	7a e5       	ldi	r23, 0x5A	; 90
    d4d8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5842
  if (default_ring != NO_DEFAULT_RING)
    d4dc:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d4e0:	8f 3f       	cpi	r24, 0xFF	; 255
    d4e2:	61 f1       	breq	.+88     	; 0xd53c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5843
    convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    d4e4:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
/*
   prevodni funkce id modu na textovy popisek
*/
void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
    d4e8:	60 e8       	ldi	r22, 0x80	; 128
    d4ea:	7b e5       	ldi	r23, 0x5B	; 91
    d4ec:	88 23       	and	r24, r24
    d4ee:	61 f0       	breq	.+24     	; 0xd508 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
    d4f0:	66 e6       	ldi	r22, 0x66	; 102
    d4f2:	7b e5       	ldi	r23, 0x5B	; 91
    d4f4:	81 30       	cpi	r24, 0x01	; 1
    d4f6:	41 f0       	breq	.+16     	; 0xd508 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
    d4f8:	68 e1       	ldi	r22, 0x18	; 24
    d4fa:	7b e5       	ldi	r23, 0x5B	; 91
    d4fc:	83 30       	cpi	r24, 0x03	; 3
    d4fe:	21 f0       	breq	.+8      	; 0xd508 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
    d500:	82 30       	cpi	r24, 0x02	; 2
    d502:	41 f4       	brne	.+16     	; 0xd514 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
    d504:	60 e3       	ldi	r22, 0x30	; 48
    d506:	7b e5       	ldi	r23, 0x5B	; 91
    d508:	c8 01       	movw	r24, r16
    d50a:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5846
  strcpy_P(line1, text_current_ring_mode);
  if (default_ring != NO_DEFAULT_RING)
    convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
  else
    strcpy_P(line2, text_dashdash);
}
    d50e:	1f 91       	pop	r17
    d510:	0f 91       	pop	r16
    d512:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
    d514:	84 30       	cpi	r24, 0x04	; 4
    d516:	39 f4       	brne	.+14     	; 0xd526 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    d518:	68 e1       	ldi	r22, 0x18	; 24
    d51a:	7b e5       	ldi	r23, 0x5B	; 91
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5845
{
  strcpy_P(line1, text_current_ring_mode);
  if (default_ring != NO_DEFAULT_RING)
    convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
  else
    strcpy_P(line2, text_dashdash);
    d51c:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5846
}
    d51e:	1f 91       	pop	r17
    d520:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5845
{
  strcpy_P(line1, text_current_ring_mode);
  if (default_ring != NO_DEFAULT_RING)
    convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
  else
    strcpy_P(line2, text_dashdash);
    d522:	0c 94 f4 c3 	jmp	0x187e8	; 0x187e8 <strcpy_P>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4037
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
    d526:	69 ee       	ldi	r22, 0xE9	; 233
    d528:	7a e5       	ldi	r23, 0x5A	; 90
    d52a:	86 30       	cpi	r24, 0x06	; 6
    d52c:	b9 f3       	breq	.-18     	; 0xd51c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4038
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    d52e:	88 30       	cpi	r24, 0x08	; 8
    d530:	99 f3       	breq	.-26     	; 0xd518 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4039
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    d532:	6c e4       	ldi	r22, 0x4C	; 76
    d534:	7b e5       	ldi	r23, 0x5B	; 91
    d536:	87 30       	cpi	r24, 0x07	; 7
    d538:	89 f3       	breq	.-30     	; 0xd51c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
    d53a:	e9 cf       	rjmp	.-46     	; 0xd50e <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x40>
_Z40button_get_default_ring_term_mode_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5845
{
  strcpy_P(line1, text_current_ring_mode);
  if (default_ring != NO_DEFAULT_RING)
    convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
  else
    strcpy_P(line2, text_dashdash);
    d53c:	6d ee       	ldi	r22, 0xED	; 237
    d53e:	7a e5       	ldi	r23, 0x5A	; 90
    d540:	ed cf       	rjmp	.-38     	; 0xd51c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>

0000d542 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    d542:	0f 93       	push	r16
    d544:	1f 93       	push	r17
    d546:	cf 93       	push	r28
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    d548:	91 e2       	ldi	r25, 0x21	; 33
    d54a:	89 9f       	mul	r24, r25
    d54c:	80 01       	movw	r16, r0
    d54e:	11 24       	eor	r1, r1
    d550:	c8 01       	movw	r24, r16
    d552:	8a 5a       	subi	r24, 0xAA	; 170
    d554:	9e 4f       	sbci	r25, 0xFE	; 254
    d556:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    d55a:	c8 2f       	mov	r28, r24
    d55c:	c8 01       	movw	r24, r16
    d55e:	89 5a       	subi	r24, 0xA9	; 169
    d560:	9e 4f       	sbci	r25, 0xFE	; 254
    d562:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    d566:	2c 2f       	mov	r18, r28
    d568:	30 e0       	ldi	r19, 0x00	; 0
    d56a:	32 2f       	mov	r19, r18
    d56c:	22 27       	eor	r18, r18
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:155
}
    d56e:	82 0f       	add	r24, r18
    d570:	93 2f       	mov	r25, r19
    d572:	91 1d       	adc	r25, r1
    d574:	cf 91       	pop	r28
    d576:	1f 91       	pop	r17
    d578:	0f 91       	pop	r16
    d57a:	08 95       	ret

0000d57c <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2225
}

//float_rozdelit do dvou intu

uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d57c:	1f 93       	push	r17
    d57e:	cf 93       	push	r28
    d580:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2226
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    d582:	10 91 82 0a 	lds	r17, 0x0A82	; 0x800a82 <default_ring>
    d586:	81 2f       	mov	r24, r17
    d588:	0e 94 a1 6a 	call	0xd542	; 0xd542 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    d58c:	c1 eb       	ldi	r28, 0xB1	; 177
    d58e:	d8 e0       	ldi	r29, 0x08	; 8
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2226

//float_rozdelit do dvou intu

uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    d590:	bc 01       	movw	r22, r24
    d592:	99 0f       	add	r25, r25
    d594:	88 0b       	sbc	r24, r24
    d596:	99 0b       	sbc	r25, r25
    d598:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    d59c:	20 e0       	ldi	r18, 0x00	; 0
    d59e:	30 e0       	ldi	r19, 0x00	; 0
    d5a0:	40 e2       	ldi	r20, 0x20	; 32
    d5a2:	51 e4       	ldi	r21, 0x41	; 65
    d5a4:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    d5a8:	68 83       	st	Y, r22
    d5aa:	79 83       	std	Y+1, r23	; 0x01
    d5ac:	8a 83       	std	Y+2, r24	; 0x02
    d5ae:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  menu_dialog_variable[idx].variable_min = min;
    d5b0:	80 e0       	ldi	r24, 0x00	; 0
    d5b2:	90 e0       	ldi	r25, 0x00	; 0
    d5b4:	a0 e8       	ldi	r26, 0x80	; 128
    d5b6:	b1 e4       	ldi	r27, 0x41	; 65
    d5b8:	88 87       	std	Y+8, r24	; 0x08
    d5ba:	99 87       	std	Y+9, r25	; 0x09
    d5bc:	aa 87       	std	Y+10, r26	; 0x0a
    d5be:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    d5c0:	80 e0       	ldi	r24, 0x00	; 0
    d5c2:	90 e0       	ldi	r25, 0x00	; 0
    d5c4:	a0 e0       	ldi	r26, 0x00	; 0
    d5c6:	b2 e4       	ldi	r27, 0x42	; 66
    d5c8:	8c 83       	std	Y+4, r24	; 0x04
    d5ca:	9d 83       	std	Y+5, r25	; 0x05
    d5cc:	ae 83       	std	Y+6, r26	; 0x06
    d5ce:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    d5d0:	80 e0       	ldi	r24, 0x00	; 0
    d5d2:	90 e0       	ldi	r25, 0x00	; 0
    d5d4:	a0 e0       	ldi	r26, 0x00	; 0
    d5d6:	bf e3       	ldi	r27, 0x3F	; 63
    d5d8:	8e 87       	std	Y+14, r24	; 0x0e
    d5da:	9f 87       	std	Y+15, r25	; 0x0f
    d5dc:	a8 8b       	std	Y+16, r26	; 0x10
    d5de:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    d5e0:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    d5e2:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    d5e4:	81 e0       	ldi	r24, 0x01	; 1
    d5e6:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    d5e8:	8a ee       	ldi	r24, 0xEA	; 234
    d5ea:	96 e6       	ldi	r25, 0x66	; 102
    d5ec:	9c 8b       	std	Y+20, r25	; 0x14
    d5ee:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
//float_rozdelit do dvou intu

uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring) / 10.0, 16.0, 32.0, 0.5, default_ring, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    d5f0:	df 91       	pop	r29
    d5f2:	cf 91       	pop	r28
    d5f4:	1f 91       	pop	r17
    d5f6:	08 95       	ret

0000d5f8 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    d5f8:	21 e2       	ldi	r18, 0x21	; 33
    d5fa:	82 9f       	mul	r24, r18
    d5fc:	c0 01       	movw	r24, r0
    d5fe:	11 24       	eor	r1, r1
    d600:	83 5a       	subi	r24, 0xA3	; 163
    d602:	9e 4f       	sbci	r25, 0xFE	; 254
    d604:	0c 94 97 ae 	jmp	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>

0000d608 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5961
   args1 ... parametr z definice prvku
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/
void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d608:	0f 93       	push	r16
    d60a:	1f 93       	push	r17
    d60c:	cf 93       	push	r28
    d60e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5962
  if (thermostat_ring_get_active(default_ring) != 255)
    d610:	c0 91 82 0a 	lds	r28, 0x0A82	; 0x800a82 <default_ring>
    d614:	8c 2f       	mov	r24, r28
    d616:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d61a:	8f 3f       	cpi	r24, 0xFF	; 255
    d61c:	71 f0       	breq	.+28     	; 0xd63a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5965
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    d61e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5964
*/
void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    d620:	03 30       	cpi	r16, 0x03	; 3
    d622:	11 05       	cpc	r17, r1
    d624:	21 f0       	breq	.+8      	; 0xd62e <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5966
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    d626:	05 30       	cpi	r16, 0x05	; 5
    d628:	11 05       	cpc	r17, r1
    d62a:	39 f4       	brne	.+14     	; 0xd63a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    d62c:	61 e0       	ldi	r22, 0x01	; 1
    d62e:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
  }
}
    d630:	cf 91       	pop	r28
    d632:	1f 91       	pop	r17
    d634:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    d636:	0c 94 99 ae 	jmp	0x15d32	; 0x15d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
  }
}
    d63a:	cf 91       	pop	r28
    d63c:	1f 91       	pop	r17
    d63e:	0f 91       	pop	r16
    d640:	08 95       	ret

0000d642 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5751
   args1 ... parametr z definice prvku
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/
void button_click_default_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d642:	cf 93       	push	r28
    d644:	df 93       	push	r29
    d646:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5752
  if (thermostat_ring_get_active(default_ring) != 255)
    d648:	c0 91 82 0a 	lds	r28, 0x0A82	; 0x800a82 <default_ring>
    d64c:	8c 2f       	mov	r24, r28
    d64e:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d652:	8f 3f       	cpi	r24, 0xFF	; 255
    d654:	39 f0       	breq	.+14     	; 0xd664 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5754
  {
    thermostat_ring_set_mode(default_ring, args1);
    d656:	6d 2f       	mov	r22, r29
    d658:	8c 2f       	mov	r24, r28
    d65a:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
    change_term_mode = 1;
    d65e:	81 e0       	ldi	r24, 0x01	; 1
    d660:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
  }
}
    d664:	df 91       	pop	r29
    d666:	cf 91       	pop	r28
    d668:	08 95       	ret

0000d66a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5735
   args3 .. index prvku v menu
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d66a:	cf 93       	push	r28
    d66c:	df 93       	push	r29
    d66e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5737
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    d670:	c0 91 82 0a 	lds	r28, 0x0A82	; 0x800a82 <default_ring>
    d674:	8c 2f       	mov	r24, r28
    d676:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d67a:	8f 3f       	cpi	r24, 0xFF	; 255
    d67c:	29 f0       	breq	.+10     	; 0xd688 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    d67e:	8c 2f       	mov	r24, r28
    d680:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
    d684:	91 e0       	ldi	r25, 0x01	; 1
    d686:	8d 13       	cpse	r24, r29
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5736
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    d688:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5741
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
  return ret;
}
    d68a:	89 2f       	mov	r24, r25
    d68c:	df 91       	pop	r29
    d68e:	cf 91       	pop	r28
    d690:	08 95       	ret

0000d692 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d692:	cf 93       	push	r28
    d694:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
  if (thermostat_ring_get_active(args3) != 255)
    d696:	84 2f       	mov	r24, r20
    d698:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d69c:	8f 3f       	cpi	r24, 0xFF	; 255
    d69e:	51 f0       	breq	.+20     	; 0xd6b4 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
  {
    default_ring = args3;
    d6a0:	c0 93 82 0a 	sts	0x0A82, r28	; 0x800a82 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    d6a4:	e0 91 f5 0b 	lds	r30, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
    d6a8:	f0 e0       	ldi	r31, 0x00	; 0
    d6aa:	ef 51       	subi	r30, 0x1F	; 31
    d6ac:	f4 4f       	sbci	r31, 0xF4	; 244
    d6ae:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, args3);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
}
    d6b0:	cf 91       	pop	r28
    d6b2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5658
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, args3);
    d6b4:	70 e0       	ldi	r23, 0x00	; 0
    d6b6:	60 e0       	ldi	r22, 0x00	; 0
    d6b8:	84 e6       	ldi	r24, 0x64	; 100
    d6ba:	90 e0       	ldi	r25, 0x00	; 0
    d6bc:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
    dialog_yes_function = &term_ring_do_activate;
    d6c0:	8e e3       	ldi	r24, 0x3E	; 62
    d6c2:	99 e6       	ldi	r25, 0x69	; 105
    d6c4:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <dialog_yes_function+0x1>
    d6c8:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
    dialog_yes_args1 = args3;
    d6cc:	c0 93 2e 09 	sts	0x092E, r28	; 0x80092e <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5661
    strcpy_P(dialog_text, text_term_do_activate);
    d6d0:	63 ea       	ldi	r22, 0xA3	; 163
    d6d2:	7a e5       	ldi	r23, 0x5A	; 90
    d6d4:	8e e0       	ldi	r24, 0x0E	; 14
    d6d6:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
  }
}
    d6d8:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5661
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, args3);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
    d6da:	0c 94 f4 c3 	jmp	0x187e8	; 0x187e8 <strcpy_P>

0000d6de <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5631
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    d6de:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d6e2:	84 13       	cpse	r24, r20
    d6e4:	05 c0       	rjmp	.+10     	; 0xd6f0 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
    d6e6:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d6ea:	91 e0       	ldi	r25, 0x01	; 1
    d6ec:	81 30       	cpi	r24, 0x01	; 1
    d6ee:	09 f0       	breq	.+2      	; 0xd6f2 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5633
    return 1;
  return 0;
    d6f0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5634
}
    d6f2:	89 2f       	mov	r24, r25
    d6f4:	08 95       	ret

0000d6f6 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    d6f6:	ef 92       	push	r14
    d6f8:	ff 92       	push	r15
    d6fa:	0f 93       	push	r16
    d6fc:	1f 93       	push	r17
    d6fe:	cf 93       	push	r28
    d700:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    d702:	91 e2       	ldi	r25, 0x21	; 33
    d704:	89 9f       	mul	r24, r25
    d706:	e0 01       	movw	r28, r0
    d708:	11 24       	eor	r1, r1
    d70a:	8e 01       	movw	r16, r28
    d70c:	04 5b       	subi	r16, 0xB4	; 180
    d70e:	1e 4f       	sbci	r17, 0xFE	; 254
    d710:	7b 01       	movw	r14, r22
    d712:	cb 5a       	subi	r28, 0xAB	; 171
    d714:	de 4f       	sbci	r29, 0xFE	; 254
    d716:	c8 01       	movw	r24, r16
    d718:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:105
    name[i] = t;
    d71c:	f7 01       	movw	r30, r14
    d71e:	81 93       	st	Z+, r24
    d720:	7f 01       	movw	r14, r30
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    d722:	88 23       	and	r24, r24
    d724:	29 f0       	breq	.+10     	; 0xd730 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    d726:	0f 5f       	subi	r16, 0xFF	; 255
    d728:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    d72a:	0c 17       	cp	r16, r28
    d72c:	1d 07       	cpc	r17, r29
    d72e:	99 f7       	brne	.-26     	; 0xd716 <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    d730:	df 91       	pop	r29
    d732:	cf 91       	pop	r28
    d734:	1f 91       	pop	r17
    d736:	0f 91       	pop	r16
    d738:	ff 90       	pop	r15
    d73a:	ef 90       	pop	r14
    d73c:	08 95       	ret

0000d73e <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)>:
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
   args2
   args3
   promene nemaji zadny vyznam
*/
void button_click_set_term_ring_name_via_keyboard(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d73e:	1f 93       	push	r17
    d740:	cf 93       	push	r28
    d742:	df 93       	push	r29
    d744:	00 d0       	rcall	.+0      	; 0xd746 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0x8>
    d746:	00 d0       	rcall	.+0      	; 0xd748 <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xa>
    d748:	00 d0       	rcall	.+0      	; 0xd74a <button_click_set_term_ring_name_via_keyboard(unsigned int, unsigned int, unsigned char)+0xc>
    d74a:	1f 92       	push	r1
    d74c:	cd b7       	in	r28, 0x3d	; 61
    d74e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
  char name[10];
  args2 = default_ring;
    d750:	10 91 82 0a 	lds	r17, 0x0A82	; 0x800a82 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5797
  thermostat_ring_get_name(args2, name);
    d754:	be 01       	movw	r22, r28
    d756:	6f 5f       	subi	r22, 0xFF	; 255
    d758:	7f 4f       	sbci	r23, 0xFF	; 255
    d75a:	81 2f       	mov	r24, r17
    d75c:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5798
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    d760:	70 e0       	ldi	r23, 0x00	; 0
    d762:	60 e0       	ldi	r22, 0x00	; 0
    d764:	87 e6       	ldi	r24, 0x67	; 103
    d766:	90 e0       	ldi	r25, 0x00	; 0
    d768:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    d76c:	be 01       	movw	r22, r28
    d76e:	6f 5f       	subi	r22, 0xFF	; 255
    d770:	7f 4f       	sbci	r23, 0xFF	; 255
    d772:	86 e3       	ldi	r24, 0x36	; 54
    d774:	99 e0       	ldi	r25, 0x09	; 9
    d776:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  dialog_set_string_max_length = max_length;
    d77a:	89 e0       	ldi	r24, 0x09	; 9
    d77c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  dialog_set_string_args = idx;
    d780:	10 93 34 09 	sts	0x0934, r17	; 0x800934 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  dialog_save_string_function = save_function;
    d784:	8b eb       	ldi	r24, 0xBB	; 187
    d786:	97 e6       	ldi	r25, 0x67	; 103
    d788:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <dialog_save_string_function+0x1>
    d78c:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <dialog_save_string_function>
_Z44button_click_set_term_ring_name_via_keyboardjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5801
  args2 = default_ring;
  thermostat_ring_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
  display_element_set_string(name, 9, args2, &helper_set_term_ring_name);

}
    d790:	2a 96       	adiw	r28, 0x0a	; 10
    d792:	0f b6       	in	r0, 0x3f	; 63
    d794:	f8 94       	cli
    d796:	de bf       	out	0x3e, r29	; 62
    d798:	0f be       	out	0x3f, r0	; 63
    d79a:	cd bf       	out	0x3d, r28	; 61
    d79c:	df 91       	pop	r29
    d79e:	cf 91       	pop	r28
    d7a0:	1f 91       	pop	r17
    d7a2:	08 95       	ret

0000d7a4 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5693
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d7a4:	ef 92       	push	r14
    d7a6:	ff 92       	push	r15
    d7a8:	0f 93       	push	r16
    d7aa:	1f 93       	push	r17
    d7ac:	cf 93       	push	r28
    d7ae:	df 93       	push	r29
    d7b0:	00 d0       	rcall	.+0      	; 0xd7b2 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    d7b2:	00 d0       	rcall	.+0      	; 0xd7b4 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    d7b4:	00 d0       	rcall	.+0      	; 0xd7b6 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    d7b6:	1f 92       	push	r1
    d7b8:	cd b7       	in	r28, 0x3d	; 61
    d7ba:	de b7       	in	r29, 0x3e	; 62
    d7bc:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5695
  char name[10];
  strcpy_P(line1, text_change_default_ring);
    d7be:	6f ec       	ldi	r22, 0xCF	; 207
    d7c0:	7a e5       	ldi	r23, 0x5A	; 90
    d7c2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5696
  if (default_ring != NO_DEFAULT_RING)
    d7c6:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d7ca:	8f 3f       	cpi	r24, 0xFF	; 255
    d7cc:	39 f1       	breq	.+78     	; 0xd81c <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5698
  {
    thermostat_ring_get_name(default_ring, name);
    d7ce:	9e 01       	movw	r18, r28
    d7d0:	2f 5f       	subi	r18, 0xFF	; 255
    d7d2:	3f 4f       	sbci	r19, 0xFF	; 255
    d7d4:	79 01       	movw	r14, r18
    d7d6:	b9 01       	movw	r22, r18
    d7d8:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
    sprintf(line2, "Regulator %d - %s", default_ring, name);
    d7dc:	ff 92       	push	r15
    d7de:	ef 92       	push	r14
    d7e0:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    d7e4:	1f 92       	push	r1
    d7e6:	8f 93       	push	r24
    d7e8:	88 e6       	ldi	r24, 0x68	; 104
    d7ea:	93 e0       	ldi	r25, 0x03	; 3
    d7ec:	9f 93       	push	r25
    d7ee:	8f 93       	push	r24
    d7f0:	1f 93       	push	r17
    d7f2:	0f 93       	push	r16
    d7f4:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
    d7f8:	0f b6       	in	r0, 0x3f	; 63
    d7fa:	f8 94       	cli
    d7fc:	de bf       	out	0x3e, r29	; 62
    d7fe:	0f be       	out	0x3f, r0	; 63
    d800:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5705
  }
  else
  {
    strcpy_P(line2, text_dashdash);
  }
}
    d802:	2a 96       	adiw	r28, 0x0a	; 10
    d804:	0f b6       	in	r0, 0x3f	; 63
    d806:	f8 94       	cli
    d808:	de bf       	out	0x3e, r29	; 62
    d80a:	0f be       	out	0x3f, r0	; 63
    d80c:	cd bf       	out	0x3d, r28	; 61
    d80e:	df 91       	pop	r29
    d810:	cf 91       	pop	r28
    d812:	1f 91       	pop	r17
    d814:	0f 91       	pop	r16
    d816:	ff 90       	pop	r15
    d818:	ef 90       	pop	r14
    d81a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5703
    thermostat_ring_get_name(default_ring, name);
    sprintf(line2, "Regulator %d - %s", default_ring, name);
  }
  else
  {
    strcpy_P(line2, text_dashdash);
    d81c:	6d ee       	ldi	r22, 0xED	; 237
    d81e:	7a e5       	ldi	r23, 0x5A	; 90
    d820:	c8 01       	movw	r24, r16
    d822:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
    d826:	ed cf       	rjmp	.-38     	; 0xd802 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>

0000d828 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5674
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d828:	af 92       	push	r10
    d82a:	bf 92       	push	r11
    d82c:	cf 92       	push	r12
    d82e:	df 92       	push	r13
    d830:	ff 92       	push	r15
    d832:	0f 93       	push	r16
    d834:	1f 93       	push	r17
    d836:	cf 93       	push	r28
    d838:	df 93       	push	r29
    d83a:	cd b7       	in	r28, 0x3d	; 61
    d83c:	de b7       	in	r29, 0x3e	; 62
    d83e:	66 97       	sbiw	r28, 0x16	; 22
    d840:	0f b6       	in	r0, 0x3f	; 63
    d842:	f8 94       	cli
    d844:	de bf       	out	0x3e, r29	; 62
    d846:	0f be       	out	0x3f, r0	; 63
    d848:	cd bf       	out	0x3d, r28	; 61
    d84a:	f8 2e       	mov	r15, r24
    d84c:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5677
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    d84e:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d852:	9e 01       	movw	r18, r28
    d854:	2f 5f       	subi	r18, 0xFF	; 255
    d856:	3f 4f       	sbci	r19, 0xFF	; 255
    d858:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5678
    strcpy_P(active, text_term_active);
    d85a:	67 ec       	ldi	r22, 0xC7	; 199
    d85c:	7a e5       	ldi	r23, 0x5A	; 90
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5677
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    d85e:	8f 3f       	cpi	r24, 0xFF	; 255
    d860:	11 f4       	brne	.+4      	; 0xd866 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5680
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    d862:	6d eb       	ldi	r22, 0xBD	; 189
    d864:	7a e5       	ldi	r23, 0x5A	; 90
    d866:	c6 01       	movw	r24, r12
    d868:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5681
  thermostat_ring_get_name(args1, name);
    d86c:	be 01       	movw	r22, r28
    d86e:	63 5f       	subi	r22, 0xF3	; 243
    d870:	7f 4f       	sbci	r23, 0xFF	; 255
    d872:	8f 2d       	mov	r24, r15
    d874:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
  sprintf(line2, "Reg. %d %s", args1, active);
    d878:	df 92       	push	r13
    d87a:	cf 92       	push	r12
    d87c:	1f 92       	push	r1
    d87e:	ff 92       	push	r15
    d880:	8a e7       	ldi	r24, 0x7A	; 122
    d882:	93 e0       	ldi	r25, 0x03	; 3
    d884:	9f 93       	push	r25
    d886:	8f 93       	push	r24
    d888:	1f 93       	push	r17
    d88a:	0f 93       	push	r16
    d88c:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5683
  strcpy(line1, name);
    d890:	be 01       	movw	r22, r28
    d892:	63 5f       	subi	r22, 0xF3	; 243
    d894:	7f 4f       	sbci	r23, 0xFF	; 255
    d896:	c5 01       	movw	r24, r10
    d898:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
    d89c:	0f b6       	in	r0, 0x3f	; 63
    d89e:	f8 94       	cli
    d8a0:	de bf       	out	0x3e, r29	; 62
    d8a2:	0f be       	out	0x3f, r0	; 63
    d8a4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5684
}
    d8a6:	66 96       	adiw	r28, 0x16	; 22
    d8a8:	0f b6       	in	r0, 0x3f	; 63
    d8aa:	f8 94       	cli
    d8ac:	de bf       	out	0x3e, r29	; 62
    d8ae:	0f be       	out	0x3f, r0	; 63
    d8b0:	cd bf       	out	0x3d, r28	; 61
    d8b2:	df 91       	pop	r29
    d8b4:	cf 91       	pop	r28
    d8b6:	1f 91       	pop	r17
    d8b8:	0f 91       	pop	r16
    d8ba:	ff 90       	pop	r15
    d8bc:	df 90       	pop	r13
    d8be:	cf 90       	pop	r12
    d8c0:	bf 90       	pop	r11
    d8c2:	af 90       	pop	r10
    d8c4:	08 95       	ret

0000d8c6 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4750
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    d8c6:	af 92       	push	r10
    d8c8:	bf 92       	push	r11
    d8ca:	cf 92       	push	r12
    d8cc:	df 92       	push	r13
    d8ce:	ef 92       	push	r14
    d8d0:	ff 92       	push	r15
    d8d2:	0f 93       	push	r16
    d8d4:	1f 93       	push	r17
    d8d6:	cf 93       	push	r28
    d8d8:	df 93       	push	r29
    d8da:	cd b7       	in	r28, 0x3d	; 61
    d8dc:	de b7       	in	r29, 0x3e	; 62
    d8de:	a8 97       	sbiw	r28, 0x28	; 40
    d8e0:	0f b6       	in	r0, 0x3f	; 63
    d8e2:	f8 94       	cli
    d8e4:	de bf       	out	0x3e, r29	; 62
    d8e6:	0f be       	out	0x3f, r0	; 63
    d8e8:	cd bf       	out	0x3d, r28	; 61
    d8ea:	6c 01       	movw	r12, r24
    d8ec:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4753
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    d8ee:	64 ed       	ldi	r22, 0xD4	; 212
    d8f0:	79 e5       	ldi	r23, 0x59	; 89
    d8f2:	ce 01       	movw	r24, r28
    d8f4:	01 96       	adiw	r24, 0x01	; 1
    d8f6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4754
  if (thermostat_ring_get_active(default_ring) != 255)
    d8fa:	10 91 82 0a 	lds	r17, 0x0A82	; 0x800a82 <default_ring>
    d8fe:	81 2f       	mov	r24, r17
    d900:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d904:	8f 3f       	cpi	r24, 0xFF	; 255
    d906:	51 f1       	breq	.+84     	; 0xd95c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4756
  {
    thermostat_ring_get_name(default_ring, name);
    d908:	be 01       	movw	r22, r28
    d90a:	61 5e       	subi	r22, 0xE1	; 225
    d90c:	7f 4f       	sbci	r23, 0xFF	; 255
    d90e:	81 2f       	mov	r24, r17
    d910:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4762
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    d914:	be 01       	movw	r22, r28
    d916:	61 5e       	subi	r22, 0xE1	; 225
    d918:	7f 4f       	sbci	r23, 0xFF	; 255
    d91a:	ce 01       	movw	r24, r28
    d91c:	01 96       	adiw	r24, 0x01	; 1
    d91e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    d922:	ee 24       	eor	r14, r14
    d924:	ea 94       	dec	r14
    d926:	fe 2c       	mov	r15, r14
    d928:	10 e0       	ldi	r17, 0x00	; 0
    d92a:	00 e0       	ldi	r16, 0x00	; 0
    d92c:	22 e0       	ldi	r18, 0x02	; 2
    d92e:	a5 01       	movw	r20, r10
    d930:	b6 01       	movw	r22, r12
    d932:	ce 01       	movw	r24, r28
    d934:	01 96       	adiw	r24, 0x01	; 1
    d936:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
}
    d93a:	a8 96       	adiw	r28, 0x28	; 40
    d93c:	0f b6       	in	r0, 0x3f	; 63
    d93e:	f8 94       	cli
    d940:	de bf       	out	0x3e, r29	; 62
    d942:	0f be       	out	0x3f, r0	; 63
    d944:	cd bf       	out	0x3d, r28	; 61
    d946:	df 91       	pop	r29
    d948:	cf 91       	pop	r28
    d94a:	1f 91       	pop	r17
    d94c:	0f 91       	pop	r16
    d94e:	ff 90       	pop	r15
    d950:	ef 90       	pop	r14
    d952:	df 90       	pop	r13
    d954:	cf 90       	pop	r12
    d956:	bf 90       	pop	r11
    d958:	af 90       	pop	r10
    d95a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4761
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    d95c:	6d eb       	ldi	r22, 0xBD	; 189
    d95e:	7a e5       	ldi	r23, 0x5A	; 90
    d960:	ce 01       	movw	r24, r28
    d962:	4f 96       	adiw	r24, 0x1f	; 31
    d964:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
    d968:	d5 cf       	rjmp	.-86     	; 0xd914 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x4e>

0000d96a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5941
   args1 ... paramentr z definice prvku
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/
uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d96a:	0f 93       	push	r16
    d96c:	1f 93       	push	r17
    d96e:	cf 93       	push	r28
    d970:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5944
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    d972:	c0 91 82 0a 	lds	r28, 0x0A82	; 0x800a82 <default_ring>
    d976:	8c 2f       	mov	r24, r28
    d978:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
    d97c:	8f 3f       	cpi	r24, 0xFF	; 255
    d97e:	71 f0       	breq	.+28     	; 0xd99c <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_status_bites():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    d980:	21 e2       	ldi	r18, 0x21	; 33
    d982:	c2 9f       	mul	r28, r18
    d984:	c0 01       	movw	r24, r0
    d986:	11 24       	eor	r1, r1
    d988:	88 5a       	subi	r24, 0xA8	; 168
    d98a:	9e 4f       	sbci	r25, 0xFE	; 254
    d98c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5947
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    d990:	80 fd       	sbrc	r24, 0
    d992:	06 c0       	rjmp	.+12     	; 0xd9a0 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
    d994:	81 e0       	ldi	r24, 0x01	; 1
    d996:	03 30       	cpi	r16, 0x03	; 3
    d998:	11 05       	cpc	r17, r1
    d99a:	31 f0       	breq	.+12     	; 0xd9a8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5949
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    d99c:	80 e0       	ldi	r24, 0x00	; 0
    d99e:	04 c0       	rjmp	.+8      	; 0xd9a8 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    d9a0:	81 e0       	ldi	r24, 0x01	; 1
    d9a2:	05 30       	cpi	r16, 0x05	; 5
    d9a4:	11 05       	cpc	r17, r1
    d9a6:	d1 f7       	brne	.-12     	; 0xd99c <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5953
      ret = 1;
  }
  return ret;
}
    d9a8:	cf 91       	pop	r28
    d9aa:	1f 91       	pop	r17
    d9ac:	0f 91       	pop	r16
    d9ae:	08 95       	ret

0000d9b0 <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z36button_get_show_default_ring_programhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5605
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
void button_get_show_default_ring_program(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    d9b0:	0f 93       	push	r16
    d9b2:	1f 93       	push	r17
    d9b4:	cf 93       	push	r28
    d9b6:	c8 2f       	mov	r28, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
  //printf("pp %d %d %d\n", args1, args2, args3);
  sprintf(line1, "Program %d", args1);
    d9b8:	1f 92       	push	r1
    d9ba:	8f 93       	push	r24
    d9bc:	85 e8       	ldi	r24, 0x85	; 133
    d9be:	93 e0       	ldi	r25, 0x03	; 3
    d9c0:	9f 93       	push	r25
    d9c2:	8f 93       	push	r24
    d9c4:	3f 93       	push	r19
    d9c6:	2f 93       	push	r18
    d9c8:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5608
  line2[0] = 0;
    d9cc:	f8 01       	movw	r30, r16
    d9ce:	10 82       	st	Z, r1
thermostat_program_get_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
    d9d0:	fd e4       	ldi	r31, 0x4D	; 77
    d9d2:	cf 9f       	mul	r28, r31
    d9d4:	c0 01       	movw	r24, r0
    d9d6:	11 24       	eor	r1, r1
    d9d8:	8f 50       	subi	r24, 0x0F	; 15
    d9da:	9e 4f       	sbci	r25, 0xFE	; 254
    d9dc:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z36button_get_show_default_ring_programhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5609
  if (thermostat_program_get_active(args1) == 1)
    d9e0:	0f 90       	pop	r0
    d9e2:	0f 90       	pop	r0
    d9e4:	0f 90       	pop	r0
    d9e6:	0f 90       	pop	r0
    d9e8:	0f 90       	pop	r0
    d9ea:	0f 90       	pop	r0
    d9ec:	81 30       	cpi	r24, 0x01	; 1
    d9ee:	39 f4       	brne	.+14     	; 0xd9fe <button_get_show_default_ring_program(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
  {
    thermostat_program_get_name(args1, line2);
    d9f0:	b8 01       	movw	r22, r16
    d9f2:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5614
  }
  //printf("pp %s\n", line1);
}
    d9f4:	cf 91       	pop	r28
    d9f6:	1f 91       	pop	r17
    d9f8:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
  //printf("pp %d %d %d\n", args1, args2, args3);
  sprintf(line1, "Program %d", args1);
  line2[0] = 0;
  if (thermostat_program_get_active(args1) == 1)
  {
    thermostat_program_get_name(args1, line2);
    d9fa:	0c 94 f5 69 	jmp	0xd3ea	; 0xd3ea <thermostat_program_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5614
  }
  //printf("pp %s\n", line1);
}
    d9fe:	cf 91       	pop	r28
    da00:	1f 91       	pop	r17
    da02:	0f 91       	pop	r16
    da04:	08 95       	ret

0000da06 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)>:
_Z46button_get_show_default_ring_program_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5582
}
/*
   funkce vraci pocet dostupnych programu pro maximalni pocet polozek menu
*/
uint8_t button_get_show_default_ring_program_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
    da06:	1f 93       	push	r17
    da08:	cf 93       	push	r28
    da0a:	df 93       	push	r29
    da0c:	c1 ef       	ldi	r28, 0xF1	; 241
    da0e:	d1 e0       	ldi	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5583
  uint8_t cnt = 0;
    da10:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_get_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:291
    da12:	ce 01       	movw	r24, r28
    da14:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z46button_get_show_default_ring_program_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    if (thermostat_program_get_active(idx) != PROG_FREE)
    da18:	8f 3f       	cpi	r24, 0xFF	; 255
    da1a:	09 f0       	breq	.+2      	; 0xda1e <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5586
      cnt++;
    da1c:	1f 5f       	subi	r17, 0xFF	; 255
    da1e:	c3 5b       	subi	r28, 0xB3	; 179
    da20:	df 4f       	sbci	r29, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5584
   funkce vraci pocet dostupnych programu pro maximalni pocet polozek menu
*/
uint8_t button_get_show_default_ring_program_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    da22:	c9 35       	cpi	r28, 0x59	; 89
    da24:	84 e0       	ldi	r24, 0x04	; 4
    da26:	d8 07       	cpc	r29, r24
    da28:	a1 f7       	brne	.-24     	; 0xda12 <button_get_show_default_ring_program_max_items(unsigned int, unsigned int, unsigned char)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5589
    if (thermostat_program_get_active(idx) != PROG_FREE)
      cnt++;
  //printf("cnt %d\n", cnt);
  return cnt;
}
    da2a:	81 2f       	mov	r24, r17
    da2c:	df 91       	pop	r29
    da2e:	cf 91       	pop	r28
    da30:	1f 91       	pop	r17
    da32:	08 95       	ret

0000da34 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)>:
_Z43button_get_show_default_ring_program_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5569
    funkce pro vyber programu pro regulator
    funkce vrati 1 pokud je vybrany dany program
    args3 je index polozky menu tj program id k default_ringu
*/
uint8_t button_get_show_default_ring_program_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
    da34:	cf 93       	push	r28
    da36:	c4 2f       	mov	r28, r20
thermostat_program_get_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:291
    da38:	2d e4       	ldi	r18, 0x4D	; 77
    da3a:	42 9f       	mul	r20, r18
    da3c:	c0 01       	movw	r24, r0
    da3e:	11 24       	eor	r1, r1
    da40:	8f 50       	subi	r24, 0x0F	; 15
    da42:	9e 4f       	sbci	r25, 0xFE	; 254
    da44:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z43button_get_show_default_ring_program_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
  //printf("%d %d %d\n", args1, args2, args3);
  uint8_t ret = 0;
  //printf("args3:%d act%d ringp%d\n",args3,thermostat_program_get_active(args3),thermostat_ring_get_program_id(default_ring) );
  if ((thermostat_program_get_active(args3) != PROG_FREE) && (thermostat_ring_get_program_id(default_ring) == args3))
    da48:	8f 3f       	cpi	r24, 0xFF	; 255
    da4a:	61 f0       	breq	.+24     	; 0xda64 <button_get_show_default_ring_program_active(unsigned int, unsigned int, unsigned char)+0x30>
thermostat_ring_get_program_id():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    da4c:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    da50:	21 e2       	ldi	r18, 0x21	; 33
    da52:	82 9f       	mul	r24, r18
    da54:	c0 01       	movw	r24, r0
    da56:	11 24       	eor	r1, r1
    da58:	85 5a       	subi	r24, 0xA5	; 165
    da5a:	9e 4f       	sbci	r25, 0xFE	; 254
    da5c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z43button_get_show_default_ring_program_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
    da60:	91 e0       	ldi	r25, 0x01	; 1
    da62:	c8 13       	cpse	r28, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5571
    args3 je index polozky menu tj program id k default_ringu
*/
uint8_t button_get_show_default_ring_program_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  //printf("%d %d %d\n", args1, args2, args3);
  uint8_t ret = 0;
    da64:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5577
  //printf("args3:%d act%d ringp%d\n",args3,thermostat_program_get_active(args3),thermostat_ring_get_program_id(default_ring) );
  if ((thermostat_program_get_active(args3) != PROG_FREE) && (thermostat_ring_get_program_id(default_ring) == args3))
    ret = 1;

  return ret;
}
    da66:	89 2f       	mov	r24, r25
    da68:	cf 91       	pop	r28
    da6a:	08 95       	ret

0000da6c <button_get_show_default_ring_input_active(unsigned int, unsigned int, unsigned char)>:
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5526
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_get_show_default_ring_input_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
    da6c:	cf 93       	push	r28
    da6e:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    da70:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
    da74:	21 e2       	ldi	r18, 0x21	; 33
    da76:	82 9f       	mul	r24, r18
    da78:	c0 01       	movw	r24, r0
    da7a:	11 24       	eor	r1, r1
    da7c:	84 5a       	subi	r24, 0xA4	; 164
    da7e:	9e 4f       	sbci	r25, 0xFE	; 254
    da80:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z41button_get_show_default_ring_input_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5528
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(default_ring) == args3)
    da84:	91 e0       	ldi	r25, 0x01	; 1
    da86:	c8 13       	cpse	r28, r24
    da88:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
    ret = 1;

  return ret;
}
    da8a:	89 2f       	mov	r24, r25
    da8c:	cf 91       	pop	r28
    da8e:	08 95       	ret

0000da90 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    da90:	af 92       	push	r10
    da92:	bf 92       	push	r11
    da94:	cf 92       	push	r12
    da96:	df 92       	push	r13
    da98:	ef 92       	push	r14
    da9a:	ff 92       	push	r15
    da9c:	0f 93       	push	r16
    da9e:	1f 93       	push	r17
    daa0:	cf 93       	push	r28
    daa2:	df 93       	push	r29
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    daa4:	86 30       	cpi	r24, 0x06	; 6
    daa6:	08 f0       	brcs	.+2      	; 0xdaaa <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    daa8:	56 c0       	rjmp	.+172    	; 0xdb56 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    daaa:	8b 01       	movw	r16, r22
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    daac:	96 e1       	ldi	r25, 0x16	; 22
    daae:	89 9f       	mul	r24, r25
    dab0:	e0 01       	movw	r28, r0
    dab2:	11 24       	eor	r1, r1
    dab4:	ce 01       	movw	r24, r28
    dab6:	88 53       	subi	r24, 0x38	; 56
    dab8:	9f 4f       	sbci	r25, 0xFF	; 255
    daba:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    dabe:	f8 01       	movw	r30, r16
    dac0:	81 93       	st	Z+, r24
    dac2:	6f 01       	movw	r12, r30
    dac4:	7e 01       	movw	r14, r28
    dac6:	f9 ec       	ldi	r31, 0xC9	; 201
    dac8:	ef 0e       	add	r14, r31
    daca:	f1 1c       	adc	r15, r1
    dacc:	5e 01       	movw	r10, r28
    dace:	81 ed       	ldi	r24, 0xD1	; 209
    dad0:	a8 0e       	add	r10, r24
    dad2:	b1 1c       	adc	r11, r1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    dad4:	c7 01       	movw	r24, r14
    dad6:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    dada:	f6 01       	movw	r30, r12
    dadc:	81 93       	st	Z+, r24
    dade:	6f 01       	movw	r12, r30
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    dae0:	c7 01       	movw	r24, r14
    dae2:	0b 96       	adiw	r24, 0x0b	; 11
    dae4:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    dae8:	f6 01       	movw	r30, r12
    daea:	82 87       	std	Z+10, r24	; 0x0a
    daec:	ff ef       	ldi	r31, 0xFF	; 255
    daee:	ef 1a       	sub	r14, r31
    daf0:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    daf2:	ea 14       	cp	r14, r10
    daf4:	fb 04       	cpc	r15, r11
    daf6:	71 f7       	brne	.-36     	; 0xdad4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    daf8:	f8 01       	movw	r30, r16
    dafa:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    dafc:	c7 01       	movw	r24, r14
    dafe:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    db02:	f8 01       	movw	r30, r16
    db04:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    db06:	ce 01       	movw	r24, r28
    db08:	8e 52       	subi	r24, 0x2E	; 46
    db0a:	9f 4f       	sbci	r25, 0xFF	; 255
    db0c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    db10:	f8 2e       	mov	r15, r24
    db12:	ce 01       	movw	r24, r28
    db14:	8d 52       	subi	r24, 0x2D	; 45
    db16:	9f 4f       	sbci	r25, 0xFF	; 255
    db18:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    db1c:	2f 2d       	mov	r18, r15
    db1e:	30 e0       	ldi	r19, 0x00	; 0
    db20:	32 2f       	mov	r19, r18
    db22:	22 27       	eor	r18, r18
    db24:	82 0f       	add	r24, r18
    db26:	93 2f       	mov	r25, r19
    db28:	91 1d       	adc	r25, r1
    db2a:	f8 01       	movw	r30, r16
    db2c:	93 87       	std	Z+11, r25	; 0x0b
    db2e:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    db30:	ce 01       	movw	r24, r28
    db32:	84 52       	subi	r24, 0x24	; 36
    db34:	9f 4f       	sbci	r25, 0xFF	; 255
    db36:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    db3a:	f8 01       	movw	r30, r16
    db3c:	84 8b       	std	Z+20, r24	; 0x14
    db3e:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    db40:	df 91       	pop	r29
    db42:	cf 91       	pop	r28
    db44:	1f 91       	pop	r17
    db46:	0f 91       	pop	r16
    db48:	ff 90       	pop	r15
    db4a:	ef 90       	pop	r14
    db4c:	df 90       	pop	r13
    db4e:	cf 90       	pop	r12
    db50:	bf 90       	pop	r11
    db52:	af 90       	pop	r10
    db54:	08 95       	ret
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    db56:	80 e0       	ldi	r24, 0x00	; 0
    db58:	f3 cf       	rjmp	.-26     	; 0xdb40 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000db5a <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    db5a:	ef 92       	push	r14
    db5c:	ff 92       	push	r15
    db5e:	0f 93       	push	r16
    db60:	1f 93       	push	r17
    db62:	cf 93       	push	r28
    db64:	df 93       	push	r29
    db66:	cd b7       	in	r28, 0x3d	; 61
    db68:	de b7       	in	r29, 0x3e	; 62
    db6a:	6e 97       	sbiw	r28, 0x1e	; 30
    db6c:	0f b6       	in	r0, 0x3f	; 63
    db6e:	f8 94       	cli
    db70:	de bf       	out	0x3e, r29	; 62
    db72:	0f be       	out	0x3f, r0	; 63
    db74:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    db76:	1f 8a       	std	Y+23, r1	; 0x17
    db78:	18 8e       	std	Y+24, r1	; 0x18
    db7a:	19 8e       	std	Y+25, r1	; 0x19
    db7c:	1a 8e       	std	Y+26, r1	; 0x1a
    db7e:	1b 8e       	std	Y+27, r1	; 0x1b
    db80:	1c 8e       	std	Y+28, r1	; 0x1c
    db82:	1d 8e       	std	Y+29, r1	; 0x1d
    db84:	1e 8e       	std	Y+30, r1	; 0x1e
    db86:	03 e3       	ldi	r16, 0x33	; 51
    db88:	1a e0       	ldi	r17, 0x0A	; 10
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    db8a:	ee 24       	eor	r14, r14
    db8c:	ea 94       	dec	r14
    db8e:	f8 01       	movw	r30, r16
    db90:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    db92:	b8 01       	movw	r22, r16
    db94:	ce 01       	movw	r24, r28
    db96:	47 96       	adiw	r24, 0x17	; 23
    db98:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <tds_compare_rom(unsigned char*, unsigned char*)>
    db9c:	81 11       	cpse	r24, r1
    db9e:	14 c0       	rjmp	.+40     	; 0xdbc8 <tds_update_associate()+0x6e>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    dba0:	f1 2c       	mov	r15, r1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    dba2:	be 01       	movw	r22, r28
    dba4:	6f 5f       	subi	r22, 0xFF	; 255
    dba6:	7f 4f       	sbci	r23, 0xFF	; 255
    dba8:	8f 2d       	mov	r24, r15
    dbaa:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    dbae:	b8 01       	movw	r22, r16
    dbb0:	ce 01       	movw	r24, r28
    dbb2:	02 96       	adiw	r24, 0x02	; 2
    dbb4:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <tds_compare_rom(unsigned char*, unsigned char*)>
    dbb8:	88 23       	and	r24, r24
    dbba:	11 f0       	breq	.+4      	; 0xdbc0 <tds_update_associate()+0x66>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    dbbc:	f8 01       	movw	r30, r16
    dbbe:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    dbc0:	f3 94       	inc	r15
    dbc2:	f6 e0       	ldi	r31, 0x06	; 6
    dbc4:	ff 12       	cpse	r15, r31
    dbc6:	ed cf       	rjmp	.-38     	; 0xdba2 <tds_update_associate()+0x48>
    dbc8:	05 5f       	subi	r16, 0xF5	; 245
    dbca:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    dbcc:	8a e0       	ldi	r24, 0x0A	; 10
    dbce:	05 37       	cpi	r16, 0x75	; 117
    dbd0:	18 07       	cpc	r17, r24
    dbd2:	e9 f6       	brne	.-70     	; 0xdb8e <tds_update_associate()+0x34>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    dbd4:	6e 96       	adiw	r28, 0x1e	; 30
    dbd6:	0f b6       	in	r0, 0x3f	; 63
    dbd8:	f8 94       	cli
    dbda:	de bf       	out	0x3e, r29	; 62
    dbdc:	0f be       	out	0x3f, r0	; 63
    dbde:	cd bf       	out	0x3d, r28	; 61
    dbe0:	df 91       	pop	r29
    dbe2:	cf 91       	pop	r28
    dbe4:	1f 91       	pop	r17
    dbe6:	0f 91       	pop	r16
    dbe8:	ff 90       	pop	r15
    dbea:	ef 90       	pop	r14
    dbec:	08 95       	ret

0000dbee <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    dbee:	af 92       	push	r10
    dbf0:	bf 92       	push	r11
    dbf2:	cf 92       	push	r12
    dbf4:	df 92       	push	r13
    dbf6:	ef 92       	push	r14
    dbf8:	ff 92       	push	r15
    dbfa:	1f 93       	push	r17
    dbfc:	cf 93       	push	r28
    dbfe:	df 93       	push	r29
    dc00:	cd b7       	in	r28, 0x3d	; 61
    dc02:	de b7       	in	r29, 0x3e	; 62
    dc04:	66 97       	sbiw	r28, 0x16	; 22
    dc06:	0f b6       	in	r0, 0x3f	; 63
    dc08:	f8 94       	cli
    dc0a:	de bf       	out	0x3e, r29	; 62
    dc0c:	0f be       	out	0x3f, r0	; 63
    dc0e:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    dc10:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Global_HWwirenum>
    dc14:	89 17       	cp	r24, r25
    dc16:	a0 f0       	brcs	.+40     	; 0xdc40 <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    dc18:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    dc1a:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <tds_update_associate()>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:226
  return ret;
}
    dc1e:	81 2f       	mov	r24, r17
    dc20:	66 96       	adiw	r28, 0x16	; 22
    dc22:	0f b6       	in	r0, 0x3f	; 63
    dc24:	f8 94       	cli
    dc26:	de bf       	out	0x3e, r29	; 62
    dc28:	0f be       	out	0x3f, r0	; 63
    dc2a:	cd bf       	out	0x3d, r28	; 61
    dc2c:	df 91       	pop	r29
    dc2e:	cf 91       	pop	r28
    dc30:	1f 91       	pop	r17
    dc32:	ff 90       	pop	r15
    dc34:	ef 90       	pop	r14
    dc36:	df 90       	pop	r13
    dc38:	cf 90       	pop	r12
    dc3a:	bf 90       	pop	r11
    dc3c:	af 90       	pop	r10
    dc3e:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    dc40:	a8 2e       	mov	r10, r24
    dc42:	b1 2c       	mov	r11, r1
    dc44:	2b e0       	ldi	r18, 0x0B	; 11
    dc46:	82 9f       	mul	r24, r18
    dc48:	c0 01       	movw	r24, r0
    dc4a:	11 24       	eor	r1, r1
    dc4c:	fc 01       	movw	r30, r24
    dc4e:	ed 5c       	subi	r30, 0xCD	; 205
    dc50:	f5 4f       	sbci	r31, 0xF5	; 245
    dc52:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    dc54:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    dc56:	be 01       	movw	r22, r28
    dc58:	6f 5f       	subi	r22, 0xFF	; 255
    dc5a:	7f 4f       	sbci	r23, 0xFF	; 255
    dc5c:	81 2f       	mov	r24, r17
    dc5e:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    dc62:	b7 01       	movw	r22, r14
    dc64:	ce 01       	movw	r24, r28
    dc66:	02 96       	adiw	r24, 0x02	; 2
    dc68:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <tds_compare_rom(unsigned char*, unsigned char*)>
    dc6c:	81 11       	cpse	r24, r1
    dc6e:	d4 cf       	rjmp	.-88     	; 0xdc18 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    dc70:	1f 5f       	subi	r17, 0xFF	; 255
    dc72:	16 30       	cpi	r17, 0x06	; 6
    dc74:	81 f7       	brne	.-32     	; 0xdc56 <tds_associate(unsigned char)+0x68>
    dc76:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    dc78:	2b e0       	ldi	r18, 0x0B	; 11
    dc7a:	2a 9d       	mul	r18, r10
    dc7c:	c0 01       	movw	r24, r0
    dc7e:	2b 9d       	mul	r18, r11
    dc80:	90 0d       	add	r25, r0
    dc82:	11 24       	eor	r1, r1
    dc84:	fc 01       	movw	r30, r24
    dc86:	e4 5c       	subi	r30, 0xC4	; 196
    dc88:	f5 4f       	sbci	r31, 0xF5	; 245
    dc8a:	6f 01       	movw	r12, r30
    dc8c:	03 c0       	rjmp	.+6      	; 0xdc94 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    dc8e:	1f 5f       	subi	r17, 0xFF	; 255
    dc90:	16 30       	cpi	r17, 0x06	; 6
    dc92:	11 f2       	breq	.-124    	; 0xdc18 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    dc94:	be 01       	movw	r22, r28
    dc96:	6f 5f       	subi	r22, 0xFF	; 255
    dc98:	7f 4f       	sbci	r23, 0xFF	; 255
    dc9a:	81 2f       	mov	r24, r17
    dc9c:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    dca0:	89 81       	ldd	r24, Y+1	; 0x01
    dca2:	81 11       	cpse	r24, r1
    dca4:	f4 cf       	rjmp	.-24     	; 0xdc8e <tds_associate(unsigned char)+0xa0>
    dca6:	f6 01       	movw	r30, r12
    dca8:	80 81       	ld	r24, Z
    dcaa:	81 30       	cpi	r24, 0x01	; 1
    dcac:	81 f7       	brne	.-32     	; 0xdc8e <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    dcae:	89 83       	std	Y+1, r24	; 0x01
    dcb0:	fe 01       	movw	r30, r28
    dcb2:	32 96       	adiw	r30, 0x02	; 2
    dcb4:	90 e0       	ldi	r25, 0x00	; 0
    dcb6:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    dcb8:	d7 01       	movw	r26, r14
    dcba:	a8 0f       	add	r26, r24
    dcbc:	b9 1f       	adc	r27, r25
    dcbe:	2c 91       	ld	r18, X
    dcc0:	21 93       	st	Z+, r18
    dcc2:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    dcc4:	88 30       	cpi	r24, 0x08	; 8
    dcc6:	91 05       	cpc	r25, r1
    dcc8:	b9 f7       	brne	.-18     	; 0xdcb8 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    dcca:	2b e0       	ldi	r18, 0x0B	; 11
    dccc:	12 9f       	mul	r17, r18
    dcce:	f0 01       	movw	r30, r0
    dcd0:	11 24       	eor	r1, r1
    dcd2:	ed 5c       	subi	r30, 0xCD	; 205
    dcd4:	f5 4f       	sbci	r31, 0xF5	; 245
    dcd6:	e0 85       	ldd	r30, Z+8	; 0x08
    dcd8:	f0 e0       	ldi	r31, 0x00	; 0
    dcda:	ee 0f       	add	r30, r30
    dcdc:	ff 1f       	adc	r31, r31
    dcde:	e7 52       	subi	r30, 0x27	; 39
    dce0:	f6 4f       	sbci	r31, 0xF6	; 246
    dce2:	80 81       	ld	r24, Z
    dce4:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    dce6:	be 01       	movw	r22, r28
    dce8:	6f 5f       	subi	r22, 0xFF	; 255
    dcea:	7f 4f       	sbci	r23, 0xFF	; 255
    dcec:	81 2f       	mov	r24, r17
    dcee:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
    dcf2:	3e e1       	ldi	r19, 0x1E	; 30
    dcf4:	13 9f       	mul	r17, r19
    dcf6:	a0 01       	movw	r20, r0
    dcf8:	11 24       	eor	r1, r1
    dcfa:	90 e0       	ldi	r25, 0x00	; 0
    dcfc:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    dcfe:	20 e2       	ldi	r18, 0x20	; 32
    dd00:	3e e4       	ldi	r19, 0x4E	; 78
    dd02:	fc 01       	movw	r30, r24
    dd04:	ee 0f       	add	r30, r30
    dd06:	ff 1f       	adc	r31, r31
    dd08:	e4 0f       	add	r30, r20
    dd0a:	f5 1f       	adc	r31, r21
    dd0c:	e3 57       	subi	r30, 0x73	; 115
    dd0e:	f5 4f       	sbci	r31, 0xF5	; 245
    dd10:	30 87       	std	Z+8, r19	; 0x08
    dd12:	27 83       	std	Z+7, r18	; 0x07
    dd14:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    dd16:	8a 30       	cpi	r24, 0x0A	; 10
    dd18:	91 05       	cpc	r25, r1
    dd1a:	99 f7       	brne	.-26     	; 0xdd02 <tds_associate(unsigned char)+0x114>
    dd1c:	7e cf       	rjmp	.-260    	; 0xdc1a <tds_associate(unsigned char)+0x2c>

0000dd1e <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5277
  return active;
}

void helper_tds_associate(uint16_t idx, uint16_t args2, uint8_t args3)
{
  tds_associate(idx);
    dd1e:	0c 94 f7 6d 	jmp	0xdbee	; 0xdbee <tds_associate(unsigned char)>

0000dd22 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    dd22:	1f 93       	push	r17
    dd24:	cf 93       	push	r28
    dd26:	df 93       	push	r29
    dd28:	cd b7       	in	r28, 0x3d	; 61
    dd2a:	de b7       	in	r29, 0x3e	; 62
    dd2c:	66 97       	sbiw	r28, 0x16	; 22
    dd2e:	0f b6       	in	r0, 0x3f	; 63
    dd30:	f8 94       	cli
    dd32:	de bf       	out	0x3e, r29	; 62
    dd34:	0f be       	out	0x3f, r0	; 63
    dd36:	cd bf       	out	0x3d, r28	; 61
    dd38:	18 2f       	mov	r17, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    dd3a:	be 01       	movw	r22, r28
    dd3c:	6f 5f       	subi	r22, 0xFF	; 255
    dd3e:	7f 4f       	sbci	r23, 0xFF	; 255
    dd40:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    dd44:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    dd46:	63 e6       	ldi	r22, 0x63	; 99
    dd48:	73 e0       	ldi	r23, 0x03	; 3
    dd4a:	ce 01       	movw	r24, r28
    dd4c:	0d 96       	adiw	r24, 0x0d	; 13
    dd4e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    dd52:	1c 86       	std	Y+12, r1	; 0x0c
    dd54:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    dd56:	8a e0       	ldi	r24, 0x0A	; 10
    dd58:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    dd5a:	1a 82       	std	Y+2, r1	; 0x02
    dd5c:	1b 82       	std	Y+3, r1	; 0x03
    dd5e:	1c 82       	std	Y+4, r1	; 0x04
    dd60:	1d 82       	std	Y+5, r1	; 0x05
    dd62:	1e 82       	std	Y+6, r1	; 0x06
    dd64:	1f 82       	std	Y+7, r1	; 0x07
    dd66:	18 86       	std	Y+8, r1	; 0x08
    dd68:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    dd6a:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    dd6c:	be 01       	movw	r22, r28
    dd6e:	6f 5f       	subi	r22, 0xFF	; 255
    dd70:	7f 4f       	sbci	r23, 0xFF	; 255
    dd72:	81 2f       	mov	r24, r17
    dd74:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    dd78:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <tds_update_associate()>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:132
}
    dd7c:	66 96       	adiw	r28, 0x16	; 22
    dd7e:	0f b6       	in	r0, 0x3f	; 63
    dd80:	f8 94       	cli
    dd82:	de bf       	out	0x3e, r29	; 62
    dd84:	0f be       	out	0x3f, r0	; 63
    dd86:	cd bf       	out	0x3d, r28	; 61
    dd88:	df 91       	pop	r29
    dd8a:	cf 91       	pop	r28
    dd8c:	1f 91       	pop	r17
    dd8e:	08 95       	ret

0000dd90 <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    dd90:	8b e0       	ldi	r24, 0x0B	; 11
    dd92:	68 9f       	mul	r22, r24
    dd94:	f0 01       	movw	r30, r0
    dd96:	11 24       	eor	r1, r1
    dd98:	ed 5c       	subi	r30, 0xCD	; 205
    dd9a:	f5 4f       	sbci	r31, 0xF5	; 245
    dd9c:	82 85       	ldd	r24, Z+10	; 0x0a
    dd9e:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5301
/// zruseni associace
void click_tds_deassociate_onewire(uint16_t args1, uint16_t idx, uint8_t args3)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
    dda2:	0c 94 e0 9b 	jmp	0x137c0	; 0x137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>

0000dda6 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5245
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    dda6:	7f 92       	push	r7
    dda8:	8f 92       	push	r8
    ddaa:	9f 92       	push	r9
    ddac:	af 92       	push	r10
    ddae:	bf 92       	push	r11
    ddb0:	cf 92       	push	r12
    ddb2:	df 92       	push	r13
    ddb4:	ef 92       	push	r14
    ddb6:	ff 92       	push	r15
    ddb8:	0f 93       	push	r16
    ddba:	1f 93       	push	r17
    ddbc:	cf 93       	push	r28
    ddbe:	df 93       	push	r29
    ddc0:	cd b7       	in	r28, 0x3d	; 61
    ddc2:	de b7       	in	r29, 0x3e	; 62
    ddc4:	e0 97       	sbiw	r28, 0x30	; 48
    ddc6:	0f b6       	in	r0, 0x3f	; 63
    ddc8:	f8 94       	cli
    ddca:	de bf       	out	0x3e, r29	; 62
    ddcc:	0f be       	out	0x3f, r0	; 63
    ddce:	cd bf       	out	0x3d, r28	; 61
    ddd0:	98 2e       	mov	r9, r24
    ddd2:	82 2e       	mov	r8, r18
    ddd4:	73 2e       	mov	r7, r19
    ddd6:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5247
  char str2[26];
  strcpy_P(line1, text_not_used);
    ddd8:	63 e6       	ldi	r22, 0x63	; 99
    ddda:	7a e5       	ldi	r23, 0x5A	; 90
    dddc:	82 2f       	mov	r24, r18
    ddde:	93 2f       	mov	r25, r19
    dde0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5248
  strcpy(line2, "-");
    dde4:	60 e5       	ldi	r22, 0x50	; 80
    dde6:	73 e0       	ldi	r23, 0x03	; 3
    dde8:	c8 01       	movw	r24, r16
    ddea:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5249
  if (w_rom[args1].used == 1)
    ddee:	4b e0       	ldi	r20, 0x0B	; 11
    ddf0:	49 9d       	mul	r20, r9
    ddf2:	c0 01       	movw	r24, r0
    ddf4:	11 24       	eor	r1, r1
    ddf6:	9c 01       	movw	r18, r24
    ddf8:	2d 5c       	subi	r18, 0xCD	; 205
    ddfa:	35 4f       	sbci	r19, 0xF5	; 245
    ddfc:	69 01       	movw	r12, r18
    ddfe:	f9 01       	movw	r30, r18
    de00:	81 85       	ldd	r24, Z+9	; 0x09
    de02:	81 30       	cpi	r24, 0x01	; 1
    de04:	c9 f5       	brne	.+114    	; 0xde78 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5251
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    de06:	a9 01       	movw	r20, r18
    de08:	00 e1       	ldi	r16, 0x10	; 16
    de0a:	28 e0       	ldi	r18, 0x08	; 8
    de0c:	6a e3       	ldi	r22, 0x3A	; 58
    de0e:	ce 01       	movw	r24, r28
    de10:	01 96       	adiw	r24, 0x01	; 1
    de12:	5c 01       	movw	r10, r24
    de14:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5252
    sprintf(line1, "%d: %s", args1, str2);
    de18:	bf 92       	push	r11
    de1a:	af 92       	push	r10
    de1c:	1f 92       	push	r1
    de1e:	9f 92       	push	r9
    de20:	80 e9       	ldi	r24, 0x90	; 144
    de22:	93 e0       	ldi	r25, 0x03	; 3
    de24:	9f 93       	push	r25
    de26:	8f 93       	push	r24
    de28:	7f 92       	push	r7
    de2a:	8f 92       	push	r8
    de2c:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5254

    if (w_rom[args1].tds_idx != 255)
    de30:	0f b6       	in	r0, 0x3f	; 63
    de32:	f8 94       	cli
    de34:	de bf       	out	0x3e, r29	; 62
    de36:	0f be       	out	0x3f, r0	; 63
    de38:	cd bf       	out	0x3d, r28	; 61
    de3a:	f6 01       	movw	r30, r12
    de3c:	82 85       	ldd	r24, Z+10	; 0x0a
    de3e:	8f 3f       	cpi	r24, 0xFF	; 255
    de40:	79 f1       	breq	.+94     	; 0xdea0 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5256
    {
      strcpy_P(line2, text_nastavit_tds);
    de42:	60 e5       	ldi	r22, 0x50	; 80
    de44:	7a e5       	ldi	r23, 0x5A	; 90
    de46:	c7 01       	movw	r24, r14
    de48:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
tds_get_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    de4c:	be 01       	movw	r22, r28
    de4e:	65 5e       	subi	r22, 0xE5	; 229
    de50:	7f 4f       	sbci	r23, 0xFF	; 255
    de52:	f6 01       	movw	r30, r12
    de54:	82 85       	ldd	r24, Z+10	; 0x0a
    de56:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    de5a:	be 01       	movw	r22, r28
    de5c:	69 5d       	subi	r22, 0xD9	; 217
    de5e:	7f 4f       	sbci	r23, 0xFF	; 255
    de60:	c5 01       	movw	r24, r10
    de62:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5258
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    de66:	64 e2       	ldi	r22, 0x24	; 36
    de68:	76 e0       	ldi	r23, 0x06	; 6
    de6a:	c7 01       	movw	r24, r14
    de6c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5259
      strcat(line2, str2);
    de70:	b5 01       	movw	r22, r10
    de72:	c7 01       	movw	r24, r14
    de74:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5264
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    de78:	e0 96       	adiw	r28, 0x30	; 48
    de7a:	0f b6       	in	r0, 0x3f	; 63
    de7c:	f8 94       	cli
    de7e:	de bf       	out	0x3e, r29	; 62
    de80:	0f be       	out	0x3f, r0	; 63
    de82:	cd bf       	out	0x3d, r28	; 61
    de84:	df 91       	pop	r29
    de86:	cf 91       	pop	r28
    de88:	1f 91       	pop	r17
    de8a:	0f 91       	pop	r16
    de8c:	ff 90       	pop	r15
    de8e:	ef 90       	pop	r14
    de90:	df 90       	pop	r13
    de92:	cf 90       	pop	r12
    de94:	bf 90       	pop	r11
    de96:	af 90       	pop	r10
    de98:	9f 90       	pop	r9
    de9a:	8f 90       	pop	r8
    de9c:	7f 90       	pop	r7
    de9e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5262
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    dea0:	60 e7       	ldi	r22, 0x70	; 112
    dea2:	7a e5       	ldi	r23, 0x5A	; 90
    dea4:	c7 01       	movw	r24, r14
    dea6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
    deaa:	e6 cf       	rjmp	.-52     	; 0xde78 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

0000deac <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    deac:	3f 92       	push	r3
    deae:	4f 92       	push	r4
    deb0:	5f 92       	push	r5
    deb2:	6f 92       	push	r6
    deb4:	7f 92       	push	r7
    deb6:	8f 92       	push	r8
    deb8:	9f 92       	push	r9
    deba:	af 92       	push	r10
    debc:	bf 92       	push	r11
    debe:	cf 92       	push	r12
    dec0:	df 92       	push	r13
    dec2:	ef 92       	push	r14
    dec4:	ff 92       	push	r15
    dec6:	0f 93       	push	r16
    dec8:	1f 93       	push	r17
    deca:	cf 93       	push	r28
    decc:	df 93       	push	r29
    dece:	cd b7       	in	r28, 0x3d	; 61
    ded0:	de b7       	in	r29, 0x3e	; 62
    ded2:	ca 54       	subi	r28, 0x4A	; 74
    ded4:	d1 09       	sbc	r29, r1
    ded6:	0f b6       	in	r0, 0x3f	; 63
    ded8:	f8 94       	cli
    deda:	de bf       	out	0x3e, r29	; 62
    dedc:	0f be       	out	0x3f, r0	; 63
    dede:	cd bf       	out	0x3d, r28	; 61
    dee0:	4c 01       	movw	r8, r24
    dee2:	3b 01       	movw	r6, r22
    dee4:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    dee6:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    deea:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4869
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    deee:	26 0f       	add	r18, r22
    def0:	37 1f       	adc	r19, r23
    def2:	48 0f       	add	r20, r24
    def4:	59 1f       	adc	r21, r25
    def6:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4870
  if (get_tds18s20(args2, &tds) == 1)
    defa:	be 01       	movw	r22, r28
    defc:	6b 5c       	subi	r22, 0xCB	; 203
    defe:	7f 4f       	sbci	r23, 0xFF	; 255
    df00:	8e 2d       	mov	r24, r14
    df02:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    df06:	23 01       	movw	r4, r6
    df08:	28 e2       	ldi	r18, 0x28	; 40
    df0a:	42 0e       	add	r4, r18
    df0c:	51 1c       	adc	r5, r1
    df0e:	9e 01       	movw	r18, r28
    df10:	2f 5f       	subi	r18, 0xFF	; 255
    df12:	3f 4f       	sbci	r19, 0xFF	; 255
    df14:	59 01       	movw	r10, r18
    df16:	81 30       	cpi	r24, 0x01	; 1
    df18:	09 f0       	breq	.+2      	; 0xdf1c <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x70>
    df1a:	ca c0       	rjmp	.+404    	; 0xe0b0 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
  {
    createString(str2, ':', tds.rom, 8, 16);
    df1c:	6e 01       	movw	r12, r28
    df1e:	3b e1       	ldi	r19, 0x1B	; 27
    df20:	c3 0e       	add	r12, r19
    df22:	d1 1c       	adc	r13, r1
    df24:	00 e1       	ldi	r16, 0x10	; 16
    df26:	28 e0       	ldi	r18, 0x08	; 8
    df28:	ae 01       	movw	r20, r28
    df2a:	4a 5c       	subi	r20, 0xCA	; 202
    df2c:	5f 4f       	sbci	r21, 0xFF	; 255
    df2e:	6a e3       	ldi	r22, 0x3A	; 58
    df30:	c6 01       	movw	r24, r12
    df32:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4873
    sprintf(str1, "rom: %s", str2);
    df36:	df 92       	push	r13
    df38:	cf 92       	push	r12
    df3a:	87 e9       	ldi	r24, 0x97	; 151
    df3c:	93 e0       	ldi	r25, 0x03	; 3
    df3e:	9f 93       	push	r25
    df40:	8f 93       	push	r24
    df42:	bf 92       	push	r11
    df44:	af 92       	push	r10
    df46:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4874
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    df4a:	8a e0       	ldi	r24, 0x0A	; 10
    df4c:	88 0e       	add	r8, r24
    df4e:	91 1c       	adc	r9, r1
    df50:	a3 01       	movw	r20, r6
    df52:	4b 5a       	subi	r20, 0xAB	; 171
    df54:	5f 4f       	sbci	r21, 0xFF	; 255
    df56:	ee 24       	eor	r14, r14
    df58:	ea 94       	dec	r14
    df5a:	fe 2c       	mov	r15, r14
    df5c:	10 e0       	ldi	r17, 0x00	; 0
    df5e:	00 e0       	ldi	r16, 0x00	; 0
    df60:	21 e0       	ldi	r18, 0x01	; 1
    df62:	b4 01       	movw	r22, r8
    df64:	c5 01       	movw	r24, r10
    df66:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4876
    ///
    strcpy_P(str2, text_nazev);
    df6a:	69 e4       	ldi	r22, 0x49	; 73
    df6c:	7a e5       	ldi	r23, 0x5A	; 90
    df6e:	c6 01       	movw	r24, r12
    df70:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4877
    sprintf(str1, "%s: %s", str2, tds.name);
    df74:	85 e3       	ldi	r24, 0x35	; 53
    df76:	90 e0       	ldi	r25, 0x00	; 0
    df78:	8c 0f       	add	r24, r28
    df7a:	9d 1f       	adc	r25, r29
    df7c:	0c 96       	adiw	r24, 0x0c	; 12
    df7e:	9f 93       	push	r25
    df80:	8f 93       	push	r24
    df82:	df 92       	push	r13
    df84:	cf 92       	push	r12
    df86:	8f e9       	ldi	r24, 0x9F	; 159
    df88:	93 e0       	ldi	r25, 0x03	; 3
    df8a:	9f 93       	push	r25
    df8c:	8f 93       	push	r24
    df8e:	bf 92       	push	r11
    df90:	af 92       	push	r10
    df92:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4878
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    df96:	22 e0       	ldi	r18, 0x02	; 2
    df98:	a2 01       	movw	r20, r4
    df9a:	b4 01       	movw	r22, r8
    df9c:	c5 01       	movw	r24, r10
    df9e:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4880
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    dfa2:	21 96       	adiw	r28, 0x01	; 1
    dfa4:	6e ad       	ldd	r22, Y+62	; 0x3e
    dfa6:	7f ad       	ldd	r23, Y+63	; 0x3f
    dfa8:	21 97       	sbiw	r28, 0x01	; 1
    dfaa:	07 2e       	mov	r0, r23
    dfac:	00 0c       	add	r0, r0
    dfae:	88 0b       	sbc	r24, r24
    dfb0:	99 0b       	sbc	r25, r25
    dfb2:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    dfb6:	20 e0       	ldi	r18, 0x00	; 0
    dfb8:	30 e0       	ldi	r19, 0x00	; 0
    dfba:	4a e7       	ldi	r20, 0x7A	; 122
    dfbc:	54 e4       	ldi	r21, 0x44	; 68
    dfbe:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4881
    dtostrf(te, 4, 2, str1);
    dfc2:	85 01       	movw	r16, r10
    dfc4:	22 e0       	ldi	r18, 0x02	; 2
    dfc6:	44 e0       	ldi	r20, 0x04	; 4
    dfc8:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4882
    strcat(str1, "C");
    dfcc:	62 ed       	ldi	r22, 0xD2	; 210
    dfce:	76 e0       	ldi	r23, 0x06	; 6
    dfd0:	c5 01       	movw	r24, r10
    dfd2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4883
    strcpy_P(str2, temp_offset_short);
    dfd6:	6b e1       	ldi	r22, 0x1B	; 27
    dfd8:	7a e5       	ldi	r23, 0x5A	; 90
    dfda:	c6 01       	movw	r24, r12
    dfdc:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4884
    strcat(str2, str1);
    dfe0:	b5 01       	movw	r22, r10
    dfe2:	c6 01       	movw	r24, r12
    dfe4:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4885
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    dfe8:	a3 01       	movw	r20, r6
    dfea:	44 5c       	subi	r20, 0xC4	; 196
    dfec:	5f 4f       	sbci	r21, 0xFF	; 255
    dfee:	10 e0       	ldi	r17, 0x00	; 0
    dff0:	00 e0       	ldi	r16, 0x00	; 0
    dff2:	22 e0       	ldi	r18, 0x02	; 2
    dff4:	b4 01       	movw	r22, r8
    dff6:	c6 01       	movw	r24, r12
    dff8:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4887
    ///
    strcpy_P(str2, nastaveni_tds_period);
    dffc:	6c e0       	ldi	r22, 0x0C	; 12
    dffe:	7a e5       	ldi	r23, 0x5A	; 90
    e000:	c6 01       	movw	r24, r12
    e002:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
    sprintf(str1, "%s: %ds", str2, tds.period);
    e006:	2a 96       	adiw	r28, 0x0a	; 10
    e008:	8f ad       	ldd	r24, Y+63	; 0x3f
    e00a:	2a 97       	sbiw	r28, 0x0a	; 10
    e00c:	1f 92       	push	r1
    e00e:	8f 93       	push	r24
    e010:	df 92       	push	r13
    e012:	cf 92       	push	r12
    e014:	86 ea       	ldi	r24, 0xA6	; 166
    e016:	93 e0       	ldi	r25, 0x03	; 3
    e018:	9f 93       	push	r25
    e01a:	8f 93       	push	r24
    e01c:	bf 92       	push	r11
    e01e:	af 92       	push	r10
    e020:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4889
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    e024:	a3 01       	movw	r20, r6
    e026:	4c 59       	subi	r20, 0x9C	; 156
    e028:	5f 4f       	sbci	r21, 0xFF	; 255
    e02a:	22 e0       	ldi	r18, 0x02	; 2
    e02c:	b4 01       	movw	r22, r8
    e02e:	c5 01       	movw	r24, r10
    e030:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4892

    ///
    strcpy_P(str2, text_online);
    e034:	63 e2       	ldi	r22, 0x23	; 35
    e036:	7a e5       	ldi	r23, 0x5A	; 90
    e038:	c6 01       	movw	r24, r12
    e03a:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4893
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    e03e:	9e e1       	ldi	r25, 0x1E	; 30
    e040:	39 9e       	mul	r3, r25
    e042:	f0 01       	movw	r30, r0
    e044:	11 24       	eor	r1, r1
    e046:	e3 57       	subi	r30, 0x73	; 115
    e048:	f5 4f       	sbci	r31, 0xF5	; 245
    e04a:	83 8d       	ldd	r24, Z+27	; 0x1b
    e04c:	1f 92       	push	r1
    e04e:	8f 93       	push	r24
    e050:	df 92       	push	r13
    e052:	cf 92       	push	r12
    e054:	8e ea       	ldi	r24, 0xAE	; 174
    e056:	93 e0       	ldi	r25, 0x03	; 3
    e058:	9f 93       	push	r25
    e05a:	8f 93       	push	r24
    e05c:	bf 92       	push	r11
    e05e:	af 92       	push	r10
    e060:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    e064:	a3 01       	movw	r20, r6
    e066:	48 58       	subi	r20, 0x88	; 136
    e068:	5f 4f       	sbci	r21, 0xFF	; 255
    e06a:	22 e0       	ldi	r18, 0x02	; 2
    e06c:	b4 01       	movw	r22, r8
    e06e:	c5 01       	movw	r24, r10
    e070:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
    e074:	0f b6       	in	r0, 0x3f	; 63
    e076:	f8 94       	cli
    e078:	de bf       	out	0x3e, r29	; 62
    e07a:	0f be       	out	0x3f, r0	; 63
    e07c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4901
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    e07e:	c6 5b       	subi	r28, 0xB6	; 182
    e080:	df 4f       	sbci	r29, 0xFF	; 255
    e082:	0f b6       	in	r0, 0x3f	; 63
    e084:	f8 94       	cli
    e086:	de bf       	out	0x3e, r29	; 62
    e088:	0f be       	out	0x3f, r0	; 63
    e08a:	cd bf       	out	0x3d, r28	; 61
    e08c:	df 91       	pop	r29
    e08e:	cf 91       	pop	r28
    e090:	1f 91       	pop	r17
    e092:	0f 91       	pop	r16
    e094:	ff 90       	pop	r15
    e096:	ef 90       	pop	r14
    e098:	df 90       	pop	r13
    e09a:	cf 90       	pop	r12
    e09c:	bf 90       	pop	r11
    e09e:	af 90       	pop	r10
    e0a0:	9f 90       	pop	r9
    e0a2:	8f 90       	pop	r8
    e0a4:	7f 90       	pop	r7
    e0a6:	6f 90       	pop	r6
    e0a8:	5f 90       	pop	r5
    e0aa:	4f 90       	pop	r4
    e0ac:	3f 90       	pop	r3
    e0ae:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    e0b0:	66 e0       	ldi	r22, 0x06	; 6
    e0b2:	7a e5       	ldi	r23, 0x5A	; 90
    e0b4:	c9 01       	movw	r24, r18
    e0b6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4899
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    e0ba:	b4 01       	movw	r22, r8
    e0bc:	67 5e       	subi	r22, 0xE7	; 231
    e0be:	7f 4f       	sbci	r23, 0xFF	; 255
    e0c0:	ee 24       	eor	r14, r14
    e0c2:	ea 94       	dec	r14
    e0c4:	fe 2c       	mov	r15, r14
    e0c6:	00 e0       	ldi	r16, 0x00	; 0
    e0c8:	18 ef       	ldi	r17, 0xF8	; 248
    e0ca:	24 e0       	ldi	r18, 0x04	; 4
    e0cc:	a2 01       	movw	r20, r4
    e0ce:	c5 01       	movw	r24, r10
    e0d0:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
    e0d4:	d4 cf       	rjmp	.-88     	; 0xe07e <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1d2>

0000e0d6 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e0d6:	af 92       	push	r10
    e0d8:	bf 92       	push	r11
    e0da:	cf 92       	push	r12
    e0dc:	df 92       	push	r13
    e0de:	ef 92       	push	r14
    e0e0:	ff 92       	push	r15
    e0e2:	0f 93       	push	r16
    e0e4:	1f 93       	push	r17
    e0e6:	cf 93       	push	r28
    e0e8:	df 93       	push	r29
    e0ea:	cd b7       	in	r28, 0x3d	; 61
    e0ec:	de b7       	in	r29, 0x3e	; 62
    e0ee:	ca 54       	subi	r28, 0x4A	; 74
    e0f0:	d1 09       	sbc	r29, r1
    e0f2:	0f b6       	in	r0, 0x3f	; 63
    e0f4:	f8 94       	cli
    e0f6:	de bf       	out	0x3e, r29	; 62
    e0f8:	0f be       	out	0x3f, r0	; 63
    e0fa:	cd bf       	out	0x3d, r28	; 61
    e0fc:	6c 01       	movw	r12, r24
    e0fe:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    e100:	be 01       	movw	r22, r28
    e102:	6b 5c       	subi	r22, 0xCB	; 203
    e104:	7f 4f       	sbci	r23, 0xFF	; 255
    e106:	8e 2d       	mov	r24, r14
    e108:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    e10c:	81 30       	cpi	r24, 0x01	; 1
    e10e:	d9 f5       	brne	.+118    	; 0xe186 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4853
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    e110:	8e e1       	ldi	r24, 0x1E	; 30
    e112:	e8 9e       	mul	r14, r24
    e114:	f0 01       	movw	r30, r0
    e116:	11 24       	eor	r1, r1
    e118:	e3 57       	subi	r30, 0x73	; 115
    e11a:	f5 4f       	sbci	r31, 0xF5	; 245
    e11c:	65 81       	ldd	r22, Z+5	; 0x05
    e11e:	76 81       	ldd	r23, Z+6	; 0x06
    e120:	07 2e       	mov	r0, r23
    e122:	00 0c       	add	r0, r0
    e124:	88 0b       	sbc	r24, r24
    e126:	99 0b       	sbc	r25, r25
    e128:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    e12c:	20 e0       	ldi	r18, 0x00	; 0
    e12e:	30 e0       	ldi	r19, 0x00	; 0
    e130:	4a e7       	ldi	r20, 0x7A	; 122
    e132:	54 e4       	ldi	r21, 0x44	; 68
    e134:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
    dtostrf(te, 4, 2, str1);
    e138:	8e 01       	movw	r16, r28
    e13a:	05 5e       	subi	r16, 0xE5	; 229
    e13c:	1f 4f       	sbci	r17, 0xFF	; 255
    e13e:	22 e0       	ldi	r18, 0x02	; 2
    e140:	44 e0       	ldi	r20, 0x04	; 4
    e142:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4855
    strcat(str1, "C");
    e146:	62 ed       	ldi	r22, 0xD2	; 210
    e148:	76 e0       	ldi	r23, 0x06	; 6
    e14a:	c8 01       	movw	r24, r16
    e14c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4856
    strcpy_P(str2, current_temp_short);
    e150:	60 e4       	ldi	r22, 0x40	; 64
    e152:	7a e5       	ldi	r23, 0x5A	; 90
    e154:	ce 01       	movw	r24, r28
    e156:	01 96       	adiw	r24, 0x01	; 1
    e158:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4857
    strcat(str2, str1);
    e15c:	b8 01       	movw	r22, r16
    e15e:	ce 01       	movw	r24, r28
    e160:	01 96       	adiw	r24, 0x01	; 1
    e162:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4858
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    e166:	a5 01       	movw	r20, r10
    e168:	44 57       	subi	r20, 0x74	; 116
    e16a:	5f 4f       	sbci	r21, 0xFF	; 255
    e16c:	b6 01       	movw	r22, r12
    e16e:	66 5f       	subi	r22, 0xF6	; 246
    e170:	7f 4f       	sbci	r23, 0xFF	; 255
    e172:	ee 24       	eor	r14, r14
    e174:	ea 94       	dec	r14
    e176:	fe 2c       	mov	r15, r14
    e178:	10 e0       	ldi	r17, 0x00	; 0
    e17a:	00 e0       	ldi	r16, 0x00	; 0
    e17c:	22 e0       	ldi	r18, 0x02	; 2
    e17e:	ce 01       	movw	r24, r28
    e180:	01 96       	adiw	r24, 0x01	; 1
    e182:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4860
  }
}
    e186:	c6 5b       	subi	r28, 0xB6	; 182
    e188:	df 4f       	sbci	r29, 0xFF	; 255
    e18a:	0f b6       	in	r0, 0x3f	; 63
    e18c:	f8 94       	cli
    e18e:	de bf       	out	0x3e, r29	; 62
    e190:	0f be       	out	0x3f, r0	; 63
    e192:	cd bf       	out	0x3d, r28	; 61
    e194:	df 91       	pop	r29
    e196:	cf 91       	pop	r28
    e198:	1f 91       	pop	r17
    e19a:	0f 91       	pop	r16
    e19c:	ff 90       	pop	r15
    e19e:	ef 90       	pop	r14
    e1a0:	df 90       	pop	r13
    e1a2:	cf 90       	pop	r12
    e1a4:	bf 90       	pop	r11
    e1a6:	af 90       	pop	r10
    e1a8:	08 95       	ret

0000e1aa <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e1aa:	1f 93       	push	r17
    e1ac:	cf 93       	push	r28
    e1ae:	df 93       	push	r29
    e1b0:	cd b7       	in	r28, 0x3d	; 61
    e1b2:	de b7       	in	r29, 0x3e	; 62
    e1b4:	a0 97       	sbiw	r28, 0x20	; 32
    e1b6:	0f b6       	in	r0, 0x3f	; 63
    e1b8:	f8 94       	cli
    e1ba:	de bf       	out	0x3e, r29	; 62
    e1bc:	0f be       	out	0x3f, r0	; 63
    e1be:	cd bf       	out	0x3d, r28	; 61
    e1c0:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e1c2:	be 01       	movw	r22, r28
    e1c4:	6f 5f       	subi	r22, 0xFF	; 255
    e1c6:	7f 4f       	sbci	r23, 0xFF	; 255
    e1c8:	81 2f       	mov	r24, r17
    e1ca:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    e1ce:	be 01       	movw	r22, r28
    e1d0:	63 5f       	subi	r22, 0xF3	; 243
    e1d2:	7f 4f       	sbci	r23, 0xFF	; 255
    e1d4:	ce 01       	movw	r24, r28
    e1d6:	47 96       	adiw	r24, 0x17	; 23
    e1d8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    e1dc:	70 e0       	ldi	r23, 0x00	; 0
    e1de:	60 e0       	ldi	r22, 0x00	; 0
    e1e0:	87 e6       	ldi	r24, 0x67	; 103
    e1e2:	90 e0       	ldi	r25, 0x00	; 0
    e1e4:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    e1e8:	be 01       	movw	r22, r28
    e1ea:	69 5e       	subi	r22, 0xE9	; 233
    e1ec:	7f 4f       	sbci	r23, 0xFF	; 255
    e1ee:	86 e3       	ldi	r24, 0x36	; 54
    e1f0:	99 e0       	ldi	r25, 0x09	; 9
    e1f2:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  dialog_set_string_max_length = max_length;
    e1f6:	88 e0       	ldi	r24, 0x08	; 8
    e1f8:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  dialog_set_string_args = idx;
    e1fc:	10 93 34 09 	sts	0x0934, r17	; 0x800934 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  dialog_save_string_function = save_function;
    e200:	83 ec       	ldi	r24, 0xC3	; 195
    e202:	91 e7       	ldi	r25, 0x71	; 113
    e204:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <dialog_save_string_function+0x1>
    e208:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <dialog_save_string_function>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
    e20c:	a0 96       	adiw	r28, 0x20	; 32
    e20e:	0f b6       	in	r0, 0x3f	; 63
    e210:	f8 94       	cli
    e212:	de bf       	out	0x3e, r29	; 62
    e214:	0f be       	out	0x3f, r0	; 63
    e216:	cd bf       	out	0x3d, r28	; 61
    e218:	df 91       	pop	r29
    e21a:	cf 91       	pop	r28
    e21c:	1f 91       	pop	r17
    e21e:	08 95       	ret

0000e220 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2367
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e220:	ff 92       	push	r15
    e222:	0f 93       	push	r16
    e224:	1f 93       	push	r17
    e226:	cf 93       	push	r28
    e228:	df 93       	push	r29
    e22a:	cd b7       	in	r28, 0x3d	; 61
    e22c:	de b7       	in	r29, 0x3e	; 62
    e22e:	66 97       	sbiw	r28, 0x16	; 22
    e230:	0f b6       	in	r0, 0x3f	; 63
    e232:	f8 94       	cli
    e234:	de bf       	out	0x3e, r29	; 62
    e236:	0f be       	out	0x3f, r0	; 63
    e238:	cd bf       	out	0x3d, r28	; 61
    e23a:	08 2f       	mov	r16, r24
    e23c:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2368
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
    e23e:	70 e0       	ldi	r23, 0x00	; 0
    e240:	60 e0       	ldi	r22, 0x00	; 0
    e242:	86 e6       	ldi	r24, 0x66	; 102
    e244:	90 e0       	ldi	r25, 0x00	; 0
    e246:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
tds_get_period():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e24a:	be 01       	movw	r22, r28
    e24c:	6f 5f       	subi	r22, 0xFF	; 255
    e24e:	7f 4f       	sbci	r23, 0xFF	; 255
    e250:	8f 2d       	mov	r24, r15
    e252:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:115
  return tds.period;
    e256:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e258:	85 e1       	ldi	r24, 0x15	; 21
    e25a:	08 9f       	mul	r16, r24
    e25c:	80 01       	movw	r16, r0
    e25e:	11 24       	eor	r1, r1
    e260:	0f 54       	subi	r16, 0x4F	; 79
    e262:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    e264:	70 e0       	ldi	r23, 0x00	; 0
    e266:	90 e0       	ldi	r25, 0x00	; 0
    e268:	80 e0       	ldi	r24, 0x00	; 0
    e26a:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    e26e:	f8 01       	movw	r30, r16
    e270:	60 83       	st	Z, r22
    e272:	71 83       	std	Z+1, r23	; 0x01
    e274:	82 83       	std	Z+2, r24	; 0x02
    e276:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    e278:	80 e0       	ldi	r24, 0x00	; 0
    e27a:	90 e0       	ldi	r25, 0x00	; 0
    e27c:	a0 e8       	ldi	r26, 0x80	; 128
    e27e:	bf e3       	ldi	r27, 0x3F	; 63
    e280:	80 87       	std	Z+8, r24	; 0x08
    e282:	91 87       	std	Z+9, r25	; 0x09
    e284:	a2 87       	std	Z+10, r26	; 0x0a
    e286:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    e288:	40 e0       	ldi	r20, 0x00	; 0
    e28a:	50 e0       	ldi	r21, 0x00	; 0
    e28c:	6f e7       	ldi	r22, 0x7F	; 127
    e28e:	73 e4       	ldi	r23, 0x43	; 67
    e290:	44 83       	std	Z+4, r20	; 0x04
    e292:	55 83       	std	Z+5, r21	; 0x05
    e294:	66 83       	std	Z+6, r22	; 0x06
    e296:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    e298:	86 87       	std	Z+14, r24	; 0x0e
    e29a:	97 87       	std	Z+15, r25	; 0x0f
    e29c:	a0 8b       	std	Z+16, r26	; 0x10
    e29e:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    e2a0:	81 e0       	ldi	r24, 0x01	; 1
    e2a2:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    e2a4:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    e2a6:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    e2a8:	86 ef       	ldi	r24, 0xF6	; 246
    e2aa:	91 e7       	ldi	r25, 0x71	; 113
    e2ac:	94 8b       	std	Z+20, r25	; 0x14
    e2ae:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    e2b0:	66 96       	adiw	r28, 0x16	; 22
    e2b2:	0f b6       	in	r0, 0x3f	; 63
    e2b4:	f8 94       	cli
    e2b6:	de bf       	out	0x3e, r29	; 62
    e2b8:	0f be       	out	0x3f, r0	; 63
    e2ba:	cd bf       	out	0x3d, r28	; 61
    e2bc:	df 91       	pop	r29
    e2be:	cf 91       	pop	r28
    e2c0:	1f 91       	pop	r17
    e2c2:	0f 91       	pop	r16
    e2c4:	ff 90       	pop	r15
    e2c6:	08 95       	ret

0000e2c8 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e2c8:	ff 92       	push	r15
    e2ca:	0f 93       	push	r16
    e2cc:	1f 93       	push	r17
    e2ce:	cf 93       	push	r28
    e2d0:	df 93       	push	r29
    e2d2:	cd b7       	in	r28, 0x3d	; 61
    e2d4:	de b7       	in	r29, 0x3e	; 62
    e2d6:	66 97       	sbiw	r28, 0x16	; 22
    e2d8:	0f b6       	in	r0, 0x3f	; 63
    e2da:	f8 94       	cli
    e2dc:	de bf       	out	0x3e, r29	; 62
    e2de:	0f be       	out	0x3f, r0	; 63
    e2e0:	cd bf       	out	0x3d, r28	; 61
    e2e2:	08 2f       	mov	r16, r24
    e2e4:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
    e2e6:	70 e0       	ldi	r23, 0x00	; 0
    e2e8:	60 e0       	ldi	r22, 0x00	; 0
    e2ea:	86 e6       	ldi	r24, 0x66	; 102
    e2ec:	90 e0       	ldi	r25, 0x00	; 0
    e2ee:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
tds_get_offset():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e2f2:	be 01       	movw	r22, r28
    e2f4:	6f 5f       	subi	r22, 0xFF	; 255
    e2f6:	7f 4f       	sbci	r23, 0xFF	; 255
    e2f8:	8f 2d       	mov	r24, r15
    e2fa:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:99
  return tds.offset;
    e2fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    e300:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e302:	85 e1       	ldi	r24, 0x15	; 21
    e304:	08 9f       	mul	r16, r24
    e306:	80 01       	movw	r16, r0
    e308:	11 24       	eor	r1, r1
    e30a:	0f 54       	subi	r16, 0x4F	; 79
    e30c:	17 4f       	sbci	r17, 0xF7	; 247
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    e30e:	07 2e       	mov	r0, r23
    e310:	00 0c       	add	r0, r0
    e312:	88 0b       	sbc	r24, r24
    e314:	99 0b       	sbc	r25, r25
    e316:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    e31a:	20 e0       	ldi	r18, 0x00	; 0
    e31c:	30 e0       	ldi	r19, 0x00	; 0
    e31e:	4a e7       	ldi	r20, 0x7A	; 122
    e320:	54 e4       	ldi	r21, 0x44	; 68
    e322:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e326:	f8 01       	movw	r30, r16
    e328:	60 83       	st	Z, r22
    e32a:	71 83       	std	Z+1, r23	; 0x01
    e32c:	82 83       	std	Z+2, r24	; 0x02
    e32e:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
  menu_dialog_variable[idx].variable_min = min;
    e330:	80 e0       	ldi	r24, 0x00	; 0
    e332:	90 e0       	ldi	r25, 0x00	; 0
    e334:	a0 e2       	ldi	r26, 0x20	; 32
    e336:	b1 ec       	ldi	r27, 0xC1	; 193
    e338:	80 87       	std	Z+8, r24	; 0x08
    e33a:	91 87       	std	Z+9, r25	; 0x09
    e33c:	a2 87       	std	Z+10, r26	; 0x0a
    e33e:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
  menu_dialog_variable[idx].variable_max = max;
    e340:	80 e0       	ldi	r24, 0x00	; 0
    e342:	90 e0       	ldi	r25, 0x00	; 0
    e344:	a0 e2       	ldi	r26, 0x20	; 32
    e346:	b1 e4       	ldi	r27, 0x41	; 65
    e348:	84 83       	std	Z+4, r24	; 0x04
    e34a:	95 83       	std	Z+5, r25	; 0x05
    e34c:	a6 83       	std	Z+6, r26	; 0x06
    e34e:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
  menu_dialog_variable[idx].variable_step = step;
    e350:	8d ec       	ldi	r24, 0xCD	; 205
    e352:	9c ec       	ldi	r25, 0xCC	; 204
    e354:	ac ec       	ldi	r26, 0xCC	; 204
    e356:	bd e3       	ldi	r27, 0x3D	; 61
    e358:	86 87       	std	Z+14, r24	; 0x0e
    e35a:	97 87       	std	Z+15, r25	; 0x0f
    e35c:	a0 8b       	std	Z+16, r26	; 0x10
    e35e:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
  menu_dialog_variable[idx].number_type = number_type;
    e360:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  menu_dialog_variable[idx].args = args;
    e362:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
  menu_dialog_variable[idx].update_now = update_now;
    e364:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
  menu_dialog_variable[idx].save_function = save_function;
    e366:	8c e2       	ldi	r24, 0x2C	; 44
    e368:	92 e7       	ldi	r25, 0x72	; 114
    e36a:	94 8b       	std	Z+20, r25	; 0x14
    e36c:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, args3);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    e36e:	66 96       	adiw	r28, 0x16	; 22
    e370:	0f b6       	in	r0, 0x3f	; 63
    e372:	f8 94       	cli
    e374:	de bf       	out	0x3e, r29	; 62
    e376:	0f be       	out	0x3f, r0	; 63
    e378:	cd bf       	out	0x3d, r28	; 61
    e37a:	df 91       	pop	r29
    e37c:	cf 91       	pop	r28
    e37e:	1f 91       	pop	r17
    e380:	0f 91       	pop	r16
    e382:	ff 90       	pop	r15
    e384:	08 95       	ret

0000e386 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e386:	1f 93       	push	r17
    e388:	cf 93       	push	r28
    e38a:	df 93       	push	r29
    e38c:	cd b7       	in	r28, 0x3d	; 61
    e38e:	de b7       	in	r29, 0x3e	; 62
    e390:	a0 97       	sbiw	r28, 0x20	; 32
    e392:	0f b6       	in	r0, 0x3f	; 63
    e394:	f8 94       	cli
    e396:	de bf       	out	0x3e, r29	; 62
    e398:	0f be       	out	0x3f, r0	; 63
    e39a:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    e39c:	66 e3       	ldi	r22, 0x36	; 54
    e39e:	79 e0       	ldi	r23, 0x09	; 9
    e3a0:	ce 01       	movw	r24, r28
    e3a2:	47 96       	adiw	r24, 0x17	; 23
    e3a4:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    e3a8:	8f 89       	ldd	r24, Y+23	; 0x17
    e3aa:	88 23       	and	r24, r24
    e3ac:	a9 f0       	breq	.+42     	; 0xe3d8 <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    e3ae:	10 91 34 09 	lds	r17, 0x0934	; 0x800934 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e3b2:	be 01       	movw	r22, r28
    e3b4:	6f 5f       	subi	r22, 0xFF	; 255
    e3b6:	7f 4f       	sbci	r23, 0xFF	; 255
    e3b8:	81 2f       	mov	r24, r17
    e3ba:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    e3be:	be 01       	movw	r22, r28
    e3c0:	69 5e       	subi	r22, 0xE9	; 233
    e3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    e3c4:	ce 01       	movw	r24, r28
    e3c6:	0d 96       	adiw	r24, 0x0d	; 13
    e3c8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    e3cc:	be 01       	movw	r22, r28
    e3ce:	6f 5f       	subi	r22, 0xFF	; 255
    e3d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e3d2:	81 2f       	mov	r24, r17
    e3d4:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    e3d8:	a0 96       	adiw	r28, 0x20	; 32
    e3da:	0f b6       	in	r0, 0x3f	; 63
    e3dc:	f8 94       	cli
    e3de:	de bf       	out	0x3e, r29	; 62
    e3e0:	0f be       	out	0x3f, r0	; 63
    e3e2:	cd bf       	out	0x3d, r28	; 61
    e3e4:	df 91       	pop	r29
    e3e6:	cf 91       	pop	r28
    e3e8:	1f 91       	pop	r17
    e3ea:	08 95       	ret

0000e3ec <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
    e3ec:	ff 92       	push	r15
    e3ee:	0f 93       	push	r16
    e3f0:	1f 93       	push	r17
    e3f2:	cf 93       	push	r28
    e3f4:	df 93       	push	r29
    e3f6:	cd b7       	in	r28, 0x3d	; 61
    e3f8:	de b7       	in	r29, 0x3e	; 62
    e3fa:	66 97       	sbiw	r28, 0x16	; 22
    e3fc:	0f b6       	in	r0, 0x3f	; 63
    e3fe:	f8 94       	cli
    e400:	de bf       	out	0x3e, r29	; 62
    e402:	0f be       	out	0x3f, r0	; 63
    e404:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    e406:	95 e1       	ldi	r25, 0x15	; 21
    e408:	89 9f       	mul	r24, r25
    e40a:	80 01       	movw	r16, r0
    e40c:	11 24       	eor	r1, r1
    e40e:	0f 54       	subi	r16, 0x4F	; 79
    e410:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2338
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
    e412:	f8 01       	movw	r30, r16
    e414:	60 81       	ld	r22, Z
    e416:	71 81       	ldd	r23, Z+1	; 0x01
    e418:	82 81       	ldd	r24, Z+2	; 0x02
    e41a:	93 81       	ldd	r25, Z+3	; 0x03
    e41c:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <__fixunssfsi>
    e420:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    e422:	f8 01       	movw	r30, r16
    e424:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e426:	be 01       	movw	r22, r28
    e428:	6f 5f       	subi	r22, 0xFF	; 255
    e42a:	7f 4f       	sbci	r23, 0xFF	; 255
    e42c:	81 2f       	mov	r24, r17
    e42e:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:107
  tds.period = period;
    e432:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    e434:	be 01       	movw	r22, r28
    e436:	6f 5f       	subi	r22, 0xFF	; 255
    e438:	7f 4f       	sbci	r23, 0xFF	; 255
    e43a:	81 2f       	mov	r24, r17
    e43c:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable(args1));
}
    e440:	66 96       	adiw	r28, 0x16	; 22
    e442:	0f b6       	in	r0, 0x3f	; 63
    e444:	f8 94       	cli
    e446:	de bf       	out	0x3e, r29	; 62
    e448:	0f be       	out	0x3f, r0	; 63
    e44a:	cd bf       	out	0x3d, r28	; 61
    e44c:	df 91       	pop	r29
    e44e:	cf 91       	pop	r28
    e450:	1f 91       	pop	r17
    e452:	0f 91       	pop	r16
    e454:	ff 90       	pop	r15
    e456:	08 95       	ret

0000e458 <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
    e458:	cf 92       	push	r12
    e45a:	df 92       	push	r13
    e45c:	ef 92       	push	r14
    e45e:	ff 92       	push	r15
    e460:	0f 93       	push	r16
    e462:	1f 93       	push	r17
    e464:	cf 93       	push	r28
    e466:	df 93       	push	r29
    e468:	cd b7       	in	r28, 0x3d	; 61
    e46a:	de b7       	in	r29, 0x3e	; 62
    e46c:	66 97       	sbiw	r28, 0x16	; 22
    e46e:	0f b6       	in	r0, 0x3f	; 63
    e470:	f8 94       	cli
    e472:	de bf       	out	0x3e, r29	; 62
    e474:	0f be       	out	0x3f, r0	; 63
    e476:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    e478:	95 e1       	ldi	r25, 0x15	; 21
    e47a:	89 9f       	mul	r24, r25
    e47c:	80 01       	movw	r16, r0
    e47e:	11 24       	eor	r1, r1
    e480:	0f 54       	subi	r16, 0x4F	; 79
    e482:	17 4f       	sbci	r17, 0xF7	; 247
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
    e484:	20 e0       	ldi	r18, 0x00	; 0
    e486:	30 e0       	ldi	r19, 0x00	; 0
    e488:	4a e7       	ldi	r20, 0x7A	; 122
    e48a:	54 e4       	ldi	r21, 0x44	; 68
    e48c:	f8 01       	movw	r30, r16
    e48e:	60 81       	ld	r22, Z
    e490:	71 81       	ldd	r23, Z+1	; 0x01
    e492:	82 81       	ldd	r24, Z+2	; 0x02
    e494:	93 81       	ldd	r25, Z+3	; 0x03
    e496:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
    e49a:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
    e49e:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    e4a0:	f8 01       	movw	r30, r16
    e4a2:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e4a4:	be 01       	movw	r22, r28
    e4a6:	6f 5f       	subi	r22, 0xFF	; 255
    e4a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e4aa:	81 2f       	mov	r24, r17
    e4ac:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    e4b0:	dc 86       	std	Y+12, r13	; 0x0c
    e4b2:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    e4b4:	be 01       	movw	r22, r28
    e4b6:	6f 5f       	subi	r22, 0xFF	; 255
    e4b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e4ba:	81 2f       	mov	r24, r17
    e4bc:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2334
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable(args1) * 1000);
}
    e4c0:	66 96       	adiw	r28, 0x16	; 22
    e4c2:	0f b6       	in	r0, 0x3f	; 63
    e4c4:	f8 94       	cli
    e4c6:	de bf       	out	0x3e, r29	; 62
    e4c8:	0f be       	out	0x3f, r0	; 63
    e4ca:	cd bf       	out	0x3d, r28	; 61
    e4cc:	df 91       	pop	r29
    e4ce:	cf 91       	pop	r28
    e4d0:	1f 91       	pop	r17
    e4d2:	0f 91       	pop	r16
    e4d4:	ff 90       	pop	r15
    e4d6:	ef 90       	pop	r14
    e4d8:	df 90       	pop	r13
    e4da:	cf 90       	pop	r12
    e4dc:	08 95       	ret

0000e4de <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    e4de:	0f 93       	push	r16
    e4e0:	1f 93       	push	r17
    e4e2:	cf 93       	push	r28
    e4e4:	df 93       	push	r29
    e4e6:	8c 01       	movw	r16, r24
    e4e8:	c4 e6       	ldi	r28, 0x64	; 100
    e4ea:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    e4ec:	ce 01       	movw	r24, r28
    e4ee:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    e4f2:	f8 01       	movw	r30, r16
    e4f4:	81 93       	st	Z+, r24
    e4f6:	8f 01       	movw	r16, r30
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    e4f8:	10 82       	st	Z, r1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    e4fa:	88 23       	and	r24, r24
    e4fc:	21 f0       	breq	.+8      	; 0xe506 <device_get_name(char*)+0x28>
    e4fe:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    e500:	cd 36       	cpi	r28, 0x6D	; 109
    e502:	d1 05       	cpc	r29, r1
    e504:	99 f7       	brne	.-26     	; 0xe4ec <device_get_name(char*)+0xe>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    e506:	df 91       	pop	r29
    e508:	cf 91       	pop	r28
    e50a:	1f 91       	pop	r17
    e50c:	0f 91       	pop	r16
    e50e:	08 95       	ret

0000e510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    e510:	cf 92       	push	r12
    e512:	df 92       	push	r13
    e514:	ef 92       	push	r14
    e516:	ff 92       	push	r15
    e518:	0f 93       	push	r16
    e51a:	1f 93       	push	r17
    e51c:	cf 93       	push	r28
    e51e:	df 93       	push	r29
    e520:	cd b7       	in	r28, 0x3d	; 61
    e522:	de b7       	in	r29, 0x3e	; 62
    e524:	ca 54       	subi	r28, 0x4A	; 74
    e526:	d1 09       	sbc	r29, r1
    e528:	0f b6       	in	r0, 0x3f	; 63
    e52a:	f8 94       	cli
    e52c:	de bf       	out	0x3e, r29	; 62
    e52e:	0f be       	out	0x3f, r0	; 63
    e530:	cd bf       	out	0x3d, r28	; 61
    e532:	8c 01       	movw	r16, r24
    e534:	6b 01       	movw	r12, r22
    e536:	7a 01       	movw	r14, r20
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:220
  char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    e538:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
    e53c:	88 23       	and	r24, r24
    e53e:	89 f1       	breq	.+98     	; 0xe5a2 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    e540:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mqtt_send_message>
    e544:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mqtt_send_message+0x1>
    e548:	01 96       	adiw	r24, 0x01	; 1
    e54a:	90 93 de 0b 	sts	0x0BDE, r25	; 0x800bde <mqtt_send_message+0x1>
    e54e:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <mqtt_send_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    e552:	ce 01       	movw	r24, r28
    e554:	8f 5b       	subi	r24, 0xBF	; 191
    e556:	9f 4f       	sbci	r25, 0xFF	; 255
    e558:	0e 94 6f 72 	call	0xe4de	; 0xe4de <device_get_name(char*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    e55c:	60 91 db 0b 	lds	r22, 0x0BDB	; 0x800bdb <header_out>
    e560:	70 91 dc 0b 	lds	r23, 0x0BDC	; 0x800bdc <header_out+0x1>
    e564:	ce 01       	movw	r24, r28
    e566:	01 96       	adiw	r24, 0x01	; 1
    e568:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    e56c:	be 01       	movw	r22, r28
    e56e:	6f 5b       	subi	r22, 0xBF	; 191
    e570:	7f 4f       	sbci	r23, 0xFF	; 255
    e572:	ce 01       	movw	r24, r28
    e574:	01 96       	adiw	r24, 0x01	; 1
    e576:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    e57a:	64 ef       	ldi	r22, 0xF4	; 244
    e57c:	73 e0       	ldi	r23, 0x03	; 3
    e57e:	ce 01       	movw	r24, r28
    e580:	01 96       	adiw	r24, 0x01	; 1
    e582:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    e586:	b6 01       	movw	r22, r12
    e588:	ce 01       	movw	r24, r28
    e58a:	01 96       	adiw	r24, 0x01	; 1
    e58c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    e590:	a7 01       	movw	r20, r14
    e592:	be 01       	movw	r22, r28
    e594:	6f 5f       	subi	r22, 0xFF	; 255
    e596:	7f 4f       	sbci	r23, 0xFF	; 255
    e598:	c8 01       	movw	r24, r16
    e59a:	0e 94 12 ad 	call	0x15a24	; 0x15a24 <PubSubClient::publish(char const*, char const*)>
    e59e:	81 11       	cpse	r24, r1
    e5a0:	09 c0       	rjmp	.+18     	; 0xe5b4 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    e5a2:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <mqtt_error>
    e5a6:	90 91 e0 0b 	lds	r25, 0x0BE0	; 0x800be0 <mqtt_error+0x1>
    e5aa:	01 96       	adiw	r24, 0x01	; 1
    e5ac:	90 93 e0 0b 	sts	0x0BE0, r25	; 0x800be0 <mqtt_error+0x1>
    e5b0:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <mqtt_error>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:232
}
    e5b4:	c6 5b       	subi	r28, 0xB6	; 182
    e5b6:	df 4f       	sbci	r29, 0xFF	; 255
    e5b8:	0f b6       	in	r0, 0x3f	; 63
    e5ba:	f8 94       	cli
    e5bc:	de bf       	out	0x3e, r29	; 62
    e5be:	0f be       	out	0x3f, r0	; 63
    e5c0:	cd bf       	out	0x3d, r28	; 61
    e5c2:	df 91       	pop	r29
    e5c4:	cf 91       	pop	r28
    e5c6:	1f 91       	pop	r17
    e5c8:	0f 91       	pop	r16
    e5ca:	ff 90       	pop	r15
    e5cc:	ef 90       	pop	r14
    e5ce:	df 90       	pop	r13
    e5d0:	cf 90       	pop	r12
    e5d2:	08 95       	ret

0000e5d4 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:438
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    e5d4:	cf 93       	push	r28
    e5d6:	df 93       	push	r29
    e5d8:	cd b7       	in	r28, 0x3d	; 61
    e5da:	de b7       	in	r29, 0x3e	; 62
    e5dc:	60 97       	sbiw	r28, 0x10	; 16
    e5de:	0f b6       	in	r0, 0x3f	; 63
    e5e0:	f8 94       	cli
    e5e2:	de bf       	out	0x3e, r29	; 62
    e5e4:	0f be       	out	0x3f, r0	; 63
    e5e6:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:440
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    e5e8:	90 91 d8 09 	lds	r25, 0x09D8	; 0x8009d8 <mqtt_log_cnt>
    e5ec:	e9 2f       	mov	r30, r25
    e5ee:	f0 e0       	ldi	r31, 0x00	; 0
    e5f0:	e8 5a       	subi	r30, 0xA8	; 168
    e5f2:	f6 4f       	sbci	r31, 0xF6	; 246
    e5f4:	80 83       	st	Z, r24
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:441
  mqtt_log[mqtt_log_cnt + 1] = 0;
    e5f6:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:442
  mqtt_log_cnt++;
    e5f8:	9f 5f       	subi	r25, 0xFF	; 255
    e5fa:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <mqtt_log_cnt>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:443
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    e5fe:	97 fd       	sbrc	r25, 7
    e600:	04 c0       	rjmp	.+8      	; 0xe60a <printf_via_mqtt(char, __file*)+0x36>
    e602:	8a 30       	cpi	r24, 0x0A	; 10
    e604:	11 f0       	breq	.+4      	; 0xe60a <printf_via_mqtt(char, __file*)+0x36>
    e606:	81 11       	cpse	r24, r1
    e608:	13 c0       	rjmp	.+38     	; 0xe630 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:445
  {
    strcpy(topic, "log-printf");
    e60a:	65 eb       	ldi	r22, 0xB5	; 181
    e60c:	73 e0       	ldi	r23, 0x03	; 3
    e60e:	ce 01       	movw	r24, r28
    e610:	01 96       	adiw	r24, 0x01	; 1
    e612:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:446
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    e616:	48 e5       	ldi	r20, 0x58	; 88
    e618:	59 e0       	ldi	r21, 0x09	; 9
    e61a:	be 01       	movw	r22, r28
    e61c:	6f 5f       	subi	r22, 0xFF	; 255
    e61e:	7f 4f       	sbci	r23, 0xFF	; 255
    e620:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <pub_mqtt_client>
    e624:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <pub_mqtt_client+0x1>
    e628:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:447
    mqtt_log_cnt = 0;
    e62c:	10 92 d8 09 	sts	0x09D8, r1	; 0x8009d8 <mqtt_log_cnt>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:449
  }
}
    e630:	60 96       	adiw	r28, 0x10	; 16
    e632:	0f b6       	in	r0, 0x3f	; 63
    e634:	f8 94       	cli
    e636:	de bf       	out	0x3e, r29	; 62
    e638:	0f be       	out	0x3f, r0	; 63
    e63a:	cd bf       	out	0x3d, r28	; 61
    e63c:	df 91       	pop	r29
    e63e:	cf 91       	pop	r28
    e640:	08 95       	ret

0000e642 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6000
}


////////////////////////////////////////////////////////////////////////////////////////////
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e642:	cf 93       	push	r28
    e644:	df 93       	push	r29
    e646:	cd b7       	in	r28, 0x3d	; 61
    e648:	de b7       	in	r29, 0x3e	; 62
    e64a:	c7 54       	subi	r28, 0x47	; 71
    e64c:	d1 09       	sbc	r29, r1
    e64e:	0f b6       	in	r0, 0x3f	; 63
    e650:	f8 94       	cli
    e652:	de bf       	out	0x3e, r29	; 62
    e654:	0f be       	out	0x3f, r0	; 63
    e656:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    e658:	1b 82       	std	Y+3, r1	; 0x03
    e65a:	80 ec       	ldi	r24, 0xC0	; 192
    e65c:	93 e0       	ldi	r25, 0x03	; 3
    e65e:	9d 83       	std	Y+5, r25	; 0x05
    e660:	8c 83       	std	Y+4, r24	; 0x04
    e662:	89 e3       	ldi	r24, 0x39	; 57
    e664:	95 e0       	ldi	r25, 0x05	; 5
    e666:	9f 83       	std	Y+7, r25	; 0x07
    e668:	8e 83       	std	Y+6, r24	; 0x06
    e66a:	18 86       	std	Y+8, r1	; 0x08
    e66c:	19 86       	std	Y+9, r1	; 0x09
    e66e:	1a 86       	std	Y+10, r1	; 0x0a
    e670:	1b 86       	std	Y+11, r1	; 0x0b
    e672:	80 e6       	ldi	r24, 0x60	; 96
    e674:	9a ee       	ldi	r25, 0xEA	; 234
    e676:	a0 e0       	ldi	r26, 0x00	; 0
    e678:	b0 e0       	ldi	r27, 0x00	; 0
    e67a:	8c 87       	std	Y+12, r24	; 0x0c
    e67c:	9d 87       	std	Y+13, r25	; 0x0d
    e67e:	ae 87       	std	Y+14, r26	; 0x0e
    e680:	bf 87       	std	Y+15, r27	; 0x0f
    e682:	18 8a       	std	Y+16, r1	; 0x10
    e684:	19 8a       	std	Y+17, r1	; 0x11
    e686:	1a 8a       	std	Y+18, r1	; 0x12
    e688:	1b 8a       	std	Y+19, r1	; 0x13
    e68a:	1c 8a       	std	Y+20, r1	; 0x14
    e68c:	1d 8a       	std	Y+21, r1	; 0x15
    e68e:	1e 8a       	std	Y+22, r1	; 0x16
    e690:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    e692:	88 eb       	ldi	r24, 0xB8	; 184
    e694:	90 e1       	ldi	r25, 0x10	; 16
    e696:	9a 83       	std	Y+2, r25	; 0x02
    e698:	89 83       	std	Y+1, r24	; 0x01
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    e69a:	81 e0       	ldi	r24, 0x01	; 1
    e69c:	90 e0       	ldi	r25, 0x00	; 0
    e69e:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6003
////////////////////////////////////////////////////////////////////////////////////////////
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
  NTPClient timeClient(udpClient);

  if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    e6a2:	68 2f       	mov	r22, r24
    e6a4:	ce 01       	movw	r24, r28
    e6a6:	01 96       	adiw	r24, 0x01	; 1
    e6a8:	0e 94 18 af 	call	0x15e30	; 0x15e30 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]>
    e6ac:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <selftest_data>
    e6b0:	81 30       	cpi	r24, 0x01	; 1
    e6b2:	69 f4       	brne	.+26     	; 0xe6ce <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x8c>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    e6b4:	9d 7f       	andi	r25, 0xFD	; 253
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e6b6:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011
  }
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);
  }
}
    e6ba:	c9 5b       	subi	r28, 0xB9	; 185
    e6bc:	df 4f       	sbci	r29, 0xFF	; 255
    e6be:	0f b6       	in	r0, 0x3f	; 63
    e6c0:	f8 94       	cli
    e6c2:	de bf       	out	0x3e, r29	; 62
    e6c4:	0f be       	out	0x3f, r0	; 63
    e6c6:	cd bf       	out	0x3d, r28	; 61
    e6c8:	df 91       	pop	r29
    e6ca:	cf 91       	pop	r28
    e6cc:	08 95       	ret
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e6ce:	92 60       	ori	r25, 0x02	; 2
    e6d0:	f2 cf       	rjmp	.-28     	; 0xe6b6 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x74>

0000e6d2 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    e6d2:	cf 93       	push	r28
    e6d4:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
  if (idx < MAX_RTDS)
    e6d6:	8a 30       	cpi	r24, 0x0A	; 10
    e6d8:	68 f4       	brcc	.+26     	; 0xe6f4 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    e6da:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    e6dc:	24 e1       	ldi	r18, 0x14	; 20
    e6de:	82 9f       	mul	r24, r18
    e6e0:	c0 01       	movw	r24, r0
    e6e2:	11 24       	eor	r1, r1
    e6e4:	83 54       	subi	r24, 0x43	; 67
    e6e6:	9a 4f       	sbci	r25, 0xFA	; 250
    e6e8:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    e6ec:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  }
  else
    *active = 255;
}
    e6ee:	df 91       	pop	r29
    e6f0:	cf 91       	pop	r28
    e6f2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    e6f4:	8f ef       	ldi	r24, 0xFF	; 255
    e6f6:	fb 01       	movw	r30, r22
    e6f8:	80 83       	st	Z, r24
    e6fa:	f9 cf       	rjmp	.-14     	; 0xe6ee <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000e6fc <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5367
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint16_t args1, uint16_t args2, uint8_t loop_idx)
{
    e6fc:	1f 93       	push	r17
    e6fe:	cf 93       	push	r28
    e700:	df 93       	push	r29
    e702:	1f 92       	push	r1
    e704:	cd b7       	in	r28, 0x3d	; 61
    e706:	de b7       	in	r29, 0x3e	; 62
    e708:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5372
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    e70a:	be 01       	movw	r22, r28
    e70c:	6f 5f       	subi	r22, 0xFF	; 255
    e70e:	7f 4f       	sbci	r23, 0xFF	; 255
    e710:	84 2f       	mov	r24, r20
    e712:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5373
  if (active == 1)
    e716:	89 81       	ldd	r24, Y+1	; 0x01
    e718:	81 30       	cpi	r24, 0x01	; 1
    e71a:	31 f4       	brne	.+12     	; 0xe728 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5375
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx, 0);
    e71c:	61 2f       	mov	r22, r17
    e71e:	70 e0       	ldi	r23, 0x00	; 0
    e720:	87 e0       	ldi	r24, 0x07	; 7
    e722:	90 e0       	ldi	r25, 0x00	; 0
    e724:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5377
  }
}
    e728:	0f 90       	pop	r0
    e72a:	df 91       	pop	r29
    e72c:	cf 91       	pop	r28
    e72e:	1f 91       	pop	r17
    e730:	08 95       	ret

0000e732 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2718
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    e732:	1f 93       	push	r17
    e734:	cf 93       	push	r28
    e736:	df 93       	push	r29
    e738:	1f 92       	push	r1
    e73a:	cd b7       	in	r28, 0x3d	; 61
    e73c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e73e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
  {
    remote_tds_get_active(idx, &active);
    e740:	be 01       	movw	r22, r28
    e742:	6f 5f       	subi	r22, 0xFF	; 255
    e744:	7f 4f       	sbci	r23, 0xFF	; 255
    e746:	81 2f       	mov	r24, r17
    e748:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
    if (active == 0)
    e74c:	89 81       	ldd	r24, Y+1	; 0x01
    e74e:	88 23       	and	r24, r24
    e750:	21 f0       	breq	.+8      	; 0xe75a <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e752:	1f 5f       	subi	r17, 0xFF	; 255
    e754:	1a 30       	cpi	r17, 0x0A	; 10
    e756:	a1 f7       	brne	.-24     	; 0xe740 <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2719
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    e758:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
      ret = idx;
      break;
    }
  }
  return ret;
}
    e75a:	81 2f       	mov	r24, r17
    e75c:	0f 90       	pop	r0
    e75e:	df 91       	pop	r29
    e760:	cf 91       	pop	r28
    e762:	1f 91       	pop	r17
    e764:	08 95       	ret

0000e766 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5320
  }
  return cnt;
}

void click_rtds_add_sensor(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e766:	1f 93       	push	r17
    e768:	cf 93       	push	r28
    e76a:	df 93       	push	r29
    e76c:	00 d0       	rcall	.+0      	; 0xe76e <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    e76e:	1f 92       	push	r1
    e770:	1f 92       	push	r1
    e772:	cd b7       	in	r28, 0x3d	; 61
    e774:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5323
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    e776:	0e 94 99 73 	call	0xe732	; 0xe732 <remote_tds_find_free()>
    e77a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5324
  if (idx != 255)
    e77c:	8f 3f       	cpi	r24, 0xFF	; 255
    e77e:	f1 f0       	breq	.+60     	; 0xe7bc <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5326
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    e780:	64 e8       	ldi	r22, 0x84	; 132
    e782:	7a e5       	ldi	r23, 0x5A	; 90
    e784:	ce 01       	movw	r24, r28
    e786:	01 96       	adiw	r24, 0x01	; 1
    e788:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5327
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    e78c:	70 e0       	ldi	r23, 0x00	; 0
    e78e:	60 e0       	ldi	r22, 0x00	; 0
    e790:	87 e6       	ldi	r24, 0x67	; 103
    e792:	90 e0       	ldi	r25, 0x00	; 0
    e794:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
    e798:	be 01       	movw	r22, r28
    e79a:	6f 5f       	subi	r22, 0xFF	; 255
    e79c:	7f 4f       	sbci	r23, 0xFF	; 255
    e79e:	86 e3       	ldi	r24, 0x36	; 54
    e7a0:	99 e0       	ldi	r25, 0x09	; 9
    e7a2:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  dialog_set_string_max_length = max_length;
    e7a6:	82 e1       	ldi	r24, 0x12	; 18
    e7a8:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  dialog_set_string_args = idx;
    e7ac:	10 93 34 09 	sts	0x0934, r17	; 0x800934 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  dialog_save_string_function = save_function;
    e7b0:	80 e4       	ldi	r24, 0x40	; 64
    e7b2:	98 e7       	ldi	r25, 0x78	; 120
    e7b4:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <dialog_save_string_function+0x1>
    e7b8:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <dialog_save_string_function>
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5330
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name);
  }
}
    e7bc:	0f 90       	pop	r0
    e7be:	0f 90       	pop	r0
    e7c0:	0f 90       	pop	r0
    e7c2:	0f 90       	pop	r0
    e7c4:	0f 90       	pop	r0
    e7c6:	df 91       	pop	r29
    e7c8:	cf 91       	pop	r28
    e7ca:	1f 91       	pop	r17
    e7cc:	08 95       	ret

0000e7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    e7ce:	af 92       	push	r10
    e7d0:	bf 92       	push	r11
    e7d2:	cf 92       	push	r12
    e7d4:	df 92       	push	r13
    e7d6:	ef 92       	push	r14
    e7d8:	ff 92       	push	r15
    e7da:	0f 93       	push	r16
    e7dc:	1f 93       	push	r17
    e7de:	cf 93       	push	r28
    e7e0:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624
  char t;
  if (idx < MAX_RTDS)
    e7e2:	8a 30       	cpi	r24, 0x0A	; 10
    e7e4:	88 f5       	brcc	.+98     	; 0xe848 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    e7e6:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    e7e8:	94 e1       	ldi	r25, 0x14	; 20
    e7ea:	89 9f       	mul	r24, r25
    e7ec:	e0 01       	movw	r28, r0
    e7ee:	11 24       	eor	r1, r1
    e7f0:	6e 01       	movw	r12, r28
    e7f2:	e6 e5       	ldi	r30, 0x56	; 86
    e7f4:	ce 1a       	sub	r12, r30
    e7f6:	ea ef       	ldi	r30, 0xFA	; 250
    e7f8:	de 0a       	sbc	r13, r30
    e7fa:	8a 01       	movw	r16, r20
    e7fc:	5e 01       	movw	r10, r28
    e7fe:	f4 e4       	ldi	r31, 0x44	; 68
    e800:	af 1a       	sub	r10, r31
    e802:	fa ef       	ldi	r31, 0xFA	; 250
    e804:	bf 0a       	sbc	r11, r31
    e806:	c6 01       	movw	r24, r12
    e808:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2629
      name[i] = t;
    e80c:	f8 01       	movw	r30, r16
    e80e:	81 93       	st	Z+, r24
    e810:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2630
      name[i + 1] = 0;
    e812:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
      if (t == 0) break;
    e814:	88 23       	and	r24, r24
    e816:	31 f0       	breq	.+12     	; 0xe824 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    e818:	ff ef       	ldi	r31, 0xFF	; 255
    e81a:	cf 1a       	sub	r12, r31
    e81c:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    e81e:	ca 14       	cp	r12, r10
    e820:	db 04       	cpc	r13, r11
    e822:	89 f7       	brne	.-30     	; 0xe806 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    e824:	ce 01       	movw	r24, r28
    e826:	83 54       	subi	r24, 0x43	; 67
    e828:	9a 4f       	sbci	r25, 0xFA	; 250
    e82a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
    e82e:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  }
  else
  {
    *active = 255;
    e830:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2639
  }
}
    e832:	df 91       	pop	r29
    e834:	cf 91       	pop	r28
    e836:	1f 91       	pop	r17
    e838:	0f 91       	pop	r16
    e83a:	ff 90       	pop	r15
    e83c:	ef 90       	pop	r14
    e83e:	df 90       	pop	r13
    e840:	cf 90       	pop	r12
    e842:	bf 90       	pop	r11
    e844:	af 90       	pop	r10
    e846:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    e848:	8f ef       	ldi	r24, 0xFF	; 255
    e84a:	fb 01       	movw	r30, r22
    e84c:	f1 cf       	rjmp	.-30     	; 0xe830 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000e84e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5441
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e84e:	7f 92       	push	r7
    e850:	8f 92       	push	r8
    e852:	9f 92       	push	r9
    e854:	af 92       	push	r10
    e856:	bf 92       	push	r11
    e858:	cf 92       	push	r12
    e85a:	df 92       	push	r13
    e85c:	ef 92       	push	r14
    e85e:	0f 93       	push	r16
    e860:	1f 93       	push	r17
    e862:	cf 93       	push	r28
    e864:	df 93       	push	r29
    e866:	cd b7       	in	r28, 0x3d	; 61
    e868:	de b7       	in	r29, 0x3e	; 62
    e86a:	aa 97       	sbiw	r28, 0x2a	; 42
    e86c:	0f b6       	in	r0, 0x3f	; 63
    e86e:	f8 94       	cli
    e870:	de bf       	out	0x3e, r29	; 62
    e872:	0f be       	out	0x3f, r0	; 63
    e874:	cd bf       	out	0x3d, r28	; 61
    e876:	78 2e       	mov	r7, r24
    e878:	e4 2e       	mov	r14, r20
    e87a:	69 01       	movw	r12, r18
    e87c:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5445
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    e87e:	62 ef       	ldi	r22, 0xF2	; 242
    e880:	72 e0       	ldi	r23, 0x02	; 2
    e882:	c9 01       	movw	r24, r18
    e884:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5446
  strcpy(line2, "");
    e888:	62 ef       	ldi	r22, 0xF2	; 242
    e88a:	72 e0       	ldi	r23, 0x02	; 2
    e88c:	c8 01       	movw	r24, r16
    e88e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
    e892:	88 ec       	ldi	r24, 0xC8	; 200
    e894:	88 2e       	mov	r8, r24
    e896:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e898:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5443
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    e89a:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    e89c:	c4 01       	movw	r24, r8
    e89e:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5451
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    e8a2:	81 30       	cpi	r24, 0x01	; 1
    e8a4:	11 f4       	brne	.+4      	; 0xe8aa <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5c>
    e8a6:	ee 20       	and	r14, r14
    e8a8:	19 f0       	breq	.+6      	; 0xe8b0 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x62>
    e8aa:	81 e0       	ldi	r24, 0x01	; 1
    e8ac:	e8 12       	cpse	r14, r24
    e8ae:	2e c0       	rjmp	.+92     	; 0xe90c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
    {
      if (cri == args1)
    e8b0:	71 12       	cpse	r7, r17
    e8b2:	2b c0       	rjmp	.+86     	; 0xe90a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xbc>
tds_get_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    e8b4:	be 01       	movw	r22, r28
    e8b6:	6f 5f       	subi	r22, 0xFF	; 255
    e8b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e8ba:	80 2f       	mov	r24, r16
    e8bc:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    e8c0:	be 01       	movw	r22, r28
    e8c2:	63 5f       	subi	r22, 0xF3	; 243
    e8c4:	7f 4f       	sbci	r23, 0xFF	; 255
    e8c6:	ce 01       	movw	r24, r28
    e8c8:	47 96       	adiw	r24, 0x17	; 23
    e8ca:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5456
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    e8ce:	be 01       	movw	r22, r28
    e8d0:	69 5e       	subi	r22, 0xE9	; 233
    e8d2:	7f 4f       	sbci	r23, 0xFF	; 255
    e8d4:	c5 01       	movw	r24, r10
    e8d6:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5457
        strcpy_P(line1, nastaveni_onewire);
    e8da:	65 e9       	ldi	r22, 0x95	; 149
    e8dc:	7a e5       	ldi	r23, 0x5A	; 90
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5473
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    e8de:	c6 01       	movw	r24, r12
    e8e0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5482
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    e8e4:	aa 96       	adiw	r28, 0x2a	; 42
    e8e6:	0f b6       	in	r0, 0x3f	; 63
    e8e8:	f8 94       	cli
    e8ea:	de bf       	out	0x3e, r29	; 62
    e8ec:	0f be       	out	0x3f, r0	; 63
    e8ee:	cd bf       	out	0x3d, r28	; 61
    e8f0:	df 91       	pop	r29
    e8f2:	cf 91       	pop	r28
    e8f4:	1f 91       	pop	r17
    e8f6:	0f 91       	pop	r16
    e8f8:	ef 90       	pop	r14
    e8fa:	df 90       	pop	r13
    e8fc:	cf 90       	pop	r12
    e8fe:	bf 90       	pop	r11
    e900:	af 90       	pop	r10
    e902:	9f 90       	pop	r9
    e904:	8f 90       	pop	r8
    e906:	7f 90       	pop	r7
    e908:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    e90a:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    e90c:	0f 5f       	subi	r16, 0xFF	; 255
    e90e:	86 e1       	ldi	r24, 0x16	; 22
    e910:	88 0e       	add	r8, r24
    e912:	91 1c       	adc	r9, r1
    e914:	06 30       	cpi	r16, 0x06	; 6
    e916:	11 f6       	brne	.-124    	; 0xe89c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e918:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5466
  {
    remote_tds_get_active(idx, &active);
    e91a:	be 01       	movw	r22, r28
    e91c:	6f 5f       	subi	r22, 0xFF	; 255
    e91e:	7f 4f       	sbci	r23, 0xFF	; 255
    e920:	80 2f       	mov	r24, r16
    e922:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5467
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    e926:	89 81       	ldd	r24, Y+1	; 0x01
    e928:	81 30       	cpi	r24, 0x01	; 1
    e92a:	11 f4       	brne	.+4      	; 0xe930 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe2>
    e92c:	ee 20       	and	r14, r14
    e92e:	19 f0       	breq	.+6      	; 0xe936 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe8>
    e930:	81 e0       	ldi	r24, 0x01	; 1
    e932:	e8 12       	cpse	r14, r24
    e934:	15 c0       	rjmp	.+42     	; 0xe960 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5469
    {
      if (cri == args1)
    e936:	71 12       	cpse	r7, r17
    e938:	12 c0       	rjmp	.+36     	; 0xe95e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5471
      {
        remote_tds_get_complete(idx, &active, name);
    e93a:	ae 01       	movw	r20, r28
    e93c:	49 5e       	subi	r20, 0xE9	; 233
    e93e:	5f 4f       	sbci	r21, 0xFF	; 255
    e940:	be 01       	movw	r22, r28
    e942:	6f 5f       	subi	r22, 0xFF	; 255
    e944:	7f 4f       	sbci	r23, 0xFF	; 255
    e946:	80 2f       	mov	r24, r16
    e948:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5472
        strcpy(line2, name);
    e94c:	be 01       	movw	r22, r28
    e94e:	69 5e       	subi	r22, 0xE9	; 233
    e950:	7f 4f       	sbci	r23, 0xFF	; 255
    e952:	c5 01       	movw	r24, r10
    e954:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5473
        strcpy_P(line1, nastaveni_rtds);
    e958:	66 e8       	ldi	r22, 0x86	; 134
    e95a:	7a e5       	ldi	r23, 0x5A	; 90
    e95c:	c0 cf       	rjmp	.-128    	; 0xe8de <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5476
        goto button_get_show_default_temp_end;
      }
      cri++;
    e95e:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e960:	0f 5f       	subi	r16, 0xFF	; 255
    e962:	0a 30       	cpi	r16, 0x0A	; 10
    e964:	d1 f6       	brne	.-76     	; 0xe91a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xcc>
    e966:	be cf       	rjmp	.-132    	; 0xe8e4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x96>

0000e968 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5203
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e968:	cf 92       	push	r12
    e96a:	df 92       	push	r13
    e96c:	ff 92       	push	r15
    e96e:	0f 93       	push	r16
    e970:	1f 93       	push	r17
    e972:	cf 93       	push	r28
    e974:	df 93       	push	r29
    e976:	1f 92       	push	r1
    e978:	cd b7       	in	r28, 0x3d	; 61
    e97a:	de b7       	in	r29, 0x3e	; 62
    e97c:	f8 2e       	mov	r15, r24
    e97e:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
  uint8_t active;
  strcpy_P(line1, text_not_used);
    e980:	63 e6       	ldi	r22, 0x63	; 99
    e982:	7a e5       	ldi	r23, 0x5A	; 90
    e984:	c9 01       	movw	r24, r18
    e986:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5207
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    e98a:	f8 01       	movw	r30, r16
    e98c:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
  remote_tds_get_active(args1, &active);
    e98e:	be 01       	movw	r22, r28
    e990:	6f 5f       	subi	r22, 0xFF	; 255
    e992:	7f 4f       	sbci	r23, 0xFF	; 255
    e994:	8f 2d       	mov	r24, r15
    e996:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5209
  if (active == 1)
    e99a:	89 81       	ldd	r24, Y+1	; 0x01
    e99c:	81 30       	cpi	r24, 0x01	; 1
    e99e:	39 f4       	brne	.+14     	; 0xe9ae <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
  {
    remote_tds_get_complete(args1, &active, line1);
    e9a0:	a6 01       	movw	r20, r12
    e9a2:	be 01       	movw	r22, r28
    e9a4:	6f 5f       	subi	r22, 0xFF	; 255
    e9a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e9a8:	8f 2d       	mov	r24, r15
    e9aa:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
  }
}
    e9ae:	0f 90       	pop	r0
    e9b0:	df 91       	pop	r29
    e9b2:	cf 91       	pop	r28
    e9b4:	1f 91       	pop	r17
    e9b6:	0f 91       	pop	r16
    e9b8:	ff 90       	pop	r15
    e9ba:	df 90       	pop	r13
    e9bc:	cf 90       	pop	r12
    e9be:	08 95       	ret

0000e9c0 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4904
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    e9c0:	5f 92       	push	r5
    e9c2:	6f 92       	push	r6
    e9c4:	7f 92       	push	r7
    e9c6:	8f 92       	push	r8
    e9c8:	9f 92       	push	r9
    e9ca:	af 92       	push	r10
    e9cc:	bf 92       	push	r11
    e9ce:	cf 92       	push	r12
    e9d0:	df 92       	push	r13
    e9d2:	ef 92       	push	r14
    e9d4:	ff 92       	push	r15
    e9d6:	0f 93       	push	r16
    e9d8:	1f 93       	push	r17
    e9da:	cf 93       	push	r28
    e9dc:	df 93       	push	r29
    e9de:	cd b7       	in	r28, 0x3d	; 61
    e9e0:	de b7       	in	r29, 0x3e	; 62
    e9e2:	cd 54       	subi	r28, 0x4D	; 77
    e9e4:	d1 09       	sbc	r29, r1
    e9e6:	0f b6       	in	r0, 0x3f	; 63
    e9e8:	f8 94       	cli
    e9ea:	de bf       	out	0x3e, r29	; 62
    e9ec:	0f be       	out	0x3f, r0	; 63
    e9ee:	cd bf       	out	0x3d, r28	; 61
    e9f0:	4c 01       	movw	r8, r24
    e9f2:	5b 01       	movw	r10, r22
    e9f4:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    e9f6:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    e9fa:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    e9fe:	26 0f       	add	r18, r22
    ea00:	37 1f       	adc	r19, r23
    ea02:	48 0f       	add	r20, r24
    ea04:	59 1f       	adc	r21, r25
    ea06:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4913
  remote_tds_get_complete(args2, &active, name);
    ea0a:	ae 01       	movw	r20, r28
    ea0c:	45 5c       	subi	r20, 0xC5	; 197
    ea0e:	5f 4f       	sbci	r21, 0xFF	; 255
    ea10:	be 01       	movw	r22, r28
    ea12:	63 5b       	subi	r22, 0xB3	; 179
    ea14:	7f 4f       	sbci	r23, 0xFF	; 255
    ea16:	8e 2d       	mov	r24, r14
    ea18:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4914
  if (active == 1)
    ea1c:	2e 96       	adiw	r28, 0x0e	; 14
    ea1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    ea20:	2e 97       	sbiw	r28, 0x0e	; 14
    ea22:	81 30       	cpi	r24, 0x01	; 1
    ea24:	09 f0       	breq	.+2      	; 0xea28 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x68>
    ea26:	c1 c0       	rjmp	.+386    	; 0xebaa <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4917
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    ea28:	69 e4       	ldi	r22, 0x49	; 73
    ea2a:	7a e5       	ldi	r23, 0x5A	; 90
    ea2c:	ce 01       	movw	r24, r28
    ea2e:	01 96       	adiw	r24, 0x01	; 1
    ea30:	6c 01       	movw	r12, r24
    ea32:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4918
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    ea36:	34 01       	movw	r6, r8
    ea38:	95 e0       	ldi	r25, 0x05	; 5
    ea3a:	69 0e       	add	r6, r25
    ea3c:	71 1c       	adc	r7, r1
    ea3e:	ee 24       	eor	r14, r14
    ea40:	ea 94       	dec	r14
    ea42:	fe 2c       	mov	r15, r14
    ea44:	10 e0       	ldi	r17, 0x00	; 0
    ea46:	00 e0       	ldi	r16, 0x00	; 0
    ea48:	22 e0       	ldi	r18, 0x02	; 2
    ea4a:	a5 01       	movw	r20, r10
    ea4c:	46 5f       	subi	r20, 0xF6	; 246
    ea4e:	5f 4f       	sbci	r21, 0xFF	; 255
    ea50:	b3 01       	movw	r22, r6
    ea52:	c6 01       	movw	r24, r12
    ea54:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4919
    strcpy(str1, name);
    ea58:	be 01       	movw	r22, r28
    ea5a:	65 5c       	subi	r22, 0xC5	; 197
    ea5c:	7f 4f       	sbci	r23, 0xFF	; 255
    ea5e:	c6 01       	movw	r24, r12
    ea60:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4920
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    ea64:	b4 01       	movw	r22, r8
    ea66:	6c 5e       	subi	r22, 0xEC	; 236
    ea68:	7f 4f       	sbci	r23, 0xFF	; 255
    ea6a:	22 e0       	ldi	r18, 0x02	; 2
    ea6c:	a5 01       	movw	r20, r10
    ea6e:	42 5e       	subi	r20, 0xE2	; 226
    ea70:	5f 4f       	sbci	r21, 0xFF	; 255
    ea72:	c6 01       	movw	r24, r12
    ea74:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    ea78:	89 e0       	ldi	r24, 0x09	; 9
    ea7a:	85 15       	cp	r24, r5
    ea7c:	08 f4       	brcc	.+2      	; 0xea80 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc0>
    ea7e:	ac c0       	rjmp	.+344    	; 0xebd8 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x218>
    ea80:	85 2d       	mov	r24, r5
    ea82:	0e 94 1b 40 	call	0x8036	; 0x8036 <remote_tds_get_data(unsigned char) [clone .part.28]>
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    ea86:	bc 01       	movw	r22, r24
    ea88:	99 0f       	add	r25, r25
    ea8a:	88 0b       	sbc	r24, r24
    ea8c:	99 0b       	sbc	r25, r25
    ea8e:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    ea92:	20 e0       	ldi	r18, 0x00	; 0
    ea94:	30 e0       	ldi	r19, 0x00	; 0
    ea96:	4a e7       	ldi	r20, 0x7A	; 122
    ea98:	54 e4       	ldi	r21, 0x44	; 68
    ea9a:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4923
    dtostrf(te, 4, 2, str1);
    ea9e:	86 01       	movw	r16, r12
    eaa0:	22 e0       	ldi	r18, 0x02	; 2
    eaa2:	44 e0       	ldi	r20, 0x04	; 4
    eaa4:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4924
    strcat(str1, "C");
    eaa8:	62 ed       	ldi	r22, 0xD2	; 210
    eaaa:	76 e0       	ldi	r23, 0x06	; 6
    eaac:	c6 01       	movw	r24, r12
    eaae:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4925
    strcpy_P(str2, current_temp_short);
    eab2:	4e 01       	movw	r8, r28
    eab4:	91 e2       	ldi	r25, 0x21	; 33
    eab6:	89 0e       	add	r8, r25
    eab8:	91 1c       	adc	r9, r1
    eaba:	60 e4       	ldi	r22, 0x40	; 64
    eabc:	7a e5       	ldi	r23, 0x5A	; 90
    eabe:	c4 01       	movw	r24, r8
    eac0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4926
    strcat(str2, str1);
    eac4:	b6 01       	movw	r22, r12
    eac6:	c4 01       	movw	r24, r8
    eac8:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4927
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    eacc:	ee 24       	eor	r14, r14
    eace:	ea 94       	dec	r14
    ead0:	fe 2c       	mov	r15, r14
    ead2:	10 e0       	ldi	r17, 0x00	; 0
    ead4:	00 e0       	ldi	r16, 0x00	; 0
    ead6:	22 e0       	ldi	r18, 0x02	; 2
    ead8:	a5 01       	movw	r20, r10
    eada:	44 5c       	subi	r20, 0xC4	; 196
    eadc:	5f 4f       	sbci	r21, 0xFF	; 255
    eade:	b3 01       	movw	r22, r6
    eae0:	c4 01       	movw	r24, r8
    eae2:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    eae6:	89 e0       	ldi	r24, 0x09	; 9
    eae8:	85 15       	cp	r24, r5
    eaea:	08 f4       	brcc	.+2      	; 0xeaee <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x12e>
    eaec:	78 c0       	rjmp	.+240    	; 0xebde <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    eaee:	93 e0       	ldi	r25, 0x03	; 3
    eaf0:	59 9e       	mul	r5, r25
    eaf2:	b0 01       	movw	r22, r0
    eaf4:	11 24       	eor	r1, r1
    eaf6:	6a 59       	subi	r22, 0x9A	; 154
    eaf8:	7f 4f       	sbci	r23, 0xFF	; 255
    eafa:	07 2e       	mov	r0, r23
    eafc:	00 0c       	add	r0, r0
    eafe:	88 0b       	sbc	r24, r24
    eb00:	99 0b       	sbc	r25, r25
    eb02:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
    eb06:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    eb08:	6a e2       	ldi	r22, 0x2A	; 42
    eb0a:	7a e5       	ldi	r23, 0x5A	; 90
    eb0c:	c4 01       	movw	r24, r8
    eb0e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4931
    sprintf(str1, "%s: %d", str2, last_update);
    eb12:	1f 92       	push	r1
    eb14:	5f 92       	push	r5
    eb16:	9f 92       	push	r9
    eb18:	8f 92       	push	r8
    eb1a:	8e ea       	ldi	r24, 0xAE	; 174
    eb1c:	93 e0       	ldi	r25, 0x03	; 3
    eb1e:	9f 93       	push	r25
    eb20:	8f 93       	push	r24
    eb22:	df 92       	push	r13
    eb24:	cf 92       	push	r12
    eb26:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    eb2a:	ee 24       	eor	r14, r14
    eb2c:	ea 94       	dec	r14
    eb2e:	fe 2c       	mov	r15, r14
    eb30:	10 e0       	ldi	r17, 0x00	; 0
    eb32:	00 e0       	ldi	r16, 0x00	; 0
    eb34:	21 e0       	ldi	r18, 0x01	; 1
    eb36:	a5 01       	movw	r20, r10
    eb38:	40 5b       	subi	r20, 0xB0	; 176
    eb3a:	5f 4f       	sbci	r21, 0xFF	; 255
    eb3c:	b3 01       	movw	r22, r6
    eb3e:	c6 01       	movw	r24, r12
    eb40:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
    active = 1;
    if (last_update >= 250) active = 0;
    eb44:	0f b6       	in	r0, 0x3f	; 63
    eb46:	f8 94       	cli
    eb48:	de bf       	out	0x3e, r29	; 62
    eb4a:	0f be       	out	0x3f, r0	; 63
    eb4c:	cd bf       	out	0x3d, r28	; 61
    eb4e:	99 ef       	ldi	r25, 0xF9	; 249
    eb50:	95 15       	cp	r25, r5
    eb52:	08 f4       	brcc	.+2      	; 0xeb56 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x196>
    eb54:	47 c0       	rjmp	.+142    	; 0xebe4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    eb56:	81 e0       	ldi	r24, 0x01	; 1
    eb58:	2e 96       	adiw	r28, 0x0e	; 14
    eb5a:	8f af       	std	Y+63, r24	; 0x3f
    eb5c:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4935
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    eb5e:	63 e2       	ldi	r22, 0x23	; 35
    eb60:	7a e5       	ldi	r23, 0x5A	; 90
    eb62:	c4 01       	movw	r24, r8
    eb64:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4936
    sprintf(str1, "%s: %d", str2, active);
    eb68:	2e 96       	adiw	r28, 0x0e	; 14
    eb6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    eb6c:	2e 97       	sbiw	r28, 0x0e	; 14
    eb6e:	1f 92       	push	r1
    eb70:	8f 93       	push	r24
    eb72:	9f 92       	push	r9
    eb74:	8f 92       	push	r8
    eb76:	8e ea       	ldi	r24, 0xAE	; 174
    eb78:	93 e0       	ldi	r25, 0x03	; 3
    eb7a:	9f 93       	push	r25
    eb7c:	8f 93       	push	r24
    eb7e:	df 92       	push	r13
    eb80:	cf 92       	push	r12
    eb82:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4937
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    eb86:	a5 01       	movw	r20, r10
    eb88:	4c 59       	subi	r20, 0x9C	; 156
    eb8a:	5f 4f       	sbci	r21, 0xFF	; 255
    eb8c:	ee 24       	eor	r14, r14
    eb8e:	ea 94       	dec	r14
    eb90:	fe 2c       	mov	r15, r14
    eb92:	10 e0       	ldi	r17, 0x00	; 0
    eb94:	00 e0       	ldi	r16, 0x00	; 0
    eb96:	22 e0       	ldi	r18, 0x02	; 2
    eb98:	b3 01       	movw	r22, r6
    eb9a:	c6 01       	movw	r24, r12
    eb9c:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
    eba0:	0f b6       	in	r0, 0x3f	; 63
    eba2:	f8 94       	cli
    eba4:	de bf       	out	0x3e, r29	; 62
    eba6:	0f be       	out	0x3f, r0	; 63
    eba8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4939
  }
}
    ebaa:	c3 5b       	subi	r28, 0xB3	; 179
    ebac:	df 4f       	sbci	r29, 0xFF	; 255
    ebae:	0f b6       	in	r0, 0x3f	; 63
    ebb0:	f8 94       	cli
    ebb2:	de bf       	out	0x3e, r29	; 62
    ebb4:	0f be       	out	0x3f, r0	; 63
    ebb6:	cd bf       	out	0x3d, r28	; 61
    ebb8:	df 91       	pop	r29
    ebba:	cf 91       	pop	r28
    ebbc:	1f 91       	pop	r17
    ebbe:	0f 91       	pop	r16
    ebc0:	ff 90       	pop	r15
    ebc2:	ef 90       	pop	r14
    ebc4:	df 90       	pop	r13
    ebc6:	cf 90       	pop	r12
    ebc8:	bf 90       	pop	r11
    ebca:	af 90       	pop	r10
    ebcc:	9f 90       	pop	r9
    ebce:	8f 90       	pop	r8
    ebd0:	7f 90       	pop	r7
    ebd2:	6f 90       	pop	r6
    ebd4:	5f 90       	pop	r5
    ebd6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2763
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    ebd8:	90 e0       	ldi	r25, 0x00	; 0
    ebda:	80 e0       	ldi	r24, 0x00	; 0
    ebdc:	54 cf       	rjmp	.-344    	; 0xea86 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    ebde:	55 24       	eor	r5, r5
    ebe0:	5a 94       	dec	r5
    ebe2:	92 cf       	rjmp	.-220    	; 0xeb08 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    ebe4:	2e 96       	adiw	r28, 0x0e	; 14
    ebe6:	1f ae       	std	Y+63, r1	; 0x3f
    ebe8:	2e 97       	sbiw	r28, 0x0e	; 14
    ebea:	b9 cf       	rjmp	.-142    	; 0xeb5e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x19e>

0000ebec <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2, char *text)
{
    ebec:	2f 92       	push	r2
    ebee:	3f 92       	push	r3
    ebf0:	4f 92       	push	r4
    ebf2:	5f 92       	push	r5
    ebf4:	6f 92       	push	r6
    ebf6:	7f 92       	push	r7
    ebf8:	8f 92       	push	r8
    ebfa:	9f 92       	push	r9
    ebfc:	af 92       	push	r10
    ebfe:	bf 92       	push	r11
    ec00:	cf 92       	push	r12
    ec02:	df 92       	push	r13
    ec04:	ef 92       	push	r14
    ec06:	ff 92       	push	r15
    ec08:	0f 93       	push	r16
    ec0a:	1f 93       	push	r17
    ec0c:	cf 93       	push	r28
    ec0e:	df 93       	push	r29
    ec10:	cd b7       	in	r28, 0x3d	; 61
    ec12:	de b7       	in	r29, 0x3e	; 62
    ec14:	ce 54       	subi	r28, 0x4E	; 78
    ec16:	d1 09       	sbc	r29, r1
    ec18:	0f b6       	in	r0, 0x3f	; 63
    ec1a:	f8 94       	cli
    ec1c:	de bf       	out	0x3e, r29	; 62
    ec1e:	0f be       	out	0x3f, r0	; 63
    ec20:	cd bf       	out	0x3d, r28	; 61
    ec22:	5c 01       	movw	r10, r24
    ec24:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    ec26:	64 ef       	ldi	r22, 0xF4	; 244
    ec28:	79 e5       	ldi	r23, 0x59	; 89
    ec2a:	ce 01       	movw	r24, r28
    ec2c:	01 96       	adiw	r24, 0x01	; 1
    ec2e:	6c 01       	movw	r12, r24
    ec30:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4806
  stat = get_global_temp(default_show_temp, str2, &te);
    ec34:	10 91 0d 09 	lds	r17, 0x090D	; 0x80090d <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5391
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    ec38:	66 e0       	ldi	r22, 0x06	; 6
    ec3a:	7a e5       	ldi	r23, 0x5A	; 90
    ec3c:	ce 01       	movw	r24, r28
    ec3e:	c7 96       	adiw	r24, 0x37	; 55
    ec40:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
    ec44:	51 2c       	mov	r5, r1
    ec46:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5388
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    ec48:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5401
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    ec4a:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5395
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    ec4c:	be 01       	movw	r22, r28
    ec4e:	6f 5d       	subi	r22, 0xDF	; 223
    ec50:	7f 4f       	sbci	r23, 0xFF	; 255
    ec52:	84 2d       	mov	r24, r4
    ec54:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    ec58:	81 30       	cpi	r24, 0x01	; 1
    ec5a:	09 f0       	breq	.+2      	; 0xec5e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x72>
    ec5c:	9c c0       	rjmp	.+312    	; 0xed96 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5396
      if (tds.used == 1)
    ec5e:	89 a1       	ldd	r24, Y+33	; 0x21
    ec60:	81 30       	cpi	r24, 0x01	; 1
    ec62:	09 f0       	breq	.+2      	; 0xec66 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x7a>
    ec64:	98 c0       	rjmp	.+304    	; 0xed96 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5398
      {
        if (cri == device)
    ec66:	17 11       	cpse	r17, r7
    ec68:	95 c0       	rjmp	.+298    	; 0xed94 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
        {
          strcpy(name, tds.name);
    ec6a:	be 01       	movw	r22, r28
    ec6c:	63 5d       	subi	r22, 0xD3	; 211
    ec6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec70:	ce 01       	movw	r24, r28
    ec72:	c7 96       	adiw	r24, 0x37	; 55
    ec74:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5401
          if (status_tds18s20[idx].online == True)
    ec78:	04 9d       	mul	r16, r4
    ec7a:	f0 01       	movw	r30, r0
    ec7c:	05 9d       	mul	r16, r5
    ec7e:	f0 0d       	add	r31, r0
    ec80:	11 24       	eor	r1, r1
    ec82:	e3 57       	subi	r30, 0x73	; 115
    ec84:	f5 4f       	sbci	r31, 0xF5	; 245
    ec86:	93 8d       	ldd	r25, Z+27	; 0x1b
    ec88:	2d 96       	adiw	r28, 0x0d	; 13
    ec8a:	9f af       	std	Y+63, r25	; 0x3f
    ec8c:	2d 97       	sbiw	r28, 0x0d	; 13
    ec8e:	91 30       	cpi	r25, 0x01	; 1
    ec90:	09 f0       	breq	.+2      	; 0xec94 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xa8>
    ec92:	80 c0       	rjmp	.+256    	; 0xed94 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    ec94:	65 81       	ldd	r22, Z+5	; 0x05
    ec96:	76 81       	ldd	r23, Z+6	; 0x06
    ec98:	07 2e       	mov	r0, r23
    ec9a:	00 0c       	add	r0, r0
    ec9c:	88 0b       	sbc	r24, r24
    ec9e:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5421
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    eca0:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
    eca4:	20 e0       	ldi	r18, 0x00	; 0
    eca6:	30 e0       	ldi	r19, 0x00	; 0
    eca8:	4a e7       	ldi	r20, 0x7A	; 122
    ecaa:	54 e4       	ldi	r21, 0x44	; 68
    ecac:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
    ecb0:	1b 01       	movw	r2, r22
    ecb2:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4807
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    ecb4:	be 01       	movw	r22, r28
    ecb6:	69 5c       	subi	r22, 0xC9	; 201
    ecb8:	7f 4f       	sbci	r23, 0xFF	; 255
    ecba:	c6 01       	movw	r24, r12
    ecbc:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    ecc0:	ee 24       	eor	r14, r14
    ecc2:	ea 94       	dec	r14
    ecc4:	fe 2c       	mov	r15, r14
    ecc6:	10 e0       	ldi	r17, 0x00	; 0
    ecc8:	00 e0       	ldi	r16, 0x00	; 0
    ecca:	21 e0       	ldi	r18, 0x01	; 1
    eccc:	a4 01       	movw	r20, r8
    ecce:	4b 5f       	subi	r20, 0xFB	; 251
    ecd0:	5f 4f       	sbci	r21, 0xFF	; 255
    ecd2:	b5 01       	movw	r22, r10
    ecd4:	6b 5f       	subi	r22, 0xFB	; 251
    ecd6:	7f 4f       	sbci	r23, 0xFF	; 255
    ecd8:	c6 01       	movw	r24, r12
    ecda:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
    ecde:	34 01       	movw	r6, r8
    ece0:	94 e1       	ldi	r25, 0x14	; 20
    ece2:	69 0e       	add	r6, r25
    ece4:	71 1c       	adc	r7, r1
    ece6:	c5 01       	movw	r24, r10
    ece8:	04 96       	adiw	r24, 0x04	; 4
    ecea:	2f 96       	adiw	r28, 0x0f	; 15
    ecec:	9f af       	std	Y+63, r25	; 0x3f
    ecee:	8e af       	std	Y+62, r24	; 0x3e
    ecf0:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4809
  if (stat == 1)
    ecf2:	2d 96       	adiw	r28, 0x0d	; 13
    ecf4:	9f ad       	ldd	r25, Y+63	; 0x3f
    ecf6:	2d 97       	sbiw	r28, 0x0d	; 13
    ecf8:	91 30       	cpi	r25, 0x01	; 1
    ecfa:	09 f0       	breq	.+2      	; 0xecfe <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x112>
    ecfc:	95 c0       	rjmp	.+298    	; 0xee28 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4811
  {
    dtostrf(te, 4, 1, str1);
    ecfe:	86 01       	movw	r16, r12
    ed00:	21 e0       	ldi	r18, 0x01	; 1
    ed02:	44 e0       	ldi	r20, 0x04	; 4
    ed04:	c2 01       	movw	r24, r4
    ed06:	b1 01       	movw	r22, r2
    ed08:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4812
    if (strlen(str1) <= 4)
    ed0c:	f6 01       	movw	r30, r12
    ed0e:	01 90       	ld	r0, Z+
    ed10:	00 20       	and	r0, r0
    ed12:	e9 f7       	brne	.-6      	; 0xed0e <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x122>
    ed14:	31 97       	sbiw	r30, 0x01	; 1
    ed16:	ec 19       	sub	r30, r12
    ed18:	fd 09       	sbc	r31, r13
    ed1a:	35 97       	sbiw	r30, 0x05	; 5
    ed1c:	28 f4       	brcc	.+10     	; 0xed28 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4813
      strcat(str1, "C");
    ed1e:	62 ed       	ldi	r22, 0xD2	; 210
    ed20:	76 e0       	ldi	r23, 0x06	; 6
    ed22:	c6 01       	movw	r24, r12
    ed24:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4814
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    ed28:	ee 24       	eor	r14, r14
    ed2a:	ea 94       	dec	r14
    ed2c:	fe 2c       	mov	r15, r14
    ed2e:	10 e0       	ldi	r17, 0x00	; 0
    ed30:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4819
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    ed32:	28 e0       	ldi	r18, 0x08	; 8
    ed34:	a3 01       	movw	r20, r6
    ed36:	2f 96       	adiw	r28, 0x0f	; 15
    ed38:	6e ad       	ldd	r22, Y+62	; 0x3e
    ed3a:	7f ad       	ldd	r23, Y+63	; 0x3f
    ed3c:	2f 97       	sbiw	r28, 0x0f	; 15
    ed3e:	c6 01       	movw	r24, r12
    ed40:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    ed44:	10 92 4e 0e 	sts	0x0E4E, r1	; 0x800e4e <my_lcd+0xb>
    ed48:	10 92 4d 0e 	sts	0x0E4D, r1	; 0x800e4d <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    ed4c:	94 01       	movw	r18, r8
    ed4e:	2c 5a       	subi	r18, 0xAC	; 172
    ed50:	3f 4f       	sbci	r19, 0xFF	; 255
    ed52:	a5 01       	movw	r20, r10
    ed54:	4c 50       	subi	r20, 0x0C	; 12
    ed56:	5f 4f       	sbci	r21, 0xFF	; 255
    ed58:	b4 01       	movw	r22, r8
    ed5a:	c5 01       	movw	r24, r10
    ed5c:	0e 94 06 9b 	call	0x1360c	; 0x1360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4823
}
    ed60:	c2 5b       	subi	r28, 0xB2	; 178
    ed62:	df 4f       	sbci	r29, 0xFF	; 255
    ed64:	0f b6       	in	r0, 0x3f	; 63
    ed66:	f8 94       	cli
    ed68:	de bf       	out	0x3e, r29	; 62
    ed6a:	0f be       	out	0x3f, r0	; 63
    ed6c:	cd bf       	out	0x3d, r28	; 61
    ed6e:	df 91       	pop	r29
    ed70:	cf 91       	pop	r28
    ed72:	1f 91       	pop	r17
    ed74:	0f 91       	pop	r16
    ed76:	ff 90       	pop	r15
    ed78:	ef 90       	pop	r14
    ed7a:	df 90       	pop	r13
    ed7c:	cf 90       	pop	r12
    ed7e:	bf 90       	pop	r11
    ed80:	af 90       	pop	r10
    ed82:	9f 90       	pop	r9
    ed84:	8f 90       	pop	r8
    ed86:	7f 90       	pop	r7
    ed88:	6f 90       	pop	r6
    ed8a:	5f 90       	pop	r5
    ed8c:	4f 90       	pop	r4
    ed8e:	3f 90       	pop	r3
    ed90:	2f 90       	pop	r2
    ed92:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    ed94:	73 94       	inc	r7
    ed96:	8f ef       	ldi	r24, 0xFF	; 255
    ed98:	48 1a       	sub	r4, r24
    ed9a:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5394
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    ed9c:	96 e0       	ldi	r25, 0x06	; 6
    ed9e:	49 16       	cp	r4, r25
    eda0:	51 04       	cpc	r5, r1
    eda2:	09 f0       	breq	.+2      	; 0xeda6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1ba>
    eda4:	53 cf       	rjmp	.-346    	; 0xec4c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x60>
    eda6:	36 e6       	ldi	r19, 0x66	; 102
    eda8:	23 2e       	mov	r2, r19
    edaa:	31 2c       	mov	r3, r1
    edac:	41 2c       	mov	r4, r1
    edae:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5411
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    edb0:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5413
  {
    remote_tds_get_active(idx, &active);
    edb2:	be 01       	movw	r22, r28
    edb4:	65 5b       	subi	r22, 0xB5	; 181
    edb6:	7f 4f       	sbci	r23, 0xFF	; 255
    edb8:	86 2d       	mov	r24, r6
    edba:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5414
    if (active == 1)
    edbe:	2c 96       	adiw	r28, 0x0c	; 12
    edc0:	8f ad       	ldd	r24, Y+63	; 0x3f
    edc2:	2c 97       	sbiw	r28, 0x0c	; 12
    edc4:	2d 96       	adiw	r28, 0x0d	; 13
    edc6:	8f af       	std	Y+63, r24	; 0x3f
    edc8:	2d 97       	sbiw	r28, 0x0d	; 13
    edca:	81 30       	cpi	r24, 0x01	; 1
    edcc:	d1 f4       	brne	.+52     	; 0xee02 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5416
    {
      if (cri == device)
    edce:	17 11       	cpse	r17, r7
    edd0:	17 c0       	rjmp	.+46     	; 0xee00 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5418
      {
        remote_tds_get_complete(idx, &active, name);
    edd2:	ae 01       	movw	r20, r28
    edd4:	49 5c       	subi	r20, 0xC9	; 201
    edd6:	5f 4f       	sbci	r21, 0xFF	; 255
    edd8:	be 01       	movw	r22, r28
    edda:	65 5b       	subi	r22, 0xB5	; 181
    eddc:	7f 4f       	sbci	r23, 0xFF	; 255
    edde:	86 2d       	mov	r24, r6
    ede0:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ede4:	c2 01       	movw	r24, r4
    ede6:	b1 01       	movw	r22, r2
    ede8:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5419
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    edec:	8a 3f       	cpi	r24, 0xFA	; 250
    edee:	40 f4       	brcc	.+16     	; 0xee00 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x214>
remote_tds_get_data():
    edf0:	86 2d       	mov	r24, r6
    edf2:	0e 94 1b 40 	call	0x8036	; 0x8036 <remote_tds_get_data(unsigned char) [clone .part.28]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5421
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    edf6:	bc 01       	movw	r22, r24
    edf8:	99 0f       	add	r25, r25
    edfa:	88 0b       	sbc	r24, r24
    edfc:	99 0b       	sbc	r25, r25
    edfe:	50 cf       	rjmp	.-352    	; 0xeca0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    ee00:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5411
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ee02:	63 94       	inc	r6
    ee04:	93 e0       	ldi	r25, 0x03	; 3
    ee06:	29 0e       	add	r2, r25
    ee08:	31 1c       	adc	r3, r1
    ee0a:	41 1c       	adc	r4, r1
    ee0c:	51 1c       	adc	r5, r1
    ee0e:	84 e8       	ldi	r24, 0x84	; 132
    ee10:	28 16       	cp	r2, r24
    ee12:	31 04       	cpc	r3, r1
    ee14:	41 04       	cpc	r4, r1
    ee16:	51 04       	cpc	r5, r1
    ee18:	61 f6       	brne	.-104    	; 0xedb2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5392
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    ee1a:	21 2c       	mov	r2, r1
    ee1c:	31 2c       	mov	r3, r1
    ee1e:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5389
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    ee20:	2d 96       	adiw	r28, 0x0d	; 13
    ee22:	1f ae       	std	Y+63, r1	; 0x3f
    ee24:	2d 97       	sbiw	r28, 0x0d	; 13
    ee26:	46 cf       	rjmp	.-372    	; 0xecb4 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4818
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    ee28:	66 e0       	ldi	r22, 0x06	; 6
    ee2a:	7a e5       	ldi	r23, 0x5A	; 90
    ee2c:	c6 01       	movw	r24, r12
    ee2e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4819
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    ee32:	ee 24       	eor	r14, r14
    ee34:	ea 94       	dec	r14
    ee36:	fe 2c       	mov	r15, r14
    ee38:	00 e0       	ldi	r16, 0x00	; 0
    ee3a:	18 ef       	ldi	r17, 0xF8	; 248
    ee3c:	7a cf       	rjmp	.-268    	; 0xed32 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*)+0x146>

0000ee3e <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3825
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    ee3e:	cf 92       	push	r12
    ee40:	df 92       	push	r13
    ee42:	ef 92       	push	r14
    ee44:	ff 92       	push	r15
    ee46:	1f 93       	push	r17
    ee48:	cf 93       	push	r28
    ee4a:	df 93       	push	r29
    ee4c:	cd b7       	in	r28, 0x3d	; 61
    ee4e:	de b7       	in	r29, 0x3e	; 62
    ee50:	63 97       	sbiw	r28, 0x13	; 19
    ee52:	0f b6       	in	r0, 0x3f	; 63
    ee54:	f8 94       	cli
    ee56:	de bf       	out	0x3e, r29	; 62
    ee58:	0f be       	out	0x3f, r0	; 63
    ee5a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826
  uint8_t active = 0;
    ee5c:	1b 8a       	std	Y+19, r1	; 0x13
    ee5e:	86 e6       	ldi	r24, 0x66	; 102
    ee60:	c8 2e       	mov	r12, r24
    ee62:	d1 2c       	mov	r13, r1
    ee64:	e1 2c       	mov	r14, r1
    ee66:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ee68:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
  {
    remote_tds_get_complete(idx, &active, payload);
    ee6a:	ae 01       	movw	r20, r28
    ee6c:	4f 5f       	subi	r20, 0xFF	; 255
    ee6e:	5f 4f       	sbci	r21, 0xFF	; 255
    ee70:	be 01       	movw	r22, r28
    ee72:	6d 5e       	subi	r22, 0xED	; 237
    ee74:	7f 4f       	sbci	r23, 0xFF	; 255
    ee76:	81 2f       	mov	r24, r17
    ee78:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    ee7c:	8b 89       	ldd	r24, Y+19	; 0x13
    ee7e:	81 30       	cpi	r24, 0x01	; 1
    ee80:	09 f0       	breq	.+2      	; 0xee84 <send_mqtt_remote_tds_status()+0x46>
    ee82:	44 c0       	rjmp	.+136    	; 0xef0c <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3834
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    ee84:	9e 01       	movw	r18, r28
    ee86:	2f 5f       	subi	r18, 0xFF	; 255
    ee88:	3f 4f       	sbci	r19, 0xFF	; 255
    ee8a:	4d ec       	ldi	r20, 0xCD	; 205
    ee8c:	53 e0       	ldi	r21, 0x03	; 3
    ee8e:	61 2f       	mov	r22, r17
    ee90:	82 ed       	ldi	r24, 0xD2	; 210
    ee92:	93 e0       	ldi	r25, 0x03	; 3
    ee94:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3835
      itoa(active, payload, 10);
    ee98:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ee9a:	4a e0       	ldi	r20, 0x0A	; 10
    ee9c:	be 01       	movw	r22, r28
    ee9e:	6f 5f       	subi	r22, 0xFF	; 255
    eea0:	7f 4f       	sbci	r23, 0xFF	; 255
    eea2:	90 e0       	ldi	r25, 0x00	; 0
    eea4:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    eea8:	9e 01       	movw	r18, r28
    eeaa:	2f 5f       	subi	r18, 0xFF	; 255
    eeac:	3f 4f       	sbci	r19, 0xFF	; 255
    eeae:	47 ed       	ldi	r20, 0xD7	; 215
    eeb0:	53 e0       	ldi	r21, 0x03	; 3
    eeb2:	61 2f       	mov	r22, r17
    eeb4:	82 ed       	ldi	r24, 0xD2	; 210
    eeb6:	93 e0       	ldi	r25, 0x03	; 3
    eeb8:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
remote_tds_get_data():
    eebc:	81 2f       	mov	r24, r17
    eebe:	0e 94 1b 40 	call	0x8036	; 0x8036 <remote_tds_get_data(unsigned char) [clone .part.28]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    eec2:	4a e0       	ldi	r20, 0x0A	; 10
    eec4:	be 01       	movw	r22, r28
    eec6:	6f 5f       	subi	r22, 0xFF	; 255
    eec8:	7f 4f       	sbci	r23, 0xFF	; 255
    eeca:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    eece:	9e 01       	movw	r18, r28
    eed0:	2f 5f       	subi	r18, 0xFF	; 255
    eed2:	3f 4f       	sbci	r19, 0xFF	; 255
    eed4:	4e ed       	ldi	r20, 0xDE	; 222
    eed6:	53 e0       	ldi	r21, 0x03	; 3
    eed8:	61 2f       	mov	r22, r17
    eeda:	82 ed       	ldi	r24, 0xD2	; 210
    eedc:	93 e0       	ldi	r25, 0x03	; 3
    eede:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    eee2:	c7 01       	movw	r24, r14
    eee4:	b6 01       	movw	r22, r12
    eee6:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    eeea:	4a e0       	ldi	r20, 0x0A	; 10
    eeec:	be 01       	movw	r22, r28
    eeee:	6f 5f       	subi	r22, 0xFF	; 255
    eef0:	7f 4f       	sbci	r23, 0xFF	; 255
    eef2:	90 e0       	ldi	r25, 0x00	; 0
    eef4:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    eef8:	9e 01       	movw	r18, r28
    eefa:	2f 5f       	subi	r18, 0xFF	; 255
    eefc:	3f 4f       	sbci	r19, 0xFF	; 255
    eefe:	43 ee       	ldi	r20, 0xE3	; 227
    ef00:	53 e0       	ldi	r21, 0x03	; 3
    ef02:	61 2f       	mov	r22, r17
    ef04:	82 ed       	ldi	r24, 0xD2	; 210
    ef06:	93 e0       	ldi	r25, 0x03	; 3
    ef08:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3828
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ef0c:	1f 5f       	subi	r17, 0xFF	; 255
    ef0e:	83 e0       	ldi	r24, 0x03	; 3
    ef10:	c8 0e       	add	r12, r24
    ef12:	d1 1c       	adc	r13, r1
    ef14:	e1 1c       	adc	r14, r1
    ef16:	f1 1c       	adc	r15, r1
    ef18:	84 e8       	ldi	r24, 0x84	; 132
    ef1a:	c8 16       	cp	r12, r24
    ef1c:	d1 04       	cpc	r13, r1
    ef1e:	e1 04       	cpc	r14, r1
    ef20:	f1 04       	cpc	r15, r1
    ef22:	09 f0       	breq	.+2      	; 0xef26 <send_mqtt_remote_tds_status()+0xe8>
    ef24:	a2 cf       	rjmp	.-188    	; 0xee6a <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    ef26:	63 96       	adiw	r28, 0x13	; 19
    ef28:	0f b6       	in	r0, 0x3f	; 63
    ef2a:	f8 94       	cli
    ef2c:	de bf       	out	0x3e, r29	; 62
    ef2e:	0f be       	out	0x3f, r0	; 63
    ef30:	cd bf       	out	0x3d, r28	; 61
    ef32:	df 91       	pop	r29
    ef34:	cf 91       	pop	r28
    ef36:	1f 91       	pop	r17
    ef38:	ff 90       	pop	r15
    ef3a:	ef 90       	pop	r14
    ef3c:	df 90       	pop	r13
    ef3e:	cf 90       	pop	r12
    ef40:	08 95       	ret

0000ef42 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    ef42:	ef 92       	push	r14
    ef44:	ff 92       	push	r15
    ef46:	0f 93       	push	r16
    ef48:	1f 93       	push	r17
    ef4a:	cf 93       	push	r28
    ef4c:	df 93       	push	r29
    ef4e:	cd b7       	in	r28, 0x3d	; 61
    ef50:	de b7       	in	r29, 0x3e	; 62
    ef52:	63 97       	sbiw	r28, 0x13	; 19
    ef54:	0f b6       	in	r0, 0x3f	; 63
    ef56:	f8 94       	cli
    ef58:	de bf       	out	0x3e, r29	; 62
    ef5a:	0f be       	out	0x3f, r0	; 63
    ef5c:	cd bf       	out	0x3d, r28	; 61
    ef5e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ef60:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    ef62:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    ef64:	ae 01       	movw	r20, r28
    ef66:	4f 5f       	subi	r20, 0xFF	; 255
    ef68:	5f 4f       	sbci	r21, 0xFF	; 255
    ef6a:	be 01       	movw	r22, r28
    ef6c:	6d 5e       	subi	r22, 0xED	; 237
    ef6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef70:	81 2f       	mov	r24, r17
    ef72:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
    if (strcmp(name, tmp_name) == 0)
    ef76:	be 01       	movw	r22, r28
    ef78:	6f 5f       	subi	r22, 0xFF	; 255
    ef7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ef7c:	c7 01       	movw	r24, r14
    ef7e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    ef82:	89 2b       	or	r24, r25
    ef84:	09 f4       	brne	.+2      	; 0xef88 <remote_tds_name_exist(char*)+0x46>
    ef86:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ef88:	1f 5f       	subi	r17, 0xFF	; 255
    ef8a:	1a 30       	cpi	r17, 0x0A	; 10
    ef8c:	59 f7       	brne	.-42     	; 0xef64 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2750
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    ef8e:	80 2f       	mov	r24, r16
    ef90:	63 96       	adiw	r28, 0x13	; 19
    ef92:	0f b6       	in	r0, 0x3f	; 63
    ef94:	f8 94       	cli
    ef96:	de bf       	out	0x3e, r29	; 62
    ef98:	0f be       	out	0x3f, r0	; 63
    ef9a:	cd bf       	out	0x3d, r28	; 61
    ef9c:	df 91       	pop	r29
    ef9e:	cf 91       	pop	r28
    efa0:	1f 91       	pop	r17
    efa2:	0f 91       	pop	r16
    efa4:	ff 90       	pop	r15
    efa6:	ef 90       	pop	r14
    efa8:	08 95       	ret

0000efaa <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5349
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    efaa:	1f 93       	push	r17
    efac:	cf 93       	push	r28
    efae:	df 93       	push	r29
    efb0:	cd b7       	in	r28, 0x3d	; 61
    efb2:	de b7       	in	r29, 0x3e	; 62
    efb4:	62 97       	sbiw	r28, 0x12	; 18
    efb6:	0f b6       	in	r0, 0x3f	; 63
    efb8:	f8 94       	cli
    efba:	de bf       	out	0x3e, r29	; 62
    efbc:	0f be       	out	0x3f, r0	; 63
    efbe:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    efc0:	10 91 34 09 	lds	r17, 0x0934	; 0x800934 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    efc4:	66 e3       	ldi	r22, 0x36	; 54
    efc6:	79 e0       	ldi	r23, 0x09	; 9
    efc8:	ce 01       	movw	r24, r28
    efca:	01 96       	adiw	r24, 0x01	; 1
    efcc:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5354
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    efd0:	89 81       	ldd	r24, Y+1	; 0x01
    efd2:	88 23       	and	r24, r24
    efd4:	71 f0       	breq	.+28     	; 0xeff2 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
  {
    if (remote_tds_name_exist(name) == 255)
    efd6:	ce 01       	movw	r24, r28
    efd8:	01 96       	adiw	r24, 0x01	; 1
    efda:	0e 94 a1 77 	call	0xef42	; 0xef42 <remote_tds_name_exist(char*)>
    efde:	8f 3f       	cpi	r24, 0xFF	; 255
    efe0:	41 f4       	brne	.+16     	; 0xeff2 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    efe2:	1a 30       	cpi	r17, 0x0A	; 10
    efe4:	30 f4       	brcc	.+12     	; 0xeff2 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x48>
    efe6:	be 01       	movw	r22, r28
    efe8:	6f 5f       	subi	r22, 0xFF	; 255
    efea:	7f 4f       	sbci	r23, 0xFF	; 255
    efec:	81 2f       	mov	r24, r17
    efee:	0e 94 17 69 	call	0xd22e	; 0xd22e <remote_tds_set_name(unsigned char, char*) [clone .part.23]>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5359
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    eff2:	62 96       	adiw	r28, 0x12	; 18
    eff4:	0f b6       	in	r0, 0x3f	; 63
    eff6:	f8 94       	cli
    eff8:	de bf       	out	0x3e, r29	; 62
    effa:	0f be       	out	0x3f, r0	; 63
    effc:	cd bf       	out	0x3d, r28	; 61
    effe:	df 91       	pop	r29
    f000:	cf 91       	pop	r28
    f002:	1f 91       	pop	r17
    f004:	08 95       	ret

0000f006 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    f006:	cf 93       	push	r28
    f008:	df 93       	push	r29
    f00a:	cd b7       	in	r28, 0x3d	; 61
    f00c:	de b7       	in	r29, 0x3e	; 62
    f00e:	c1 58       	subi	r28, 0x81	; 129
    f010:	d1 09       	sbc	r29, r1
    f012:	0f b6       	in	r0, 0x3f	; 63
    f014:	f8 94       	cli
    f016:	de bf       	out	0x3e, r29	; 62
    f018:	0f be       	out	0x3f, r0	; 63
    f01a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    f01c:	cf 57       	subi	r28, 0x7F	; 127
    f01e:	df 4f       	sbci	r29, 0xFF	; 255
    f020:	18 82       	st	Y, r1
    f022:	c1 58       	subi	r28, 0x81	; 129
    f024:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
  remote_tds_get_complete(idx, &active, tmp1);
    f026:	ae 01       	movw	r20, r28
    f028:	4f 5f       	subi	r20, 0xFF	; 255
    f02a:	5f 4f       	sbci	r21, 0xFF	; 255
    f02c:	be 01       	movw	r22, r28
    f02e:	6f 57       	subi	r22, 0x7F	; 127
    f030:	7f 4f       	sbci	r23, 0xFF	; 255
    f032:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
  if (active == 1)
    f036:	cf 57       	subi	r28, 0x7F	; 127
    f038:	df 4f       	sbci	r29, 0xFF	; 255
    f03a:	88 81       	ld	r24, Y
    f03c:	c1 58       	subi	r28, 0x81	; 129
    f03e:	d0 40       	sbci	r29, 0x00	; 0
    f040:	81 30       	cpi	r24, 0x01	; 1
    f042:	a1 f4       	brne	.+40     	; 0xf06c <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  {
    strcpy(tmp2, "/rtds/");
    f044:	6f ee       	ldi	r22, 0xEF	; 239
    f046:	73 e0       	ldi	r23, 0x03	; 3
    f048:	ce 01       	movw	r24, r28
    f04a:	8f 5b       	subi	r24, 0xBF	; 191
    f04c:	9f 4f       	sbci	r25, 0xFF	; 255
    f04e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
    strcat(tmp2, tmp1);
    f052:	be 01       	movw	r22, r28
    f054:	6f 5f       	subi	r22, 0xFF	; 255
    f056:	7f 4f       	sbci	r23, 0xFF	; 255
    f058:	ce 01       	movw	r24, r28
    f05a:	8f 5b       	subi	r24, 0xBF	; 191
    f05c:	9f 4f       	sbci	r25, 0xFF	; 255
    f05e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
    mqtt_client.subscribe(tmp2);
    f062:	ce 01       	movw	r24, r28
    f064:	8f 5b       	subi	r24, 0xBF	; 191
    f066:	9f 4f       	sbci	r25, 0xFF	; 255
    f068:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2699
  }
}
    f06c:	cf 57       	subi	r28, 0x7F	; 127
    f06e:	df 4f       	sbci	r29, 0xFF	; 255
    f070:	0f b6       	in	r0, 0x3f	; 63
    f072:	f8 94       	cli
    f074:	de bf       	out	0x3e, r29	; 62
    f076:	0f be       	out	0x3f, r0	; 63
    f078:	cd bf       	out	0x3d, r28	; 61
    f07a:	df 91       	pop	r29
    f07c:	cf 91       	pop	r28
    f07e:	08 95       	ret

0000f080 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5334
  }
}
////sarr

void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f080:	1f 93       	push	r17
    f082:	cf 93       	push	r28
    f084:	df 93       	push	r29
    f086:	cd b7       	in	r28, 0x3d	; 61
    f088:	de b7       	in	r29, 0x3e	; 62
    f08a:	62 97       	sbiw	r28, 0x12	; 18
    f08c:	0f b6       	in	r0, 0x3f	; 63
    f08e:	f8 94       	cli
    f090:	de bf       	out	0x3e, r29	; 62
    f092:	0f be       	out	0x3f, r0	; 63
    f094:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2302
  dialog_save_string_function = save_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    f096:	10 91 34 09 	lds	r17, 0x0934	; 0x800934 <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    f09a:	66 e3       	ldi	r22, 0x36	; 54
    f09c:	79 e0       	ldi	r23, 0x09	; 9
    f09e:	ce 01       	movw	r24, r28
    f0a0:	01 96       	adiw	r24, 0x01	; 1
    f0a2:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5340
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    f0a6:	89 81       	ldd	r24, Y+1	; 0x01
    f0a8:	88 23       	and	r24, r24
    f0aa:	81 f0       	breq	.+32     	; 0xf0cc <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5341
    if (remote_tds_name_exist(name) == 255)
    f0ac:	ce 01       	movw	r24, r28
    f0ae:	01 96       	adiw	r24, 0x01	; 1
    f0b0:	0e 94 a1 77 	call	0xef42	; 0xef42 <remote_tds_name_exist(char*)>
    f0b4:	8f 3f       	cpi	r24, 0xFF	; 255
    f0b6:	51 f4       	brne	.+20     	; 0xf0cc <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5343
    {
      remote_tds_set_complete(idx, active, name);
    f0b8:	ae 01       	movw	r20, r28
    f0ba:	4f 5f       	subi	r20, 0xFF	; 255
    f0bc:	5f 4f       	sbci	r21, 0xFF	; 255
    f0be:	61 e0       	ldi	r22, 0x01	; 1
    f0c0:	81 2f       	mov	r24, r17
    f0c2:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5344
      remote_tds_subscibe_topic(idx);
    f0c6:	81 2f       	mov	r24, r17
    f0c8:	0e 94 03 78 	call	0xf006	; 0xf006 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5346
    }
}
    f0cc:	62 96       	adiw	r28, 0x12	; 18
    f0ce:	0f b6       	in	r0, 0x3f	; 63
    f0d0:	f8 94       	cli
    f0d2:	de bf       	out	0x3e, r29	; 62
    f0d4:	0f be       	out	0x3f, r0	; 63
    f0d6:	cd bf       	out	0x3d, r28	; 61
    f0d8:	df 91       	pop	r29
    f0da:	cf 91       	pop	r28
    f0dc:	1f 91       	pop	r17
    f0de:	08 95       	ret

0000f0e0 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5227
  remote_tds_clear(args2);
  MenuHistoryPrevMenu(0, 0, 0);
}
////
void click_rtds_subscribe(uint16_t args1, uint16_t idx, uint8_t args3)
{
    f0e0:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5229
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    f0e2:	0c 94 03 78 	jmp	0xf006	; 0xf006 <remote_tds_subscibe_topic(unsigned char)>

0000f0e6 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    f0e6:	2f 92       	push	r2
    f0e8:	3f 92       	push	r3
    f0ea:	4f 92       	push	r4
    f0ec:	5f 92       	push	r5
    f0ee:	6f 92       	push	r6
    f0f0:	7f 92       	push	r7
    f0f2:	8f 92       	push	r8
    f0f4:	9f 92       	push	r9
    f0f6:	af 92       	push	r10
    f0f8:	bf 92       	push	r11
    f0fa:	cf 92       	push	r12
    f0fc:	df 92       	push	r13
    f0fe:	ef 92       	push	r14
    f100:	ff 92       	push	r15
    f102:	0f 93       	push	r16
    f104:	1f 93       	push	r17
    f106:	cf 93       	push	r28
    f108:	df 93       	push	r29
    f10a:	cd b7       	in	r28, 0x3d	; 61
    f10c:	de b7       	in	r29, 0x3e	; 62
    f10e:	cf 53       	subi	r28, 0x3F	; 63
    f110:	d1 40       	sbci	r29, 0x01	; 1
    f112:	0f b6       	in	r0, 0x3f	; 63
    f114:	f8 94       	cli
    f116:	de bf       	out	0x3e, r29	; 62
    f118:	0f be       	out	0x3f, r0	; 63
    f11a:	cd bf       	out	0x3d, r28	; 61
    f11c:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    f11e:	1b 82       	std	Y+3, r1	; 0x03
    f120:	80 ec       	ldi	r24, 0xC0	; 192
    f122:	93 e0       	ldi	r25, 0x03	; 3
    f124:	9d 83       	std	Y+5, r25	; 0x05
    f126:	8c 83       	std	Y+4, r24	; 0x04
    f128:	89 e3       	ldi	r24, 0x39	; 57
    f12a:	95 e0       	ldi	r25, 0x05	; 5
    f12c:	9f 83       	std	Y+7, r25	; 0x07
    f12e:	8e 83       	std	Y+6, r24	; 0x06
    f130:	18 86       	std	Y+8, r1	; 0x08
    f132:	19 86       	std	Y+9, r1	; 0x09
    f134:	1a 86       	std	Y+10, r1	; 0x0a
    f136:	1b 86       	std	Y+11, r1	; 0x0b
    f138:	80 e6       	ldi	r24, 0x60	; 96
    f13a:	9a ee       	ldi	r25, 0xEA	; 234
    f13c:	a0 e0       	ldi	r26, 0x00	; 0
    f13e:	b0 e0       	ldi	r27, 0x00	; 0
    f140:	8c 87       	std	Y+12, r24	; 0x0c
    f142:	9d 87       	std	Y+13, r25	; 0x0d
    f144:	ae 87       	std	Y+14, r26	; 0x0e
    f146:	bf 87       	std	Y+15, r27	; 0x0f
    f148:	18 8a       	std	Y+16, r1	; 0x10
    f14a:	19 8a       	std	Y+17, r1	; 0x11
    f14c:	1a 8a       	std	Y+18, r1	; 0x12
    f14e:	1b 8a       	std	Y+19, r1	; 0x13
    f150:	1c 8a       	std	Y+20, r1	; 0x14
    f152:	1d 8a       	std	Y+21, r1	; 0x15
    f154:	1e 8a       	std	Y+22, r1	; 0x16
    f156:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    f158:	88 eb       	ldi	r24, 0xB8	; 184
    f15a:	90 e1       	ldi	r25, 0x10	; 16
    f15c:	9a 83       	std	Y+2, r25	; 0x02
    f15e:	89 83       	std	Y+1, r24	; 0x01
    f160:	ef e4       	ldi	r30, 0x4F	; 79
    f162:	fb e0       	ldi	r31, 0x0B	; 11
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    f164:	80 e0       	ldi	r24, 0x00	; 0
    f166:	11 92       	st	Z+, r1
    f168:	8f 5f       	subi	r24, 0xFF	; 255
    f16a:	80 38       	cpi	r24, 0x80	; 128
    f16c:	e1 f7       	brne	.-8      	; 0xf166 <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    f16e:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <mqtt_receive_message>
    f172:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <mqtt_receive_message+0x1>
    f176:	01 96       	adiw	r24, 0x01	; 1
    f178:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <mqtt_receive_message+0x1>
    f17c:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2893
  strncpy(my_payload, (char*) payload, length);
    f180:	8f e4       	ldi	r24, 0x4F	; 79
    f182:	9b e0       	ldi	r25, 0x0B	; 11
    f184:	0e 94 8f d0 	call	0x1a11e	; 0x1a11e <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2896
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    f188:	5e 01       	movw	r10, r28
    f18a:	28 ec       	ldi	r18, 0xC8	; 200
    f18c:	a2 0e       	add	r10, r18
    f18e:	b1 1c       	adc	r11, r1
    f190:	66 ef       	ldi	r22, 0xF6	; 246
    f192:	77 e5       	ldi	r23, 0x57	; 87
    f194:	c5 01       	movw	r24, r10
    f196:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897
  if (strcmp(str1, topic) == 0)
    f19a:	b4 01       	movw	r22, r8
    f19c:	c5 01       	movw	r24, r10
    f19e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f1a2:	89 2b       	or	r24, r25
    f1a4:	49 f4       	brne	.+18     	; 0xf1b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2899
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    f1a6:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f1aa:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f1ae:	01 96       	adiw	r24, 0x01	; 1
    f1b0:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f1b4:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2902
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    f1b8:	6d e0       	ldi	r22, 0x0D	; 13
    f1ba:	78 e5       	ldi	r23, 0x58	; 88
    f1bc:	c5 01       	movw	r24, r10
    f1be:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2903
  if (strcmp(str1, topic) == 0)
    f1c2:	b4 01       	movw	r22, r8
    f1c4:	c5 01       	movw	r24, r10
    f1c6:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f1ca:	89 2b       	or	r24, r25
    f1cc:	49 f4       	brne	.+18     	; 0xf1e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2905
  {
    mqtt_process_message++;
    f1ce:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f1d2:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f1d6:	01 96       	adiw	r24, 0x01	; 1
    f1d8:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f1dc:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2911
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    f1e0:	64 e3       	ldi	r22, 0x34	; 52
    f1e2:	78 e5       	ldi	r23, 0x58	; 88
    f1e4:	c5 01       	movw	r24, r10
    f1e6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2912
  strcat_P(str1, global_time_set);
    f1ea:	68 ed       	ldi	r22, 0xD8	; 216
    f1ec:	77 e5       	ldi	r23, 0x57	; 87
    f1ee:	c5 01       	movw	r24, r10
    f1f0:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2913
  if (strcmp(str1, topic) == 0)
    f1f4:	b4 01       	movw	r22, r8
    f1f6:	c5 01       	movw	r24, r10
    f1f8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f1fc:	89 2b       	or	r24, r25
    f1fe:	09 f0       	breq	.+2      	; 0xf202 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    f200:	bb c0       	rjmp	.+374    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  {
    mqtt_process_message++;
    f202:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f206:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f20a:	01 96       	adiw	r24, 0x01	; 1
    f20c:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f210:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    f214:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    f218:	8f e4       	ldi	r24, 0x4F	; 79
    f21a:	9b e0       	ldi	r25, 0x0B	; 11
    f21c:	89 2b       	or	r24, r25
    f21e:	09 f0       	breq	.+2      	; 0xf222 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    f220:	6e c1       	rjmp	.+732    	; 0xf4fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x418>
_Z13mqtt_callbackPcPhj():
    f222:	82 ef       	ldi	r24, 0xF2	; 242
    f224:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    f226:	47 e1       	ldi	r20, 0x17	; 23
    f228:	5d e0       	ldi	r21, 0x0D	; 13
    f22a:	2a 96       	adiw	r28, 0x0a	; 10
    f22c:	5f af       	std	Y+63, r21	; 0x3f
    f22e:	4e af       	std	Y+62, r20	; 0x3e
    f230:	2a 97       	sbiw	r28, 0x0a	; 10
    f232:	2c 96       	adiw	r28, 0x0c	; 12
    f234:	9f af       	std	Y+63, r25	; 0x3f
    f236:	8e af       	std	Y+62, r24	; 0x3e
    f238:	2c 97       	sbiw	r28, 0x0c	; 12
    f23a:	8f e4       	ldi	r24, 0x4F	; 79
    f23c:	9b e0       	ldi	r25, 0x0B	; 11
    f23e:	2e 96       	adiw	r28, 0x0e	; 14
    f240:	9f af       	std	Y+63, r25	; 0x3f
    f242:	8e af       	std	Y+62, r24	; 0x3e
    f244:	2e 97       	sbiw	r28, 0x0e	; 14
    f246:	2f 96       	adiw	r28, 0x0f	; 15
    f248:	2f af       	std	Y+63, r18	; 0x3f
    f24a:	2f 97       	sbiw	r28, 0x0f	; 15
    f24c:	61 96       	adiw	r28, 0x11	; 17
    f24e:	1f ae       	std	Y+63, r1	; 0x3f
    f250:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    f252:	10 92 1e 0d 	sts	0x0D1E, r1	; 0x800d1e <doc+0x8>
    f256:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    f25a:	8f e1       	ldi	r24, 0x1F	; 31
    f25c:	9e e0       	ldi	r25, 0x0E	; 14
    f25e:	89 2b       	or	r24, r25
    f260:	09 f4       	brne	.+2      	; 0xf264 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    f262:	50 c1       	rjmp	.+672    	; 0xf504 <mqtt_callback(char*, unsigned char*, unsigned int)+0x41e>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    f264:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <doc+0x10a>
    f268:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    f26c:	ca 01       	movw	r24, r20
    f26e:	ac 01       	movw	r20, r24
    f270:	6f e1       	ldi	r22, 0x1F	; 31
    f272:	7e e0       	ldi	r23, 0x0E	; 14
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    f274:	ce 01       	movw	r24, r28
    f276:	88 5b       	subi	r24, 0xB8	; 184
    f278:	9f 4f       	sbci	r25, 0xFF	; 255
    f27a:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    f27e:	8f e1       	ldi	r24, 0x1F	; 31
    f280:	9e e0       	ldi	r25, 0x0E	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    f282:	0f e1       	ldi	r16, 0x1F	; 31
    f284:	1e e0       	ldi	r17, 0x0E	; 14
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    f286:	89 2b       	or	r24, r25
    f288:	51 f0       	breq	.+20     	; 0xf29e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    f28a:	80 91 1f 0e 	lds	r24, 0x0E1F	; 0x800e1f <doc+0x109>
    f28e:	90 91 20 0e 	lds	r25, 0x0E20	; 0x800e20 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    f292:	01 e2       	ldi	r16, 0x21	; 33
    f294:	1e e0       	ldi	r17, 0x0E	; 14
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    f296:	09 97       	sbiw	r24, 0x09	; 9
    f298:	11 f0       	breq	.+4      	; 0xf29e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    f29a:	10 e0       	ldi	r17, 0x00	; 0
    f29c:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    f29e:	66 ef       	ldi	r22, 0xF6	; 246
    f2a0:	73 e0       	ldi	r23, 0x03	; 3
    f2a2:	c8 01       	movw	r24, r16
    f2a4:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
    f2a8:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    f2aa:	89 2b       	or	r24, r25
    f2ac:	09 f4       	brne	.+2      	; 0xf2b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    f2ae:	64 c0       	rjmp	.+200    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f2b0:	6b ef       	ldi	r22, 0xFB	; 251
    f2b2:	73 e0       	ldi	r23, 0x03	; 3
    f2b4:	c8 01       	movw	r24, r16
    f2b6:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
    f2ba:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    f2bc:	89 2b       	or	r24, r25
    f2be:	09 f4       	brne	.+2      	; 0xf2c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    f2c0:	5b c0       	rjmp	.+182    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f2c2:	61 e0       	ldi	r22, 0x01	; 1
    f2c4:	74 e0       	ldi	r23, 0x04	; 4
    f2c6:	c8 01       	movw	r24, r16
    f2c8:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
    f2cc:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    f2ce:	89 2b       	or	r24, r25
    f2d0:	09 f4       	brne	.+2      	; 0xf2d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    f2d2:	52 c0       	rjmp	.+164    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f2d4:	66 e0       	ldi	r22, 0x06	; 6
    f2d6:	74 e0       	ldi	r23, 0x04	; 4
    f2d8:	c8 01       	movw	r24, r16
    f2da:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
    f2de:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    f2e0:	89 2b       	or	r24, r25
    f2e2:	09 f4       	brne	.+2      	; 0xf2e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    f2e4:	49 c0       	rjmp	.+146    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f2e6:	6d e0       	ldi	r22, 0x0D	; 13
    f2e8:	74 e0       	ldi	r23, 0x04	; 4
    f2ea:	c8 01       	movw	r24, r16
    f2ec:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    f2f0:	00 97       	sbiw	r24, 0x00	; 0
    f2f2:	09 f4       	brne	.+2      	; 0xf2f6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    f2f4:	41 c0       	rjmp	.+130    	; 0xf378 <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    f2f6:	0e 94 23 b5 	call	0x16a46	; 0x16a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f2fa:	38 2e       	mov	r3, r24
    f2fc:	c6 01       	movw	r24, r12
    f2fe:	0e 94 23 b5 	call	0x16a46	; 0x16a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f302:	d8 2e       	mov	r13, r24
    f304:	c3 01       	movw	r24, r6
    f306:	0e 94 23 b5 	call	0x16a46	; 0x16a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f30a:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    f30c:	64 e1       	ldi	r22, 0x14	; 20
    f30e:	74 e0       	ldi	r23, 0x04	; 4
    f310:	c8 01       	movw	r24, r16
    f312:	0e 94 bc 3b 	call	0x7778	; 0x7778 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.37]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    f316:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    f318:	00 97       	sbiw	r24, 0x00	; 0
    f31a:	19 f0       	breq	.+6      	; 0xf322 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    f31c:	0e 94 23 b5 	call	0x16a46	; 0x16a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f320:	18 2f       	mov	r17, r24
    f322:	c2 01       	movw	r24, r4
    f324:	0e 94 23 b5 	call	0x16a46	; 0x16a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    f328:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    f32a:	d7 01       	movw	r26, r14
    f32c:	8d 91       	ld	r24, X+
    f32e:	9c 91       	ld	r25, X
    f330:	11 97       	sbiw	r26, 0x01	; 1
    f332:	87 30       	cpi	r24, 0x07	; 7
    f334:	91 05       	cpc	r25, r1
    f336:	08 f0       	brcs	.+2      	; 0xf33a <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    f338:	e8 c0       	rjmp	.+464    	; 0xf50a <mqtt_callback(char*, unsigned char*, unsigned int)+0x424>
    f33a:	85 30       	cpi	r24, 0x05	; 5
    f33c:	91 05       	cpc	r25, r1
    f33e:	08 f0       	brcs	.+2      	; 0xf342 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    f340:	f2 c0       	rjmp	.+484    	; 0xf526 <mqtt_callback(char*, unsigned char*, unsigned int)+0x440>
    f342:	03 97       	sbiw	r24, 0x03	; 3
    f344:	08 f0       	brcs	.+2      	; 0xf348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    f346:	01 c1       	rjmp	.+514    	; 0xf54a <mqtt_callback(char*, unsigned char*, unsigned int)+0x464>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    f348:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    f34a:	29 96       	adiw	r28, 0x09	; 9
    f34c:	6f af       	std	Y+63, r22	; 0x3f
    f34e:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    f350:	2a 96       	adiw	r28, 0x0a	; 10
    f352:	0f af       	std	Y+63, r16	; 0x3f
    f354:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    f356:	2b 96       	adiw	r28, 0x0b	; 11
    f358:	1f af       	std	Y+63, r17	; 0x3f
    f35a:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    f35c:	2c 96       	adiw	r28, 0x0c	; 12
    f35e:	cf ae       	std	Y+63, r12	; 0x3f
    f360:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    f362:	2d 96       	adiw	r28, 0x0d	; 13
    f364:	df ae       	std	Y+63, r13	; 0x3f
    f366:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    f368:	2e 96       	adiw	r28, 0x0e	; 14
    f36a:	3f ae       	std	Y+63, r3	; 0x3f
    f36c:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    f36e:	ce 01       	movw	r24, r28
    f370:	88 5b       	subi	r24, 0xB8	; 184
    f372:	9f 4f       	sbci	r25, 0xFF	; 255
    f374:	0e 94 58 aa 	call	0x154b0	; 0x154b0 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    f378:	64 e3       	ldi	r22, 0x34	; 52
    f37a:	78 e5       	ldi	r23, 0x58	; 88
    f37c:	c5 01       	movw	r24, r10
    f37e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2923
  strcat_P(str1, global_time_ntp);
    f382:	68 ec       	ldi	r22, 0xC8	; 200
    f384:	77 e5       	ldi	r23, 0x57	; 87
    f386:	c5 01       	movw	r24, r10
    f388:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
  if (strcmp(str1, topic) == 0)
    f38c:	b4 01       	movw	r22, r8
    f38e:	c5 01       	movw	r24, r10
    f390:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f394:	89 2b       	or	r24, r25
    f396:	d1 f4       	brne	.+52     	; 0xf3cc <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2926
  {
    mqtt_process_message++;
    f398:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f39c:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f3a0:	01 96       	adiw	r24, 0x01	; 1
    f3a2:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f3a6:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f3aa:	81 e0       	ldi	r24, 0x01	; 1
    f3ac:	90 e0       	ldi	r25, 0x00	; 0
    f3ae:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    f3b2:	68 2f       	mov	r22, r24
    f3b4:	ce 01       	movw	r24, r28
    f3b6:	01 96       	adiw	r24, 0x01	; 1
    f3b8:	0e 94 18 af 	call	0x15e30	; 0x15e30 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]>
    f3bc:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <selftest_data>
    f3c0:	81 30       	cpi	r24, 0x01	; 1
    f3c2:	09 f0       	breq	.+2      	; 0xf3c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e0>
    f3c4:	ef c0       	rjmp	.+478    	; 0xf5a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4be>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f3c6:	9d 7f       	andi	r25, 0xFD	; 253
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f3c8:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    f3cc:	64 e3       	ldi	r22, 0x34	; 52
    f3ce:	78 e5       	ldi	r23, 0x58	; 88
    f3d0:	c5 01       	movw	r24, r10
    f3d2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
  strcat_P(str1, global_time_offset);
    f3d6:	61 eb       	ldi	r22, 0xB1	; 177
    f3d8:	77 e5       	ldi	r23, 0x57	; 87
    f3da:	c5 01       	movw	r24, r10
    f3dc:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
  if (strcmp(str1, topic) == 0)
    f3e0:	b4 01       	movw	r22, r8
    f3e2:	c5 01       	movw	r24, r10
    f3e4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f3e8:	89 2b       	or	r24, r25
    f3ea:	91 f4       	brne	.+36     	; 0xf410 <mqtt_callback(char*, unsigned char*, unsigned int)+0x32a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
  {
    mqtt_process_message++;
    f3ec:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f3f0:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f3f4:	01 96       	adiw	r24, 0x01	; 1
    f3f6:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f3fa:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
    time_set_offset(atoi(my_payload));
    f3fe:	8f e4       	ldi	r24, 0x4F	; 79
    f400:	9b e0       	ldi	r25, 0x0B	; 11
    f402:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    f406:	68 2f       	mov	r22, r24
    f408:	81 e0       	ldi	r24, 0x01	; 1
    f40a:	90 e0       	ldi	r25, 0x00	; 0
    f40c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    f410:	64 e3       	ldi	r22, 0x34	; 52
    f412:	78 e5       	ldi	r23, 0x58	; 88
    f414:	c5 01       	movw	r24, r10
    f416:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
  strcat(str1, device.nazev);
    f41a:	6e eb       	ldi	r22, 0xBE	; 190
    f41c:	7c e0       	ldi	r23, 0x0C	; 12
    f41e:	c5 01       	movw	r24, r10
    f420:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
  strcat(str1, "/tds/associate");
    f424:	68 e1       	ldi	r22, 0x18	; 24
    f426:	74 e0       	ldi	r23, 0x04	; 4
    f428:	c5 01       	movw	r24, r10
    f42a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
  if (strcmp(str1, topic) == 0)
    f42e:	b4 01       	movw	r22, r8
    f430:	c5 01       	movw	r24, r10
    f432:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    f436:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    f438:	89 2b       	or	r24, r25
    f43a:	b1 f4       	brne	.+44     	; 0xf468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x382>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2947
  {
    mqtt_process_message++;
    f43c:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f440:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f444:	01 96       	adiw	r24, 0x01	; 1
    f446:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f44a:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
    id = atoi(my_payload);
    f44e:	8f e4       	ldi	r24, 0x4F	; 79
    f450:	9b e0       	ldi	r25, 0x0B	; 11
    f452:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f456:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2949
    if (tds_associate(id) == 255)
    f458:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <tds_associate(unsigned char)>
    f45c:	8f 3f       	cpi	r24, 0xFF	; 255
    f45e:	21 f4       	brne	.+8      	; 0xf468 <mqtt_callback(char*, unsigned char*, unsigned int)+0x382>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
      log_error(&mqtt_client, "tds/associate full or bad id");
    f460:	87 e2       	ldi	r24, 0x27	; 39
    f462:	94 e0       	ldi	r25, 0x04	; 4
    f464:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2956
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    f468:	64 e3       	ldi	r22, 0x34	; 52
    f46a:	78 e5       	ldi	r23, 0x58	; 88
    f46c:	c5 01       	movw	r24, r10
    f46e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2957
  strcat(str1, device.nazev);
    f472:	6e eb       	ldi	r22, 0xBE	; 190
    f474:	7c e0       	ldi	r23, 0x0C	; 12
    f476:	c5 01       	movw	r24, r10
    f478:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
  strcat(str1, "/tds/set/");
    f47c:	64 e4       	ldi	r22, 0x44	; 68
    f47e:	74 e0       	ldi	r23, 0x04	; 4
    f480:	c5 01       	movw	r24, r10
    f482:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f486:	f5 01       	movw	r30, r10
    f488:	01 90       	ld	r0, Z+
    f48a:	00 20       	and	r0, r0
    f48c:	e9 f7       	brne	.-6      	; 0xf488 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3a2>
    f48e:	31 97       	sbiw	r30, 0x01	; 1
    f490:	af 01       	movw	r20, r30
    f492:	4a 19       	sub	r20, r10
    f494:	5b 09       	sbc	r21, r11
    f496:	b4 01       	movw	r22, r8
    f498:	c5 01       	movw	r24, r10
    f49a:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f49e:	89 2b       	or	r24, r25
    f4a0:	09 f0       	breq	.+2      	; 0xf4a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3be>
    f4a2:	02 c1       	rjmp	.+516    	; 0xf6a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2961
  {
    mqtt_process_message++;
    f4a4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f4a8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f4ac:	01 96       	adiw	r24, 0x01	; 1
    f4ae:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f4b2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f4b6:	f5 01       	movw	r30, r10
    f4b8:	01 90       	ld	r0, Z+
    f4ba:	00 20       	and	r0, r0
    f4bc:	e9 f7       	brne	.-6      	; 0xf4b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3d2>
    f4be:	31 97       	sbiw	r30, 0x01	; 1
    f4c0:	ea 19       	sub	r30, r10
    f4c2:	fb 09       	sbc	r31, r11
    f4c4:	9e 2f       	mov	r25, r30
    f4c6:	4e 2f       	mov	r20, r30
    f4c8:	84 2f       	mov	r24, r20
    f4ca:	89 1b       	sub	r24, r25
    f4cc:	24 2f       	mov	r18, r20
    f4ce:	30 e0       	ldi	r19, 0x00	; 0
    f4d0:	d4 01       	movw	r26, r8
    f4d2:	0d 90       	ld	r0, X+
    f4d4:	00 20       	and	r0, r0
    f4d6:	e9 f7       	brne	.-6      	; 0xf4d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ec>
    f4d8:	11 97       	sbiw	r26, 0x01	; 1
    f4da:	a8 19       	sub	r26, r8
    f4dc:	b9 09       	sbc	r27, r9
    f4de:	2a 17       	cp	r18, r26
    f4e0:	3b 07       	cpc	r19, r27
    f4e2:	08 f0       	brcs	.+2      	; 0xf4e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x400>
    f4e4:	61 c0       	rjmp	.+194    	; 0xf5a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
    {
      str1[cnt] = topic[f];
    f4e6:	d5 01       	movw	r26, r10
    f4e8:	a8 0f       	add	r26, r24
    f4ea:	b1 1d       	adc	r27, r1
    f4ec:	28 0d       	add	r18, r8
    f4ee:	39 1d       	adc	r19, r9
    f4f0:	f9 01       	movw	r30, r18
    f4f2:	80 81       	ld	r24, Z
    f4f4:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
      str1[cnt + 1] = 0;
    f4f6:	11 96       	adiw	r26, 0x01	; 1
    f4f8:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2963
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f4fa:	4f 5f       	subi	r20, 0xFF	; 255
    f4fc:	e5 cf       	rjmp	.-54     	; 0xf4c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3e2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    f4fe:	8f e4       	ldi	r24, 0x4F	; 79
    f500:	9b e0       	ldi	r25, 0x0B	; 11
    f502:	91 ce       	rjmp	.-734    	; 0xf226 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    f504:	8f e1       	ldi	r24, 0x1F	; 31
    f506:	9e e0       	ldi	r25, 0x0E	; 14
    f508:	b2 ce       	rjmp	.-668    	; 0xf26e <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    f50a:	87 30       	cpi	r24, 0x07	; 7
    f50c:	91 05       	cpc	r25, r1
    f50e:	b1 f0       	breq	.+44     	; 0xf53c <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
    f510:	0a 97       	sbiw	r24, 0x0a	; 10
    f512:	09 f0       	breq	.+2      	; 0xf516 <mqtt_callback(char*, unsigned char*, unsigned int)+0x430>
    f514:	19 cf       	rjmp	.-462    	; 0xf348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    f516:	f7 01       	movw	r30, r14
    f518:	62 81       	ldd	r22, Z+2	; 0x02
    f51a:	73 81       	ldd	r23, Z+3	; 0x03
    f51c:	84 81       	ldd	r24, Z+4	; 0x04
    f51e:	95 81       	ldd	r25, Z+5	; 0x05
    f520:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <__fixunssfsi>
    f524:	03 c0       	rjmp	.+6      	; 0xf52c <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    f526:	f7 01       	movw	r30, r14
    f528:	62 81       	ldd	r22, Z+2	; 0x02
    f52a:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    f52c:	60 3d       	cpi	r22, 0xD0	; 208
    f52e:	f7 e0       	ldi	r31, 0x07	; 7
    f530:	7f 07       	cpc	r23, r31
    f532:	08 f4       	brcc	.+2      	; 0xf536 <mqtt_callback(char*, unsigned char*, unsigned int)+0x450>
    f534:	0a cf       	rjmp	.-492    	; 0xf34a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    f536:	60 5d       	subi	r22, 0xD0	; 208
    f538:	77 40       	sbci	r23, 0x07	; 7
    f53a:	07 cf       	rjmp	.-498    	; 0xf34a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    f53c:	12 96       	adiw	r26, 0x02	; 2
    f53e:	6d 91       	ld	r22, X+
    f540:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f542:	71 95       	neg	r23
    f544:	61 95       	neg	r22
    f546:	71 09       	sbc	r23, r1
    f548:	f1 cf       	rjmp	.-30     	; 0xf52c <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    f54a:	12 96       	adiw	r26, 0x02	; 2
    f54c:	ed 91       	ld	r30, X+
    f54e:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    f550:	30 97       	sbiw	r30, 0x00	; 0
    f552:	09 f4       	brne	.+2      	; 0xf556 <mqtt_callback(char*, unsigned char*, unsigned int)+0x470>
    f554:	f9 ce       	rjmp	.-526    	; 0xf348 <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    f556:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    f558:	61 e0       	ldi	r22, 0x01	; 1
    f55a:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    f55c:	84 37       	cpi	r24, 0x74	; 116
    f55e:	09 f4       	brne	.+2      	; 0xf562 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47c>
    f560:	f4 ce       	rjmp	.-536    	; 0xf34a <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    f562:	8b 32       	cpi	r24, 0x2B	; 43
    f564:	c9 f0       	breq	.+50     	; 0xf598 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b2>
    f566:	8d 32       	cpi	r24, 0x2D	; 45
    f568:	c1 f4       	brne	.+48     	; 0xf59a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b4>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    f56a:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    f56c:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    f56e:	70 e0       	ldi	r23, 0x00	; 0
    f570:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    f572:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    f574:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    f576:	20 ed       	ldi	r18, 0xD0	; 208
    f578:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    f57a:	2a 30       	cpi	r18, 0x0A	; 10
    f57c:	80 f4       	brcc	.+32     	; 0xf59e <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    f57e:	46 9f       	mul	r20, r22
    f580:	90 01       	movw	r18, r0
    f582:	47 9f       	mul	r20, r23
    f584:	30 0d       	add	r19, r0
    f586:	11 24       	eor	r1, r1
    f588:	b9 01       	movw	r22, r18
    f58a:	60 53       	subi	r22, 0x30	; 48
    f58c:	71 09       	sbc	r23, r1
    f58e:	69 0f       	add	r22, r25
    f590:	71 1d       	adc	r23, r1
    f592:	97 fd       	sbrc	r25, 7
    f594:	7a 95       	dec	r23
    f596:	ee cf       	rjmp	.-36     	; 0xf574 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    f598:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    f59a:	80 e0       	ldi	r24, 0x00	; 0
    f59c:	e8 cf       	rjmp	.-48     	; 0xf56e <mqtt_callback(char*, unsigned char*, unsigned int)+0x488>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    f59e:	81 11       	cpse	r24, r1
    f5a0:	d0 cf       	rjmp	.-96     	; 0xf542 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45c>
    f5a2:	c4 cf       	rjmp	.-120    	; 0xf52c <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f5a4:	92 60       	ori	r25, 0x02	; 2
    f5a6:	10 cf       	rjmp	.-480    	; 0xf3c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e2>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f5a8:	64 ef       	ldi	r22, 0xF4	; 244
    f5aa:	73 e0       	ldi	r23, 0x03	; 3
    f5ac:	c5 01       	movw	r24, r10
    f5ae:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    f5b2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f5b4:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    f5b6:	f8 e4       	ldi	r31, 0x48	; 72
    f5b8:	cf 2e       	mov	r12, r31
    f5ba:	d1 2c       	mov	r13, r1
    f5bc:	cc 0e       	add	r12, r28
    f5be:	dd 1e       	adc	r13, r29
    f5c0:	fc e0       	ldi	r31, 0x0C	; 12
    f5c2:	cf 0e       	add	r12, r31
    f5c4:	d1 1c       	adc	r13, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
    pch = strtok (str1, "/");
    while (pch != NULL)
    f5c6:	01 15       	cp	r16, r1
    f5c8:	11 05       	cpc	r17, r1
    f5ca:	09 f4       	brne	.+2      	; 0xf5ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x4e8>
    f5cc:	6d c0       	rjmp	.+218    	; 0xf6a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2973
    {
      if (cnt == 0) id = atoi(pch);
    f5ce:	61 10       	cpse	r6, r1
    f5d0:	0d c0       	rjmp	.+26     	; 0xf5ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
    f5d2:	c8 01       	movw	r24, r16
    f5d4:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f5d8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
      if (id < HW_ONEWIRE_MAXROMS)
    f5da:	25 e0       	ldi	r18, 0x05	; 5
    f5dc:	28 17       	cp	r18, r24
    f5de:	08 f0       	brcs	.+2      	; 0xf5e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4fc>
    f5e0:	5a c0       	rjmp	.+180    	; 0xf696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    f5e2:	85 e8       	ldi	r24, 0x85	; 133
    f5e4:	94 e0       	ldi	r25, 0x04	; 4
    f5e6:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
    f5ea:	55 c0       	rjmp	.+170    	; 0xf696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    f5ec:	85 e0       	ldi	r24, 0x05	; 5
    f5ee:	87 15       	cp	r24, r7
    f5f0:	c0 f3       	brcs	.-16     	; 0xf5e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    f5f2:	91 e0       	ldi	r25, 0x01	; 1
    f5f4:	69 12       	cpse	r6, r25
    f5f6:	4f c0       	rjmp	.+158    	; 0xf696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
    f5f8:	6d ec       	ldi	r22, 0xCD	; 205
    f5fa:	73 e0       	ldi	r23, 0x03	; 3
    f5fc:	c8 01       	movw	r24, r16
    f5fe:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f602:	89 2b       	or	r24, r25
    f604:	89 f4       	brne	.+34     	; 0xf628 <mqtt_callback(char*, unsigned char*, unsigned int)+0x542>
tds_set_name():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f606:	be 01       	movw	r22, r28
    f608:	68 5b       	subi	r22, 0xB8	; 184
    f60a:	7f 4f       	sbci	r23, 0xFF	; 255
    f60c:	87 2d       	mov	r24, r7
    f60e:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    f612:	6f e4       	ldi	r22, 0x4F	; 79
    f614:	7b e0       	ldi	r23, 0x0B	; 11
    f616:	c6 01       	movw	r24, r12
    f618:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    f61c:	be 01       	movw	r22, r28
    f61e:	68 5b       	subi	r22, 0xB8	; 184
    f620:	7f 4f       	sbci	r23, 0xFF	; 255
    f622:	87 2d       	mov	r24, r7
    f624:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    f628:	64 ed       	ldi	r22, 0xD4	; 212
    f62a:	77 e0       	ldi	r23, 0x07	; 7
    f62c:	c8 01       	movw	r24, r16
    f62e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f632:	89 2b       	or	r24, r25
    f634:	a9 f4       	brne	.+42     	; 0xf660 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
    f636:	8f e4       	ldi	r24, 0x4F	; 79
    f638:	9b e0       	ldi	r25, 0x0B	; 11
    f63a:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f63e:	7c 01       	movw	r14, r24
tds_set_offset():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f640:	be 01       	movw	r22, r28
    f642:	68 5b       	subi	r22, 0xB8	; 184
    f644:	7f 4f       	sbci	r23, 0xFF	; 255
    f646:	87 2d       	mov	r24, r7
    f648:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    f64c:	64 96       	adiw	r28, 0x14	; 20
    f64e:	ff ae       	std	Y+63, r15	; 0x3f
    f650:	ee ae       	std	Y+62, r14	; 0x3e
    f652:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    f654:	be 01       	movw	r22, r28
    f656:	68 5b       	subi	r22, 0xB8	; 184
    f658:	7f 4f       	sbci	r23, 0xFF	; 255
    f65a:	87 2d       	mov	r24, r7
    f65c:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    f660:	64 e4       	ldi	r22, 0x44	; 68
    f662:	76 e0       	ldi	r23, 0x06	; 6
    f664:	c8 01       	movw	r24, r16
    f666:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f66a:	89 2b       	or	r24, r25
    f66c:	a1 f4       	brne	.+40     	; 0xf696 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
    f66e:	8f e4       	ldi	r24, 0x4F	; 79
    f670:	9b e0       	ldi	r25, 0x0B	; 11
    f672:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f676:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f678:	be 01       	movw	r22, r28
    f67a:	68 5b       	subi	r22, 0xB8	; 184
    f67c:	7f 4f       	sbci	r23, 0xFF	; 255
    f67e:	87 2d       	mov	r24, r7
    f680:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
    f684:	6d 96       	adiw	r28, 0x1d	; 29
    f686:	1f af       	std	Y+63, r17	; 0x3f
    f688:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    f68a:	be 01       	movw	r22, r28
    f68c:	68 5b       	subi	r22, 0xB8	; 184
    f68e:	7f 4f       	sbci	r23, 0xFF	; 255
    f690:	87 2d       	mov	r24, r7
    f692:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    f696:	64 ef       	ldi	r22, 0xF4	; 244
    f698:	73 e0       	ldi	r23, 0x03	; 3
    f69a:	90 e0       	ldi	r25, 0x00	; 0
    f69c:	80 e0       	ldi	r24, 0x00	; 0
    f69e:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    f6a2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
      cnt++;
    f6a4:	63 94       	inc	r6
    f6a6:	8f cf       	rjmp	.-226    	; 0xf5c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    f6a8:	64 e3       	ldi	r22, 0x34	; 52
    f6aa:	78 e5       	ldi	r23, 0x58	; 88
    f6ac:	c5 01       	movw	r24, r10
    f6ae:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
  strcat(str1, device.nazev);
    f6b2:	6e eb       	ldi	r22, 0xBE	; 190
    f6b4:	7c e0       	ldi	r23, 0x0C	; 12
    f6b6:	c5 01       	movw	r24, r10
    f6b8:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
  strcat(str1, "/tds/clear");
    f6bc:	6e e4       	ldi	r22, 0x4E	; 78
    f6be:	74 e0       	ldi	r23, 0x04	; 4
    f6c0:	c5 01       	movw	r24, r10
    f6c2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f6c6:	f5 01       	movw	r30, r10
    f6c8:	01 90       	ld	r0, Z+
    f6ca:	00 20       	and	r0, r0
    f6cc:	e9 f7       	brne	.-6      	; 0xf6c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e2>
    f6ce:	31 97       	sbiw	r30, 0x01	; 1
    f6d0:	af 01       	movw	r20, r30
    f6d2:	4a 19       	sub	r20, r10
    f6d4:	5b 09       	sbc	r21, r11
    f6d6:	b4 01       	movw	r22, r8
    f6d8:	c5 01       	movw	r24, r10
    f6da:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f6de:	89 2b       	or	r24, r25
    f6e0:	a1 f4       	brne	.+40     	; 0xf70a <mqtt_callback(char*, unsigned char*, unsigned int)+0x624>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
  {
    mqtt_process_message++;
    f6e2:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f6e6:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f6ea:	01 96       	adiw	r24, 0x01	; 1
    f6ec:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f6f0:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
    id = atoi(my_payload);
    f6f4:	8f e4       	ldi	r24, 0x4F	; 79
    f6f6:	9b e0       	ldi	r25, 0x0B	; 11
    f6f8:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f6fc:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
    if (id < HW_ONEWIRE_MAXROMS)
    f6fe:	a5 e0       	ldi	r26, 0x05	; 5
    f700:	a8 17       	cp	r26, r24
    f702:	08 f4       	brcc	.+2      	; 0xf706 <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
    f704:	83 c0       	rjmp	.+262    	; 0xf80c <mqtt_callback(char*, unsigned char*, unsigned int)+0x726>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
      tds_set_clear(id);
    f706:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3007
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    f70a:	64 e3       	ldi	r22, 0x34	; 52
    f70c:	78 e5       	ldi	r23, 0x58	; 88
    f70e:	c5 01       	movw	r24, r10
    f710:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
  strcat(str1, device.nazev);
    f714:	6e eb       	ldi	r22, 0xBE	; 190
    f716:	7c e0       	ldi	r23, 0x0C	; 12
    f718:	c5 01       	movw	r24, r10
    f71a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
  strcat(str1, "/rtds/register");
    f71e:	6a e6       	ldi	r22, 0x6A	; 106
    f720:	74 e0       	ldi	r23, 0x04	; 4
    f722:	c5 01       	movw	r24, r10
    f724:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f728:	f5 01       	movw	r30, r10
    f72a:	01 90       	ld	r0, Z+
    f72c:	00 20       	and	r0, r0
    f72e:	e9 f7       	brne	.-6      	; 0xf72a <mqtt_callback(char*, unsigned char*, unsigned int)+0x644>
    f730:	31 97       	sbiw	r30, 0x01	; 1
    f732:	af 01       	movw	r20, r30
    f734:	4a 19       	sub	r20, r10
    f736:	5b 09       	sbc	r21, r11
    f738:	b4 01       	movw	r22, r8
    f73a:	c5 01       	movw	r24, r10
    f73c:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f740:	89 2b       	or	r24, r25
    f742:	d1 f4       	brne	.+52     	; 0xf778 <mqtt_callback(char*, unsigned char*, unsigned int)+0x692>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3012
  {
    mqtt_process_message++;
    f744:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f748:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f74c:	01 96       	adiw	r24, 0x01	; 1
    f74e:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f752:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
    if (remote_tds_name_exist(my_payload) == 255)
    f756:	8f e4       	ldi	r24, 0x4F	; 79
    f758:	9b e0       	ldi	r25, 0x0B	; 11
    f75a:	0e 94 a1 77 	call	0xef42	; 0xef42 <remote_tds_name_exist(char*)>
    f75e:	8f 3f       	cpi	r24, 0xFF	; 255
    f760:	59 f4       	brne	.+22     	; 0xf778 <mqtt_callback(char*, unsigned char*, unsigned int)+0x692>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
    {
      id = remote_tds_find_free();
    f762:	0e 94 99 73 	call	0xe732	; 0xe732 <remote_tds_find_free()>
    f766:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
      remote_tds_set_complete(id, 1, my_payload);
    f768:	4f e4       	ldi	r20, 0x4F	; 79
    f76a:	5b e0       	ldi	r21, 0x0B	; 11
    f76c:	61 e0       	ldi	r22, 0x01	; 1
    f76e:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
      remote_tds_subscibe_topic(id);
    f772:	87 2d       	mov	r24, r7
    f774:	0e 94 03 78 	call	0xf006	; 0xf006 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    f778:	64 e3       	ldi	r22, 0x34	; 52
    f77a:	78 e5       	ldi	r23, 0x58	; 88
    f77c:	c5 01       	movw	r24, r10
    f77e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
  strcat(str1, device.nazev);
    f782:	6e eb       	ldi	r22, 0xBE	; 190
    f784:	7c e0       	ldi	r23, 0x0C	; 12
    f786:	c5 01       	movw	r24, r10
    f788:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3025
  strcat(str1, "/rtds/set/");
    f78c:	69 e7       	ldi	r22, 0x79	; 121
    f78e:	74 e0       	ldi	r23, 0x04	; 4
    f790:	c5 01       	movw	r24, r10
    f792:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3026
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f796:	f5 01       	movw	r30, r10
    f798:	01 90       	ld	r0, Z+
    f79a:	00 20       	and	r0, r0
    f79c:	e9 f7       	brne	.-6      	; 0xf798 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6b2>
    f79e:	31 97       	sbiw	r30, 0x01	; 1
    f7a0:	af 01       	movw	r20, r30
    f7a2:	4a 19       	sub	r20, r10
    f7a4:	5b 09       	sbc	r21, r11
    f7a6:	b4 01       	movw	r22, r8
    f7a8:	c5 01       	movw	r24, r10
    f7aa:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f7ae:	89 2b       	or	r24, r25
    f7b0:	09 f0       	breq	.+2      	; 0xf7b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ce>
    f7b2:	6a c0       	rjmp	.+212    	; 0xf888 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
  {
    mqtt_process_message++;
    f7b4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f7b8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f7bc:	01 96       	adiw	r24, 0x01	; 1
    f7be:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f7c2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f7c6:	f5 01       	movw	r30, r10
    f7c8:	01 90       	ld	r0, Z+
    f7ca:	00 20       	and	r0, r0
    f7cc:	e9 f7       	brne	.-6      	; 0xf7c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6e2>
    f7ce:	31 97       	sbiw	r30, 0x01	; 1
    f7d0:	ea 19       	sub	r30, r10
    f7d2:	fb 09       	sbc	r31, r11
    f7d4:	9e 2f       	mov	r25, r30
    f7d6:	4e 2f       	mov	r20, r30
    f7d8:	84 2f       	mov	r24, r20
    f7da:	89 1b       	sub	r24, r25
    f7dc:	24 2f       	mov	r18, r20
    f7de:	30 e0       	ldi	r19, 0x00	; 0
    f7e0:	d4 01       	movw	r26, r8
    f7e2:	0d 90       	ld	r0, X+
    f7e4:	00 20       	and	r0, r0
    f7e6:	e9 f7       	brne	.-6      	; 0xf7e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6fc>
    f7e8:	11 97       	sbiw	r26, 0x01	; 1
    f7ea:	a8 19       	sub	r26, r8
    f7ec:	b9 09       	sbc	r27, r9
    f7ee:	2a 17       	cp	r18, r26
    f7f0:	3b 07       	cpc	r19, r27
    f7f2:	88 f4       	brcc	.+34     	; 0xf816 <mqtt_callback(char*, unsigned char*, unsigned int)+0x730>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3032
    {
      str1[cnt] = topic[f];
    f7f4:	d5 01       	movw	r26, r10
    f7f6:	a8 0f       	add	r26, r24
    f7f8:	b1 1d       	adc	r27, r1
    f7fa:	28 0d       	add	r18, r8
    f7fc:	39 1d       	adc	r19, r9
    f7fe:	f9 01       	movw	r30, r18
    f800:	80 81       	ld	r24, Z
    f802:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3033
      str1[cnt + 1] = 0;
    f804:	11 96       	adiw	r26, 0x01	; 1
    f806:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    f808:	4f 5f       	subi	r20, 0xFF	; 255
    f80a:	e6 cf       	rjmp	.-52     	; 0xf7d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3000
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    f80c:	89 e5       	ldi	r24, 0x59	; 89
    f80e:	94 e0       	ldi	r25, 0x04	; 4
    f810:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
    f814:	7a cf       	rjmp	.-268    	; 0xf70a <mqtt_callback(char*, unsigned char*, unsigned int)+0x624>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3037
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    f816:	64 ef       	ldi	r22, 0xF4	; 244
    f818:	73 e0       	ldi	r23, 0x03	; 3
    f81a:	c5 01       	movw	r24, r10
    f81c:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3036
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    f820:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3038
    pch = strtok (str1, "/");
    while (pch != NULL)
    f822:	00 97       	sbiw	r24, 0x00	; 0
    f824:	89 f1       	breq	.+98     	; 0xf888 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
    {
      if (cnt == 0) id = atoi(pch);
    f826:	11 11       	cpse	r17, r1
    f828:	0b c0       	rjmp	.+22     	; 0xf840 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
    f82a:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f82e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    f830:	64 ef       	ldi	r22, 0xF4	; 244
    f832:	73 e0       	ldi	r23, 0x03	; 3
    f834:	90 e0       	ldi	r25, 0x00	; 0
    f836:	80 e0       	ldi	r24, 0x00	; 0
    f838:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
      cnt++;
    f83c:	1f 5f       	subi	r17, 0xFF	; 255
    f83e:	f1 cf       	rjmp	.-30     	; 0xf822 <mqtt_callback(char*, unsigned char*, unsigned int)+0x73c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    f840:	11 30       	cpi	r17, 0x01	; 1
    f842:	b1 f7       	brne	.-20     	; 0xf830 <mqtt_callback(char*, unsigned char*, unsigned int)+0x74a>
    f844:	6d ec       	ldi	r22, 0xCD	; 205
    f846:	73 e0       	ldi	r23, 0x03	; 3
    f848:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    f84c:	89 2b       	or	r24, r25
    f84e:	81 f7       	brne	.-32     	; 0xf830 <mqtt_callback(char*, unsigned char*, unsigned int)+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3043
      {
        remote_tds_get_active(id, &active);
    f850:	be 01       	movw	r22, r28
    f852:	61 5c       	subi	r22, 0xC1	; 193
    f854:	7e 4f       	sbci	r23, 0xFE	; 254
    f856:	87 2d       	mov	r24, r7
    f858:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044
        if (active == 0)
    f85c:	c1 5c       	subi	r28, 0xC1	; 193
    f85e:	de 4f       	sbci	r29, 0xFE	; 254
    f860:	88 81       	ld	r24, Y
    f862:	cf 53       	subi	r28, 0x3F	; 63
    f864:	d1 40       	sbci	r29, 0x01	; 1
    f866:	81 11       	cpse	r24, r1
    f868:	0a c0       	rjmp	.+20     	; 0xf87e <mqtt_callback(char*, unsigned char*, unsigned int)+0x798>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
        {
          remote_tds_set_complete(id, 1, my_payload);
    f86a:	4f e4       	ldi	r20, 0x4F	; 79
    f86c:	5b e0       	ldi	r21, 0x0B	; 11
    f86e:	61 e0       	ldi	r22, 0x01	; 1
    f870:	87 2d       	mov	r24, r7
    f872:	0e 94 66 69 	call	0xd2cc	; 0xd2cc <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
          remote_tds_subscibe_topic(id);
    f876:	87 2d       	mov	r24, r7
    f878:	0e 94 03 78 	call	0xf006	; 0xf006 <remote_tds_subscibe_topic(unsigned char)>
    f87c:	d9 cf       	rjmp	.-78     	; 0xf830 <mqtt_callback(char*, unsigned char*, unsigned int)+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    f87e:	84 e8       	ldi	r24, 0x84	; 132
    f880:	94 e0       	ldi	r25, 0x04	; 4
    f882:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
    f886:	d4 cf       	rjmp	.-88     	; 0xf830 <mqtt_callback(char*, unsigned char*, unsigned int)+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    f888:	64 e3       	ldi	r22, 0x34	; 52
    f88a:	78 e5       	ldi	r23, 0x58	; 88
    f88c:	c5 01       	movw	r24, r10
    f88e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
  strcat(str1, device.nazev);
    f892:	6e eb       	ldi	r22, 0xBE	; 190
    f894:	7c e0       	ldi	r23, 0x0C	; 12
    f896:	c5 01       	movw	r24, r10
    f898:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
  strcat(str1, "/rtds/clear");
    f89c:	64 e9       	ldi	r22, 0x94	; 148
    f89e:	74 e0       	ldi	r23, 0x04	; 4
    f8a0:	c5 01       	movw	r24, r10
    f8a2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3064
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f8a6:	f5 01       	movw	r30, r10
    f8a8:	01 90       	ld	r0, Z+
    f8aa:	00 20       	and	r0, r0
    f8ac:	e9 f7       	brne	.-6      	; 0xf8a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7c2>
    f8ae:	31 97       	sbiw	r30, 0x01	; 1
    f8b0:	af 01       	movw	r20, r30
    f8b2:	4a 19       	sub	r20, r10
    f8b4:	5b 09       	sbc	r21, r11
    f8b6:	b4 01       	movw	r22, r8
    f8b8:	c5 01       	movw	r24, r10
    f8ba:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f8be:	89 2b       	or	r24, r25
    f8c0:	09 f0       	breq	.+2      	; 0xf8c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7de>
    f8c2:	6f c0       	rjmp	.+222    	; 0xf9a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3066
  {
    mqtt_process_message++;
    f8c4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    f8c8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    f8cc:	01 96       	adiw	r24, 0x01	; 1
    f8ce:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    f8d2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3067
    id = atoi(my_payload);
    f8d6:	8f e4       	ldi	r24, 0x4F	; 79
    f8d8:	9b e0       	ldi	r25, 0x0B	; 11
    f8da:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    f8de:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    f8e0:	c8 5f       	subi	r28, 0xF8	; 248
    f8e2:	de 4f       	sbci	r29, 0xFE	; 254
    f8e4:	18 82       	st	Y, r1
    f8e6:	c8 50       	subi	r28, 0x08	; 8
    f8e8:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
  remote_tds_get_complete(idx, &active, tmp1);
    f8ea:	ae 01       	movw	r20, r28
    f8ec:	48 57       	subi	r20, 0x78	; 120
    f8ee:	5f 4f       	sbci	r21, 0xFF	; 255
    f8f0:	be 01       	movw	r22, r28
    f8f2:	68 5f       	subi	r22, 0xF8	; 248
    f8f4:	7e 4f       	sbci	r23, 0xFE	; 254
    f8f6:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
  if (active == 1)
    f8fa:	c8 5f       	subi	r28, 0xF8	; 248
    f8fc:	de 4f       	sbci	r29, 0xFE	; 254
    f8fe:	88 81       	ld	r24, Y
    f900:	c8 50       	subi	r28, 0x08	; 8
    f902:	d1 40       	sbci	r29, 0x01	; 1
    f904:	81 30       	cpi	r24, 0x01	; 1
    f906:	09 f0       	breq	.+2      	; 0xf90a <mqtt_callback(char*, unsigned char*, unsigned int)+0x824>
    f908:	49 c0       	rjmp	.+146    	; 0xf99c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  {
    strcpy(tmp2, "/rtds/");
    f90a:	8e 01       	movw	r16, r28
    f90c:	08 5b       	subi	r16, 0xB8	; 184
    f90e:	1f 4f       	sbci	r17, 0xFF	; 255
    f910:	6f ee       	ldi	r22, 0xEF	; 239
    f912:	73 e0       	ldi	r23, 0x03	; 3
    f914:	c8 01       	movw	r24, r16
    f916:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2711
    strcat(tmp2, tmp1);
    f91a:	be 01       	movw	r22, r28
    f91c:	68 57       	subi	r22, 0x78	; 120
    f91e:	7f 4f       	sbci	r23, 0xFF	; 255
    f920:	c8 01       	movw	r24, r16
    f922:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    f926:	d8 01       	movw	r26, r16
    f928:	0d 90       	ld	r0, X+
    f92a:	00 20       	and	r0, r0
    f92c:	e9 f7       	brne	.-6      	; 0xf928 <mqtt_callback(char*, unsigned char*, unsigned int)+0x842>
    f92e:	cd 01       	movw	r24, r26
    f930:	80 1b       	sub	r24, r16
    f932:	91 0b       	sbc	r25, r17
    f934:	08 96       	adiw	r24, 0x08	; 8
    f936:	81 30       	cpi	r24, 0x01	; 1
    f938:	92 40       	sbci	r25, 0x02	; 2
    f93a:	80 f5       	brcc	.+96     	; 0xf99c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8b6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    f93c:	8b e9       	ldi	r24, 0x9B	; 155
    f93e:	9e e0       	ldi	r25, 0x0E	; 14
    f940:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
    f944:	88 23       	and	r24, r24
    f946:	51 f1       	breq	.+84     	; 0xf99c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8b6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    f948:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <mqtt_client+0x202>
    f94c:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <mqtt_client+0x203>
    f950:	01 96       	adiw	r24, 0x01	; 1
    f952:	90 93 9e 10 	sts	0x109E, r25	; 0x80109e <mqtt_client+0x203>
    f956:	80 93 9d 10 	sts	0x109D, r24	; 0x80109d <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    f95a:	89 2b       	or	r24, r25
    f95c:	31 f4       	brne	.+12     	; 0xf96a <mqtt_callback(char*, unsigned char*, unsigned int)+0x884>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    f95e:	81 e0       	ldi	r24, 0x01	; 1
    f960:	90 e0       	ldi	r25, 0x00	; 0
    f962:	90 93 9e 10 	sts	0x109E, r25	; 0x80109e <mqtt_client+0x203>
    f966:	80 93 9d 10 	sts	0x109D, r24	; 0x80109d <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    f96a:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <mqtt_client+0x202>
    f96e:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <mqtt_client+0x203>
    f972:	90 93 a2 0e 	sts	0x0EA2, r25	; 0x800ea2 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    f976:	80 93 a3 0e 	sts	0x0EA3, r24	; 0x800ea3 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    f97a:	47 e0       	ldi	r20, 0x07	; 7
    f97c:	50 e0       	ldi	r21, 0x00	; 0
    f97e:	6d e9       	ldi	r22, 0x9D	; 157
    f980:	7e e0       	ldi	r23, 0x0E	; 14
    f982:	c8 01       	movw	r24, r16
    f984:	0e 94 6e 9c 	call	0x138dc	; 0x138dc <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    f988:	9c 01       	movw	r18, r24
    f98a:	25 50       	subi	r18, 0x05	; 5
    f98c:	31 09       	sbc	r19, r1
    f98e:	4d e9       	ldi	r20, 0x9D	; 157
    f990:	5e e0       	ldi	r21, 0x0E	; 14
    f992:	62 ea       	ldi	r22, 0xA2	; 162
    f994:	8b e9       	ldi	r24, 0x9B	; 155
    f996:	9e e0       	ldi	r25, 0x0E	; 14
    f998:	0e 94 5f ac 	call	0x158be	; 0x158be <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3070
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    f99c:	87 2d       	mov	r24, r7
    f99e:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3074
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    f9a2:	64 e3       	ldi	r22, 0x34	; 52
    f9a4:	78 e5       	ldi	r23, 0x58	; 88
    f9a6:	c5 01       	movw	r24, r10
    f9a8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
  strcat(str1, device.nazev);
    f9ac:	6e eb       	ldi	r22, 0xBE	; 190
    f9ae:	7c e0       	ldi	r23, 0x0C	; 12
    f9b0:	c5 01       	movw	r24, r10
    f9b2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
  strcat(str1, "/rtds/get");
    f9b6:	60 ea       	ldi	r22, 0xA0	; 160
    f9b8:	74 e0       	ldi	r23, 0x04	; 4
    f9ba:	c5 01       	movw	r24, r10
    f9bc:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3077
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f9c0:	f5 01       	movw	r30, r10
    f9c2:	01 90       	ld	r0, Z+
    f9c4:	00 20       	and	r0, r0
    f9c6:	e9 f7       	brne	.-6      	; 0xf9c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8dc>
    f9c8:	31 97       	sbiw	r30, 0x01	; 1
    f9ca:	af 01       	movw	r20, r30
    f9cc:	4a 19       	sub	r20, r10
    f9ce:	5b 09       	sbc	r21, r11
    f9d0:	b4 01       	movw	r22, r8
    f9d2:	c5 01       	movw	r24, r10
    f9d4:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    f9d8:	89 2b       	or	r24, r25
    f9da:	11 f4       	brne	.+4      	; 0xf9e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
  {
    send_mqtt_remote_tds_status();
    f9dc:	0e 94 1f 77 	call	0xee3e	; 0xee3e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3083
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    f9e0:	6f ee       	ldi	r22, 0xEF	; 239
    f9e2:	73 e0       	ldi	r23, 0x03	; 3
    f9e4:	c5 01       	movw	r24, r10
    f9e6:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
  if (strncmp(str1, topic, strlen(str1)) == 0)
    f9ea:	f5 01       	movw	r30, r10
    f9ec:	01 90       	ld	r0, Z+
    f9ee:	00 20       	and	r0, r0
    f9f0:	e9 f7       	brne	.-6      	; 0xf9ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x906>
    f9f2:	31 97       	sbiw	r30, 0x01	; 1
    f9f4:	af 01       	movw	r20, r30
    f9f6:	4a 19       	sub	r20, r10
    f9f8:	5b 09       	sbc	r21, r11
    f9fa:	b4 01       	movw	r22, r8
    f9fc:	c5 01       	movw	r24, r10
    f9fe:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    fa02:	89 2b       	or	r24, r25
    fa04:	09 f0       	breq	.+2      	; 0xfa08 <mqtt_callback(char*, unsigned char*, unsigned int)+0x922>
    fa06:	74 c0       	rjmp	.+232    	; 0xfaf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
  {
    mqtt_process_message++;
    fa08:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    fa0c:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    fa10:	01 96       	adiw	r24, 0x01	; 1
    fa12:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    fa16:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fa1a:	f5 01       	movw	r30, r10
    fa1c:	01 90       	ld	r0, Z+
    fa1e:	00 20       	and	r0, r0
    fa20:	e9 f7       	brne	.-6      	; 0xfa1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
    fa22:	31 97       	sbiw	r30, 0x01	; 1
    fa24:	ea 19       	sub	r30, r10
    fa26:	fb 09       	sbc	r31, r11
    fa28:	9e 2f       	mov	r25, r30
    fa2a:	4e 2f       	mov	r20, r30
    fa2c:	84 2f       	mov	r24, r20
    fa2e:	89 1b       	sub	r24, r25
    fa30:	24 2f       	mov	r18, r20
    fa32:	30 e0       	ldi	r19, 0x00	; 0
    fa34:	d4 01       	movw	r26, r8
    fa36:	0d 90       	ld	r0, X+
    fa38:	00 20       	and	r0, r0
    fa3a:	e9 f7       	brne	.-6      	; 0xfa36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x950>
    fa3c:	11 97       	sbiw	r26, 0x01	; 1
    fa3e:	a8 19       	sub	r26, r8
    fa40:	b9 09       	sbc	r27, r9
    fa42:	2a 17       	cp	r18, r26
    fa44:	3b 07       	cpc	r19, r27
    fa46:	60 f4       	brcc	.+24     	; 0xfa60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x97a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3090
    {
      str1[cnt] = topic[f];
    fa48:	d5 01       	movw	r26, r10
    fa4a:	a8 0f       	add	r26, r24
    fa4c:	b1 1d       	adc	r27, r1
    fa4e:	28 0d       	add	r18, r8
    fa50:	39 1d       	adc	r19, r9
    fa52:	f9 01       	movw	r30, r18
    fa54:	80 81       	ld	r24, Z
    fa56:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
      str1[cnt + 1] = 0;
    fa58:	11 96       	adiw	r26, 0x01	; 1
    fa5a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3088
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fa5c:	4f 5f       	subi	r20, 0xFF	; 255
    fa5e:	e6 cf       	rjmp	.-52     	; 0xfa2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x946>
    fa60:	e4 e6       	ldi	r30, 0x64	; 100
    fa62:	ce 2e       	mov	r12, r30
    fa64:	d1 2c       	mov	r13, r1
    fa66:	e1 2c       	mov	r14, r1
    fa68:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fa6a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
    {
      uint8_t active = 0;
    fa6c:	29 96       	adiw	r28, 0x09	; 9
    fa6e:	1f ae       	std	Y+63, r1	; 0x3f
    fa70:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
      remote_tds_get_complete(idx, &active, tmp1);
    fa72:	ae 01       	movw	r20, r28
    fa74:	48 57       	subi	r20, 0x78	; 120
    fa76:	5f 4f       	sbci	r21, 0xFF	; 255
    fa78:	be 01       	movw	r22, r28
    fa7a:	68 5b       	subi	r22, 0xB8	; 184
    fa7c:	7f 4f       	sbci	r23, 0xFF	; 255
    fa7e:	81 2f       	mov	r24, r17
    fa80:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
      if (active == 1 && strcmp(tmp1, str1) == 0)
    fa84:	29 96       	adiw	r28, 0x09	; 9
    fa86:	8f ad       	ldd	r24, Y+63	; 0x3f
    fa88:	29 97       	sbiw	r28, 0x09	; 9
    fa8a:	81 30       	cpi	r24, 0x01	; 1
    fa8c:	21 f5       	brne	.+72     	; 0xfad6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f0>
    fa8e:	b5 01       	movw	r22, r10
    fa90:	ce 01       	movw	r24, r28
    fa92:	88 57       	subi	r24, 0x78	; 120
    fa94:	9f 4f       	sbci	r25, 0xFF	; 255
    fa96:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fa9a:	89 2b       	or	r24, r25
    fa9c:	e1 f4       	brne	.+56     	; 0xfad6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
      {
        remote_tds_set_data(idx, atoi(my_payload));
    fa9e:	8f e4       	ldi	r24, 0x4F	; 79
    faa0:	9b e0       	ldi	r25, 0x0B	; 11
    faa2:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    faa6:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    faa8:	48 2f       	mov	r20, r24
    faaa:	c7 01       	movw	r24, r14
    faac:	b6 01       	movw	r22, r12
    faae:	0e 94 b2 a1 	call	0x14364	; 0x14364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    fab2:	40 2f       	mov	r20, r16
    fab4:	c7 01       	movw	r24, r14
    fab6:	b6 01       	movw	r22, r12
    fab8:	6f 5f       	subi	r22, 0xFF	; 255
    faba:	7f 4f       	sbci	r23, 0xFF	; 255
    fabc:	8f 4f       	sbci	r24, 0xFF	; 255
    fabe:	9f 4f       	sbci	r25, 0xFF	; 255
    fac0:	0e 94 b2 a1 	call	0x14364	; 0x14364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    fac4:	40 e0       	ldi	r20, 0x00	; 0
    fac6:	c7 01       	movw	r24, r14
    fac8:	b6 01       	movw	r22, r12
    faca:	6e 5f       	subi	r22, 0xFE	; 254
    facc:	7f 4f       	sbci	r23, 0xFF	; 255
    face:	8f 4f       	sbci	r24, 0xFF	; 255
    fad0:	9f 4f       	sbci	r25, 0xFF	; 255
    fad2:	0e 94 b2 a1 	call	0x14364	; 0x14364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fad6:	1f 5f       	subi	r17, 0xFF	; 255
    fad8:	f3 e0       	ldi	r31, 0x03	; 3
    fada:	cf 0e       	add	r12, r31
    fadc:	d1 1c       	adc	r13, r1
    fade:	e1 1c       	adc	r14, r1
    fae0:	f1 1c       	adc	r15, r1
    fae2:	22 e8       	ldi	r18, 0x82	; 130
    fae4:	c2 16       	cp	r12, r18
    fae6:	d1 04       	cpc	r13, r1
    fae8:	e1 04       	cpc	r14, r1
    faea:	f1 04       	cpc	r15, r1
    faec:	09 f0       	breq	.+2      	; 0xfaf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa0a>
    faee:	be cf       	rjmp	.-132    	; 0xfa6c <mqtt_callback(char*, unsigned char*, unsigned int)+0x986>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3104
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    faf0:	6a ea       	ldi	r22, 0xAA	; 170
    faf2:	74 e0       	ldi	r23, 0x04	; 4
    faf4:	c5 01       	movw	r24, r10
    faf6:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    fafa:	64 e3       	ldi	r22, 0x34	; 52
    fafc:	78 e5       	ldi	r23, 0x58	; 88
    fafe:	c5 01       	movw	r24, r10
    fb00:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
  strcat(str1, device.nazev);
    fb04:	6e eb       	ldi	r22, 0xBE	; 190
    fb06:	7c e0       	ldi	r23, 0x0C	; 12
    fb08:	c5 01       	movw	r24, r10
    fb0a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
  strcat(str1, "/prog/set/");
    fb0e:	65 eb       	ldi	r22, 0xB5	; 181
    fb10:	74 e0       	ldi	r23, 0x04	; 4
    fb12:	c5 01       	movw	r24, r10
    fb14:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fb18:	f5 01       	movw	r30, r10
    fb1a:	01 90       	ld	r0, Z+
    fb1c:	00 20       	and	r0, r0
    fb1e:	e9 f7       	brne	.-6      	; 0xfb1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa34>
    fb20:	31 97       	sbiw	r30, 0x01	; 1
    fb22:	af 01       	movw	r20, r30
    fb24:	4a 19       	sub	r20, r10
    fb26:	5b 09       	sbc	r21, r11
    fb28:	b4 01       	movw	r22, r8
    fb2a:	c5 01       	movw	r24, r10
    fb2c:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    fb30:	89 2b       	or	r24, r25
    fb32:	09 f0       	breq	.+2      	; 0xfb36 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
    fb34:	46 c0       	rjmp	.+140    	; 0xfbc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xadc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3124
  {
    mqtt_process_message++;
    fb36:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    fb3a:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    fb3e:	01 96       	adiw	r24, 0x01	; 1
    fb40:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    fb44:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fb48:	f5 01       	movw	r30, r10
    fb4a:	01 90       	ld	r0, Z+
    fb4c:	00 20       	and	r0, r0
    fb4e:	e9 f7       	brne	.-6      	; 0xfb4a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa64>
    fb50:	31 97       	sbiw	r30, 0x01	; 1
    fb52:	ea 19       	sub	r30, r10
    fb54:	fb 09       	sbc	r31, r11
    fb56:	9e 2f       	mov	r25, r30
    fb58:	4e 2f       	mov	r20, r30
    fb5a:	84 2f       	mov	r24, r20
    fb5c:	89 1b       	sub	r24, r25
    fb5e:	24 2f       	mov	r18, r20
    fb60:	30 e0       	ldi	r19, 0x00	; 0
    fb62:	d4 01       	movw	r26, r8
    fb64:	0d 90       	ld	r0, X+
    fb66:	00 20       	and	r0, r0
    fb68:	e9 f7       	brne	.-6      	; 0xfb64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa7e>
    fb6a:	11 97       	sbiw	r26, 0x01	; 1
    fb6c:	a8 19       	sub	r26, r8
    fb6e:	b9 09       	sbc	r27, r9
    fb70:	2a 17       	cp	r18, r26
    fb72:	3b 07       	cpc	r19, r27
    fb74:	60 f4       	brcc	.+24     	; 0xfb8e <mqtt_callback(char*, unsigned char*, unsigned int)+0xaa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3128
    {
      str1[cnt] = topic[f];
    fb76:	d5 01       	movw	r26, r10
    fb78:	a8 0f       	add	r26, r24
    fb7a:	b1 1d       	adc	r27, r1
    fb7c:	28 0d       	add	r18, r8
    fb7e:	39 1d       	adc	r19, r9
    fb80:	f9 01       	movw	r30, r18
    fb82:	80 81       	ld	r24, Z
    fb84:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3129
      str1[cnt + 1] = 0;
    fb86:	11 96       	adiw	r26, 0x01	; 1
    fb88:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fb8a:	4f 5f       	subi	r20, 0xFF	; 255
    fb8c:	e6 cf       	rjmp	.-52     	; 0xfb5a <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3133
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fb8e:	64 ef       	ldi	r22, 0xF4	; 244
    fb90:	73 e0       	ldi	r23, 0x03	; 3
    fb92:	c5 01       	movw	r24, r10
    fb94:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    fb98:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fb9a:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    fb9c:	7d e4       	ldi	r23, 0x4D	; 77
    fb9e:	e7 2e       	mov	r14, r23
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3134
    pch = strtok (str1, "/");
    while (pch != NULL)
    fba0:	01 15       	cp	r16, r1
    fba2:	11 05       	cpc	r17, r1
    fba4:	71 f0       	breq	.+28     	; 0xfbc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xadc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3136
    {
      if (cnt == 0) id = atoi(pch);
    fba6:	f1 10       	cpse	r15, r1
    fba8:	ca c0       	rjmp	.+404    	; 0xfd3e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
    fbaa:	c8 01       	movw	r24, r16
    fbac:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fbb0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3137
      if (id < AVAILABLE_PROGRAM)
    fbb2:	f7 e0       	ldi	r31, 0x07	; 7
    fbb4:	f8 17       	cp	r31, r24
    fbb6:	08 f0       	brcs	.+2      	; 0xfbba <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
    fbb8:	e9 c0       	rjmp	.+466    	; 0xfd8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xca6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3144
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    fbba:	80 ec       	ldi	r24, 0xC0	; 192
    fbbc:	94 e0       	ldi	r25, 0x04	; 4
    fbbe:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3152
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    fbc2:	64 e3       	ldi	r22, 0x34	; 52
    fbc4:	78 e5       	ldi	r23, 0x58	; 88
    fbc6:	c5 01       	movw	r24, r10
    fbc8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
  strcat(str1, device.nazev);
    fbcc:	6e eb       	ldi	r22, 0xBE	; 190
    fbce:	7c e0       	ldi	r23, 0x0C	; 12
    fbd0:	c5 01       	movw	r24, r10
    fbd2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
  strcat(str1, "/prog/clear");
    fbd6:	60 ed       	ldi	r22, 0xD0	; 208
    fbd8:	74 e0       	ldi	r23, 0x04	; 4
    fbda:	c5 01       	movw	r24, r10
    fbdc:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3155
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fbe0:	f5 01       	movw	r30, r10
    fbe2:	01 90       	ld	r0, Z+
    fbe4:	00 20       	and	r0, r0
    fbe6:	e9 f7       	brne	.-6      	; 0xfbe2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xafc>
    fbe8:	31 97       	sbiw	r30, 0x01	; 1
    fbea:	af 01       	movw	r20, r30
    fbec:	4a 19       	sub	r20, r10
    fbee:	5b 09       	sbc	r21, r11
    fbf0:	b4 01       	movw	r22, r8
    fbf2:	c5 01       	movw	r24, r10
    fbf4:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    fbf8:	89 2b       	or	r24, r25
    fbfa:	09 f0       	breq	.+2      	; 0xfbfe <mqtt_callback(char*, unsigned char*, unsigned int)+0xb18>
    fbfc:	55 c0       	rjmp	.+170    	; 0xfca8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3157
  {
    mqtt_process_message++;
    fbfe:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    fc02:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    fc06:	01 96       	adiw	r24, 0x01	; 1
    fc08:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    fc0c:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3158
    id = atoi(my_payload);
    fc10:	8f e4       	ldi	r24, 0x4F	; 79
    fc12:	9b e0       	ldi	r25, 0x0B	; 11
    fc14:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fc18:	18 2f       	mov	r17, r24
    fc1a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3159
    if (id < AVAILABLE_PROGRAM)
    fc1c:	97 e0       	ldi	r25, 0x07	; 7
    fc1e:	91 17       	cp	r25, r17
    fc20:	08 f4       	brcc	.+2      	; 0xfc24 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3e>
    fc22:	bd c0       	rjmp	.+378    	; 0xfd9e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3161
    {
      strcpy_P(tmp2, text_prog);
    fc24:	67 e9       	ldi	r22, 0x97	; 151
    fc26:	79 e5       	ldi	r23, 0x59	; 89
    fc28:	ce 01       	movw	r24, r28
    fc2a:	88 5f       	subi	r24, 0xF8	; 248
    fc2c:	9e 4f       	sbci	r25, 0xFE	; 254
    fc2e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3162
      thermostat_program_set_name(id, tmp2);
    fc32:	be 01       	movw	r22, r28
    fc34:	68 5f       	subi	r22, 0xF8	; 248
    fc36:	7e 4f       	sbci	r23, 0xFE	; 254
    fc38:	81 2f       	mov	r24, r17
    fc3a:	0e 94 f8 65 	call	0xcbf0	; 0xcbf0 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:295
    fc3e:	ad e4       	ldi	r26, 0x4D	; 77
    fc40:	1a 9f       	mul	r17, r26
    fc42:	c0 01       	movw	r24, r0
    fc44:	11 24       	eor	r1, r1
    fc46:	6f ef       	ldi	r22, 0xFF	; 255
    fc48:	8f 50       	subi	r24, 0x0F	; 15
    fc4a:	9e 4f       	sbci	r25, 0xFE	; 254
    fc4c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    fc50:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    fc52:	c1 2c       	mov	r12, r1
    fc54:	e1 2c       	mov	r14, r1
    fc56:	00 e0       	ldi	r16, 0x00	; 0
    fc58:	20 e0       	ldi	r18, 0x00	; 0
    fc5a:	40 e0       	ldi	r20, 0x00	; 0
    fc5c:	61 2f       	mov	r22, r17
    fc5e:	87 2d       	mov	r24, r7
    fc60:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3167
        thermostat_program_set_threshold(id, progid, 220);
    fc64:	4c ed       	ldi	r20, 0xDC	; 220
    fc66:	50 e0       	ldi	r21, 0x00	; 0
    fc68:	61 2f       	mov	r22, r17
    fc6a:	87 2d       	mov	r24, r7
    fc6c:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3168
        thermostat_program_set_week(id, progid, 0);
    fc70:	40 e0       	ldi	r20, 0x00	; 0
    fc72:	61 2f       	mov	r22, r17
    fc74:	87 2d       	mov	r24, r7
    fc76:	0e 94 92 65 	call	0xcb24	; 0xcb24 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    fc7a:	1f 5f       	subi	r17, 0xFF	; 255
    fc7c:	1b 30       	cpi	r17, 0x0B	; 11
    fc7e:	49 f7       	brne	.-46     	; 0xfc52 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb6c>
    fc80:	6b e5       	ldi	r22, 0x5B	; 91
    fc82:	e6 2e       	mov	r14, r22
    fc84:	ff 24       	eor	r15, r15
    fc86:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    fc88:	10 e0       	ldi	r17, 0x00	; 0
thermostat_ring_get_program_id():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    fc8a:	c7 01       	movw	r24, r14
    fc8c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3172
      {
        if (thermostat_ring_get_program_id(tix) == id)
    fc90:	78 12       	cpse	r7, r24
    fc92:	04 c0       	rjmp	.+8      	; 0xfc9c <mqtt_callback(char*, unsigned char*, unsigned int)+0xbb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3174
        {
          thermostat_ring_set_program_id(tix, PROG_FREE);
    fc94:	6f ef       	ldi	r22, 0xFF	; 255
    fc96:	81 2f       	mov	r24, r17
    fc98:	0e 94 fa 66 	call	0xcdf4	; 0xcdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3170
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    fc9c:	1f 5f       	subi	r17, 0xFF	; 255
    fc9e:	b1 e2       	ldi	r27, 0x21	; 33
    fca0:	eb 0e       	add	r14, r27
    fca2:	f1 1c       	adc	r15, r1
    fca4:	15 30       	cpi	r17, 0x05	; 5
    fca6:	89 f7       	brne	.-30     	; 0xfc8a <mqtt_callback(char*, unsigned char*, unsigned int)+0xba4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3184
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    fca8:	64 e3       	ldi	r22, 0x34	; 52
    fcaa:	78 e5       	ldi	r23, 0x58	; 88
    fcac:	c5 01       	movw	r24, r10
    fcae:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3185
  strcat(str1, device.nazev);
    fcb2:	6e eb       	ldi	r22, 0xBE	; 190
    fcb4:	7c e0       	ldi	r23, 0x0C	; 12
    fcb6:	c5 01       	movw	r24, r10
    fcb8:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3186
  strcat(str1, "/prog_interval/set/");
    fcbc:	6e ee       	ldi	r22, 0xEE	; 238
    fcbe:	74 e0       	ldi	r23, 0x04	; 4
    fcc0:	c5 01       	movw	r24, r10
    fcc2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3187
  if (strncmp(str1, topic, strlen(str1)) == 0)
    fcc6:	f5 01       	movw	r30, r10
    fcc8:	01 90       	ld	r0, Z+
    fcca:	00 20       	and	r0, r0
    fccc:	e9 f7       	brne	.-6      	; 0xfcc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe2>
    fcce:	31 97       	sbiw	r30, 0x01	; 1
    fcd0:	af 01       	movw	r20, r30
    fcd2:	4a 19       	sub	r20, r10
    fcd4:	5b 09       	sbc	r21, r11
    fcd6:	b4 01       	movw	r22, r8
    fcd8:	c5 01       	movw	r24, r10
    fcda:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    fcde:	89 2b       	or	r24, r25
    fce0:	09 f0       	breq	.+2      	; 0xfce4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfe>
    fce2:	32 c1       	rjmp	.+612    	; 0xff48 <__DATA_REGION_LENGTH__+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3189
  {
    mqtt_process_message++;
    fce4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    fce8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    fcec:	01 96       	adiw	r24, 0x01	; 1
    fcee:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    fcf2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fcf6:	f5 01       	movw	r30, r10
    fcf8:	01 90       	ld	r0, Z+
    fcfa:	00 20       	and	r0, r0
    fcfc:	e9 f7       	brne	.-6      	; 0xfcf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc12>
    fcfe:	31 97       	sbiw	r30, 0x01	; 1
    fd00:	ea 19       	sub	r30, r10
    fd02:	fb 09       	sbc	r31, r11
    fd04:	9e 2f       	mov	r25, r30
    fd06:	4e 2f       	mov	r20, r30
    fd08:	84 2f       	mov	r24, r20
    fd0a:	89 1b       	sub	r24, r25
    fd0c:	24 2f       	mov	r18, r20
    fd0e:	30 e0       	ldi	r19, 0x00	; 0
    fd10:	d4 01       	movw	r26, r8
    fd12:	0d 90       	ld	r0, X+
    fd14:	00 20       	and	r0, r0
    fd16:	e9 f7       	brne	.-6      	; 0xfd12 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc2c>
    fd18:	11 97       	sbiw	r26, 0x01	; 1
    fd1a:	a8 19       	sub	r26, r8
    fd1c:	b9 09       	sbc	r27, r9
    fd1e:	2a 17       	cp	r18, r26
    fd20:	3b 07       	cpc	r19, r27
    fd22:	08 f0       	brcs	.+2      	; 0xfd26 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
    fd24:	41 c0       	rjmp	.+130    	; 0xfda8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
    {
      str1[cnt] = topic[f];
    fd26:	d5 01       	movw	r26, r10
    fd28:	a8 0f       	add	r26, r24
    fd2a:	b1 1d       	adc	r27, r1
    fd2c:	28 0d       	add	r18, r8
    fd2e:	39 1d       	adc	r19, r9
    fd30:	f9 01       	movw	r30, r18
    fd32:	80 81       	ld	r24, Z
    fd34:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3194
      str1[cnt + 1] = 0;
    fd36:	11 96       	adiw	r26, 0x01	; 1
    fd38:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3191
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    fd3a:	4f 5f       	subi	r20, 0xFF	; 255
    fd3c:	e5 cf       	rjmp	.-54     	; 0xfd08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3137
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    fd3e:	27 e0       	ldi	r18, 0x07	; 7
    fd40:	27 15       	cp	r18, r7
    fd42:	08 f4       	brcc	.+2      	; 0xfd46 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc60>
    fd44:	3a cf       	rjmp	.-396    	; 0xfbba <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3139
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    fd46:	81 e0       	ldi	r24, 0x01	; 1
    fd48:	f8 12       	cpse	r15, r24
    fd4a:	20 c0       	rjmp	.+64     	; 0xfd8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xca6>
    fd4c:	6d ec       	ldi	r22, 0xCD	; 205
    fd4e:	73 e0       	ldi	r23, 0x03	; 3
    fd50:	c8 01       	movw	r24, r16
    fd52:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fd56:	89 2b       	or	r24, r25
    fd58:	29 f4       	brne	.+10     	; 0xfd64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc7e>
    fd5a:	6f e4       	ldi	r22, 0x4F	; 79
    fd5c:	7b e0       	ldi	r23, 0x0B	; 11
    fd5e:	87 2d       	mov	r24, r7
    fd60:	0e 94 f8 65 	call	0xcbf0	; 0xcbf0 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    fd64:	67 ed       	ldi	r22, 0xD7	; 215
    fd66:	73 e0       	ldi	r23, 0x03	; 3
    fd68:	c8 01       	movw	r24, r16
    fd6a:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fd6e:	89 2b       	or	r24, r25
    fd70:	69 f4       	brne	.+26     	; 0xfd8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xca6>
    fd72:	8f e4       	ldi	r24, 0x4F	; 79
    fd74:	9b e0       	ldi	r25, 0x0B	; 11
    fd76:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    fd7a:	7e 9c       	mul	r7, r14
    fd7c:	90 01       	movw	r18, r0
    fd7e:	11 24       	eor	r1, r1
    fd80:	68 2f       	mov	r22, r24
    fd82:	c9 01       	movw	r24, r18
    fd84:	8f 50       	subi	r24, 0x0F	; 15
    fd86:	9e 4f       	sbci	r25, 0xFE	; 254
    fd88:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3147
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    fd8c:	64 ef       	ldi	r22, 0xF4	; 244
    fd8e:	73 e0       	ldi	r23, 0x03	; 3
    fd90:	90 e0       	ldi	r25, 0x00	; 0
    fd92:	80 e0       	ldi	r24, 0x00	; 0
    fd94:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    fd98:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3148
      cnt++;
    fd9a:	f3 94       	inc	r15
    fd9c:	01 cf       	rjmp	.-510    	; 0xfba0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3180
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    fd9e:	8c ed       	ldi	r24, 0xDC	; 220
    fda0:	94 e0       	ldi	r25, 0x04	; 4
    fda2:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
    fda6:	80 cf       	rjmp	.-256    	; 0xfca8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    fda8:	64 ef       	ldi	r22, 0xF4	; 244
    fdaa:	73 e0       	ldi	r23, 0x03	; 3
    fdac:	c5 01       	movw	r24, r10
    fdae:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    fdb2:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    fdb4:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    fdb6:	31 2c       	mov	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
    pch = strtok (str1, "/");
    while (pch != NULL)
    fdb8:	41 14       	cp	r4, r1
    fdba:	51 04       	cpc	r5, r1
    fdbc:	09 f4       	brne	.+2      	; 0xfdc0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcda>
    fdbe:	c4 c0       	rjmp	.+392    	; 0xff48 <__DATA_REGION_LENGTH__+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3201
    {
      if (cnt == 0) id = atoi(pch);
    fdc0:	31 10       	cpse	r3, r1
    fdc2:	82 c0       	rjmp	.+260    	; 0xfec8 <__DATA_REGION_LENGTH__+0xc8>
    fdc4:	c2 01       	movw	r24, r4
    fdc6:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fdca:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    fdcc:	27 e0       	ldi	r18, 0x07	; 7
    fdce:	27 15       	cp	r18, r7
    fdd0:	08 f4       	brcc	.+2      	; 0xfdd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcee>
    fdd2:	b6 c0       	rjmp	.+364    	; 0xff40 <__DATA_REGION_LENGTH__+0x140>
    fdd4:	8a e0       	ldi	r24, 0x0A	; 10
    fdd6:	86 15       	cp	r24, r6
    fdd8:	08 f4       	brcc	.+2      	; 0xfddc <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf6>
    fdda:	b2 c0       	rjmp	.+356    	; 0xff40 <__DATA_REGION_LENGTH__+0x140>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    fddc:	92 e0       	ldi	r25, 0x02	; 2
    fdde:	39 12       	cpse	r3, r25
    fde0:	a6 c0       	rjmp	.+332    	; 0xff2e <__DATA_REGION_LENGTH__+0x12e>
    fde2:	67 ed       	ldi	r22, 0xD7	; 215
    fde4:	73 e0       	ldi	r23, 0x03	; 3
    fde6:	c2 01       	movw	r24, r4
    fde8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fdec:	89 2b       	or	r24, r25
    fdee:	c1 f5       	brne	.+112    	; 0xfe60 <__DATA_REGION_LENGTH__+0x60>
    fdf0:	8f e4       	ldi	r24, 0x4F	; 79
    fdf2:	9b e0       	ldi	r25, 0x0B	; 11
    fdf4:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fdf8:	28 2e       	mov	r2, r24
thermostat_program_set_interval_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:379

/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
    fdfa:	de 01       	movw	r26, r28
    fdfc:	a8 5b       	subi	r26, 0xB8	; 184
    fdfe:	bf 4f       	sbci	r27, 0xFF	; 255
    fe00:	6d 01       	movw	r12, r26
    fe02:	fe 01       	movw	r30, r28
    fe04:	e8 5d       	subi	r30, 0xD8	; 216
    fe06:	fe 4f       	sbci	r31, 0xFE	; 254
    fe08:	7f 01       	movw	r14, r30
    fe0a:	8e 01       	movw	r16, r28
    fe0c:	04 5c       	subi	r16, 0xC4	; 196
    fe0e:	1e 4f       	sbci	r17, 0xFE	; 254
    fe10:	9e 01       	movw	r18, r28
    fe12:	23 5c       	subi	r18, 0xC3	; 195
    fe14:	3e 4f       	sbci	r19, 0xFE	; 254
    fe16:	ae 01       	movw	r20, r28
    fe18:	42 5c       	subi	r20, 0xC2	; 194
    fe1a:	5e 4f       	sbci	r21, 0xFE	; 254
    fe1c:	66 2d       	mov	r22, r6
    fe1e:	87 2d       	mov	r24, r7
    fe20:	0e 94 a2 69 	call	0xd344	; 0xd344 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:380
  if (active != set_active)
    fe24:	29 96       	adiw	r28, 0x09	; 9
    fe26:	8f ad       	ldd	r24, Y+63	; 0x3f
    fe28:	29 97       	sbiw	r28, 0x09	; 9
    fe2a:	28 16       	cp	r2, r24
    fe2c:	c9 f0       	breq	.+50     	; 0xfe60 <__DATA_REGION_LENGTH__+0x60>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    fe2e:	c2 2c       	mov	r12, r2
    fe30:	c8 5d       	subi	r28, 0xD8	; 216
    fe32:	de 4f       	sbci	r29, 0xFE	; 254
    fe34:	e8 80       	ld	r14, Y
    fe36:	c8 52       	subi	r28, 0x28	; 40
    fe38:	d1 40       	sbci	r29, 0x01	; 1
    fe3a:	c4 5c       	subi	r28, 0xC4	; 196
    fe3c:	de 4f       	sbci	r29, 0xFE	; 254
    fe3e:	08 81       	ld	r16, Y
    fe40:	cc 53       	subi	r28, 0x3C	; 60
    fe42:	d1 40       	sbci	r29, 0x01	; 1
    fe44:	c3 5c       	subi	r28, 0xC3	; 195
    fe46:	de 4f       	sbci	r29, 0xFE	; 254
    fe48:	28 81       	ld	r18, Y
    fe4a:	cd 53       	subi	r28, 0x3D	; 61
    fe4c:	d1 40       	sbci	r29, 0x01	; 1
    fe4e:	c2 5c       	subi	r28, 0xC2	; 194
    fe50:	de 4f       	sbci	r29, 0xFE	; 254
    fe52:	48 81       	ld	r20, Y
    fe54:	ce 53       	subi	r28, 0x3E	; 62
    fe56:	d1 40       	sbci	r29, 0x01	; 1
    fe58:	66 2d       	mov	r22, r6
    fe5a:	87 2d       	mov	r24, r7
    fe5c:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3206
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    fe60:	6b e4       	ldi	r22, 0x4B	; 75
    fe62:	76 e0       	ldi	r23, 0x06	; 6
    fe64:	c2 01       	movw	r24, r4
    fe66:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fe6a:	89 2b       	or	r24, r25
    fe6c:	49 f4       	brne	.+18     	; 0xfe80 <__DATA_REGION_LENGTH__+0x80>
    fe6e:	8f e4       	ldi	r24, 0x4F	; 79
    fe70:	9b e0       	ldi	r25, 0x0B	; 11
    fe72:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fe76:	ac 01       	movw	r20, r24
    fe78:	66 2d       	mov	r22, r6
    fe7a:	87 2d       	mov	r24, r7
    fe7c:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3207
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    fe80:	69 e9       	ldi	r22, 0x99	; 153
    fe82:	76 e0       	ldi	r23, 0x06	; 6
    fe84:	c2 01       	movw	r24, r4
    fe86:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    fe8a:	89 2b       	or	r24, r25
    fe8c:	09 f0       	breq	.+2      	; 0xfe90 <__DATA_REGION_LENGTH__+0x90>
    fe8e:	4f c0       	rjmp	.+158    	; 0xff2e <__DATA_REGION_LENGTH__+0x12e>
thermostat_program_set_parse_interval():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    fe90:	62 e0       	ldi	r22, 0x02	; 2
    fe92:	75 e0       	ldi	r23, 0x05	; 5
    fe94:	8f e4       	ldi	r24, 0x4F	; 79
    fe96:	9b e0       	ldi	r25, 0x0B	; 11
    fe98:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    fe9c:	f1 2c       	mov	r15, r1
    fe9e:	c1 2c       	mov	r12, r1
    fea0:	e1 2c       	mov	r14, r1
    fea2:	00 e0       	ldi	r16, 0x00	; 0
    fea4:	51 2c       	mov	r5, r1
    fea6:	d1 2c       	mov	r13, r1
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    fea8:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    feaa:	00 97       	sbiw	r24, 0x00	; 0
    feac:	99 f1       	breq	.+102    	; 0xff14 <__DATA_REGION_LENGTH__+0x114>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    feae:	11 11       	cpse	r17, r1
    feb0:	13 c0       	rjmp	.+38     	; 0xfed8 <__DATA_REGION_LENGTH__+0xd8>
    feb2:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    feb6:	d8 2e       	mov	r13, r24
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    feb8:	62 e0       	ldi	r22, 0x02	; 2
    feba:	75 e0       	ldi	r23, 0x05	; 5
    febc:	90 e0       	ldi	r25, 0x00	; 0
    febe:	80 e0       	ldi	r24, 0x00	; 0
    fec0:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:354
    cnt++;
    fec4:	1f 5f       	subi	r17, 0xFF	; 255
    fec6:	f1 cf       	rjmp	.-30     	; 0xfeaa <__DATA_REGION_LENGTH__+0xaa>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    fec8:	f1 e0       	ldi	r31, 0x01	; 1
    feca:	3f 12       	cpse	r3, r31
    fecc:	7f cf       	rjmp	.-258    	; 0xfdcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xce6>
    fece:	c2 01       	movw	r24, r4
    fed0:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fed4:	68 2e       	mov	r6, r24
    fed6:	7a cf       	rjmp	.-268    	; 0xfdcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xce6>
thermostat_program_set_parse_interval():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    fed8:	11 30       	cpi	r17, 0x01	; 1
    feda:	21 f4       	brne	.+8      	; 0xfee4 <__DATA_REGION_LENGTH__+0xe4>
    fedc:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fee0:	58 2e       	mov	r5, r24
    fee2:	ea cf       	rjmp	.-44     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    fee4:	12 30       	cpi	r17, 0x02	; 2
    fee6:	21 f4       	brne	.+8      	; 0xfef0 <__DATA_REGION_LENGTH__+0xf0>
    fee8:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    feec:	08 2f       	mov	r16, r24
    feee:	e4 cf       	rjmp	.-56     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    fef0:	13 30       	cpi	r17, 0x03	; 3
    fef2:	21 f4       	brne	.+8      	; 0xfefc <__DATA_REGION_LENGTH__+0xfc>
    fef4:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    fef8:	e8 2e       	mov	r14, r24
    fefa:	de cf       	rjmp	.-68     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    fefc:	14 30       	cpi	r17, 0x04	; 4
    fefe:	21 f4       	brne	.+8      	; 0xff08 <__DATA_REGION_LENGTH__+0x108>
    ff00:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    ff04:	f8 2e       	mov	r15, r24
    ff06:	d8 cf       	rjmp	.-80     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    ff08:	15 30       	cpi	r17, 0x05	; 5
    ff0a:	b1 f6       	brne	.-84     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
    ff0c:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    ff10:	c8 2e       	mov	r12, r24
    ff12:	d2 cf       	rjmp	.-92     	; 0xfeb8 <__DATA_REGION_LENGTH__+0xb8>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    ff14:	16 30       	cpi	r17, 0x06	; 6
    ff16:	59 f4       	brne	.+22     	; 0xff2e <__DATA_REGION_LENGTH__+0x12e>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    ff18:	25 2d       	mov	r18, r5
    ff1a:	4d 2d       	mov	r20, r13
    ff1c:	66 2d       	mov	r22, r6
    ff1e:	87 2d       	mov	r24, r7
    ff20:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    ff24:	4f 2d       	mov	r20, r15
    ff26:	66 2d       	mov	r22, r6
    ff28:	87 2d       	mov	r24, r7
    ff2a:	0e 94 92 65 	call	0xcb24	; 0xcb24 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
    ff2e:	64 ef       	ldi	r22, 0xF4	; 244
    ff30:	73 e0       	ldi	r23, 0x03	; 3
    ff32:	90 e0       	ldi	r25, 0x00	; 0
    ff34:	80 e0       	ldi	r24, 0x00	; 0
    ff36:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
    ff3a:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
      cnt++;
    ff3c:	33 94       	inc	r3
    ff3e:	3c cf       	rjmp	.-392    	; 0xfdb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    ff40:	84 e0       	ldi	r24, 0x04	; 4
    ff42:	95 e0       	ldi	r25, 0x05	; 5
    ff44:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    ff48:	64 e3       	ldi	r22, 0x34	; 52
    ff4a:	78 e5       	ldi	r23, 0x58	; 88
    ff4c:	c5 01       	movw	r24, r10
    ff4e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3221
  strcat(str1, device.nazev);
    ff52:	6e eb       	ldi	r22, 0xBE	; 190
    ff54:	7c e0       	ldi	r23, 0x0C	; 12
    ff56:	c5 01       	movw	r24, r10
    ff58:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3222
  strcat(str1, "/ring/default");
    ff5c:	6d e1       	ldi	r22, 0x1D	; 29
    ff5e:	75 e0       	ldi	r23, 0x05	; 5
    ff60:	c5 01       	movw	r24, r10
    ff62:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3223
  if (strcmp(str1, topic) == 0)
    ff66:	b4 01       	movw	r22, r8
    ff68:	c5 01       	movw	r24, r10
    ff6a:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
    ff6e:	89 2b       	or	r24, r25
    ff70:	a1 f4       	brne	.+40     	; 0xff9a <__DATA_REGION_LENGTH__+0x19a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
  {
    mqtt_process_message++;
    ff72:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
    ff76:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
    ff7a:	01 96       	adiw	r24, 0x01	; 1
    ff7c:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
    ff80:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3226
    default_ring = atoi(my_payload);
    ff84:	8f e4       	ldi	r24, 0x4F	; 79
    ff86:	9b e0       	ldi	r25, 0x0B	; 11
    ff88:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
    ff8c:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    ff90:	68 2f       	mov	r22, r24
    ff92:	8c e5       	ldi	r24, 0x5C	; 92
    ff94:	90 e0       	ldi	r25, 0x00	; 0
    ff96:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3231
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    ff9a:	64 e3       	ldi	r22, 0x34	; 52
    ff9c:	78 e5       	ldi	r23, 0x58	; 88
    ff9e:	c5 01       	movw	r24, r10
    ffa0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
  strcat(str1, device.nazev);
    ffa4:	6e eb       	ldi	r22, 0xBE	; 190
    ffa6:	7c e0       	ldi	r23, 0x0C	; 12
    ffa8:	c5 01       	movw	r24, r10
    ffaa:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
  strcat(str1, "/ring/get/");
    ffae:	6b e2       	ldi	r22, 0x2B	; 43
    ffb0:	75 e0       	ldi	r23, 0x05	; 5
    ffb2:	c5 01       	movw	r24, r10
    ffb4:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ffb8:	f5 01       	movw	r30, r10
    ffba:	01 90       	ld	r0, Z+
    ffbc:	00 20       	and	r0, r0
    ffbe:	e9 f7       	brne	.-6      	; 0xffba <__DATA_REGION_LENGTH__+0x1ba>
    ffc0:	31 97       	sbiw	r30, 0x01	; 1
    ffc2:	8f 01       	movw	r16, r30
    ffc4:	0a 19       	sub	r16, r10
    ffc6:	1b 09       	sbc	r17, r11
    ffc8:	a8 01       	movw	r20, r16
    ffca:	b4 01       	movw	r22, r8
    ffcc:	c5 01       	movw	r24, r10
    ffce:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
    ffd2:	89 2b       	or	r24, r25
    ffd4:	09 f0       	breq	.+2      	; 0xffd8 <__DATA_REGION_LENGTH__+0x1d8>
    ffd6:	4c c0       	rjmp	.+152    	; 0x10070 <__EEPROM_REGION_LENGTH__+0x70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ffd8:	90 2f       	mov	r25, r16
    ffda:	80 2f       	mov	r24, r16
    ffdc:	89 1b       	sub	r24, r25
    ffde:	20 2f       	mov	r18, r16
    ffe0:	30 e0       	ldi	r19, 0x00	; 0
    ffe2:	f4 01       	movw	r30, r8
    ffe4:	01 90       	ld	r0, Z+
    ffe6:	00 20       	and	r0, r0
    ffe8:	e9 f7       	brne	.-6      	; 0xffe4 <__DATA_REGION_LENGTH__+0x1e4>
    ffea:	31 97       	sbiw	r30, 0x01	; 1
    ffec:	e8 19       	sub	r30, r8
    ffee:	f9 09       	sbc	r31, r9
    fff0:	2e 17       	cp	r18, r30
    fff2:	3f 07       	cpc	r19, r31
    fff4:	70 f4       	brcc	.+28     	; 0x10012 <__EEPROM_REGION_LENGTH__+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3239
    {
      str1[cnt] = topic[f];
    fff6:	e8 ec       	ldi	r30, 0xC8	; 200
    fff8:	f0 e0       	ldi	r31, 0x00	; 0
    fffa:	ec 0f       	add	r30, r28
    fffc:	fd 1f       	adc	r31, r29
    fffe:	e8 0f       	add	r30, r24
   10000:	f1 1d       	adc	r31, r1
   10002:	28 0d       	add	r18, r8
   10004:	39 1d       	adc	r19, r9
   10006:	d9 01       	movw	r26, r18
   10008:	8c 91       	ld	r24, X
   1000a:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3240
      str1[cnt + 1] = 0;
   1000c:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1000e:	0f 5f       	subi	r16, 0xFF	; 255
   10010:	e4 cf       	rjmp	.-56     	; 0xffda <__DATA_REGION_LENGTH__+0x1da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   10012:	64 ef       	ldi	r22, 0xF4	; 244
   10014:	73 e0       	ldi	r23, 0x03	; 3
   10016:	ce 01       	movw	r24, r28
   10018:	88 53       	subi	r24, 0x38	; 56
   1001a:	9f 4f       	sbci	r25, 0xFF	; 255
   1001c:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   10020:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
    pch = strtok (str1, "/");
    while (pch != NULL)
   10022:	00 97       	sbiw	r24, 0x00	; 0
   10024:	29 f1       	breq	.+74     	; 0x10070 <__EEPROM_REGION_LENGTH__+0x70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
    {
      if (cnt == 0) id = atoi(my_payload);
   10026:	11 11       	cpse	r17, r1
   10028:	0d c0       	rjmp	.+26     	; 0x10044 <__EEPROM_REGION_LENGTH__+0x44>
   1002a:	8f e4       	ldi	r24, 0x4F	; 79
   1002c:	9b e0       	ldi	r25, 0x0B	; 11
   1002e:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   10032:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
      if (id < MAX_THERMOSTAT)
   10034:	b4 e0       	ldi	r27, 0x04	; 4
   10036:	b8 17       	cp	r27, r24
   10038:	98 f4       	brcc	.+38     	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3254
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   1003a:	86 e3       	ldi	r24, 0x36	; 54
   1003c:	95 e0       	ldi	r25, 0x05	; 5
   1003e:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
   10042:	0e c0       	rjmp	.+28     	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   10044:	e4 e0       	ldi	r30, 0x04	; 4
   10046:	e7 15       	cp	r30, r7
   10048:	c0 f3       	brcs	.-16     	; 0x1003a <__EEPROM_REGION_LENGTH__+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3250
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   1004a:	11 30       	cpi	r17, 0x01	; 1
   1004c:	49 f4       	brne	.+18     	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
   1004e:	62 e5       	ldi	r22, 0x52	; 82
   10050:	73 e0       	ldi	r23, 0x03	; 3
   10052:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10056:	89 2b       	or	r24, r25
   10058:	19 f4       	brne	.+6      	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
   1005a:	87 2d       	mov	r24, r7
   1005c:	0e 94 41 51 	call	0xa282	; 0xa282 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3256
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   10060:	64 ef       	ldi	r22, 0xF4	; 244
   10062:	73 e0       	ldi	r23, 0x03	; 3
   10064:	90 e0       	ldi	r25, 0x00	; 0
   10066:	80 e0       	ldi	r24, 0x00	; 0
   10068:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3257
      cnt++;
   1006c:	1f 5f       	subi	r17, 0xFF	; 255
   1006e:	d9 cf       	rjmp	.-78     	; 0x10022 <__EEPROM_REGION_LENGTH__+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   10070:	64 e3       	ldi	r22, 0x34	; 52
   10072:	78 e5       	ldi	r23, 0x58	; 88
   10074:	c5 01       	movw	r24, r10
   10076:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3277
  strcat(str1, device.nazev);
   1007a:	6e eb       	ldi	r22, 0xBE	; 190
   1007c:	7c e0       	ldi	r23, 0x0C	; 12
   1007e:	c5 01       	movw	r24, r10
   10080:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
  strcat(str1, "/ring/set/");
   10084:	66 e4       	ldi	r22, 0x46	; 70
   10086:	75 e0       	ldi	r23, 0x05	; 5
   10088:	c5 01       	movw	r24, r10
   1008a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3279
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1008e:	f5 01       	movw	r30, r10
   10090:	01 90       	ld	r0, Z+
   10092:	00 20       	and	r0, r0
   10094:	e9 f7       	brne	.-6      	; 0x10090 <__EEPROM_REGION_LENGTH__+0x90>
   10096:	31 97       	sbiw	r30, 0x01	; 1
   10098:	8f 01       	movw	r16, r30
   1009a:	0a 19       	sub	r16, r10
   1009c:	1b 09       	sbc	r17, r11
   1009e:	a8 01       	movw	r20, r16
   100a0:	b4 01       	movw	r22, r8
   100a2:	c5 01       	movw	r24, r10
   100a4:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   100a8:	89 2b       	or	r24, r25
   100aa:	09 f0       	breq	.+2      	; 0x100ae <__EEPROM_REGION_LENGTH__+0xae>
   100ac:	b4 c1       	rjmp	.+872    	; 0x10416 <__EEPROM_REGION_LENGTH__+0x416>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   100ae:	90 2f       	mov	r25, r16
   100b0:	80 2f       	mov	r24, r16
   100b2:	89 1b       	sub	r24, r25
   100b4:	20 2f       	mov	r18, r16
   100b6:	30 e0       	ldi	r19, 0x00	; 0
   100b8:	f4 01       	movw	r30, r8
   100ba:	01 90       	ld	r0, Z+
   100bc:	00 20       	and	r0, r0
   100be:	e9 f7       	brne	.-6      	; 0x100ba <__EEPROM_REGION_LENGTH__+0xba>
   100c0:	31 97       	sbiw	r30, 0x01	; 1
   100c2:	e8 19       	sub	r30, r8
   100c4:	f9 09       	sbc	r31, r9
   100c6:	2e 17       	cp	r18, r30
   100c8:	3f 07       	cpc	r19, r31
   100ca:	70 f4       	brcc	.+28     	; 0x100e8 <__EEPROM_REGION_LENGTH__+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284
    {
      str1[cnt] = topic[f];
   100cc:	e8 ec       	ldi	r30, 0xC8	; 200
   100ce:	f0 e0       	ldi	r31, 0x00	; 0
   100d0:	ec 0f       	add	r30, r28
   100d2:	fd 1f       	adc	r31, r29
   100d4:	e8 0f       	add	r30, r24
   100d6:	f1 1d       	adc	r31, r1
   100d8:	28 0d       	add	r18, r8
   100da:	39 1d       	adc	r19, r9
   100dc:	d9 01       	movw	r26, r18
   100de:	8c 91       	ld	r24, X
   100e0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3285
      str1[cnt + 1] = 0;
   100e2:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3282
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   100e4:	0f 5f       	subi	r16, 0xFF	; 255
   100e6:	e4 cf       	rjmp	.-56     	; 0x100b0 <__EEPROM_REGION_LENGTH__+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   100e8:	64 ef       	ldi	r22, 0xF4	; 244
   100ea:	73 e0       	ldi	r23, 0x03	; 3
   100ec:	ce 01       	movw	r24, r28
   100ee:	88 53       	subi	r24, 0x38	; 56
   100f0:	9f 4f       	sbci	r25, 0xFF	; 255
   100f2:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   100f6:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   100f8:	e1 2c       	mov	r14, r1
thermostat_ring_set_output():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   100fa:	51 e2       	ldi	r21, 0x21	; 33
   100fc:	d5 2e       	mov	r13, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3290
    pch = strtok (str1, "/");
    while (pch != NULL)
   100fe:	01 15       	cp	r16, r1
   10100:	11 05       	cpc	r17, r1
   10102:	09 f4       	brne	.+2      	; 0x10106 <__EEPROM_REGION_LENGTH__+0x106>
   10104:	88 c1       	rjmp	.+784    	; 0x10416 <__EEPROM_REGION_LENGTH__+0x416>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3292
    {
      if (cnt == 0) id = atoi(pch);
   10106:	e1 10       	cpse	r14, r1
   10108:	0d c0       	rjmp	.+26     	; 0x10124 <__EEPROM_REGION_LENGTH__+0x124>
   1010a:	c8 01       	movw	r24, r16
   1010c:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   10110:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
      if (id < MAX_THERMOSTAT)
   10112:	b4 e0       	ldi	r27, 0x04	; 4
   10114:	b8 17       	cp	r27, r24
   10116:	08 f0       	brcs	.+2      	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
   10118:	75 c1       	rjmp	.+746    	; 0x10404 <__EEPROM_REGION_LENGTH__+0x404>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   1011a:	86 e3       	ldi	r24, 0x36	; 54
   1011c:	95 e0       	ldi	r25, 0x05	; 5
   1011e:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
   10122:	70 c1       	rjmp	.+736    	; 0x10404 <__EEPROM_REGION_LENGTH__+0x404>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3293
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   10124:	e4 e0       	ldi	r30, 0x04	; 4
   10126:	e7 15       	cp	r30, r7
   10128:	c0 f3       	brcs	.-16     	; 0x1011a <__EEPROM_REGION_LENGTH__+0x11a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3295
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   1012a:	f1 e0       	ldi	r31, 0x01	; 1
   1012c:	ef 12       	cpse	r14, r31
   1012e:	6a c1       	rjmp	.+724    	; 0x10404 <__EEPROM_REGION_LENGTH__+0x404>
   10130:	6d ec       	ldi	r22, 0xCD	; 205
   10132:	73 e0       	ldi	r23, 0x03	; 3
   10134:	c8 01       	movw	r24, r16
   10136:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   1013a:	89 2b       	or	r24, r25
   1013c:	29 f4       	brne	.+10     	; 0x10148 <__EEPROM_REGION_LENGTH__+0x148>
   1013e:	6f e4       	ldi	r22, 0x4F	; 79
   10140:	7b e0       	ldi	r23, 0x0B	; 11
   10142:	87 2d       	mov	r24, r7
   10144:	0e 94 0c 67 	call	0xce18	; 0xce18 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3296
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   10148:	65 e5       	ldi	r22, 0x55	; 85
   1014a:	76 e0       	ldi	r23, 0x06	; 6
   1014c:	c8 01       	movw	r24, r16
   1014e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10152:	89 2b       	or	r24, r25
   10154:	59 f4       	brne	.+22     	; 0x1016c <__EEPROM_REGION_LENGTH__+0x16c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3297
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   10156:	8f e4       	ldi	r24, 0x4F	; 79
   10158:	9b e0       	ldi	r25, 0x0B	; 11
   1015a:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   1015e:	88 30       	cpi	r24, 0x08	; 8
   10160:	91 05       	cpc	r25, r1
   10162:	24 f4       	brge	.+8      	; 0x1016c <__EEPROM_REGION_LENGTH__+0x16c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3298
            thermostat_ring_set_program_id(id, atoi(my_payload));
   10164:	68 2f       	mov	r22, r24
   10166:	87 2d       	mov	r24, r7
   10168:	0e 94 fa 66 	call	0xcdf4	; 0xcdf4 <thermostat_ring_set_program_id(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3299
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   1016c:	6d e5       	ldi	r22, 0x5D	; 93
   1016e:	76 e0       	ldi	r23, 0x06	; 6
   10170:	c8 01       	movw	r24, r16
   10172:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10176:	89 2b       	or	r24, r25
   10178:	79 f4       	brne	.+30     	; 0x10198 <__EEPROM_REGION_LENGTH__+0x198>
   1017a:	8f e4       	ldi	r24, 0x4F	; 79
   1017c:	9b e0       	ldi	r25, 0x0B	; 11
   1017e:	0e 94 be c3 	call	0x1877c	; 0x1877c <atof>
   10182:	20 e0       	ldi	r18, 0x00	; 0
   10184:	30 e0       	ldi	r19, 0x00	; 0
   10186:	40 e2       	ldi	r20, 0x20	; 32
   10188:	51 e4       	ldi	r21, 0x41	; 65
   1018a:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
   1018e:	0e 94 1d cf 	call	0x19e3a	; 0x19e3a <__fixsfsi>
   10192:	87 2d       	mov	r24, r7
   10194:	0e 94 d3 66 	call	0xcda6	; 0xcda6 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3300
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
   10198:	6b e4       	ldi	r22, 0x4B	; 75
   1019a:	76 e0       	ldi	r23, 0x06	; 6
   1019c:	c8 01       	movw	r24, r16
   1019e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   101a2:	89 2b       	or	r24, r25
   101a4:	41 f4       	brne	.+16     	; 0x101b6 <__EEPROM_REGION_LENGTH__+0x1b6>
   101a6:	8f e4       	ldi	r24, 0x4F	; 79
   101a8:	9b e0       	ldi	r25, 0x0B	; 11
   101aa:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   101ae:	bc 01       	movw	r22, r24
   101b0:	87 2d       	mov	r24, r7
   101b2:	0e 94 d3 66 	call	0xcda6	; 0xcda6 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3301
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   101b6:	69 e6       	ldi	r22, 0x69	; 105
   101b8:	76 e0       	ldi	r23, 0x06	; 6
   101ba:	c8 01       	movw	r24, r16
   101bc:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   101c0:	89 2b       	or	r24, r25
   101c2:	09 f0       	breq	.+2      	; 0x101c6 <__EEPROM_REGION_LENGTH__+0x1c6>
   101c4:	52 c0       	rjmp	.+164    	; 0x1026a <__EEPROM_REGION_LENGTH__+0x26a>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
   101c6:	61 e5       	ldi	r22, 0x51	; 81
   101c8:	75 e0       	ldi	r23, 0x05	; 5
   101ca:	8f e4       	ldi	r24, 0x4F	; 79
   101cc:	9b e0       	ldi	r25, 0x0B	; 11
   101ce:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   101d2:	ff 24       	eor	r15, r15
   101d4:	f3 94       	inc	r15
   101d6:	89 2b       	or	r24, r25
   101d8:	09 f0       	breq	.+2      	; 0x101dc <__EEPROM_REGION_LENGTH__+0x1dc>
   101da:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4010
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
   101dc:	66 e5       	ldi	r22, 0x56	; 86
   101de:	75 e0       	ldi	r23, 0x05	; 5
   101e0:	8f e4       	ldi	r24, 0x4F	; 79
   101e2:	9b e0       	ldi	r25, 0x0B	; 11
   101e4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   101e8:	89 2b       	or	r24, r25
   101ea:	11 f4       	brne	.+4      	; 0x101f0 <__EEPROM_REGION_LENGTH__+0x1f0>
_Z13mqtt_callbackPcPhj():
   101ec:	43 e0       	ldi	r20, 0x03	; 3
   101ee:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
   101f0:	6d e5       	ldi	r22, 0x5D	; 93
   101f2:	75 e0       	ldi	r23, 0x05	; 5
   101f4:	8f e4       	ldi	r24, 0x4F	; 79
   101f6:	9b e0       	ldi	r25, 0x0B	; 11
   101f8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   101fc:	89 2b       	or	r24, r25
   101fe:	11 f4       	brne	.+4      	; 0x10204 <__EEPROM_REGION_LENGTH__+0x204>
_Z13mqtt_callbackPcPhj():
   10200:	32 e0       	ldi	r19, 0x02	; 2
   10202:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
   10204:	62 e6       	ldi	r22, 0x62	; 98
   10206:	75 e0       	ldi	r23, 0x05	; 5
   10208:	8f e4       	ldi	r24, 0x4F	; 79
   1020a:	9b e0       	ldi	r25, 0x0B	; 11
   1020c:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10210:	89 2b       	or	r24, r25
   10212:	11 f4       	brne	.+4      	; 0x10218 <__EEPROM_REGION_LENGTH__+0x218>
_Z13mqtt_callbackPcPhj():
   10214:	24 e0       	ldi	r18, 0x04	; 4
   10216:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
   10218:	67 e6       	ldi	r22, 0x67	; 103
   1021a:	75 e0       	ldi	r23, 0x05	; 5
   1021c:	8f e4       	ldi	r24, 0x4F	; 79
   1021e:	9b e0       	ldi	r25, 0x0B	; 11
   10220:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10224:	89 2b       	or	r24, r25
   10226:	11 f4       	brne	.+4      	; 0x1022c <__EEPROM_REGION_LENGTH__+0x22c>
_Z13mqtt_callbackPcPhj():
   10228:	96 e0       	ldi	r25, 0x06	; 6
   1022a:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
   1022c:	c1 5c       	subi	r28, 0xC1	; 193
   1022e:	de 4f       	sbci	r29, 0xFE	; 254
   10230:	f8 82       	st	Y, r15
   10232:	cf 53       	subi	r28, 0x3F	; 63
   10234:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3304
          thermostat_ring_set_mode(id, active);
   10236:	6f 2d       	mov	r22, r15
   10238:	87 2d       	mov	r24, r7
   1023a:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3305
          if (active == TERM_MODE_MAN_HEAT)
   1023e:	c1 5c       	subi	r28, 0xC1	; 193
   10240:	de 4f       	sbci	r29, 0xFE	; 254
   10242:	88 81       	ld	r24, Y
   10244:	cf 53       	subi	r28, 0x3F	; 63
   10246:	d1 40       	sbci	r29, 0x01	; 1
   10248:	83 30       	cpi	r24, 0x03	; 3
   1024a:	21 f4       	brne	.+8      	; 0x10254 <__EEPROM_REGION_LENGTH__+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   1024c:	60 e0       	ldi	r22, 0x00	; 0
   1024e:	87 2d       	mov	r24, r7
   10250:	0e 94 99 ae 	call	0x15d32	; 0x15d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
          if (active == TERM_MODE_MAN_COOL)
   10254:	c1 5c       	subi	r28, 0xC1	; 193
   10256:	de 4f       	sbci	r29, 0xFE	; 254
   10258:	88 81       	ld	r24, Y
   1025a:	cf 53       	subi	r28, 0x3F	; 63
   1025c:	d1 40       	sbci	r29, 0x01	; 1
   1025e:	85 30       	cpi	r24, 0x05	; 5
   10260:	21 f4       	brne	.+8      	; 0x1026a <__EEPROM_REGION_LENGTH__+0x26a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3308
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   10262:	61 e0       	ldi	r22, 0x01	; 1
   10264:	87 2d       	mov	r24, r7
   10266:	0e 94 99 ae 	call	0x15d32	; 0x15d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3310
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   1026a:	6e e6       	ldi	r22, 0x6E	; 110
   1026c:	76 e0       	ldi	r23, 0x06	; 6
   1026e:	c8 01       	movw	r24, r16
   10270:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10274:	89 2b       	or	r24, r25
   10276:	19 f5       	brne	.+70     	; 0x102be <__EEPROM_REGION_LENGTH__+0x2be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
        {
          active = atoi(my_payload);
   10278:	8f e4       	ldi	r24, 0x4F	; 79
   1027a:	9b e0       	ldi	r25, 0x0B	; 11
   1027c:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   10280:	c1 5c       	subi	r28, 0xC1	; 193
   10282:	de 4f       	sbci	r29, 0xFE	; 254
   10284:	88 83       	st	Y, r24
   10286:	cf 53       	subi	r28, 0x3F	; 63
   10288:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3313
          thermostat_ring_set_mode(id, active);
   1028a:	68 2f       	mov	r22, r24
   1028c:	87 2d       	mov	r24, r7
   1028e:	0e 94 b8 66 	call	0xcd70	; 0xcd70 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3314
          if (active == TERM_MODE_MAN_HEAT)
   10292:	c1 5c       	subi	r28, 0xC1	; 193
   10294:	de 4f       	sbci	r29, 0xFE	; 254
   10296:	88 81       	ld	r24, Y
   10298:	cf 53       	subi	r28, 0x3F	; 63
   1029a:	d1 40       	sbci	r29, 0x01	; 1
   1029c:	83 30       	cpi	r24, 0x03	; 3
   1029e:	21 f4       	brne	.+8      	; 0x102a8 <__EEPROM_REGION_LENGTH__+0x2a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   102a0:	60 e0       	ldi	r22, 0x00	; 0
   102a2:	87 2d       	mov	r24, r7
   102a4:	0e 94 99 ae 	call	0x15d32	; 0x15d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3316
          if (active == TERM_MODE_MAN_COOL)
   102a8:	c1 5c       	subi	r28, 0xC1	; 193
   102aa:	de 4f       	sbci	r29, 0xFE	; 254
   102ac:	88 81       	ld	r24, Y
   102ae:	cf 53       	subi	r28, 0x3F	; 63
   102b0:	d1 40       	sbci	r29, 0x01	; 1
   102b2:	85 30       	cpi	r24, 0x05	; 5
   102b4:	21 f4       	brne	.+8      	; 0x102be <__EEPROM_REGION_LENGTH__+0x2be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3317
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   102b6:	61 e0       	ldi	r22, 0x01	; 1
   102b8:	87 2d       	mov	r24, r7
   102ba:	0e 94 99 ae 	call	0x15d32	; 0x15d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   102be:	63 e7       	ldi	r22, 0x73	; 115
   102c0:	76 e0       	ldi	r23, 0x06	; 6
   102c2:	c8 01       	movw	r24, r16
   102c4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   102c8:	89 2b       	or	r24, r25
   102ca:	69 f4       	brne	.+26     	; 0x102e6 <__EEPROM_REGION_LENGTH__+0x2e6>
   102cc:	8f e4       	ldi	r24, 0x4F	; 79
   102ce:	9b e0       	ldi	r25, 0x0B	; 11
   102d0:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   102d4:	7d 9c       	mul	r7, r13
   102d6:	90 01       	movw	r18, r0
   102d8:	11 24       	eor	r1, r1
   102da:	68 2f       	mov	r22, r24
   102dc:	c9 01       	movw	r24, r18
   102de:	84 5a       	subi	r24, 0xA4	; 164
   102e0:	9e 4f       	sbci	r25, 0xFE	; 254
   102e2:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3321
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   102e6:	67 ed       	ldi	r22, 0xD7	; 215
   102e8:	73 e0       	ldi	r23, 0x03	; 3
   102ea:	c8 01       	movw	r24, r16
   102ec:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   102f0:	89 2b       	or	r24, r25
   102f2:	69 f4       	brne	.+26     	; 0x1030e <__EEPROM_REGION_LENGTH__+0x30e>
   102f4:	8f e4       	ldi	r24, 0x4F	; 79
   102f6:	9b e0       	ldi	r25, 0x0B	; 11
   102f8:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   102fc:	7d 9c       	mul	r7, r13
   102fe:	90 01       	movw	r18, r0
   10300:	11 24       	eor	r1, r1
   10302:	68 2f       	mov	r22, r24
   10304:	c9 01       	movw	r24, r18
   10306:	83 5a       	subi	r24, 0xA3	; 163
   10308:	9e 4f       	sbci	r25, 0xFE	; 254
   1030a:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3322
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   1030e:	69 e7       	ldi	r22, 0x79	; 121
   10310:	76 e0       	ldi	r23, 0x06	; 6
   10312:	c8 01       	movw	r24, r16
   10314:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10318:	89 2b       	or	r24, r25
   1031a:	69 f4       	brne	.+26     	; 0x10336 <__EEPROM_REGION_LENGTH__+0x336>
   1031c:	8f e4       	ldi	r24, 0x4F	; 79
   1031e:	9b e0       	ldi	r25, 0x0B	; 11
   10320:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   10324:	7d 9c       	mul	r7, r13
   10326:	90 01       	movw	r18, r0
   10328:	11 24       	eor	r1, r1
   1032a:	68 2f       	mov	r22, r24
   1032c:	c9 01       	movw	r24, r18
   1032e:	81 5a       	subi	r24, 0xA1	; 161
   10330:	9e 4f       	sbci	r25, 0xFE	; 254
   10332:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   10336:	60 e8       	ldi	r22, 0x80	; 128
   10338:	76 e0       	ldi	r23, 0x06	; 6
   1033a:	c8 01       	movw	r24, r16
   1033c:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10340:	89 2b       	or	r24, r25
   10342:	a1 f4       	brne	.+40     	; 0x1036c <__EEPROM_REGION_LENGTH__+0x36c>
   10344:	8f e4       	ldi	r24, 0x4F	; 79
   10346:	9b e0       	ldi	r25, 0x0B	; 11
   10348:	0e 94 be c3 	call	0x1877c	; 0x1877c <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
   1034c:	24 e0       	ldi	r18, 0x04	; 4
   1034e:	72 9e       	mul	r7, r18
   10350:	f0 01       	movw	r30, r0
   10352:	11 24       	eor	r1, r1
   10354:	e5 52       	subi	r30, 0x25	; 37
   10356:	f6 4f       	sbci	r31, 0xF6	; 246
   10358:	60 83       	st	Z, r22
   1035a:	71 83       	std	Z+1, r23	; 0x01
   1035c:	82 83       	std	Z+2, r24	; 0x02
   1035e:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   10360:	87 2d       	mov	r24, r7
   10362:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   10366:	87 2d       	mov	r24, r7
   10368:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3324
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   1036c:	67 e8       	ldi	r22, 0x87	; 135
   1036e:	76 e0       	ldi	r23, 0x06	; 6
   10370:	c8 01       	movw	r24, r16
   10372:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10376:	89 2b       	or	r24, r25
   10378:	a1 f4       	brne	.+40     	; 0x103a2 <__EEPROM_REGION_LENGTH__+0x3a2>
   1037a:	8f e4       	ldi	r24, 0x4F	; 79
   1037c:	9b e0       	ldi	r25, 0x0B	; 11
   1037e:	0e 94 be c3 	call	0x1877c	; 0x1877c <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
   10382:	a4 e0       	ldi	r26, 0x04	; 4
   10384:	7a 9e       	mul	r7, r26
   10386:	f0 01       	movw	r30, r0
   10388:	11 24       	eor	r1, r1
   1038a:	e1 51       	subi	r30, 0x11	; 17
   1038c:	f6 4f       	sbci	r31, 0xF6	; 246
   1038e:	60 83       	st	Z, r22
   10390:	71 83       	std	Z+1, r23	; 0x01
   10392:	82 83       	std	Z+2, r24	; 0x02
   10394:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   10396:	87 2d       	mov	r24, r7
   10398:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   1039c:	87 2d       	mov	r24, r7
   1039e:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   103a2:	6e e8       	ldi	r22, 0x8E	; 142
   103a4:	76 e0       	ldi	r23, 0x06	; 6
   103a6:	c8 01       	movw	r24, r16
   103a8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   103ac:	89 2b       	or	r24, r25
   103ae:	a1 f4       	brne	.+40     	; 0x103d8 <__EEPROM_REGION_LENGTH__+0x3d8>
   103b0:	8f e4       	ldi	r24, 0x4F	; 79
   103b2:	9b e0       	ldi	r25, 0x0B	; 11
   103b4:	0e 94 be c3 	call	0x1877c	; 0x1877c <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
   103b8:	b4 e0       	ldi	r27, 0x04	; 4
   103ba:	7b 9e       	mul	r7, r27
   103bc:	f0 01       	movw	r30, r0
   103be:	11 24       	eor	r1, r1
   103c0:	ed 5f       	subi	r30, 0xFD	; 253
   103c2:	f5 4f       	sbci	r31, 0xF5	; 245
   103c4:	60 83       	st	Z, r22
   103c6:	71 83       	std	Z+1, r23	; 0x01
   103c8:	82 83       	std	Z+2, r24	; 0x02
   103ca:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   103cc:	87 2d       	mov	r24, r7
   103ce:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   103d2:	87 2d       	mov	r24, r7
   103d4:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   103d8:	65 e9       	ldi	r22, 0x95	; 149
   103da:	76 e0       	ldi	r23, 0x06	; 6
   103dc:	c8 01       	movw	r24, r16
   103de:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   103e2:	89 2b       	or	r24, r25
   103e4:	79 f4       	brne	.+30     	; 0x10404 <__EEPROM_REGION_LENGTH__+0x404>
   103e6:	8f e4       	ldi	r24, 0x4F	; 79
   103e8:	9b e0       	ldi	r25, 0x0B	; 11
   103ea:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
   103ee:	e7 2d       	mov	r30, r7
   103f0:	f0 e0       	ldi	r31, 0x00	; 0
   103f2:	e9 5e       	subi	r30, 0xE9	; 233
   103f4:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
   103f6:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   103f8:	87 2d       	mov	r24, r7
   103fa:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   103fe:	87 2d       	mov	r24, r7
   10400:	0e 94 20 66 	call	0xcc40	; 0xcc40 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   10404:	64 ef       	ldi	r22, 0xF4	; 244
   10406:	73 e0       	ldi	r23, 0x03	; 3
   10408:	90 e0       	ldi	r25, 0x00	; 0
   1040a:	80 e0       	ldi	r24, 0x00	; 0
   1040c:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   10410:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
      cnt++;
   10412:	e3 94       	inc	r14
   10414:	74 ce       	rjmp	.-792    	; 0x100fe <__EEPROM_REGION_LENGTH__+0xfe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   10416:	64 e3       	ldi	r22, 0x34	; 52
   10418:	78 e5       	ldi	r23, 0x58	; 88
   1041a:	c5 01       	movw	r24, r10
   1041c:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3339
  strcat(str1, device.nazev);
   10420:	6e eb       	ldi	r22, 0xBE	; 190
   10422:	7c e0       	ldi	r23, 0x0C	; 12
   10424:	c5 01       	movw	r24, r10
   10426:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
  strcat(str1, "/ring/clear");
   1042a:	60 e7       	ldi	r22, 0x70	; 112
   1042c:	75 e0       	ldi	r23, 0x05	; 5
   1042e:	c5 01       	movw	r24, r10
   10430:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10434:	f5 01       	movw	r30, r10
   10436:	01 90       	ld	r0, Z+
   10438:	00 20       	and	r0, r0
   1043a:	e9 f7       	brne	.-6      	; 0x10436 <__EEPROM_REGION_LENGTH__+0x436>
   1043c:	31 97       	sbiw	r30, 0x01	; 1
   1043e:	af 01       	movw	r20, r30
   10440:	4a 19       	sub	r20, r10
   10442:	5b 09       	sbc	r21, r11
   10444:	b4 01       	movw	r22, r8
   10446:	c5 01       	movw	r24, r10
   10448:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   1044c:	89 2b       	or	r24, r25
   1044e:	a1 f4       	brne	.+40     	; 0x10478 <__EEPROM_REGION_LENGTH__+0x478>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
  {
    mqtt_process_message++;
   10450:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10454:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10458:	01 96       	adiw	r24, 0x01	; 1
   1045a:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   1045e:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
    id = atoi(my_payload);
   10462:	8f e4       	ldi	r24, 0x4F	; 79
   10464:	9b e0       	ldi	r25, 0x0B	; 11
   10466:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   1046a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
    if (id < MAX_THERMOSTAT)
   1046c:	e4 e0       	ldi	r30, 0x04	; 4
   1046e:	e8 17       	cp	r30, r24
   10470:	08 f4       	brcc	.+2      	; 0x10474 <__EEPROM_REGION_LENGTH__+0x474>
   10472:	9c c1       	rjmp	.+824    	; 0x107ac <__EEPROM_REGION_LENGTH__+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
    {
      thermostat_ring_clear(id);
   10474:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3358
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   10478:	64 e3       	ldi	r22, 0x34	; 52
   1047a:	78 e5       	ldi	r23, 0x58	; 88
   1047c:	c5 01       	movw	r24, r10
   1047e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3359
  strcat(str1, device.nazev);
   10482:	6e eb       	ldi	r22, 0xBE	; 190
   10484:	7c e0       	ldi	r23, 0x0C	; 12
   10486:	c5 01       	movw	r24, r10
   10488:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
  strcat(str1, "/network/get/config");
   1048c:	6e e8       	ldi	r22, 0x8E	; 142
   1048e:	75 e0       	ldi	r23, 0x05	; 5
   10490:	c5 01       	movw	r24, r10
   10492:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10496:	f5 01       	movw	r30, r10
   10498:	01 90       	ld	r0, Z+
   1049a:	00 20       	and	r0, r0
   1049c:	e9 f7       	brne	.-6      	; 0x10498 <__EEPROM_REGION_LENGTH__+0x498>
   1049e:	31 97       	sbiw	r30, 0x01	; 1
   104a0:	af 01       	movw	r20, r30
   104a2:	4a 19       	sub	r20, r10
   104a4:	5b 09       	sbc	r21, r11
   104a6:	b4 01       	movw	r22, r8
   104a8:	c5 01       	movw	r24, r10
   104aa:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   104ae:	89 2b       	or	r24, r25
   104b0:	09 f0       	breq	.+2      	; 0x104b4 <__EEPROM_REGION_LENGTH__+0x4b4>
   104b2:	2f c1       	rjmp	.+606    	; 0x10712 <__EEPROM_REGION_LENGTH__+0x712>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
  {
    mqtt_process_message++;
   104b4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   104b8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   104bc:	01 96       	adiw	r24, 0x01	; 1
   104be:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   104c2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:263
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
   104c6:	c8 5d       	subi	r28, 0xD8	; 216
   104c8:	de 4f       	sbci	r29, 0xFE	; 254
   104ca:	18 82       	st	Y, r1
   104cc:	c8 52       	subi	r28, 0x28	; 40
   104ce:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:264
  createString(payload, ':', device.mac, 6, 16);
   104d0:	00 e1       	ldi	r16, 0x10	; 16
   104d2:	26 e0       	ldi	r18, 0x06	; 6
   104d4:	48 ea       	ldi	r20, 0xA8	; 168
   104d6:	5c e0       	ldi	r21, 0x0C	; 12
   104d8:	6a e3       	ldi	r22, 0x3A	; 58
   104da:	ce 01       	movw	r24, r28
   104dc:	88 5d       	subi	r24, 0xD8	; 216
   104de:	9e 4f       	sbci	r25, 0xFE	; 254
   104e0:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:265
  strcpy_P(str_topic, network_mac);
   104e4:	65 ea       	ldi	r22, 0xA5	; 165
   104e6:	77 e5       	ldi	r23, 0x57	; 87
   104e8:	ce 01       	movw	r24, r28
   104ea:	88 5b       	subi	r24, 0xB8	; 184
   104ec:	9f 4f       	sbci	r25, 0xFF	; 255
   104ee:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   104f2:	ae 01       	movw	r20, r28
   104f4:	48 5d       	subi	r20, 0xD8	; 216
   104f6:	5e 4f       	sbci	r21, 0xFE	; 254
   104f8:	be 01       	movw	r22, r28
   104fa:	68 5b       	subi	r22, 0xB8	; 184
   104fc:	7f 4f       	sbci	r23, 0xFF	; 255
   104fe:	8b e9       	ldi	r24, 0x9B	; 155
   10500:	9e e0       	ldi	r25, 0x0E	; 14
   10502:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:268
  ///
  payload[0] = 0;
   10506:	c8 5d       	subi	r28, 0xD8	; 216
   10508:	de 4f       	sbci	r29, 0xFE	; 254
   1050a:	18 82       	st	Y, r1
   1050c:	c8 52       	subi	r28, 0x28	; 40
   1050e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:269
  createString(payload, '.', device.myIP, 4, 10);
   10510:	0a e0       	ldi	r16, 0x0A	; 10
   10512:	24 e0       	ldi	r18, 0x04	; 4
   10514:	4e ea       	ldi	r20, 0xAE	; 174
   10516:	5c e0       	ldi	r21, 0x0C	; 12
   10518:	6e e2       	ldi	r22, 0x2E	; 46
   1051a:	ce 01       	movw	r24, r28
   1051c:	88 5d       	subi	r24, 0xD8	; 216
   1051e:	9e 4f       	sbci	r25, 0xFE	; 254
   10520:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:270
  strcpy_P(str_topic, network_ip);
   10524:	6e ed       	ldi	r22, 0xDE	; 222
   10526:	7b e5       	ldi	r23, 0x5B	; 91
   10528:	ce 01       	movw	r24, r28
   1052a:	88 5b       	subi	r24, 0xB8	; 184
   1052c:	9f 4f       	sbci	r25, 0xFF	; 255
   1052e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:271
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   10532:	ae 01       	movw	r20, r28
   10534:	48 5d       	subi	r20, 0xD8	; 216
   10536:	5e 4f       	sbci	r21, 0xFE	; 254
   10538:	be 01       	movw	r22, r28
   1053a:	68 5b       	subi	r22, 0xB8	; 184
   1053c:	7f 4f       	sbci	r23, 0xFF	; 255
   1053e:	8b e9       	ldi	r24, 0x9B	; 155
   10540:	9e e0       	ldi	r25, 0x0E	; 14
   10542:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:273
  ///
  payload[0] = 0;
   10546:	c8 5d       	subi	r28, 0xD8	; 216
   10548:	de 4f       	sbci	r29, 0xFE	; 254
   1054a:	18 82       	st	Y, r1
   1054c:	c8 52       	subi	r28, 0x28	; 40
   1054e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:274
  createString(payload, '.', device.myMASK, 4, 10);
   10550:	24 e0       	ldi	r18, 0x04	; 4
   10552:	42 eb       	ldi	r20, 0xB2	; 178
   10554:	5c e0       	ldi	r21, 0x0C	; 12
   10556:	6e e2       	ldi	r22, 0x2E	; 46
   10558:	ce 01       	movw	r24, r28
   1055a:	88 5d       	subi	r24, 0xD8	; 216
   1055c:	9e 4f       	sbci	r25, 0xFE	; 254
   1055e:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:275
  strcpy_P(str_topic, network_netmask);
   10562:	65 e9       	ldi	r22, 0x95	; 149
   10564:	77 e5       	ldi	r23, 0x57	; 87
   10566:	ce 01       	movw	r24, r28
   10568:	88 5b       	subi	r24, 0xB8	; 184
   1056a:	9f 4f       	sbci	r25, 0xFF	; 255
   1056c:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:276
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   10570:	ae 01       	movw	r20, r28
   10572:	48 5d       	subi	r20, 0xD8	; 216
   10574:	5e 4f       	sbci	r21, 0xFE	; 254
   10576:	be 01       	movw	r22, r28
   10578:	68 5b       	subi	r22, 0xB8	; 184
   1057a:	7f 4f       	sbci	r23, 0xFF	; 255
   1057c:	8b e9       	ldi	r24, 0x9B	; 155
   1057e:	9e e0       	ldi	r25, 0x0E	; 14
   10580:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:278
  ///
  payload[0] = 0;
   10584:	c8 5d       	subi	r28, 0xD8	; 216
   10586:	de 4f       	sbci	r29, 0xFE	; 254
   10588:	18 82       	st	Y, r1
   1058a:	c8 52       	subi	r28, 0x28	; 40
   1058c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:279
  createString(payload, '.', device.myGW, 4, 10);
   1058e:	24 e0       	ldi	r18, 0x04	; 4
   10590:	4a eb       	ldi	r20, 0xBA	; 186
   10592:	5c e0       	ldi	r21, 0x0C	; 12
   10594:	6e e2       	ldi	r22, 0x2E	; 46
   10596:	ce 01       	movw	r24, r28
   10598:	88 5d       	subi	r24, 0xD8	; 216
   1059a:	9e 4f       	sbci	r25, 0xFE	; 254
   1059c:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:280
  strcpy_P(str_topic, network_gw);
   105a0:	6a e8       	ldi	r22, 0x8A	; 138
   105a2:	77 e5       	ldi	r23, 0x57	; 87
   105a4:	ce 01       	movw	r24, r28
   105a6:	88 5b       	subi	r24, 0xB8	; 184
   105a8:	9f 4f       	sbci	r25, 0xFF	; 255
   105aa:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   105ae:	ae 01       	movw	r20, r28
   105b0:	48 5d       	subi	r20, 0xD8	; 216
   105b2:	5e 4f       	sbci	r21, 0xFE	; 254
   105b4:	be 01       	movw	r22, r28
   105b6:	68 5b       	subi	r22, 0xB8	; 184
   105b8:	7f 4f       	sbci	r23, 0xFF	; 255
   105ba:	8b e9       	ldi	r24, 0x9B	; 155
   105bc:	9e e0       	ldi	r25, 0x0E	; 14
   105be:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:283
  ///
  payload[0] = 0;
   105c2:	c8 5d       	subi	r28, 0xD8	; 216
   105c4:	de 4f       	sbci	r29, 0xFE	; 254
   105c6:	18 82       	st	Y, r1
   105c8:	c8 52       	subi	r28, 0x28	; 40
   105ca:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.myDNS, 4, 10);
   105cc:	24 e0       	ldi	r18, 0x04	; 4
   105ce:	46 eb       	ldi	r20, 0xB6	; 182
   105d0:	5c e0       	ldi	r21, 0x0C	; 12
   105d2:	6e e2       	ldi	r22, 0x2E	; 46
   105d4:	ce 01       	movw	r24, r28
   105d6:	88 5d       	subi	r24, 0xD8	; 216
   105d8:	9e 4f       	sbci	r25, 0xFE	; 254
   105da:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:285
  strcpy_P(str_topic, network_dns);
   105de:	6e e7       	ldi	r22, 0x7E	; 126
   105e0:	77 e5       	ldi	r23, 0x57	; 87
   105e2:	ce 01       	movw	r24, r28
   105e4:	88 5b       	subi	r24, 0xB8	; 184
   105e6:	9f 4f       	sbci	r25, 0xFF	; 255
   105e8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:286
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   105ec:	ae 01       	movw	r20, r28
   105ee:	48 5d       	subi	r20, 0xD8	; 216
   105f0:	5e 4f       	sbci	r21, 0xFE	; 254
   105f2:	be 01       	movw	r22, r28
   105f4:	68 5b       	subi	r22, 0xB8	; 184
   105f6:	7f 4f       	sbci	r23, 0xFF	; 255
   105f8:	8b e9       	ldi	r24, 0x9B	; 155
   105fa:	9e e0       	ldi	r25, 0x0E	; 14
   105fc:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:288
  ///
  payload[0] = 0;
   10600:	c8 5d       	subi	r28, 0xD8	; 216
   10602:	de 4f       	sbci	r29, 0xFE	; 254
   10604:	18 82       	st	Y, r1
   10606:	c8 52       	subi	r28, 0x28	; 40
   10608:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:289
  createString(payload, '.', device.ntp_server, 4, 10);
   1060a:	24 e0       	ldi	r18, 0x04	; 4
   1060c:	46 ef       	ldi	r20, 0xF6	; 246
   1060e:	5c e0       	ldi	r21, 0x0C	; 12
   10610:	6e e2       	ldi	r22, 0x2E	; 46
   10612:	ce 01       	movw	r24, r28
   10614:	88 5d       	subi	r24, 0xD8	; 216
   10616:	9e 4f       	sbci	r25, 0xFE	; 254
   10618:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:290
  strcpy_P(str_topic, network_ntp);
   1061c:	62 e7       	ldi	r22, 0x72	; 114
   1061e:	77 e5       	ldi	r23, 0x57	; 87
   10620:	ce 01       	movw	r24, r28
   10622:	88 5b       	subi	r24, 0xB8	; 184
   10624:	9f 4f       	sbci	r25, 0xFF	; 255
   10626:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1062a:	ae 01       	movw	r20, r28
   1062c:	48 5d       	subi	r20, 0xD8	; 216
   1062e:	5e 4f       	sbci	r21, 0xFE	; 254
   10630:	be 01       	movw	r22, r28
   10632:	68 5b       	subi	r22, 0xB8	; 184
   10634:	7f 4f       	sbci	r23, 0xFF	; 255
   10636:	8b e9       	ldi	r24, 0x9B	; 155
   10638:	9e e0       	ldi	r25, 0x0E	; 14
   1063a:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:293
  ///
  payload[0] = 0;
   1063e:	c8 5d       	subi	r28, 0xD8	; 216
   10640:	de 4f       	sbci	r29, 0xFE	; 254
   10642:	18 82       	st	Y, r1
   10644:	c8 52       	subi	r28, 0x28	; 40
   10646:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:294
  createString(payload, '.', device.mqtt_server, 4, 10);
   10648:	24 e0       	ldi	r18, 0x04	; 4
   1064a:	48 ec       	ldi	r20, 0xC8	; 200
   1064c:	5c e0       	ldi	r21, 0x0C	; 12
   1064e:	6e e2       	ldi	r22, 0x2E	; 46
   10650:	ce 01       	movw	r24, r28
   10652:	88 5d       	subi	r24, 0xD8	; 216
   10654:	9e 4f       	sbci	r25, 0xFE	; 254
   10656:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:295
  strcpy_P(str_topic, network_mqtt_host);
   1065a:	60 e6       	ldi	r22, 0x60	; 96
   1065c:	77 e5       	ldi	r23, 0x57	; 87
   1065e:	ce 01       	movw	r24, r28
   10660:	88 5b       	subi	r24, 0xB8	; 184
   10662:	9f 4f       	sbci	r25, 0xFF	; 255
   10664:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:296
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   10668:	ae 01       	movw	r20, r28
   1066a:	48 5d       	subi	r20, 0xD8	; 216
   1066c:	5e 4f       	sbci	r21, 0xFE	; 254
   1066e:	be 01       	movw	r22, r28
   10670:	68 5b       	subi	r22, 0xB8	; 184
   10672:	7f 4f       	sbci	r23, 0xFF	; 255
   10674:	8b e9       	ldi	r24, 0x9B	; 155
   10676:	9e e0       	ldi	r25, 0x0E	; 14
   10678:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1067c:	4a e0       	ldi	r20, 0x0A	; 10
   1067e:	be 01       	movw	r22, r28
   10680:	68 5d       	subi	r22, 0xD8	; 216
   10682:	7e 4f       	sbci	r23, 0xFE	; 254
   10684:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <device+0x24>
   10688:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <device+0x25>
   1068c:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:299
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
   10690:	6e e4       	ldi	r22, 0x4E	; 78
   10692:	77 e5       	ldi	r23, 0x57	; 87
   10694:	ce 01       	movw	r24, r28
   10696:	88 5b       	subi	r24, 0xB8	; 184
   10698:	9f 4f       	sbci	r25, 0xFF	; 255
   1069a:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:300
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1069e:	ae 01       	movw	r20, r28
   106a0:	48 5d       	subi	r20, 0xD8	; 216
   106a2:	5e 4f       	sbci	r21, 0xFE	; 254
   106a4:	be 01       	movw	r22, r28
   106a6:	68 5b       	subi	r22, 0xB8	; 184
   106a8:	7f 4f       	sbci	r23, 0xFF	; 255
   106aa:	8b e9       	ldi	r24, 0x9B	; 155
   106ac:	9e e0       	ldi	r25, 0x0E	; 14
   106ae:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:302
  ///
  strcpy_P(str_topic, network_mqtt_user);
   106b2:	6c e3       	ldi	r22, 0x3C	; 60
   106b4:	77 e5       	ldi	r23, 0x57	; 87
   106b6:	ce 01       	movw	r24, r28
   106b8:	88 5b       	subi	r24, 0xB8	; 184
   106ba:	9f 4f       	sbci	r25, 0xFF	; 255
   106bc:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:303
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
   106c0:	4e ec       	ldi	r20, 0xCE	; 206
   106c2:	5c e0       	ldi	r21, 0x0C	; 12
   106c4:	be 01       	movw	r22, r28
   106c6:	68 5b       	subi	r22, 0xB8	; 184
   106c8:	7f 4f       	sbci	r23, 0xFF	; 255
   106ca:	8b e9       	ldi	r24, 0x9B	; 155
   106cc:	9e e0       	ldi	r25, 0x0E	; 14
   106ce:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:305
  ///
  strcpy_P(str_topic, network_mqtt_key);
   106d2:	6b e2       	ldi	r22, 0x2B	; 43
   106d4:	77 e5       	ldi	r23, 0x57	; 87
   106d6:	ce 01       	movw	r24, r28
   106d8:	88 5b       	subi	r24, 0xB8	; 184
   106da:	9f 4f       	sbci	r25, 0xFF	; 255
   106dc:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:306
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
   106e0:	42 ee       	ldi	r20, 0xE2	; 226
   106e2:	5c e0       	ldi	r21, 0x0C	; 12
   106e4:	be 01       	movw	r22, r28
   106e6:	68 5b       	subi	r22, 0xB8	; 184
   106e8:	7f 4f       	sbci	r23, 0xFF	; 255
   106ea:	8b e9       	ldi	r24, 0x9B	; 155
   106ec:	9e e0       	ldi	r25, 0x0E	; 14
   106ee:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:308
  ///
  strcpy_P(str_topic, network_name);
   106f2:	6e e1       	ldi	r22, 0x1E	; 30
   106f4:	77 e5       	ldi	r23, 0x57	; 87
   106f6:	ce 01       	movw	r24, r28
   106f8:	88 5b       	subi	r24, 0xB8	; 184
   106fa:	9f 4f       	sbci	r25, 0xFF	; 255
   106fc:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:309
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
   10700:	4e eb       	ldi	r20, 0xBE	; 190
   10702:	5c e0       	ldi	r21, 0x0C	; 12
   10704:	be 01       	movw	r22, r28
   10706:	68 5b       	subi	r22, 0xB8	; 184
   10708:	7f 4f       	sbci	r23, 0xFF	; 255
   1070a:	8b e9       	ldi	r24, 0x9B	; 155
   1070c:	9e e0       	ldi	r25, 0x0E	; 14
   1070e:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3378
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   10712:	64 e3       	ldi	r22, 0x34	; 52
   10714:	78 e5       	ldi	r23, 0x58	; 88
   10716:	c5 01       	movw	r24, r10
   10718:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3379
  strcat(str1, device.nazev);
   1071c:	6e eb       	ldi	r22, 0xBE	; 190
   1071e:	7c e0       	ldi	r23, 0x0C	; 12
   10720:	c5 01       	movw	r24, r10
   10722:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3380
  strcat(str1, "/network/set/");
   10726:	62 ea       	ldi	r22, 0xA2	; 162
   10728:	75 e0       	ldi	r23, 0x05	; 5
   1072a:	c5 01       	movw	r24, r10
   1072c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10730:	f5 01       	movw	r30, r10
   10732:	01 90       	ld	r0, Z+
   10734:	00 20       	and	r0, r0
   10736:	e9 f7       	brne	.-6      	; 0x10732 <__EEPROM_REGION_LENGTH__+0x732>
   10738:	31 97       	sbiw	r30, 0x01	; 1
   1073a:	af 01       	movw	r20, r30
   1073c:	4a 19       	sub	r20, r10
   1073e:	5b 09       	sbc	r21, r11
   10740:	b4 01       	movw	r22, r8
   10742:	c5 01       	movw	r24, r10
   10744:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   10748:	89 2b       	or	r24, r25
   1074a:	09 f0       	breq	.+2      	; 0x1074e <__EEPROM_REGION_LENGTH__+0x74e>
   1074c:	f6 c0       	rjmp	.+492    	; 0x1093a <__EEPROM_REGION_LENGTH__+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3383
  {
    mqtt_process_message++;
   1074e:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10752:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10756:	01 96       	adiw	r24, 0x01	; 1
   10758:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   1075c:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10760:	f5 01       	movw	r30, r10
   10762:	01 90       	ld	r0, Z+
   10764:	00 20       	and	r0, r0
   10766:	e9 f7       	brne	.-6      	; 0x10762 <__EEPROM_REGION_LENGTH__+0x762>
   10768:	31 97       	sbiw	r30, 0x01	; 1
   1076a:	ea 19       	sub	r30, r10
   1076c:	fb 09       	sbc	r31, r11
   1076e:	9e 2f       	mov	r25, r30
   10770:	4e 2f       	mov	r20, r30
   10772:	84 2f       	mov	r24, r20
   10774:	89 1b       	sub	r24, r25
   10776:	24 2f       	mov	r18, r20
   10778:	30 e0       	ldi	r19, 0x00	; 0
   1077a:	d4 01       	movw	r26, r8
   1077c:	0d 90       	ld	r0, X+
   1077e:	00 20       	and	r0, r0
   10780:	e9 f7       	brne	.-6      	; 0x1077c <__EEPROM_REGION_LENGTH__+0x77c>
   10782:	11 97       	sbiw	r26, 0x01	; 1
   10784:	a8 19       	sub	r26, r8
   10786:	b9 09       	sbc	r27, r9
   10788:	2a 17       	cp	r18, r26
   1078a:	3b 07       	cpc	r19, r27
   1078c:	a0 f4       	brcc	.+40     	; 0x107b6 <__EEPROM_REGION_LENGTH__+0x7b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3387
    {
      str1[cnt] = topic[f];
   1078e:	a8 ec       	ldi	r26, 0xC8	; 200
   10790:	b0 e0       	ldi	r27, 0x00	; 0
   10792:	ac 0f       	add	r26, r28
   10794:	bd 1f       	adc	r27, r29
   10796:	a8 0f       	add	r26, r24
   10798:	b1 1d       	adc	r27, r1
   1079a:	28 0d       	add	r18, r8
   1079c:	39 1d       	adc	r19, r9
   1079e:	f9 01       	movw	r30, r18
   107a0:	80 81       	ld	r24, Z
   107a2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3388
      str1[cnt + 1] = 0;
   107a4:	11 96       	adiw	r26, 0x01	; 1
   107a6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3385
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   107a8:	4f 5f       	subi	r20, 0xFF	; 255
   107aa:	e3 cf       	rjmp	.-58     	; 0x10772 <__EEPROM_REGION_LENGTH__+0x772>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
   107ac:	8c e7       	ldi	r24, 0x7C	; 124
   107ae:	95 e0       	ldi	r25, 0x05	; 5
   107b0:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
   107b4:	61 ce       	rjmp	.-830    	; 0x10478 <__EEPROM_REGION_LENGTH__+0x478>
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
   107b6:	64 ef       	ldi	r22, 0xF4	; 244
   107b8:	73 e0       	ldi	r23, 0x03	; 3
   107ba:	ce 01       	movw	r24, r28
   107bc:	88 53       	subi	r24, 0x38	; 56
   107be:	9f 4f       	sbci	r25, 0xFF	; 255
   107c0:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   107c4:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
   107c6:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
   107c8:	e1 14       	cp	r14, r1
   107ca:	f1 04       	cpc	r15, r1
   107cc:	09 f4       	brne	.+2      	; 0x107d0 <__EEPROM_REGION_LENGTH__+0x7d0>
   107ce:	a9 c0       	rjmp	.+338    	; 0x10922 <__EEPROM_REGION_LENGTH__+0x922>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
   107d0:	60 eb       	ldi	r22, 0xB0	; 176
   107d2:	75 e0       	ldi	r23, 0x05	; 5
   107d4:	c7 01       	movw	r24, r14
   107d6:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   107da:	89 2b       	or	r24, r25
   107dc:	41 f4       	brne	.+16     	; 0x107ee <__EEPROM_REGION_LENGTH__+0x7ee>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
   107de:	46 e0       	ldi	r20, 0x06	; 6
   107e0:	50 e0       	ldi	r21, 0x00	; 0
   107e2:	68 ea       	ldi	r22, 0xA8	; 168
   107e4:	7c e0       	ldi	r23, 0x0C	; 12
   107e6:	8a e3       	ldi	r24, 0x3A	; 58
   107e8:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
   107ec:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
   107ee:	64 eb       	ldi	r22, 0xB4	; 180
   107f0:	75 e0       	ldi	r23, 0x05	; 5
   107f2:	c7 01       	movw	r24, r14
   107f4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   107f8:	89 2b       	or	r24, r25
   107fa:	41 f4       	brne	.+16     	; 0x1080c <__EEPROM_REGION_LENGTH__+0x80c>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
   107fc:	44 e0       	ldi	r20, 0x04	; 4
   107fe:	50 e0       	ldi	r21, 0x00	; 0
   10800:	6e ea       	ldi	r22, 0xAE	; 174
   10802:	7c e0       	ldi	r23, 0x0C	; 12
   10804:	8e e2       	ldi	r24, 0x2E	; 46
   10806:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
   1080a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
   1080c:	67 eb       	ldi	r22, 0xB7	; 183
   1080e:	75 e0       	ldi	r23, 0x05	; 5
   10810:	c7 01       	movw	r24, r14
   10812:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10816:	89 2b       	or	r24, r25
   10818:	41 f4       	brne	.+16     	; 0x1082a <__EEPROM_REGION_LENGTH__+0x82a>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
   1081a:	44 e0       	ldi	r20, 0x04	; 4
   1081c:	50 e0       	ldi	r21, 0x00	; 0
   1081e:	62 eb       	ldi	r22, 0xB2	; 178
   10820:	7c e0       	ldi	r23, 0x0C	; 12
   10822:	8e e2       	ldi	r24, 0x2E	; 46
   10824:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
   10828:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
   1082a:	6f eb       	ldi	r22, 0xBF	; 191
   1082c:	75 e0       	ldi	r23, 0x05	; 5
   1082e:	c7 01       	movw	r24, r14
   10830:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10834:	89 2b       	or	r24, r25
   10836:	41 f4       	brne	.+16     	; 0x10848 <__EEPROM_REGION_LENGTH__+0x848>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
   10838:	44 e0       	ldi	r20, 0x04	; 4
   1083a:	50 e0       	ldi	r21, 0x00	; 0
   1083c:	6a eb       	ldi	r22, 0xBA	; 186
   1083e:	7c e0       	ldi	r23, 0x0C	; 12
   10840:	8e e2       	ldi	r24, 0x2E	; 46
   10842:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
   10846:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
   10848:	62 ec       	ldi	r22, 0xC2	; 194
   1084a:	75 e0       	ldi	r23, 0x05	; 5
   1084c:	c7 01       	movw	r24, r14
   1084e:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10852:	89 2b       	or	r24, r25
   10854:	41 f4       	brne	.+16     	; 0x10866 <__EEPROM_REGION_LENGTH__+0x866>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
   10856:	44 e0       	ldi	r20, 0x04	; 4
   10858:	50 e0       	ldi	r21, 0x00	; 0
   1085a:	66 eb       	ldi	r22, 0xB6	; 182
   1085c:	7c e0       	ldi	r23, 0x0C	; 12
   1085e:	8e e2       	ldi	r24, 0x2E	; 46
   10860:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
   10864:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
   10866:	66 ec       	ldi	r22, 0xC6	; 198
   10868:	75 e0       	ldi	r23, 0x05	; 5
   1086a:	c7 01       	movw	r24, r14
   1086c:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10870:	89 2b       	or	r24, r25
   10872:	41 f4       	brne	.+16     	; 0x10884 <__EEPROM_REGION_LENGTH__+0x884>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
   10874:	44 e0       	ldi	r20, 0x04	; 4
   10876:	50 e0       	ldi	r21, 0x00	; 0
   10878:	66 ef       	ldi	r22, 0xF6	; 246
   1087a:	7c e0       	ldi	r23, 0x0C	; 12
   1087c:	8e e2       	ldi	r24, 0x2E	; 46
   1087e:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
   10882:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
   10884:	6a ec       	ldi	r22, 0xCA	; 202
   10886:	75 e0       	ldi	r23, 0x05	; 5
   10888:	c7 01       	movw	r24, r14
   1088a:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   1088e:	89 2b       	or	r24, r25
   10890:	41 f4       	brne	.+16     	; 0x108a2 <__EEPROM_REGION_LENGTH__+0x8a2>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
   10892:	44 e0       	ldi	r20, 0x04	; 4
   10894:	50 e0       	ldi	r21, 0x00	; 0
   10896:	68 ec       	ldi	r22, 0xC8	; 200
   10898:	7c e0       	ldi	r23, 0x0C	; 12
   1089a:	8e e2       	ldi	r24, 0x2E	; 46
   1089c:	0e 94 52 a0 	call	0x140a4	; 0x140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
   108a0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
   108a2:	64 ed       	ldi	r22, 0xD4	; 212
   108a4:	75 e0       	ldi	r23, 0x05	; 5
   108a6:	c7 01       	movw	r24, r14
   108a8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   108ac:	89 2b       	or	r24, r25
   108ae:	49 f4       	brne	.+18     	; 0x108c2 <__EEPROM_REGION_LENGTH__+0x8c2>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
   108b0:	8f e4       	ldi	r24, 0x4F	; 79
   108b2:	9b e0       	ldi	r25, 0x0B	; 11
   108b4:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   108b8:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <device+0x25>
   108bc:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
   108c0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
   108c2:	6e ed       	ldi	r22, 0xDE	; 222
   108c4:	75 e0       	ldi	r23, 0x05	; 5
   108c6:	c7 01       	movw	r24, r14
   108c8:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   108cc:	89 2b       	or	r24, r25
   108ce:	39 f4       	brne	.+14     	; 0x108de <__EEPROM_REGION_LENGTH__+0x8de>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
   108d0:	6f e4       	ldi	r22, 0x4F	; 79
   108d2:	7b e0       	ldi	r23, 0x0B	; 11
   108d4:	8e ec       	ldi	r24, 0xCE	; 206
   108d6:	9c e0       	ldi	r25, 0x0C	; 12
   108d8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
   108dc:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
   108de:	68 ee       	ldi	r22, 0xE8	; 232
   108e0:	75 e0       	ldi	r23, 0x05	; 5
   108e2:	c7 01       	movw	r24, r14
   108e4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   108e8:	89 2b       	or	r24, r25
   108ea:	39 f4       	brne	.+14     	; 0x108fa <__EEPROM_REGION_LENGTH__+0x8fa>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
   108ec:	6f e4       	ldi	r22, 0x4F	; 79
   108ee:	7b e0       	ldi	r23, 0x0B	; 11
   108f0:	82 ee       	ldi	r24, 0xE2	; 226
   108f2:	9c e0       	ldi	r25, 0x0C	; 12
   108f4:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
   108f8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
   108fa:	6d ec       	ldi	r22, 0xCD	; 205
   108fc:	73 e0       	ldi	r23, 0x03	; 3
   108fe:	c7 01       	movw	r24, r14
   10900:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10904:	89 2b       	or	r24, r25
   10906:	29 f4       	brne	.+10     	; 0x10912 <__EEPROM_REGION_LENGTH__+0x912>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
   10908:	8f e4       	ldi	r24, 0x4F	; 79
   1090a:	9b e0       	ldi	r25, 0x0B	; 11
   1090c:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
   10910:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
   10912:	64 ef       	ldi	r22, 0xF4	; 244
   10914:	73 e0       	ldi	r23, 0x03	; 3
   10916:	90 e0       	ldi	r25, 0x00	; 0
   10918:	80 e0       	ldi	r24, 0x00	; 0
   1091a:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   1091e:	7c 01       	movw	r14, r24
   10920:	53 cf       	rjmp	.-346    	; 0x107c8 <__EEPROM_REGION_LENGTH__+0x7c8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3392
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
   10922:	11 30       	cpi	r17, 0x01	; 1
   10924:	41 f4       	brne	.+16     	; 0x10936 <__EEPROM_REGION_LENGTH__+0x936>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3394
    {
      save_setup_network();
   10926:	0e 94 78 68 	call	0xd0f0	; 0xd0f0 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3399
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   1092a:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   1092e:	80 68       	ori	r24, 0x80	; 128
   10930:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <selftest_data>
   10934:	02 c0       	rjmp	.+4      	; 0x1093a <__EEPROM_REGION_LENGTH__+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3397
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   10936:	12 30       	cpi	r17, 0x02	; 2
   10938:	c1 f3       	breq	.-16     	; 0x1092a <__EEPROM_REGION_LENGTH__+0x92a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   1093a:	64 e3       	ldi	r22, 0x34	; 52
   1093c:	78 e5       	ldi	r23, 0x58	; 88
   1093e:	c5 01       	movw	r24, r10
   10940:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3405
  strcat(str1, device.nazev);
   10944:	6e eb       	ldi	r22, 0xBE	; 190
   10946:	7c e0       	ldi	r23, 0x0C	; 12
   10948:	c5 01       	movw	r24, r10
   1094a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3406
  strcat(str1, "/light/set/");
   1094e:	62 ef       	ldi	r22, 0xF2	; 242
   10950:	75 e0       	ldi	r23, 0x05	; 5
   10952:	c5 01       	movw	r24, r10
   10954:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3407
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10958:	f5 01       	movw	r30, r10
   1095a:	01 90       	ld	r0, Z+
   1095c:	00 20       	and	r0, r0
   1095e:	e9 f7       	brne	.-6      	; 0x1095a <__EEPROM_REGION_LENGTH__+0x95a>
   10960:	31 97       	sbiw	r30, 0x01	; 1
   10962:	af 01       	movw	r20, r30
   10964:	4a 19       	sub	r20, r10
   10966:	5b 09       	sbc	r21, r11
   10968:	b4 01       	movw	r22, r8
   1096a:	c5 01       	movw	r24, r10
   1096c:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   10970:	89 2b       	or	r24, r25
   10972:	09 f0       	breq	.+2      	; 0x10976 <__EEPROM_REGION_LENGTH__+0x976>
   10974:	46 c0       	rjmp	.+140    	; 0x10a02 <__EEPROM_REGION_LENGTH__+0xa02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
  {
    mqtt_process_message++;
   10976:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   1097a:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   1097e:	01 96       	adiw	r24, 0x01	; 1
   10980:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   10984:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3412
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10988:	f5 01       	movw	r30, r10
   1098a:	01 90       	ld	r0, Z+
   1098c:	00 20       	and	r0, r0
   1098e:	e9 f7       	brne	.-6      	; 0x1098a <__EEPROM_REGION_LENGTH__+0x98a>
   10990:	31 97       	sbiw	r30, 0x01	; 1
   10992:	ea 19       	sub	r30, r10
   10994:	fb 09       	sbc	r31, r11
   10996:	9e 2f       	mov	r25, r30
   10998:	4e 2f       	mov	r20, r30
   1099a:	84 2f       	mov	r24, r20
   1099c:	89 1b       	sub	r24, r25
   1099e:	24 2f       	mov	r18, r20
   109a0:	30 e0       	ldi	r19, 0x00	; 0
   109a2:	d4 01       	movw	r26, r8
   109a4:	0d 90       	ld	r0, X+
   109a6:	00 20       	and	r0, r0
   109a8:	e9 f7       	brne	.-6      	; 0x109a4 <__EEPROM_REGION_LENGTH__+0x9a4>
   109aa:	11 97       	sbiw	r26, 0x01	; 1
   109ac:	a8 19       	sub	r26, r8
   109ae:	b9 09       	sbc	r27, r9
   109b0:	2a 17       	cp	r18, r26
   109b2:	3b 07       	cpc	r19, r27
   109b4:	78 f4       	brcc	.+30     	; 0x109d4 <__EEPROM_REGION_LENGTH__+0x9d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3414
    {
      str1[cnt] = topic[f];
   109b6:	a8 ec       	ldi	r26, 0xC8	; 200
   109b8:	b0 e0       	ldi	r27, 0x00	; 0
   109ba:	ac 0f       	add	r26, r28
   109bc:	bd 1f       	adc	r27, r29
   109be:	a8 0f       	add	r26, r24
   109c0:	b1 1d       	adc	r27, r1
   109c2:	28 0d       	add	r18, r8
   109c4:	39 1d       	adc	r19, r9
   109c6:	f9 01       	movw	r30, r18
   109c8:	80 81       	ld	r24, Z
   109ca:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
      str1[cnt + 1] = 0;
   109cc:	11 96       	adiw	r26, 0x01	; 1
   109ce:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3412
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   109d0:	4f 5f       	subi	r20, 0xFF	; 255
   109d2:	e3 cf       	rjmp	.-58     	; 0x1099a <__EEPROM_REGION_LENGTH__+0x99a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3419
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   109d4:	64 ef       	ldi	r22, 0xF4	; 244
   109d6:	73 e0       	ldi	r23, 0x03	; 3
   109d8:	ce 01       	movw	r24, r28
   109da:	88 53       	subi	r24, 0x38	; 56
   109dc:	9f 4f       	sbci	r25, 0xFF	; 255
   109de:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   109e2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3420
    pch = strtok (str1, "/");
    while (pch != NULL)
   109e4:	00 97       	sbiw	r24, 0x00	; 0
   109e6:	69 f0       	breq	.+26     	; 0x10a02 <__EEPROM_REGION_LENGTH__+0xa02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3422
    {
      if (cnt == 0) id = atoi(pch);
   109e8:	11 11       	cpse	r17, r1
   109ea:	03 c0       	rjmp	.+6      	; 0x109f2 <__EEPROM_REGION_LENGTH__+0x9f2>
   109ec:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   109f0:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   109f2:	64 ef       	ldi	r22, 0xF4	; 244
   109f4:	73 e0       	ldi	r23, 0x03	; 3
   109f6:	90 e0       	ldi	r25, 0x00	; 0
   109f8:	80 e0       	ldi	r24, 0x00	; 0
   109fa:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3426
      cnt++;
   109fe:	1f 5f       	subi	r17, 0xFF	; 255
   10a00:	f1 cf       	rjmp	.-30     	; 0x109e4 <__EEPROM_REGION_LENGTH__+0x9e4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3431
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   10a02:	68 ee       	ldi	r22, 0xE8	; 232
   10a04:	77 e5       	ldi	r23, 0x57	; 87
   10a06:	c5 01       	movw	r24, r10
   10a08:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3432
  strcat(str1, "output/");
   10a0c:	6e ef       	ldi	r22, 0xFE	; 254
   10a0e:	75 e0       	ldi	r23, 0x05	; 5
   10a10:	c5 01       	movw	r24, r10
   10a12:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3433
  if (strncmp(str1, topic, strlen(str1)) == 0)
   10a16:	f5 01       	movw	r30, r10
   10a18:	01 90       	ld	r0, Z+
   10a1a:	00 20       	and	r0, r0
   10a1c:	e9 f7       	brne	.-6      	; 0x10a18 <__EEPROM_REGION_LENGTH__+0xa18>
   10a1e:	31 97       	sbiw	r30, 0x01	; 1
   10a20:	af 01       	movw	r20, r30
   10a22:	4a 19       	sub	r20, r10
   10a24:	5b 09       	sbc	r21, r11
   10a26:	b4 01       	movw	r22, r8
   10a28:	c5 01       	movw	r24, r10
   10a2a:	0e 94 81 d0 	call	0x1a102	; 0x1a102 <strncmp>
   10a2e:	89 2b       	or	r24, r25
   10a30:	09 f0       	breq	.+2      	; 0x10a34 <__EEPROM_REGION_LENGTH__+0xa34>
   10a32:	78 c0       	rjmp	.+240    	; 0x10b24 <__EEPROM_REGION_LENGTH__+0xb24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3435
  {
    mqtt_process_message++;
   10a34:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10a38:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10a3c:	01 96       	adiw	r24, 0x01	; 1
   10a3e:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   10a42:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10a46:	f5 01       	movw	r30, r10
   10a48:	01 90       	ld	r0, Z+
   10a4a:	00 20       	and	r0, r0
   10a4c:	e9 f7       	brne	.-6      	; 0x10a48 <__EEPROM_REGION_LENGTH__+0xa48>
   10a4e:	31 97       	sbiw	r30, 0x01	; 1
   10a50:	ea 19       	sub	r30, r10
   10a52:	fb 09       	sbc	r31, r11
   10a54:	9e 2f       	mov	r25, r30
   10a56:	4e 2f       	mov	r20, r30
   10a58:	84 2f       	mov	r24, r20
   10a5a:	89 1b       	sub	r24, r25
   10a5c:	24 2f       	mov	r18, r20
   10a5e:	30 e0       	ldi	r19, 0x00	; 0
   10a60:	d4 01       	movw	r26, r8
   10a62:	0d 90       	ld	r0, X+
   10a64:	00 20       	and	r0, r0
   10a66:	e9 f7       	brne	.-6      	; 0x10a62 <__EEPROM_REGION_LENGTH__+0xa62>
   10a68:	11 97       	sbiw	r26, 0x01	; 1
   10a6a:	a8 19       	sub	r26, r8
   10a6c:	b9 09       	sbc	r27, r9
   10a6e:	2a 17       	cp	r18, r26
   10a70:	3b 07       	cpc	r19, r27
   10a72:	78 f4       	brcc	.+30     	; 0x10a92 <__EEPROM_REGION_LENGTH__+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3439
    {
      str1[cnt] = topic[f];
   10a74:	a8 ec       	ldi	r26, 0xC8	; 200
   10a76:	b0 e0       	ldi	r27, 0x00	; 0
   10a78:	ac 0f       	add	r26, r28
   10a7a:	bd 1f       	adc	r27, r29
   10a7c:	a8 0f       	add	r26, r24
   10a7e:	b1 1d       	adc	r27, r1
   10a80:	28 0d       	add	r18, r8
   10a82:	39 1d       	adc	r19, r9
   10a84:	f9 01       	movw	r30, r18
   10a86:	80 81       	ld	r24, Z
   10a88:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3440
      str1[cnt + 1] = 0;
   10a8a:	11 96       	adiw	r26, 0x01	; 1
   10a8c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   10a8e:	4f 5f       	subi	r20, 0xFF	; 255
   10a90:	e3 cf       	rjmp	.-58     	; 0x10a58 <__EEPROM_REGION_LENGTH__+0xa58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   10a92:	64 ef       	ldi	r22, 0xF4	; 244
   10a94:	73 e0       	ldi	r23, 0x03	; 3
   10a96:	ce 01       	movw	r24, r28
   10a98:	88 53       	subi	r24, 0x38	; 56
   10a9a:	9f 4f       	sbci	r25, 0xFF	; 255
   10a9c:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   10aa0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   10aa2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
    pch = strtok (str1, "/");
    while (pch != NULL)
   10aa4:	01 15       	cp	r16, r1
   10aa6:	11 05       	cpc	r17, r1
   10aa8:	e9 f1       	breq	.+122    	; 0x10b24 <__EEPROM_REGION_LENGTH__+0xb24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3447
    {
      if (cnt == 0) id = atoi(pch);
   10aaa:	f1 10       	cpse	r15, r1
   10aac:	0d c0       	rjmp	.+26     	; 0x10ac8 <__EEPROM_REGION_LENGTH__+0xac8>
   10aae:	c8 01       	movw	r24, r16
   10ab0:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   10ab4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   10ab6:	64 ef       	ldi	r22, 0xF4	; 244
   10ab8:	73 e0       	ldi	r23, 0x03	; 3
   10aba:	90 e0       	ldi	r25, 0x00	; 0
   10abc:	80 e0       	ldi	r24, 0x00	; 0
   10abe:	0e 94 fb c3 	call	0x187f6	; 0x187f6 <strtok>
   10ac2:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
      cnt++;
   10ac4:	f3 94       	inc	r15
   10ac6:	ee cf       	rjmp	.-36     	; 0x10aa4 <__EEPROM_REGION_LENGTH__+0xaa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   10ac8:	f1 e0       	ldi	r31, 0x01	; 1
   10aca:	ff 12       	cpse	r15, r31
   10acc:	f4 cf       	rjmp	.-24     	; 0x10ab6 <__EEPROM_REGION_LENGTH__+0xab6>
   10ace:	8f e5       	ldi	r24, 0x5F	; 95
   10ad0:	c8 2e       	mov	r12, r24
   10ad2:	dd 24       	eor	r13, r13
   10ad4:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   10ad6:	c6 01       	movw	r24, r12
   10ad8:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3451
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   10adc:	78 12       	cpse	r7, r24
   10ade:	19 c0       	rjmp	.+50     	; 0x10b12 <__EEPROM_REGION_LENGTH__+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3453
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   10ae0:	66 e0       	ldi	r22, 0x06	; 6
   10ae2:	76 e0       	ldi	r23, 0x06	; 6
   10ae4:	c8 01       	movw	r24, r16
   10ae6:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10aea:	89 2b       	or	r24, r25
   10aec:	29 f0       	breq	.+10     	; 0x10af8 <__EEPROM_REGION_LENGTH__+0xaf8>
   10aee:	e7 2d       	mov	r30, r7
   10af0:	f0 e0       	ldi	r31, 0x00	; 0
   10af2:	e8 57       	subi	r30, 0x78	; 120
   10af4:	f5 4f       	sbci	r31, 0xF5	; 245
   10af6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3454
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   10af8:	6a e0       	ldi	r22, 0x0A	; 10
   10afa:	76 e0       	ldi	r23, 0x06	; 6
   10afc:	c8 01       	movw	r24, r16
   10afe:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10b02:	89 2b       	or	r24, r25
   10b04:	c1 f2       	breq	.-80     	; 0x10ab6 <__EEPROM_REGION_LENGTH__+0xab6>
   10b06:	e7 2d       	mov	r30, r7
   10b08:	f0 e0       	ldi	r31, 0x00	; 0
   10b0a:	e8 57       	subi	r30, 0x78	; 120
   10b0c:	f5 4f       	sbci	r31, 0xF5	; 245
   10b0e:	10 82       	st	Z, r1
   10b10:	d2 cf       	rjmp	.-92     	; 0x10ab6 <__EEPROM_REGION_LENGTH__+0xab6>
   10b12:	21 e2       	ldi	r18, 0x21	; 33
   10b14:	c2 0e       	add	r12, r18
   10b16:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3450
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   10b18:	84 e0       	ldi	r24, 0x04	; 4
   10b1a:	c8 16       	cp	r12, r24
   10b1c:	82 e0       	ldi	r24, 0x02	; 2
   10b1e:	d8 06       	cpc	r13, r24
   10b20:	d1 f6       	brne	.-76     	; 0x10ad6 <__EEPROM_REGION_LENGTH__+0xad6>
   10b22:	c9 cf       	rjmp	.-110    	; 0x10ab6 <__EEPROM_REGION_LENGTH__+0xab6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   10b24:	64 e3       	ldi	r22, 0x34	; 52
   10b26:	78 e5       	ldi	r23, 0x58	; 88
   10b28:	c5 01       	movw	r24, r10
   10b2a:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
  strcat(str1, device.nazev);
   10b2e:	6e eb       	ldi	r22, 0xBE	; 190
   10b30:	7c e0       	ldi	r23, 0x0C	; 12
   10b32:	c5 01       	movw	r24, r10
   10b34:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3466
  strcat(str1, "/reload");
   10b38:	60 e1       	ldi	r22, 0x10	; 16
   10b3a:	76 e0       	ldi	r23, 0x06	; 6
   10b3c:	c5 01       	movw	r24, r10
   10b3e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
  if (strcmp(str1, topic) == 0)
   10b42:	b4 01       	movw	r22, r8
   10b44:	c5 01       	movw	r24, r10
   10b46:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10b4a:	8c 01       	movw	r16, r24
   10b4c:	89 2b       	or	r24, r25
   10b4e:	79 f4       	brne	.+30     	; 0x10b6e <__EEPROM_REGION_LENGTH__+0xb6e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
  {
    mqtt_process_message++;
   10b50:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10b54:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10b58:	01 96       	adiw	r24, 0x01	; 1
   10b5a:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   10b5e:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
    log_error(&mqtt_client, "reload ..... ");
   10b62:	88 e1       	ldi	r24, 0x18	; 24
   10b64:	96 e0       	ldi	r25, 0x06	; 6
   10b66:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471
    resetFunc();
   10b6a:	f8 01       	movw	r30, r16
   10b6c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3475
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   10b6e:	64 e3       	ldi	r22, 0x34	; 52
   10b70:	78 e5       	ldi	r23, 0x58	; 88
   10b72:	c5 01       	movw	r24, r10
   10b74:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
  strcat(str1, device.nazev);
   10b78:	6e eb       	ldi	r22, 0xBE	; 190
   10b7a:	7c e0       	ldi	r23, 0x0C	; 12
   10b7c:	c5 01       	movw	r24, r10
   10b7e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3477
  strcat(str1, "/bootloader");
   10b82:	66 e2       	ldi	r22, 0x26	; 38
   10b84:	76 e0       	ldi	r23, 0x06	; 6
   10b86:	c5 01       	movw	r24, r10
   10b88:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
  if (strcmp(str1, topic) == 0)
   10b8c:	b4 01       	movw	r22, r8
   10b8e:	c5 01       	movw	r24, r10
   10b90:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10b94:	89 2b       	or	r24, r25
   10b96:	e9 f4       	brne	.+58     	; 0x10bd2 <__EEPROM_REGION_LENGTH__+0xbd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
  {
    mqtt_process_message++;
   10b98:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10b9c:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10ba0:	01 96       	adiw	r24, 0x01	; 1
   10ba2:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   10ba6:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
    log_error(&mqtt_client, "bootloader ..... ");
   10baa:	82 e3       	ldi	r24, 0x32	; 50
   10bac:	96 e0       	ldi	r25, 0x06	; 6
   10bae:	0e 94 2c a0 	call	0x14058	; 0x14058 <log_error(PubSubClient*, char*) [clone .constprop.59]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3482
    EEPROM.write(bootloader_tag, 255);
   10bb2:	6f ef       	ldi	r22, 0xFF	; 255
   10bb4:	90 e0       	ldi	r25, 0x00	; 0
   10bb6:	80 e0       	ldi	r24, 0x00	; 0
   10bb8:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   10bbc:	88 e1       	ldi	r24, 0x18	; 24
   10bbe:	9e e0       	ldi	r25, 0x0E	; 14
   10bc0:	0f b6       	in	r0, 0x3f	; 63
   10bc2:	f8 94       	cli
   10bc4:	a8 95       	wdr
   10bc6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10bca:	0f be       	out	0x3f, r0	; 63
   10bcc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   10bd0:	ff cf       	rjmp	.-2      	; 0x10bd0 <__EEPROM_REGION_LENGTH__+0xbd0>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   10bd2:	64 e3       	ldi	r22, 0x34	; 52
   10bd4:	78 e5       	ldi	r23, 0x58	; 88
   10bd6:	c5 01       	movw	r24, r10
   10bd8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
  strcat(str1, device.nazev);
   10bdc:	6e eb       	ldi	r22, 0xBE	; 190
   10bde:	7c e0       	ldi	r23, 0x0C	; 12
   10be0:	c5 01       	movw	r24, r10
   10be2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3490
  strcat(str1, "/default");
   10be6:	62 e2       	ldi	r22, 0x22	; 34
   10be8:	75 e0       	ldi	r23, 0x05	; 5
   10bea:	c5 01       	movw	r24, r10
   10bec:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
  if (strcmp(str1, topic) == 0)
   10bf0:	b4 01       	movw	r22, r8
   10bf2:	c5 01       	movw	r24, r10
   10bf4:	0e 94 71 d0 	call	0x1a0e2	; 0x1a0e2 <strcmp>
   10bf8:	89 2b       	or	r24, r25
   10bfa:	91 f4       	brne	.+36     	; 0x10c20 <__EEPROM_REGION_LENGTH__+0xc20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
  {
    mqtt_process_message++;
   10bfc:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   10c00:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   10c04:	01 96       	adiw	r24, 0x01	; 1
   10c06:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <mqtt_process_message+0x1>
   10c0a:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   10c0e:	8f e4       	ldi	r24, 0x4F	; 79
   10c10:	9b e0       	ldi	r25, 0x0B	; 11
   10c12:	0e 94 c2 c3 	call	0x18784	; 0x18784 <atoi>
   10c16:	68 2f       	mov	r22, r24
   10c18:	8a e5       	ldi	r24, 0x5A	; 90
   10c1a:	90 e0       	ldi	r25, 0x00	; 0
   10c1c:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3498
  }

}
   10c20:	c1 5c       	subi	r28, 0xC1	; 193
   10c22:	de 4f       	sbci	r29, 0xFE	; 254
   10c24:	0f b6       	in	r0, 0x3f	; 63
   10c26:	f8 94       	cli
   10c28:	de bf       	out	0x3e, r29	; 62
   10c2a:	0f be       	out	0x3f, r0	; 63
   10c2c:	cd bf       	out	0x3d, r28	; 61
   10c2e:	df 91       	pop	r29
   10c30:	cf 91       	pop	r28
   10c32:	1f 91       	pop	r17
   10c34:	0f 91       	pop	r16
   10c36:	ff 90       	pop	r15
   10c38:	ef 90       	pop	r14
   10c3a:	df 90       	pop	r13
   10c3c:	cf 90       	pop	r12
   10c3e:	bf 90       	pop	r11
   10c40:	af 90       	pop	r10
   10c42:	9f 90       	pop	r9
   10c44:	8f 90       	pop	r8
   10c46:	7f 90       	pop	r7
   10c48:	6f 90       	pop	r6
   10c4a:	5f 90       	pop	r5
   10c4c:	4f 90       	pop	r4
   10c4e:	3f 90       	pop	r3
   10c50:	2f 90       	pop	r2
   10c52:	08 95       	ret

00010c54 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
   10c54:	0f 93       	push	r16
   10c56:	1f 93       	push	r17
   10c58:	cf 93       	push	r28
   10c5a:	df 93       	push	r29
   10c5c:	cd b7       	in	r28, 0x3d	; 61
   10c5e:	de b7       	in	r29, 0x3e	; 62
   10c60:	a5 97       	sbiw	r28, 0x25	; 37
   10c62:	0f b6       	in	r0, 0x3f	; 63
   10c64:	f8 94       	cli
   10c66:	de bf       	out	0x3e, r29	; 62
   10c68:	0f be       	out	0x3f, r0	; 63
   10c6a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
   10c6c:	ce 01       	movw	r24, r28
   10c6e:	4b 96       	adiw	r24, 0x1b	; 27
   10c70:	0e 94 6f 72 	call	0xe4de	; 0xe4de <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
  if (!mqtt_client.connected())
   10c74:	8b e9       	ldi	r24, 0x9B	; 155
   10c76:	9e e0       	ldi	r25, 0x0E	; 14
   10c78:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   10c7c:	81 11       	cpse	r24, r1
   10c7e:	97 c0       	rjmp	.+302    	; 0x10dae <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
   10c80:	8b e9       	ldi	r24, 0x9B	; 155
   10c82:	9e e0       	ldi	r25, 0x0E	; 14
   10c84:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   10c88:	81 11       	cpse	r24, r1
   10c8a:	d0 c0       	rjmp	.+416    	; 0x10e2c <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
   10c8c:	60 91 b0 10 	lds	r22, 0x10B0	; 0x8010b0 <mqtt_client+0x215>
   10c90:	70 91 b1 10 	lds	r23, 0x10B1	; 0x8010b1 <mqtt_client+0x216>
   10c94:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   10c98:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   10c9c:	dc 01       	movw	r26, r24
   10c9e:	ed 91       	ld	r30, X+
   10ca0:	fc 91       	ld	r31, X
   10ca2:	40 91 b2 10 	lds	r20, 0x10B2	; 0x8010b2 <mqtt_client+0x217>
   10ca6:	50 91 b3 10 	lds	r21, 0x10B3	; 0x8010b3 <mqtt_client+0x218>
   10caa:	61 15       	cp	r22, r1
   10cac:	71 05       	cpc	r23, r1
   10cae:	09 f4       	brne	.+2      	; 0x10cb2 <mqtt_reconnect()+0x5e>
   10cb0:	8b c0       	rjmp	.+278    	; 0x10dc8 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
   10cb2:	00 88       	ldd	r0, Z+16	; 0x10
   10cb4:	f1 89       	ldd	r31, Z+17	; 0x11
   10cb6:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
   10cb8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
   10cba:	81 30       	cpi	r24, 0x01	; 1
   10cbc:	91 05       	cpc	r25, r1
   10cbe:	09 f0       	breq	.+2      	; 0x10cc2 <mqtt_reconnect()+0x6e>
   10cc0:	12 c1       	rjmp	.+548    	; 0x10ee6 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
   10cc2:	90 93 9e 10 	sts	0x109E, r25	; 0x80109e <mqtt_client+0x203>
   10cc6:	80 93 9d 10 	sts	0x109D, r24	; 0x80109d <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   10cca:	87 e0       	ldi	r24, 0x07	; 7
   10ccc:	e6 e1       	ldi	r30, 0x16	; 22
   10cce:	f2 e0       	ldi	r31, 0x02	; 2
   10cd0:	de 01       	movw	r26, r28
   10cd2:	11 96       	adiw	r26, 0x01	; 1
   10cd4:	01 90       	ld	r0, Z+
   10cd6:	0d 92       	st	X+, r0
   10cd8:	8a 95       	dec	r24
   10cda:	e1 f7       	brne	.-8      	; 0x10cd4 <mqtt_reconnect()+0x80>
   10cdc:	fe 01       	movw	r30, r28
   10cde:	31 96       	adiw	r30, 0x01	; 1
   10ce0:	a2 ea       	ldi	r26, 0xA2	; 162
   10ce2:	be e0       	ldi	r27, 0x0E	; 14
   10ce4:	ce 01       	movw	r24, r28
   10ce6:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
   10ce8:	21 91       	ld	r18, Z+
   10cea:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   10cec:	8e 17       	cp	r24, r30
   10cee:	9f 07       	cpc	r25, r31
   10cf0:	d9 f7       	brne	.-10     	; 0x10ce8 <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
   10cf2:	82 e0       	ldi	r24, 0x02	; 2
   10cf4:	80 93 a9 0e 	sts	0x0EA9, r24	; 0x800ea9 <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   10cf8:	10 92 aa 0e 	sts	0x0EAA, r1	; 0x800eaa <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   10cfc:	8f e0       	ldi	r24, 0x0F	; 15
   10cfe:	80 93 ab 0e 	sts	0x0EAB, r24	; 0x800eab <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
   10d02:	4f e0       	ldi	r20, 0x0F	; 15
   10d04:	50 e0       	ldi	r21, 0x00	; 0
   10d06:	6d e9       	ldi	r22, 0x9D	; 157
   10d08:	7e e0       	ldi	r23, 0x0E	; 14
   10d0a:	ce 01       	movw	r24, r28
   10d0c:	4b 96       	adiw	r24, 0x1b	; 27
   10d0e:	0e 94 6e 9c 	call	0x138dc	; 0x138dc <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
   10d12:	9c 01       	movw	r18, r24
   10d14:	25 50       	subi	r18, 0x05	; 5
   10d16:	31 09       	sbc	r19, r1
   10d18:	4d e9       	ldi	r20, 0x9D	; 157
   10d1a:	5e e0       	ldi	r21, 0x0E	; 14
   10d1c:	60 e1       	ldi	r22, 0x10	; 16
   10d1e:	8b e9       	ldi	r24, 0x9B	; 155
   10d20:	9e e0       	ldi	r25, 0x0E	; 14
   10d22:	0e 94 5f ac 	call	0x158be	; 0x158be <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
   10d26:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   10d2a:	60 93 9f 10 	sts	0x109F, r22	; 0x80109f <mqtt_client+0x204>
   10d2e:	70 93 a0 10 	sts	0x10A0, r23	; 0x8010a0 <mqtt_client+0x205>
   10d32:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <mqtt_client+0x206>
   10d36:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <mqtt_client+0x207>
   10d3a:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <mqtt_client+0x208>
   10d3e:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <mqtt_client+0x209>
   10d42:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <mqtt_client+0x20a>
   10d46:	90 93 a6 10 	sts	0x10A6, r25	; 0x8010a6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
   10d4a:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   10d4e:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   10d52:	dc 01       	movw	r26, r24
   10d54:	ed 91       	ld	r30, X+
   10d56:	fc 91       	ld	r31, X
   10d58:	00 84       	ldd	r0, Z+8	; 0x08
   10d5a:	f1 85       	ldd	r31, Z+9	; 0x09
   10d5c:	e0 2d       	mov	r30, r0
   10d5e:	19 95       	eicall
   10d60:	89 2b       	or	r24, r25
   10d62:	09 f0       	breq	.+2      	; 0x10d66 <mqtt_reconnect()+0x112>
   10d64:	48 c0       	rjmp	.+144    	; 0x10df6 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
   10d66:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
   10d6a:	00 91 a3 10 	lds	r16, 0x10A3	; 0x8010a3 <mqtt_client+0x208>
   10d6e:	10 91 a4 10 	lds	r17, 0x10A4	; 0x8010a4 <mqtt_client+0x209>
   10d72:	20 91 a5 10 	lds	r18, 0x10A5	; 0x8010a5 <mqtt_client+0x20a>
   10d76:	30 91 a6 10 	lds	r19, 0x10A6	; 0x8010a6 <mqtt_client+0x20b>
   10d7a:	60 1b       	sub	r22, r16
   10d7c:	71 0b       	sbc	r23, r17
   10d7e:	82 0b       	sbc	r24, r18
   10d80:	93 0b       	sbc	r25, r19
   10d82:	64 36       	cpi	r22, 0x64	; 100
   10d84:	71 05       	cpc	r23, r1
   10d86:	81 05       	cpc	r24, r1
   10d88:	91 05       	cpc	r25, r1
   10d8a:	f8 f2       	brcs	.-66     	; 0x10d4a <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
   10d8c:	8c ef       	ldi	r24, 0xFC	; 252
   10d8e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   10d90:	90 93 b7 10 	sts	0x10B7, r25	; 0x8010b7 <mqtt_client+0x21c>
   10d94:	80 93 b6 10 	sts	0x10B6, r24	; 0x8010b6 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
   10d98:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   10d9c:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   10da0:	dc 01       	movw	r26, r24
   10da2:	ed 91       	ld	r30, X+
   10da4:	fc 91       	ld	r31, X
   10da6:	04 88       	ldd	r0, Z+20	; 0x14
   10da8:	f5 89       	ldd	r31, Z+21	; 0x15
   10daa:	e0 2d       	mov	r30, r0
   10dac:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3538
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
   10dae:	80 91 b6 10 	lds	r24, 0x10B6	; 0x8010b6 <mqtt_client+0x21b>
   10db2:	a5 96       	adiw	r28, 0x25	; 37
   10db4:	0f b6       	in	r0, 0x3f	; 63
   10db6:	f8 94       	cli
   10db8:	de bf       	out	0x3e, r29	; 62
   10dba:	0f be       	out	0x3f, r0	; 63
   10dbc:	cd bf       	out	0x3d, r28	; 61
   10dbe:	df 91       	pop	r29
   10dc0:	cf 91       	pop	r28
   10dc2:	1f 91       	pop	r17
   10dc4:	0f 91       	pop	r16
   10dc6:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
   10dc8:	06 84       	ldd	r0, Z+14	; 0x0e
   10dca:	f7 85       	ldd	r31, Z+15	; 0x0f
   10dcc:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   10dce:	22 ee       	ldi	r18, 0xE2	; 226
   10dd0:	32 e0       	ldi	r19, 0x02	; 2
   10dd2:	3a 83       	std	Y+2, r19	; 0x02
   10dd4:	29 83       	std	Y+1, r18	; 0x01
   10dd6:	00 91 ac 10 	lds	r16, 0x10AC	; 0x8010ac <mqtt_client+0x211>
   10dda:	10 91 ad 10 	lds	r17, 0x10AD	; 0x8010ad <mqtt_client+0x212>
   10dde:	20 91 ae 10 	lds	r18, 0x10AE	; 0x8010ae <mqtt_client+0x213>
   10de2:	30 91 af 10 	lds	r19, 0x10AF	; 0x8010af <mqtt_client+0x214>
   10de6:	0b 83       	std	Y+3, r16	; 0x03
   10de8:	1c 83       	std	Y+4, r17	; 0x04
   10dea:	2d 83       	std	Y+5, r18	; 0x05
   10dec:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
   10dee:	be 01       	movw	r22, r28
   10df0:	6f 5f       	subi	r22, 0xFF	; 255
   10df2:	7f 4f       	sbci	r23, 0xFF	; 255
   10df4:	61 cf       	rjmp	.-318    	; 0x10cb8 <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   10df6:	ce 01       	movw	r24, r28
   10df8:	85 96       	adiw	r24, 0x25	; 37
   10dfa:	0e 94 8a a4 	call	0x14914	; 0x14914 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
   10dfe:	04 97       	sbiw	r24, 0x04	; 4
   10e00:	59 f6       	brne	.-106    	; 0x10d98 <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
   10e02:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   10e06:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
   10e08:	81 11       	cpse	r24, r1
   10e0a:	c2 cf       	rjmp	.-124    	; 0x10d90 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
   10e0c:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   10e10:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <mqtt_client+0x208>
   10e14:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <mqtt_client+0x209>
   10e18:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <mqtt_client+0x20a>
   10e1c:	90 93 a6 10 	sts	0x10A6, r25	; 0x8010a6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
   10e20:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
   10e24:	10 92 b7 10 	sts	0x10B7, r1	; 0x8010b7 <mqtt_client+0x21c>
   10e28:	10 92 b6 10 	sts	0x10B6, r1	; 0x8010b6 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
   10e2c:	64 e3       	ldi	r22, 0x34	; 52
   10e2e:	78 e5       	ldi	r23, 0x58	; 88
   10e30:	ce 01       	movw	r24, r28
   10e32:	01 96       	adiw	r24, 0x01	; 1
   10e34:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
      strcat(topic, nazev);
   10e38:	be 01       	movw	r22, r28
   10e3a:	65 5e       	subi	r22, 0xE5	; 229
   10e3c:	7f 4f       	sbci	r23, 0xFF	; 255
   10e3e:	ce 01       	movw	r24, r28
   10e40:	01 96       	adiw	r24, 0x01	; 1
   10e42:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
      strcat(topic, "/#");
   10e46:	64 ea       	ldi	r22, 0xA4	; 164
   10e48:	76 e0       	ldi	r23, 0x06	; 6
   10e4a:	ce 01       	movw	r24, r28
   10e4c:	01 96       	adiw	r24, 0x01	; 1
   10e4e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3515
      mqtt_client.subscribe(topic);
   10e52:	ce 01       	movw	r24, r28
   10e54:	01 96       	adiw	r24, 0x01	; 1
   10e56:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3516
      strcpy_P(topic, thermctl_header_in);
   10e5a:	64 e3       	ldi	r22, 0x34	; 52
   10e5c:	78 e5       	ldi	r23, 0x58	; 88
   10e5e:	ce 01       	movw	r24, r28
   10e60:	01 96       	adiw	r24, 0x01	; 1
   10e62:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3517
      strcat(topic, "global/#");
   10e66:	6e e9       	ldi	r22, 0x9E	; 158
   10e68:	76 e0       	ldi	r23, 0x06	; 6
   10e6a:	ce 01       	movw	r24, r28
   10e6c:	01 96       	adiw	r24, 0x01	; 1
   10e6e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3518
      mqtt_client.subscribe(topic);
   10e72:	ce 01       	movw	r24, r28
   10e74:	01 96       	adiw	r24, 0x01	; 1
   10e76:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   10e7a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3521
        remote_tds_subscibe_topic(idx);
   10e7c:	81 2f       	mov	r24, r17
   10e7e:	0e 94 03 78 	call	0xf006	; 0xf006 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   10e82:	1f 5f       	subi	r17, 0xFF	; 255
   10e84:	1a 30       	cpi	r17, 0x0A	; 10
   10e86:	d1 f7       	brne	.-12     	; 0x10e7c <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
   10e88:	65 e2       	ldi	r22, 0x25	; 37
   10e8a:	78 e5       	ldi	r23, 0x58	; 88
   10e8c:	ce 01       	movw	r24, r28
   10e8e:	01 96       	adiw	r24, 0x01	; 1
   10e90:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
      strcat(topic, "/#");
   10e94:	64 ea       	ldi	r22, 0xA4	; 164
   10e96:	76 e0       	ldi	r23, 0x06	; 6
   10e98:	ce 01       	movw	r24, r28
   10e9a:	01 96       	adiw	r24, 0x01	; 1
   10e9c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
      mqtt_client.subscribe(topic);
   10ea0:	ce 01       	movw	r24, r28
   10ea2:	01 96       	adiw	r24, 0x01	; 1
   10ea4:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
   10ea8:	6d e0       	ldi	r22, 0x0D	; 13
   10eaa:	78 e5       	ldi	r23, 0x58	; 88
   10eac:	ce 01       	movw	r24, r28
   10eae:	01 96       	adiw	r24, 0x01	; 1
   10eb0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
      mqtt_client.subscribe(topic);
   10eb4:	ce 01       	movw	r24, r28
   10eb6:	01 96       	adiw	r24, 0x01	; 1
   10eb8:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3530
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
   10ebc:	66 ef       	ldi	r22, 0xF6	; 246
   10ebe:	77 e5       	ldi	r23, 0x57	; 87
   10ec0:	ce 01       	movw	r24, r28
   10ec2:	01 96       	adiw	r24, 0x01	; 1
   10ec4:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
      mqtt_client.subscribe(topic);
   10ec8:	ce 01       	movw	r24, r28
   10eca:	01 96       	adiw	r24, 0x01	; 1
   10ecc:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
   10ed0:	68 ee       	ldi	r22, 0xE8	; 232
   10ed2:	77 e5       	ldi	r23, 0x57	; 87
   10ed4:	ce 01       	movw	r24, r28
   10ed6:	01 96       	adiw	r24, 0x01	; 1
   10ed8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
      mqtt_client.subscribe(topic);
   10edc:	ce 01       	movw	r24, r28
   10ede:	01 96       	adiw	r24, 0x01	; 1
   10ee0:	0e 94 cd ac 	call	0x1599a	; 0x1599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>
   10ee4:	64 cf       	rjmp	.-312    	; 0x10dae <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
   10ee6:	8e ef       	ldi	r24, 0xFE	; 254
   10ee8:	9f ef       	ldi	r25, 0xFF	; 255
   10eea:	90 93 b7 10 	sts	0x10B7, r25	; 0x8010b7 <mqtt_client+0x21c>
   10eee:	80 93 b6 10 	sts	0x10B6, r24	; 0x8010b6 <mqtt_client+0x21b>
   10ef2:	5d cf       	rjmp	.-326    	; 0x10dae <mqtt_reconnect()+0x15a>

00010ef4 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4203
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   10ef4:	2f 92       	push	r2
   10ef6:	3f 92       	push	r3
   10ef8:	4f 92       	push	r4
   10efa:	5f 92       	push	r5
   10efc:	6f 92       	push	r6
   10efe:	7f 92       	push	r7
   10f00:	8f 92       	push	r8
   10f02:	9f 92       	push	r9
   10f04:	af 92       	push	r10
   10f06:	bf 92       	push	r11
   10f08:	cf 92       	push	r12
   10f0a:	df 92       	push	r13
   10f0c:	ef 92       	push	r14
   10f0e:	ff 92       	push	r15
   10f10:	0f 93       	push	r16
   10f12:	1f 93       	push	r17
   10f14:	cf 93       	push	r28
   10f16:	df 93       	push	r29
   10f18:	cd b7       	in	r28, 0x3d	; 61
   10f1a:	de b7       	in	r29, 0x3e	; 62
   10f1c:	cd 54       	subi	r28, 0x4D	; 77
   10f1e:	d1 40       	sbci	r29, 0x01	; 1
   10f20:	0f b6       	in	r0, 0x3f	; 63
   10f22:	f8 94       	cli
   10f24:	de bf       	out	0x3e, r29	; 62
   10f26:	0f be       	out	0x3f, r0	; 63
   10f28:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   10f2a:	1b 82       	std	Y+3, r1	; 0x03
   10f2c:	80 ec       	ldi	r24, 0xC0	; 192
   10f2e:	93 e0       	ldi	r25, 0x03	; 3
   10f30:	9d 83       	std	Y+5, r25	; 0x05
   10f32:	8c 83       	std	Y+4, r24	; 0x04
   10f34:	89 e3       	ldi	r24, 0x39	; 57
   10f36:	95 e0       	ldi	r25, 0x05	; 5
   10f38:	9f 83       	std	Y+7, r25	; 0x07
   10f3a:	8e 83       	std	Y+6, r24	; 0x06
   10f3c:	18 86       	std	Y+8, r1	; 0x08
   10f3e:	19 86       	std	Y+9, r1	; 0x09
   10f40:	1a 86       	std	Y+10, r1	; 0x0a
   10f42:	1b 86       	std	Y+11, r1	; 0x0b
   10f44:	80 e6       	ldi	r24, 0x60	; 96
   10f46:	9a ee       	ldi	r25, 0xEA	; 234
   10f48:	a0 e0       	ldi	r26, 0x00	; 0
   10f4a:	b0 e0       	ldi	r27, 0x00	; 0
   10f4c:	8c 87       	std	Y+12, r24	; 0x0c
   10f4e:	9d 87       	std	Y+13, r25	; 0x0d
   10f50:	ae 87       	std	Y+14, r26	; 0x0e
   10f52:	bf 87       	std	Y+15, r27	; 0x0f
   10f54:	18 8a       	std	Y+16, r1	; 0x10
   10f56:	19 8a       	std	Y+17, r1	; 0x11
   10f58:	1a 8a       	std	Y+18, r1	; 0x12
   10f5a:	1b 8a       	std	Y+19, r1	; 0x13
   10f5c:	1c 8a       	std	Y+20, r1	; 0x14
   10f5e:	1d 8a       	std	Y+21, r1	; 0x15
   10f60:	1e 8a       	std	Y+22, r1	; 0x16
   10f62:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   10f64:	88 eb       	ldi	r24, 0xB8	; 184
   10f66:	90 e1       	ldi	r25, 0x10	; 16
   10f68:	9a 83       	std	Y+2, r25	; 0x02
   10f6a:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3987
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
   10f6c:	61 e0       	ldi	r22, 0x01	; 1
   10f6e:	86 e0       	ldi	r24, 0x06	; 6
   10f70:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3988
  pinMode(ETH_CS, OUTPUT);
   10f74:	61 e0       	ldi	r22, 0x01	; 1
   10f76:	8f e0       	ldi	r24, 0x0F	; 15
   10f78:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3989
  pinMode(LED, OUTPUT);
   10f7c:	61 e0       	ldi	r22, 0x01	; 1
   10f7e:	88 e0       	ldi	r24, 0x08	; 8
   10f80:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3990
  pinMode(PIEZO, OUTPUT);
   10f84:	61 e0       	ldi	r22, 0x01	; 1
   10f86:	8c e0       	ldi	r24, 0x0C	; 12
   10f88:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
  pinMode(STORAGE_RAM_CS, OUTPUT);
   10f8c:	61 e0       	ldi	r22, 0x01	; 1
   10f8e:	86 e1       	ldi	r24, 0x16	; 22
   10f90:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3992
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
   10f94:	61 e0       	ldi	r22, 0x01	; 1
   10f96:	87 e1       	ldi	r24, 0x17	; 23
   10f98:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
  pinMode(JUMPER, INPUT_PULLUP);
   10f9c:	62 e0       	ldi	r22, 0x02	; 2
   10f9e:	8e e0       	ldi	r24, 0x0E	; 14
   10fa0:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995

  digitalWrite(PIEZO, LOW);
   10fa4:	60 e0       	ldi	r22, 0x00	; 0
   10fa6:	8c e0       	ldi	r24, 0x0C	; 12
   10fa8:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
  delay(1000);
   10fac:	68 ee       	ldi	r22, 0xE8	; 232
   10fae:	73 e0       	ldi	r23, 0x03	; 3
   10fb0:	80 e0       	ldi	r24, 0x00	; 0
   10fb2:	90 e0       	ldi	r25, 0x00	; 0
   10fb4:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
  digitalWrite(PIEZO, HIGH);
   10fb8:	61 e0       	ldi	r22, 0x01	; 1
   10fba:	8c e0       	ldi	r24, 0x0C	; 12
   10fbc:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4219

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
   10fc0:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4220
  SPI.begin();
   10fc2:	0e 94 58 4a 	call	0x94b0	; 0x94b0 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4221
  Wire.begin();
   10fc6:	0e 94 84 a2 	call	0x14508	; 0x14508 <TwoWire::begin() [clone .constprop.61]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
   10fca:	0e 94 84 a2 	call	0x14508	; 0x14508 <TwoWire::begin() [clone .constprop.61]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:460
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
   10fce:	8b e9       	ldi	r24, 0x9B	; 155
   10fd0:	9e e0       	ldi	r25, 0x0E	; 14
   10fd2:	90 93 57 09 	sts	0x0957, r25	; 0x800957 <pub_mqtt_client+0x1>
   10fd6:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4225
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
   10fda:	70 e0       	ldi	r23, 0x00	; 0
   10fdc:	60 e0       	ldi	r22, 0x00	; 0
   10fde:	8a ee       	ldi	r24, 0xEA	; 234
   10fe0:	92 e7       	ldi	r25, 0x72	; 114
   10fe2:	0e 94 5e c4 	call	0x188bc	; 0x188bc <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
   10fe6:	70 e0       	ldi	r23, 0x00	; 0
   10fe8:	60 e0       	ldi	r22, 0x00	; 0
   10fea:	8a e4       	ldi	r24, 0x4A	; 74
   10fec:	96 e4       	ldi	r25, 0x46	; 70
   10fee:	0e 94 5e c4 	call	0x188bc	; 0x188bc <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
  printf_begin();

  swSPI.begin();
   10ff2:	8a ed       	ldi	r24, 0xDA	; 218
   10ff4:	90 e1       	ldi	r25, 0x10	; 16
   10ff6:	0e 94 67 3b 	call	0x76ce	; 0x76ce <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
   10ffa:	e0 91 f5 0b 	lds	r30, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
   10ffe:	f0 e0       	ldi	r31, 0x00	; 0
   11000:	e5 51       	subi	r30, 0x15	; 21
   11002:	f4 4f       	sbci	r31, 0xF4	; 244
   11004:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
   11006:	0e 94 50 a3 	call	0x146a0	; 0x146a0 <LCDWIKI_KBV::reset() [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   1100a:	80 91 5d 0e 	lds	r24, 0x0E5D	; 0x800e5d <my_lcd+0x1a>
   1100e:	90 91 5e 0e 	lds	r25, 0x0E5E	; 0x800e5e <my_lcd+0x1b>
   11012:	01 96       	adiw	r24, 0x01	; 1
   11014:	09 f0       	breq	.+2      	; 0x11018 <setup+0x124>
   11016:	4c c0       	rjmp	.+152    	; 0x110b0 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
   11018:	60 e0       	ldi	r22, 0x00	; 0
   1101a:	84 e0       	ldi	r24, 0x04	; 4
   1101c:	90 e0       	ldi	r25, 0x00	; 0
   1101e:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
   11022:	89 2b       	or	r24, r25
   11024:	39 f5       	brne	.+78     	; 0x11074 <setup+0x180>
   11026:	61 e0       	ldi	r22, 0x01	; 1
   11028:	84 e0       	ldi	r24, 0x04	; 4
   1102a:	90 e0       	ldi	r25, 0x00	; 0
   1102c:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
   11030:	81 15       	cp	r24, r1
   11032:	90 48       	sbci	r25, 0x80	; 128
   11034:	f9 f4       	brne	.+62     	; 0x11074 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
   11036:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
   1103a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
   1103e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
   11042:	2b 96       	adiw	r28, 0x0b	; 11
   11044:	8d af       	std	Y+61, r24	; 0x3d
   11046:	9e af       	std	Y+62, r25	; 0x3e
   11048:	af af       	std	Y+63, r26	; 0x3f
   1104a:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
   1104c:	23 e0       	ldi	r18, 0x03	; 3
   1104e:	ae 01       	movw	r20, r28
   11050:	48 5b       	subi	r20, 0xB8	; 184
   11052:	5f 4f       	sbci	r21, 0xFF	; 255
   11054:	69 eb       	ldi	r22, 0xB9	; 185
   11056:	70 e0       	ldi	r23, 0x00	; 0
   11058:	83 e4       	ldi	r24, 0x43	; 67
   1105a:	9e e0       	ldi	r25, 0x0E	; 14
   1105c:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
   11060:	60 e0       	ldi	r22, 0x00	; 0
   11062:	80 ed       	ldi	r24, 0xD0	; 208
   11064:	90 e0       	ldi	r25, 0x00	; 0
   11066:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
   1106a:	61 e0       	ldi	r22, 0x01	; 1
   1106c:	80 ed       	ldi	r24, 0xD0	; 208
   1106e:	90 e0       	ldi	r25, 0x00	; 0
   11070:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
   11074:	61 e0       	ldi	r22, 0x01	; 1
   11076:	83 ed       	ldi	r24, 0xD3	; 211
   11078:	90 e0       	ldi	r25, 0x00	; 0
   1107a:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
   1107e:	81 34       	cpi	r24, 0x41	; 65
   11080:	a3 e9       	ldi	r26, 0x93	; 147
   11082:	9a 07       	cpc	r25, r26
   11084:	89 f0       	breq	.+34     	; 0x110a8 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
   11086:	86 38       	cpi	r24, 0x86	; 134
   11088:	b4 e9       	ldi	r27, 0x94	; 148
   1108a:	9b 07       	cpc	r25, r27
   1108c:	69 f0       	breq	.+26     	; 0x110a8 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
   1108e:	88 38       	cpi	r24, 0x88	; 136
   11090:	e4 e9       	ldi	r30, 0x94	; 148
   11092:	9e 07       	cpc	r25, r30
   11094:	49 f0       	breq	.+18     	; 0x110a8 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
   11096:	86 39       	cpi	r24, 0x96	; 150
   11098:	f7 e7       	ldi	r31, 0x77	; 119
   1109a:	9f 07       	cpc	r25, r31
   1109c:	29 f0       	breq	.+10     	; 0x110a8 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
   1109e:	60 e0       	ldi	r22, 0x00	; 0
   110a0:	90 e0       	ldi	r25, 0x00	; 0
   110a2:	80 e0       	ldi	r24, 0x00	; 0
   110a4:	0e 94 c1 a3 	call	0x14782	; 0x14782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
   110a8:	90 93 5e 0e 	sts	0x0E5E, r25	; 0x800e5e <my_lcd+0x1b>
   110ac:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   110b0:	00 91 5d 0e 	lds	r16, 0x0E5D	; 0x800e5d <my_lcd+0x1a>
   110b4:	10 91 5e 0e 	lds	r17, 0x0E5E	; 0x800e5e <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
   110b8:	0e 94 50 a3 	call	0x146a0	; 0x146a0 <LCDWIKI_KBV::reset() [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   110bc:	68 ec       	ldi	r22, 0xC8	; 200
   110be:	70 e0       	ldi	r23, 0x00	; 0
   110c0:	80 e0       	ldi	r24, 0x00	; 0
   110c2:	90 e0       	ldi	r25, 0x00	; 0
   110c4:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   110c8:	06 39       	cpi	r16, 0x96	; 150
   110ca:	17 47       	sbci	r17, 0x77	; 119
   110cc:	09 f0       	breq	.+2      	; 0x110d0 <setup+0x1dc>
   110ce:	34 c3       	rjmp	.+1640   	; 0x11738 <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   110d0:	89 e0       	ldi	r24, 0x09	; 9
   110d2:	90 e0       	ldi	r25, 0x00	; 0
   110d4:	90 93 5c 0e 	sts	0x0E5C, r25	; 0x800e5c <my_lcd+0x19>
   110d8:	80 93 5b 0e 	sts	0x0E5B, r24	; 0x800e5b <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   110dc:	8a e2       	ldi	r24, 0x2A	; 42
   110de:	90 e0       	ldi	r25, 0x00	; 0
   110e0:	90 93 60 0e 	sts	0x0E60, r25	; 0x800e60 <my_lcd+0x1d>
   110e4:	80 93 5f 0e 	sts	0x0E5F, r24	; 0x800e5f <my_lcd+0x1c>
   110e8:	8b e2       	ldi	r24, 0x2B	; 43
   110ea:	90 e0       	ldi	r25, 0x00	; 0
   110ec:	90 93 62 0e 	sts	0x0E62, r25	; 0x800e62 <my_lcd+0x1f>
   110f0:	80 93 61 0e 	sts	0x0E61, r24	; 0x800e61 <my_lcd+0x1e>
   110f4:	8c e2       	ldi	r24, 0x2C	; 44
   110f6:	90 e0       	ldi	r25, 0x00	; 0
   110f8:	90 93 64 0e 	sts	0x0E64, r25	; 0x800e64 <my_lcd+0x21>
   110fc:	80 93 63 0e 	sts	0x0E63, r24	; 0x800e63 <my_lcd+0x20>
   11100:	8e e2       	ldi	r24, 0x2E	; 46
   11102:	90 e0       	ldi	r25, 0x00	; 0
   11104:	90 93 66 0e 	sts	0x0E66, r25	; 0x800e66 <my_lcd+0x23>
   11108:	80 93 65 0e 	sts	0x0E65, r24	; 0x800e65 <my_lcd+0x22>
   1110c:	83 e3       	ldi	r24, 0x33	; 51
   1110e:	90 e0       	ldi	r25, 0x00	; 0
   11110:	90 93 68 0e 	sts	0x0E68, r25	; 0x800e68 <my_lcd+0x25>
   11114:	80 93 67 0e 	sts	0x0E67, r24	; 0x800e67 <my_lcd+0x24>
   11118:	87 e3       	ldi	r24, 0x37	; 55
   1111a:	90 e0       	ldi	r25, 0x00	; 0
   1111c:	90 93 6a 0e 	sts	0x0E6A, r25	; 0x800e6a <my_lcd+0x27>
   11120:	80 93 69 0e 	sts	0x0E69, r24	; 0x800e69 <my_lcd+0x26>
   11124:	86 e3       	ldi	r24, 0x36	; 54
   11126:	90 e0       	ldi	r25, 0x00	; 0
   11128:	90 93 6c 0e 	sts	0x0E6C, r25	; 0x800e6c <my_lcd+0x29>
   1112c:	80 93 6b 0e 	sts	0x0E6B, r24	; 0x800e6b <my_lcd+0x28>
   11130:	10 92 6e 0e 	sts	0x0E6E, r1	; 0x800e6e <my_lcd+0x2b>
   11134:	10 92 6d 0e 	sts	0x0E6D, r1	; 0x800e6d <my_lcd+0x2a>
   11138:	10 92 70 0e 	sts	0x0E70, r1	; 0x800e70 <my_lcd+0x2d>
   1113c:	10 92 6f 0e 	sts	0x0E6F, r1	; 0x800e6f <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
   11140:	22 e4       	ldi	r18, 0x42	; 66
   11142:	e2 2e       	mov	r14, r18
   11144:	28 e5       	ldi	r18, 0x58	; 88
   11146:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   11148:	3c e6       	ldi	r19, 0x6C	; 108
   1114a:	c3 2e       	mov	r12, r19
   1114c:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
   1114e:	f7 01       	movw	r30, r14
   11150:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
   11152:	31 96       	adiw	r30, 0x01	; 1
   11154:	14 91       	lpm	r17, Z
   11156:	f2 e0       	ldi	r31, 0x02	; 2
   11158:	ef 0e       	add	r14, r31
   1115a:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
   1115c:	6f 37       	cpi	r22, 0x7F	; 127
   1115e:	89 f0       	breq	.+34     	; 0x11182 <setup+0x28e>
   11160:	de 01       	movw	r26, r28
   11162:	a8 5b       	subi	r26, 0xB8	; 184
   11164:	bf 4f       	sbci	r27, 0xFF	; 255
   11166:	30 e0       	ldi	r19, 0x00	; 0
   11168:	20 e0       	ldi	r18, 0x00	; 0
   1116a:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
   1116c:	21 17       	cp	r18, r17
   1116e:	08 f0       	brcs	.+2      	; 0x11172 <setup+0x27e>
   11170:	da c2       	rjmp	.+1460   	; 0x11726 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
   11172:	f7 01       	movw	r30, r14
   11174:	e2 0f       	add	r30, r18
   11176:	f3 1f       	adc	r31, r19
   11178:	e4 91       	lpm	r30, Z
   1117a:	ed 93       	st	X+, r30
   1117c:	2f 5f       	subi	r18, 0xFF	; 255
   1117e:	3f 4f       	sbci	r19, 0xFF	; 255
   11180:	f5 cf       	rjmp	.-22     	; 0x1116c <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
   11182:	61 2f       	mov	r22, r17
   11184:	70 e0       	ldi	r23, 0x00	; 0
   11186:	90 e0       	ldi	r25, 0x00	; 0
   11188:	80 e0       	ldi	r24, 0x00	; 0
   1118a:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
   1118e:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
   11190:	61 2f       	mov	r22, r17
   11192:	70 e0       	ldi	r23, 0x00	; 0
   11194:	6e 5f       	subi	r22, 0xFE	; 254
   11196:	7f 4f       	sbci	r23, 0xFF	; 255
   11198:	c6 1a       	sub	r12, r22
   1119a:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
   1119c:	1c 14       	cp	r1, r12
   1119e:	1d 04       	cpc	r1, r13
   111a0:	b4 f2       	brlt	.-84     	; 0x1114e <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   111a2:	80 91 59 0e 	lds	r24, 0x0E59	; 0x800e59 <my_lcd+0x16>
   111a6:	0e 94 8b 9d 	call	0x13b16	; 0x13b16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
   111aa:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   111ae:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   111b2:	80 81       	ld	r24, Z
   111b4:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <my_lcd+0x3a>
   111b8:	89 23       	and	r24, r25
   111ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
   111bc:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
   111c0:	20 91 5b 0e 	lds	r18, 0x0E5B	; 0x800e5b <my_lcd+0x18>
   111c4:	30 91 5c 0e 	lds	r19, 0x0E5C	; 0x800e5c <my_lcd+0x19>
   111c8:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   111cc:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   111d0:	80 91 7e 0e 	lds	r24, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   111d4:	21 15       	cp	r18, r1
   111d6:	31 05       	cpc	r19, r1
   111d8:	09 f0       	breq	.+2      	; 0x111dc <setup+0x2e8>
   111da:	b5 c2       	rjmp	.+1386   	; 0x11746 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   111dc:	20 81       	ld	r18, Z
   111de:	82 23       	and	r24, r18
   111e0:	80 83       	st	Z, r24
   111e2:	81 e6       	ldi	r24, 0x61	; 97
   111e4:	82 b9       	out	0x02, r24	; 2
   111e6:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   111ea:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   111ee:	80 81       	ld	r24, Z
   111f0:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   111f4:	82 23       	and	r24, r18
   111f6:	80 83       	st	Z, r24
   111f8:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   111fc:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   11200:	80 81       	ld	r24, Z
   11202:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   11206:	82 2b       	or	r24, r18
   11208:	80 83       	st	Z, r24
   1120a:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   1120e:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   11212:	80 81       	ld	r24, Z
   11214:	20 91 7a 0e 	lds	r18, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   11218:	82 2b       	or	r24, r18
   1121a:	80 83       	st	Z, r24
   1121c:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
   1121e:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   11222:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   11226:	80 81       	ld	r24, Z
   11228:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   1122c:	89 23       	and	r24, r25
   1122e:	80 83       	st	Z, r24
   11230:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   11234:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   11238:	80 81       	ld	r24, Z
   1123a:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   1123e:	89 2b       	or	r24, r25
   11240:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
   11242:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   11246:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   1124a:	80 81       	ld	r24, Z
   1124c:	90 91 79 0e 	lds	r25, 0x0E79	; 0x800e79 <my_lcd+0x36>
   11250:	89 2b       	or	r24, r25
   11252:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4233
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
   11254:	83 e0       	ldi	r24, 0x03	; 3
   11256:	0e 94 8b 9d 	call	0x13b16	; 0x13b16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
   1125a:	83 e0       	ldi	r24, 0x03	; 3
   1125c:	80 93 32 0e 	sts	0x0E32, r24	; 0x800e32 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   11260:	20 91 57 0e 	lds	r18, 0x0E57	; 0x800e57 <my_lcd+0x14>
   11264:	30 91 58 0e 	lds	r19, 0x0E58	; 0x800e58 <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   11268:	40 91 55 0e 	lds	r20, 0x0E55	; 0x800e55 <my_lcd+0x12>
   1126c:	50 91 56 0e 	lds	r21, 0x0E56	; 0x800e56 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   11270:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   11274:	e0 91 3a 0e 	lds	r30, 0x0E3A	; 0x800e3a <my_touch+0x15>
   11278:	f0 91 3b 0e 	lds	r31, 0x0E3B	; 0x800e3b <my_touch+0x16>
   1127c:	80 81       	ld	r24, Z
   1127e:	60 91 41 0e 	lds	r22, 0x0E41	; 0x800e41 <my_touch+0x1c>
   11282:	86 2b       	or	r24, r22
   11284:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
   11286:	e0 91 36 0e 	lds	r30, 0x0E36	; 0x800e36 <my_touch+0x11>
   1128a:	f0 91 37 0e 	lds	r31, 0x0E37	; 0x800e37 <my_touch+0x12>
   1128e:	80 81       	ld	r24, Z
   11290:	60 91 3f 0e 	lds	r22, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   11294:	86 2b       	or	r24, r22
   11296:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
   11298:	e0 91 34 0e 	lds	r30, 0x0E34	; 0x800e34 <my_touch+0xf>
   1129c:	f0 91 35 0e 	lds	r31, 0x0E35	; 0x800e35 <my_touch+0x10>
   112a0:	80 81       	ld	r24, Z
   112a2:	60 91 3e 0e 	lds	r22, 0x0E3E	; 0x800e3e <my_touch+0x19>
   112a6:	86 2b       	or	r24, r22
   112a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
   112aa:	50 93 2e 0e 	sts	0x0E2E, r21	; 0x800e2e <my_touch+0x9>
   112ae:	40 93 2d 0e 	sts	0x0E2D, r20	; 0x800e2d <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
   112b2:	30 93 30 0e 	sts	0x0E30, r19	; 0x800e30 <my_touch+0xb>
   112b6:	20 93 2f 0e 	sts	0x0E2F, r18	; 0x800e2f <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   112ba:	90 93 33 0e 	sts	0x0E33, r25	; 0x800e33 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
   112be:	8f ef       	ldi	r24, 0xFF	; 255
   112c0:	9f ef       	ldi	r25, 0xFF	; 255
   112c2:	0e 94 c9 9b 	call	0x13792	; 0x13792 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.165]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   112c6:	8f e1       	ldi	r24, 0x1F	; 31
   112c8:	90 e0       	ldi	r25, 0x00	; 0
   112ca:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
   112ce:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
   112d2:	1e 01       	movw	r2, r28
   112d4:	28 e4       	ldi	r18, 0x48	; 72
   112d6:	22 0e       	add	r2, r18
   112d8:	31 1c       	adc	r3, r1
   112da:	6e eb       	ldi	r22, 0xBE	; 190
   112dc:	79 e5       	ldi	r23, 0x59	; 89
   112de:	c1 01       	movw	r24, r2
   112e0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   112e4:	ee 24       	eor	r14, r14
   112e6:	ea 94       	dec	r14
   112e8:	fe 2c       	mov	r15, r14
   112ea:	0f e1       	ldi	r16, 0x1F	; 31
   112ec:	10 e0       	ldi	r17, 0x00	; 0
   112ee:	22 e0       	ldi	r18, 0x02	; 2
   112f0:	4a e0       	ldi	r20, 0x0A	; 10
   112f2:	50 e0       	ldi	r21, 0x00	; 0
   112f4:	6e e1       	ldi	r22, 0x1E	; 30
   112f6:	70 e0       	ldi	r23, 0x00	; 0
   112f8:	c1 01       	movw	r24, r2
   112fa:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   112fe:	8e e1       	ldi	r24, 0x1E	; 30
   11300:	90 e0       	ldi	r25, 0x00	; 0
   11302:	c4 5c       	subi	r28, 0xC4	; 196
   11304:	de 4f       	sbci	r29, 0xFE	; 254
   11306:	99 83       	std	Y+1, r25	; 0x01
   11308:	88 83       	st	Y, r24
   1130a:	cc 53       	subi	r28, 0x3C	; 60
   1130c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  ///
  for (uint8_t init = 0;  init < 16; init++)
   1130e:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4604
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
   11310:	d2 2c       	mov	r13, r2
   11312:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   11314:	a2 e3       	ldi	r26, 0x32	; 50
   11316:	b1 e0       	ldi	r27, 0x01	; 1
   11318:	ac 0f       	add	r26, r28
   1131a:	bd 1f       	adc	r27, r29
   1131c:	12 96       	adiw	r26, 0x02	; 2
   1131e:	cc 5b       	subi	r28, 0xBC	; 188
   11320:	de 4f       	sbci	r29, 0xFE	; 254
   11322:	b9 83       	std	Y+1, r27	; 0x01
   11324:	a8 83       	st	Y, r26
   11326:	c4 54       	subi	r28, 0x44	; 68
   11328:	d1 40       	sbci	r29, 0x01	; 1
   1132a:	ec e2       	ldi	r30, 0x2C	; 44
   1132c:	f1 e0       	ldi	r31, 0x01	; 1
   1132e:	ec 0f       	add	r30, r28
   11330:	fd 1f       	adc	r31, r29
   11332:	32 96       	adiw	r30, 0x02	; 2
   11334:	ca 5b       	subi	r28, 0xBA	; 186
   11336:	de 4f       	sbci	r29, 0xFE	; 254
   11338:	f9 83       	std	Y+1, r31	; 0x01
   1133a:	e8 83       	st	Y, r30
   1133c:	c6 54       	subi	r28, 0x46	; 70
   1133e:	d1 40       	sbci	r29, 0x01	; 1
   11340:	26 e2       	ldi	r18, 0x26	; 38
   11342:	31 e0       	ldi	r19, 0x01	; 1
   11344:	2c 0f       	add	r18, r28
   11346:	3d 1f       	adc	r19, r29
   11348:	2e 5f       	subi	r18, 0xFE	; 254
   1134a:	3f 4f       	sbci	r19, 0xFF	; 255
   1134c:	c8 5b       	subi	r28, 0xB8	; 184
   1134e:	de 4f       	sbci	r29, 0xFE	; 254
   11350:	39 83       	std	Y+1, r19	; 0x01
   11352:	28 83       	st	Y, r18
   11354:	c8 54       	subi	r28, 0x48	; 72
   11356:	d1 40       	sbci	r29, 0x01	; 1
   11358:	8e ed       	ldi	r24, 0xDE	; 222
   1135a:	90 e0       	ldi	r25, 0x00	; 0
   1135c:	8c 0f       	add	r24, r28
   1135e:	9d 1f       	adc	r25, r29
   11360:	02 96       	adiw	r24, 0x02	; 2
   11362:	c6 5b       	subi	r28, 0xB6	; 182
   11364:	de 4f       	sbci	r29, 0xFE	; 254
   11366:	99 83       	std	Y+1, r25	; 0x01
   11368:	88 83       	st	Y, r24
   1136a:	ca 54       	subi	r28, 0x4A	; 74
   1136c:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   1136e:	a8 ec       	ldi	r26, 0xC8	; 200
   11370:	b0 e0       	ldi	r27, 0x00	; 0
   11372:	ac 0f       	add	r26, r28
   11374:	bd 1f       	adc	r27, r29
   11376:	1c 96       	adiw	r26, 0x0c	; 12
   11378:	c4 5b       	subi	r28, 0xB4	; 180
   1137a:	de 4f       	sbci	r29, 0xFE	; 254
   1137c:	b9 83       	std	Y+1, r27	; 0x01
   1137e:	a8 83       	st	Y, r26
   11380:	cc 54       	subi	r28, 0x4C	; 76
   11382:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   11384:	ee 24       	eor	r14, r14
   11386:	ea 94       	dec	r14
   11388:	fe 2c       	mov	r15, r14
   1138a:	00 e0       	ldi	r16, 0x00	; 0
   1138c:	18 ef       	ldi	r17, 0xF8	; 248
   1138e:	21 e0       	ldi	r18, 0x01	; 1
   11390:	4e e1       	ldi	r20, 0x1E	; 30
   11392:	50 e0       	ldi	r21, 0x00	; 0
   11394:	c4 5c       	subi	r28, 0xC4	; 196
   11396:	de 4f       	sbci	r29, 0xFE	; 254
   11398:	68 81       	ld	r22, Y
   1139a:	79 81       	ldd	r23, Y+1	; 0x01
   1139c:	cc 53       	subi	r28, 0x3C	; 60
   1139e:	d1 40       	sbci	r29, 0x01	; 1
   113a0:	87 ea       	ldi	r24, 0xA7	; 167
   113a2:	96 e0       	ldi	r25, 0x06	; 6
   113a4:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
   113a8:	a1 10       	cpse	r10, r1
   113aa:	18 c2       	rjmp	.+1072   	; 0x117dc <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4247
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   113ac:	6e ea       	ldi	r22, 0xAE	; 174
   113ae:	79 e5       	ldi	r23, 0x59	; 89
   113b0:	c1 01       	movw	r24, r2
   113b2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
      strcat(str1, ":1");
   113b6:	69 ea       	ldi	r22, 0xA9	; 169
   113b8:	76 e0       	ldi	r23, 0x06	; 6
   113ba:	c1 01       	movw	r24, r2
   113bc:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   113c0:	00 ee       	ldi	r16, 0xE0	; 224
   113c2:	17 e0       	ldi	r17, 0x07	; 7
   113c4:	21 e0       	ldi	r18, 0x01	; 1
   113c6:	42 e3       	ldi	r20, 0x32	; 50
   113c8:	50 e0       	ldi	r21, 0x00	; 0
   113ca:	6e e1       	ldi	r22, 0x1E	; 30
   113cc:	70 e0       	ldi	r23, 0x00	; 0
   113ce:	c1 01       	movw	r24, r2
   113d0:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251

      tritri = 0;
   113d4:	10 92 81 0a 	sts	0x0A81, r1	; 0x800a81 <tritri+0x1>
   113d8:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4252
      petnula = 0;
   113dc:	10 92 7f 0a 	sts	0x0A7F, r1	; 0x800a7f <petnula+0x1>
   113e0:	10 92 7e 0a 	sts	0x0A7E, r1	; 0x800a7e <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4253
      dvanact = 0;
   113e4:	10 92 7d 0a 	sts	0x0A7D, r1	; 0x800a7d <dvanact+0x1>
   113e8:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4255
      dvanact = 0;
      light_curr = 0;
   113ec:	10 92 45 0b 	sts	0x0B45, r1	; 0x800b45 <light_curr+0x1>
   113f0:	10 92 44 0b 	sts	0x0B44, r1	; 0x800b44 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
   113f4:	88 ef       	ldi	r24, 0xF8	; 248
   113f6:	80 93 42 0b 	sts	0x0B42, r24	; 0x800b42 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
   113fa:	83 e0       	ldi	r24, 0x03	; 3
   113fc:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
   11400:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
   11404:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
   11408:	8e e8       	ldi	r24, 0x8E	; 142
   1140a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
   1140e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
   11412:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <a2d_reference>
   11416:	b0 e4       	ldi	r27, 0x40	; 64
   11418:	8b 9f       	mul	r24, r27
   1141a:	c0 01       	movw	r24, r0
   1141c:	11 24       	eor	r1, r1
   1141e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
   11422:	89 e2       	ldi	r24, 0x29	; 41
   11424:	98 e3       	ldi	r25, 0x38	; 56
   11426:	90 93 30 0a 	sts	0x0A30, r25	; 0x800a30 <_ZL17a2d_interupt_func.lto_priv.233+0x1>
   1142a:	80 93 2f 0a 	sts	0x0A2F, r24	; 0x800a2f <_ZL17a2d_interupt_func.lto_priv.233>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   1142e:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4262
      a2d_start_first(A_PROUD);
   11432:	83 e0       	ldi	r24, 0x03	; 3
   11434:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
      milis = millis();
   11438:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1143c:	2b 01       	movw	r4, r22
   1143e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4264
      while (a2d_run_now == 0 && millis() - milis < 10);
   11440:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   11444:	81 11       	cpse	r24, r1
   11446:	0b c0       	rjmp	.+22     	; 0x1145e <setup+0x56a>
   11448:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1144c:	64 19       	sub	r22, r4
   1144e:	75 09       	sbc	r23, r5
   11450:	86 09       	sbc	r24, r6
   11452:	97 09       	sbc	r25, r7
   11454:	6a 30       	cpi	r22, 0x0A	; 10
   11456:	71 05       	cpc	r23, r1
   11458:	81 05       	cpc	r24, r1
   1145a:	91 05       	cpc	r25, r1
   1145c:	88 f3       	brcs	.-30     	; 0x11440 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4266
      /// regulator 3.3V
      a2d_run_now = 0;
   1145e:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4267
      a2d_start_first(A_TRIV);
   11462:	86 e0       	ldi	r24, 0x06	; 6
   11464:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4268
      milis = millis();
   11468:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1146c:	2b 01       	movw	r4, r22
   1146e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4269
      while (a2d_run_now == 0 && millis() - milis < 10);
   11470:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   11474:	81 11       	cpse	r24, r1
   11476:	0b c0       	rjmp	.+22     	; 0x1148e <setup+0x59a>
   11478:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1147c:	64 19       	sub	r22, r4
   1147e:	75 09       	sbc	r23, r5
   11480:	86 09       	sbc	r24, r6
   11482:	97 09       	sbc	r25, r7
   11484:	6a 30       	cpi	r22, 0x0A	; 10
   11486:	71 05       	cpc	r23, r1
   11488:	81 05       	cpc	r24, r1
   1148a:	91 05       	cpc	r25, r1
   1148c:	88 f3       	brcs	.-30     	; 0x11470 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
      /// regulator 5.0V
      a2d_run_now = 0;
   1148e:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4272
      a2d_start_first(A_PETV);
   11492:	85 e0       	ldi	r24, 0x05	; 5
   11494:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
      milis = millis();
   11498:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1149c:	2b 01       	movw	r4, r22
   1149e:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
      while (a2d_run_now == 0 && millis() - milis < 10);
   114a0:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   114a4:	81 11       	cpse	r24, r1
   114a6:	0b c0       	rjmp	.+22     	; 0x114be <setup+0x5ca>
   114a8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   114ac:	64 19       	sub	r22, r4
   114ae:	75 09       	sbc	r23, r5
   114b0:	86 09       	sbc	r24, r6
   114b2:	97 09       	sbc	r25, r7
   114b4:	6a 30       	cpi	r22, 0x0A	; 10
   114b6:	71 05       	cpc	r23, r1
   114b8:	81 05       	cpc	r24, r1
   114ba:	91 05       	cpc	r25, r1
   114bc:	88 f3       	brcs	.-30     	; 0x114a0 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
      /// vstupni napeti 12V
      a2d_run_now = 0;
   114be:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4277
      a2d_start_first(A_DVANACTV);
   114c2:	84 e0       	ldi	r24, 0x04	; 4
   114c4:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
      milis = millis();
   114c8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   114cc:	2b 01       	movw	r4, r22
   114ce:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4279
      while (a2d_run_now == 0 && millis() - milis < 10);
   114d0:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   114d4:	81 11       	cpse	r24, r1
   114d6:	0b c0       	rjmp	.+22     	; 0x114ee <setup+0x5fa>
   114d8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   114dc:	64 19       	sub	r22, r4
   114de:	75 09       	sbc	r23, r5
   114e0:	86 09       	sbc	r24, r6
   114e2:	97 09       	sbc	r25, r7
   114e4:	6a 30       	cpi	r22, 0x0A	; 10
   114e6:	71 05       	cpc	r23, r1
   114e8:	81 05       	cpc	r24, r1
   114ea:	91 05       	cpc	r25, r1
   114ec:	88 f3       	brcs	.-30     	; 0x114d0 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
      /// aktualni intenzita svetla
      a2d_run_now = 0;
   114ee:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
      a2d_start_first(A_LIGHT);
   114f2:	87 e0       	ldi	r24, 0x07	; 7
   114f4:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
      milis = millis();
   114f8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   114fc:	2b 01       	movw	r4, r22
   114fe:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4284
      while (a2d_run_now == 0 && millis() - milis < 10);
   11500:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   11504:	81 11       	cpse	r24, r1
   11506:	0b c0       	rjmp	.+22     	; 0x1151e <setup+0x62a>
   11508:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1150c:	64 19       	sub	r22, r4
   1150e:	75 09       	sbc	r23, r5
   11510:	86 09       	sbc	r24, r6
   11512:	97 09       	sbc	r25, r7
   11514:	6a 30       	cpi	r22, 0x0A	; 10
   11516:	71 05       	cpc	r23, r1
   11518:	81 05       	cpc	r24, r1
   1151a:	91 05       	cpc	r25, r1
   1151c:	88 f3       	brcs	.-30     	; 0x11500 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
   1151e:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   11522:	4e 01       	movw	r8, r28
   11524:	ea ef       	ldi	r30, 0xFA	; 250
   11526:	8e 1a       	sub	r8, r30
   11528:	ee ef       	ldi	r30, 0xFE	; 254
   1152a:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1152c:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <tritri>
   11530:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <tritri+0x1>
   11534:	25 e0       	ldi	r18, 0x05	; 5
   11536:	28 9f       	mul	r18, r24
   11538:	b0 01       	movw	r22, r0
   1153a:	29 9f       	mul	r18, r25
   1153c:	70 0d       	add	r23, r0
   1153e:	11 24       	eor	r1, r1
   11540:	90 e0       	ldi	r25, 0x00	; 0
   11542:	80 e0       	ldi	r24, 0x00	; 0
   11544:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   11548:	20 e0       	ldi	r18, 0x00	; 0
   1154a:	30 e0       	ldi	r19, 0x00	; 0
   1154c:	4a e7       	ldi	r20, 0x7A	; 122
   1154e:	54 e4       	ldi	r21, 0x44	; 68
   11550:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   11554:	84 01       	movw	r16, r8
   11556:	22 e0       	ldi	r18, 0x02	; 2
   11558:	44 e0       	ldi	r20, 0x04	; 4
   1155a:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   1155e:	7e 01       	movw	r14, r28
   11560:	f2 ef       	ldi	r31, 0xF2	; 242
   11562:	ef 1a       	sub	r14, r31
   11564:	fe ef       	ldi	r31, 0xFE	; 254
   11566:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   11568:	60 91 7e 0a 	lds	r22, 0x0A7E	; 0x800a7e <petnula>
   1156c:	70 91 7f 0a 	lds	r23, 0x0A7F	; 0x800a7f <petnula+0x1>
   11570:	13 e0       	ldi	r17, 0x03	; 3
   11572:	66 0f       	add	r22, r22
   11574:	77 1f       	adc	r23, r23
   11576:	1a 95       	dec	r17
   11578:	e1 f7       	brne	.-8      	; 0x11572 <setup+0x67e>
   1157a:	90 e0       	ldi	r25, 0x00	; 0
   1157c:	80 e0       	ldi	r24, 0x00	; 0
   1157e:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   11582:	20 e0       	ldi	r18, 0x00	; 0
   11584:	30 e0       	ldi	r19, 0x00	; 0
   11586:	4a e7       	ldi	r20, 0x7A	; 122
   11588:	54 e4       	ldi	r21, 0x44	; 68
   1158a:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   1158e:	87 01       	movw	r16, r14
   11590:	22 e0       	ldi	r18, 0x02	; 2
   11592:	44 e0       	ldi	r20, 0x04	; 4
   11594:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   11598:	3e 01       	movw	r6, r28
   1159a:	2a ee       	ldi	r18, 0xEA	; 234
   1159c:	62 1a       	sub	r6, r18
   1159e:	2e ef       	ldi	r18, 0xFE	; 254
   115a0:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   115a2:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <dvanact>
   115a6:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <dvanact+0x1>
   115aa:	29 e3       	ldi	r18, 0x39	; 57
   115ac:	28 9f       	mul	r18, r24
   115ae:	b0 01       	movw	r22, r0
   115b0:	29 9f       	mul	r18, r25
   115b2:	70 0d       	add	r23, r0
   115b4:	11 24       	eor	r1, r1
   115b6:	90 e0       	ldi	r25, 0x00	; 0
   115b8:	80 e0       	ldi	r24, 0x00	; 0
   115ba:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   115be:	20 e0       	ldi	r18, 0x00	; 0
   115c0:	30 e0       	ldi	r19, 0x00	; 0
   115c2:	4a e7       	ldi	r20, 0x7A	; 122
   115c4:	54 e4       	ldi	r21, 0x44	; 68
   115c6:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   115ca:	83 01       	movw	r16, r6
   115cc:	22 e0       	ldi	r18, 0x02	; 2
   115ce:	44 e0       	ldi	r20, 0x04	; 4
   115d0:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   115d4:	2e 01       	movw	r4, r28
   115d6:	32 ee       	ldi	r19, 0xE2	; 226
   115d8:	43 1a       	sub	r4, r19
   115da:	3e ef       	ldi	r19, 0xFE	; 254
   115dc:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3968
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   115de:	60 91 7a 0a 	lds	r22, 0x0A7A	; 0x800a7a <proud>
   115e2:	70 91 7b 0a 	lds	r23, 0x0A7B	; 0x800a7b <proud+0x1>
   115e6:	90 e0       	ldi	r25, 0x00	; 0
   115e8:	80 e0       	ldi	r24, 0x00	; 0
   115ea:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   115ee:	82 01       	movw	r16, r4
   115f0:	22 e0       	ldi	r18, 0x02	; 2
   115f2:	44 e0       	ldi	r20, 0x04	; 4
   115f4:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   115f8:	5f 92       	push	r5
   115fa:	4f 92       	push	r4
   115fc:	7f 92       	push	r7
   115fe:	6f 92       	push	r6
   11600:	ff 92       	push	r15
   11602:	ef 92       	push	r14
   11604:	9f 92       	push	r9
   11606:	8f 92       	push	r8
   11608:	8c ea       	ldi	r24, 0xAC	; 172
   1160a:	96 e0       	ldi	r25, 0x06	; 6
   1160c:	9f 93       	push	r25
   1160e:	8f 93       	push	r24
   11610:	4e 01       	movw	r8, r28
   11612:	88 e8       	ldi	r24, 0x88	; 136
   11614:	88 0e       	add	r8, r24
   11616:	91 1c       	adc	r9, r1
   11618:	9f 92       	push	r9
   1161a:	8f 92       	push	r8
   1161c:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11620:	ee 24       	eor	r14, r14
   11622:	ea 94       	dec	r14
   11624:	fe 2c       	mov	r15, r14
   11626:	00 ee       	ldi	r16, 0xE0	; 224
   11628:	17 e0       	ldi	r17, 0x07	; 7
   1162a:	21 e0       	ldi	r18, 0x01	; 1
   1162c:	42 e3       	ldi	r20, 0x32	; 50
   1162e:	50 e0       	ldi	r21, 0x00	; 0
   11630:	60 ea       	ldi	r22, 0xA0	; 160
   11632:	70 e0       	ldi	r23, 0x00	; 0
   11634:	c4 01       	movw	r24, r8
   11636:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   1163a:	0f b6       	in	r0, 0x3f	; 63
   1163c:	f8 94       	cli
   1163e:	de bf       	out	0x3e, r29	; 62
   11640:	0f be       	out	0x3f, r0	; 63
   11642:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
   11644:	2e e0       	ldi	r18, 0x0E	; 14
   11646:	a2 12       	cpse	r10, r18
   11648:	0c 94 5a 93 	jmp	0x126b4	; 0x126b4 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4585
    {
      strcpy_P(str1, text_ntp_cas);
   1164c:	61 ec       	ldi	r22, 0xC1	; 193
   1164e:	78 e5       	ldi	r23, 0x58	; 88
   11650:	c1 01       	movw	r24, r2
   11652:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4586
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11656:	ee 24       	eor	r14, r14
   11658:	ea 94       	dec	r14
   1165a:	fe 2c       	mov	r15, r14
   1165c:	00 ee       	ldi	r16, 0xE0	; 224
   1165e:	17 e0       	ldi	r17, 0x07	; 7
   11660:	21 e0       	ldi	r18, 0x01	; 1
   11662:	4e eb       	ldi	r20, 0xBE	; 190
   11664:	50 e0       	ldi	r21, 0x00	; 0
   11666:	6e e1       	ldi	r22, 0x1E	; 30
   11668:	70 e0       	ldi	r23, 0x00	; 0
   1166a:	c1 01       	movw	r24, r2
   1166c:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
ntp_check():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:422

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   11670:	c2 52       	subi	r28, 0x22	; 34
   11672:	df 4f       	sbci	r29, 0xFF	; 255
   11674:	18 82       	st	Y, r1
   11676:	ce 5d       	subi	r28, 0xDE	; 222
   11678:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:423
  createString(tmp1, '.', device.ntp_server, 4, 10);
   1167a:	0a e0       	ldi	r16, 0x0A	; 10
   1167c:	24 e0       	ldi	r18, 0x04	; 4
   1167e:	46 ef       	ldi	r20, 0xF6	; 246
   11680:	5c e0       	ldi	r21, 0x0C	; 12
   11682:	6e e2       	ldi	r22, 0x2E	; 46
   11684:	ce 01       	movw	r24, r28
   11686:	82 52       	subi	r24, 0x22	; 34
   11688:	9f 4f       	sbci	r25, 0xFF	; 255
   1168a:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   1168e:	89 e3       	ldi	r24, 0x39	; 57
   11690:	95 e0       	ldi	r25, 0x05	; 5
   11692:	9f 83       	std	Y+7, r25	; 0x07
   11694:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   11696:	89 81       	ldd	r24, Y+1	; 0x01
   11698:	9a 81       	ldd	r25, Y+2	; 0x02
   1169a:	dc 01       	movw	r26, r24
   1169c:	ed 91       	ld	r30, X+
   1169e:	fc 91       	ld	r31, X
   116a0:	06 84       	ldd	r0, Z+14	; 0x0e
   116a2:	f7 85       	ldd	r31, Z+15	; 0x0f
   116a4:	e0 2d       	mov	r30, r0
   116a6:	69 e3       	ldi	r22, 0x39	; 57
   116a8:	75 e0       	ldi	r23, 0x05	; 5
   116aa:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   116ac:	81 e0       	ldi	r24, 0x01	; 1
   116ae:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   116b0:	80 e1       	ldi	r24, 0x10	; 16
   116b2:	9e e0       	ldi	r25, 0x0E	; 14
   116b4:	a0 e0       	ldi	r26, 0x00	; 0
   116b6:	b0 e0       	ldi	r27, 0x00	; 0
   116b8:	88 87       	std	Y+8, r24	; 0x08
   116ba:	99 87       	std	Y+9, r25	; 0x09
   116bc:	aa 87       	std	Y+10, r26	; 0x0a
   116be:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   116c0:	ee ed       	ldi	r30, 0xDE	; 222
   116c2:	f0 e0       	ldi	r31, 0x00	; 0
   116c4:	ec 0f       	add	r30, r28
   116c6:	fd 1f       	adc	r31, r29
   116c8:	fd 83       	std	Y+5, r31	; 0x05
   116ca:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   116cc:	81 e0       	ldi	r24, 0x01	; 1
   116ce:	90 e0       	ldi	r25, 0x00	; 0
   116d0:	a0 e0       	ldi	r26, 0x00	; 0
   116d2:	b0 e0       	ldi	r27, 0x00	; 0
   116d4:	8c 87       	std	Y+12, r24	; 0x0c
   116d6:	9d 87       	std	Y+13, r25	; 0x0d
   116d8:	ae 87       	std	Y+14, r26	; 0x0e
   116da:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:428
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
   116dc:	ce 01       	movw	r24, r28
   116de:	01 96       	adiw	r24, 0x01	; 1
   116e0:	0e 94 53 a6 	call	0x14ca6	; 0x14ca6 <NTPClient::update()>
   116e4:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   116e6:	89 81       	ldd	r24, Y+1	; 0x01
   116e8:	9a 81       	ldd	r25, Y+2	; 0x02
   116ea:	dc 01       	movw	r26, r24
   116ec:	ed 91       	ld	r30, X+
   116ee:	fc 91       	ld	r31, X
   116f0:	02 88       	ldd	r0, Z+18	; 0x12
   116f2:	f3 89       	ldd	r31, Z+19	; 0x13
   116f4:	e0 2d       	mov	r30, r0
   116f6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   116f8:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
      if (ntp_check(&timeClient) == 0)
   116fa:	11 11       	cpse	r17, r1
   116fc:	c5 c7       	rjmp	.+3978   	; 0x12688 <setup+0x1794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4589
      {
        strcpy_P(str1, text_err);
   116fe:	66 e0       	ldi	r22, 0x06	; 6
   11700:	7a e5       	ldi	r23, 0x5A	; 90
   11702:	c1 01       	movw	r24, r2
   11704:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4590
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   11708:	00 e0       	ldi	r16, 0x00	; 0
   1170a:	18 ef       	ldi	r17, 0xF8	; 248
   1170c:	21 e0       	ldi	r18, 0x01	; 1
   1170e:	4e eb       	ldi	r20, 0xBE	; 190
   11710:	50 e0       	ldi	r21, 0x00	; 0
   11712:	60 ea       	ldi	r22, 0xA0	; 160
   11714:	70 e0       	ldi	r23, 0x00	; 0
   11716:	c1 01       	movw	r24, r2
   11718:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1171c:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   11720:	82 60       	ori	r24, 0x02	; 2
   11722:	0c 94 f2 93 	jmp	0x127e4	; 0x127e4 <setup+0x18f0>
   11726:	e1 0e       	add	r14, r17
   11728:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
   1172a:	70 e0       	ldi	r23, 0x00	; 0
   1172c:	21 2f       	mov	r18, r17
   1172e:	83 e4       	ldi	r24, 0x43	; 67
   11730:	9e e0       	ldi	r25, 0x0E	; 14
   11732:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   11736:	2c cd       	rjmp	.-1448   	; 0x11190 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   11738:	8f ef       	ldi	r24, 0xFF	; 255
   1173a:	90 e0       	ldi	r25, 0x00	; 0
   1173c:	90 93 5c 0e 	sts	0x0E5C, r25	; 0x800e5c <my_lcd+0x19>
   11740:	80 93 5b 0e 	sts	0x0E5B, r24	; 0x800e5b <my_lcd+0x18>
   11744:	2e cd       	rjmp	.-1444   	; 0x111a2 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
   11746:	21 30       	cpi	r18, 0x01	; 1
   11748:	31 05       	cpc	r19, r1
   1174a:	31 f5       	brne	.+76     	; 0x11798 <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
   1174c:	20 81       	ld	r18, Z
   1174e:	82 23       	and	r24, r18
   11750:	80 83       	st	Z, r24
   11752:	81 e0       	ldi	r24, 0x01	; 1
   11754:	82 b9       	out	0x02, r24	; 2
   11756:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   1175a:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   1175e:	80 81       	ld	r24, Z
   11760:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   11764:	82 23       	and	r24, r18
   11766:	80 83       	st	Z, r24
   11768:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   1176c:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   11770:	80 81       	ld	r24, Z
   11772:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   11776:	82 2b       	or	r24, r18
   11778:	80 83       	st	Z, r24
   1177a:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   1177e:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   11782:	80 81       	ld	r24, Z
   11784:	20 91 7a 0e 	lds	r18, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   11788:	82 2b       	or	r24, r18
   1178a:	80 83       	st	Z, r24
setup():
   1178c:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
   1178e:	91 11       	cpse	r25, r1
   11790:	01 c0       	rjmp	.+2      	; 0x11794 <setup+0x8a0>
setup():
   11792:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
   11794:	82 b9       	out	0x02, r24	; 2
   11796:	43 cd       	rjmp	.-1402   	; 0x1121e <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   11798:	20 81       	ld	r18, Z
   1179a:	82 23       	and	r24, r18
   1179c:	80 83       	st	Z, r24
setup():
   1179e:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
   117a0:	91 11       	cpse	r25, r1
   117a2:	01 c0       	rjmp	.+2      	; 0x117a6 <setup+0x8b2>
setup():
   117a4:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
   117a6:	82 b9       	out	0x02, r24	; 2
   117a8:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   117ac:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   117b0:	80 81       	ld	r24, Z
   117b2:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   117b6:	89 23       	and	r24, r25
   117b8:	80 83       	st	Z, r24
   117ba:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   117be:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   117c2:	80 81       	ld	r24, Z
   117c4:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   117c8:	89 2b       	or	r24, r25
   117ca:	80 83       	st	Z, r24
   117cc:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   117d0:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   117d4:	80 81       	ld	r24, Z
   117d6:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   117da:	31 cd       	rjmp	.-1438   	; 0x1123e <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
   117dc:	b1 e0       	ldi	r27, 0x01	; 1
   117de:	ab 12       	cpse	r10, r27
   117e0:	c3 c0       	rjmp	.+390    	; 0x11968 <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4299
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   117e2:	6e ea       	ldi	r22, 0xAE	; 174
   117e4:	79 e5       	ldi	r23, 0x59	; 89
   117e6:	c1 01       	movw	r24, r2
   117e8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4300
      strcat(str1, ":2");
   117ec:	6a ec       	ldi	r22, 0xCA	; 202
   117ee:	76 e0       	ldi	r23, 0x06	; 6
   117f0:	c1 01       	movw	r24, r2
   117f2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4301
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   117f6:	ee 24       	eor	r14, r14
   117f8:	ea 94       	dec	r14
   117fa:	fe 2c       	mov	r15, r14
   117fc:	00 ee       	ldi	r16, 0xE0	; 224
   117fe:	17 e0       	ldi	r17, 0x07	; 7
   11800:	21 e0       	ldi	r18, 0x01	; 1
   11802:	4c e3       	ldi	r20, 0x3C	; 60
   11804:	50 e0       	ldi	r21, 0x00	; 0
   11806:	6e e1       	ldi	r22, 0x1E	; 30
   11808:	70 e0       	ldi	r23, 0x00	; 0
   1180a:	c1 01       	movw	r24, r2
   1180c:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   11810:	e0 91 99 0e 	lds	r30, 0x0E99	; 0x800e99 <lm75_temp+0xb>
   11814:	f0 91 9a 0e 	lds	r31, 0x0E9A	; 0x800e9a <lm75_temp+0xc>
   11818:	04 80       	ldd	r0, Z+4	; 0x04
   1181a:	f5 81       	ldd	r31, Z+5	; 0x05
   1181c:	e0 2d       	mov	r30, r0
   1181e:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   11820:	80 91 90 0e 	lds	r24, 0x0E90	; 0x800e90 <lm75_temp+0x2>
   11824:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   11828:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   1182c:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   11830:	dc 01       	movw	r26, r24
   11832:	ed 91       	ld	r30, X+
   11834:	fc 91       	ld	r31, X
   11836:	01 90       	ld	r0, Z+
   11838:	f0 81       	ld	r31, Z
   1183a:	e0 2d       	mov	r30, r0
   1183c:	61 2f       	mov	r22, r17
   1183e:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   11840:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   11844:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   11848:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   1184c:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   11850:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   11854:	20 91 91 0e 	lds	r18, 0x0E91	; 0x800e91 <lm75_temp+0x3>
setup():
   11858:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
   1185a:	29 30       	cpi	r18, 0x09	; 9
   1185c:	08 f0       	brcs	.+2      	; 0x11860 <setup+0x96c>
setup():
   1185e:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
   11860:	60 91 90 0e 	lds	r22, 0x0E90	; 0x800e90 <lm75_temp+0x2>
   11864:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   11868:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   1186c:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   11870:	dc 01       	movw	r26, r24
   11872:	ed 91       	ld	r30, X+
   11874:	fc 91       	ld	r31, X
   11876:	02 84       	ldd	r0, Z+10	; 0x0a
   11878:	f3 85       	ldd	r31, Z+11	; 0x0b
   1187a:	e0 2d       	mov	r30, r0
   1187c:	19 95       	eicall
   1187e:	c1 5c       	subi	r28, 0xC1	; 193
   11880:	de 4f       	sbci	r29, 0xFE	; 254
   11882:	88 83       	st	Y, r24
   11884:	cf 53       	subi	r28, 0x3F	; 63
   11886:	d1 40       	sbci	r29, 0x01	; 1
   11888:	c2 5c       	subi	r28, 0xC2	; 194
   1188a:	de 4f       	sbci	r29, 0xFE	; 254
   1188c:	18 82       	st	Y, r1
   1188e:	ce 53       	subi	r28, 0x3E	; 62
   11890:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   11892:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <lm75_temp+0x3>
   11896:	89 30       	cpi	r24, 0x09	; 9
   11898:	c8 f0       	brcs	.+50     	; 0x118cc <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   1189a:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   1189e:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   118a2:	dc 01       	movw	r26, r24
   118a4:	ed 91       	ld	r30, X+
   118a6:	fc 91       	ld	r31, X
   118a8:	02 84       	ldd	r0, Z+10	; 0x0a
   118aa:	f3 85       	ldd	r31, Z+11	; 0x0b
   118ac:	e0 2d       	mov	r30, r0
   118ae:	19 95       	eicall
   118b0:	c2 5c       	subi	r28, 0xC2	; 194
   118b2:	de 4f       	sbci	r29, 0xFE	; 254
   118b4:	e8 81       	ld	r30, Y
   118b6:	f9 81       	ldd	r31, Y+1	; 0x01
   118b8:	ce 53       	subi	r28, 0x3E	; 62
   118ba:	d1 40       	sbci	r29, 0x01	; 1
   118bc:	e8 2b       	or	r30, r24
   118be:	f9 2b       	or	r31, r25
   118c0:	c2 5c       	subi	r28, 0xC2	; 194
   118c2:	de 4f       	sbci	r29, 0xFE	; 254
   118c4:	f9 83       	std	Y+1, r31	; 0x01
   118c6:	e8 83       	st	Y, r30
   118c8:	ce 53       	subi	r28, 0x3E	; 62
   118ca:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   118cc:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <lm75_temp>
   118d0:	90 91 8f 0e 	lds	r25, 0x0E8F	; 0x800e8f <lm75_temp+0x1>
   118d4:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4302
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   118d8:	7e 01       	movw	r14, r28
   118da:	f2 ee       	ldi	r31, 0xE2	; 226
   118dc:	ef 1a       	sub	r14, r31
   118de:	fe ef       	ldi	r31, 0xFE	; 254
   118e0:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   118e2:	60 91 92 0e 	lds	r22, 0x0E92	; 0x800e92 <lm75_temp+0x4>
   118e6:	70 91 93 0e 	lds	r23, 0x0E93	; 0x800e93 <lm75_temp+0x5>
   118ea:	c2 5c       	subi	r28, 0xC2	; 194
   118ec:	de 4f       	sbci	r29, 0xFE	; 254
   118ee:	28 81       	ld	r18, Y
   118f0:	39 81       	ldd	r19, Y+1	; 0x01
   118f2:	ce 53       	subi	r28, 0x3E	; 62
   118f4:	d1 40       	sbci	r29, 0x01	; 1
   118f6:	62 23       	and	r22, r18
   118f8:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   118fa:	07 2e       	mov	r0, r23
   118fc:	00 0c       	add	r0, r0
   118fe:	88 0b       	sbc	r24, r24
   11900:	99 0b       	sbc	r25, r25
   11902:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
   11906:	20 91 95 0e 	lds	r18, 0x0E95	; 0x800e95 <lm75_temp+0x7>
   1190a:	30 91 96 0e 	lds	r19, 0x0E96	; 0x800e96 <lm75_temp+0x8>
   1190e:	40 91 97 0e 	lds	r20, 0x0E97	; 0x800e97 <lm75_temp+0x9>
   11912:	50 91 98 0e 	lds	r21, 0x0E98	; 0x800e98 <lm75_temp+0xa>
   11916:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4302
   1191a:	87 01       	movw	r16, r14
   1191c:	22 e0       	ldi	r18, 0x02	; 2
   1191e:	44 e0       	ldi	r20, 0x04	; 4
   11920:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4303
      sprintf(str2, "iT=%sC", s_current);
   11924:	ff 92       	push	r15
   11926:	ef 92       	push	r14
   11928:	8d ec       	ldi	r24, 0xCD	; 205
   1192a:	96 e0       	ldi	r25, 0x06	; 6
   1192c:	9f 93       	push	r25
   1192e:	8f 93       	push	r24
   11930:	4e 01       	movw	r8, r28
   11932:	38 e8       	ldi	r19, 0x88	; 136
   11934:	83 0e       	add	r8, r19
   11936:	91 1c       	adc	r9, r1
   11938:	9f 92       	push	r9
   1193a:	8f 92       	push	r8
   1193c:	0e 94 dd d0 	call	0x1a1ba	; 0x1a1ba <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4304
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11940:	ee 24       	eor	r14, r14
   11942:	ea 94       	dec	r14
   11944:	fe 2c       	mov	r15, r14
   11946:	00 ee       	ldi	r16, 0xE0	; 224
   11948:	17 e0       	ldi	r17, 0x07	; 7
   1194a:	21 e0       	ldi	r18, 0x01	; 1
   1194c:	4c e3       	ldi	r20, 0x3C	; 60
   1194e:	50 e0       	ldi	r21, 0x00	; 0
   11950:	60 ea       	ldi	r22, 0xA0	; 160
   11952:	70 e0       	ldi	r23, 0x00	; 0
   11954:	c4 01       	movw	r24, r8
   11956:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   1195a:	0f 90       	pop	r0
   1195c:	0f 90       	pop	r0
   1195e:	0f 90       	pop	r0
   11960:	0f 90       	pop	r0
   11962:	0f 90       	pop	r0
   11964:	0f 90       	pop	r0
   11966:	6e ce       	rjmp	.-804    	; 0x11644 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
   11968:	82 e0       	ldi	r24, 0x02	; 2
   1196a:	a8 12       	cpse	r10, r24
   1196c:	8c c1       	rjmp	.+792    	; 0x11c86 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
    {
      if (EEPROM.read(set_default_values) == 255)
   1196e:	8a e5       	ldi	r24, 0x5A	; 90
   11970:	90 e0       	ldi	r25, 0x00	; 0
   11972:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11976:	8f 3f       	cpi	r24, 0xFF	; 255
   11978:	09 f0       	breq	.+2      	; 0x1197c <setup+0xa88>
   1197a:	74 c1       	rjmp	.+744    	; 0x11c64 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
      {
        EEPROM.write(set_default_values, 0);
   1197c:	60 e0       	ldi	r22, 0x00	; 0
   1197e:	8a e5       	ldi	r24, 0x5A	; 90
   11980:	90 e0       	ldi	r25, 0x00	; 0
   11982:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
        strcpy_P(str1, text_vychozi_nastaveni);
   11986:	6c e9       	ldi	r22, 0x9C	; 156
   11988:	79 e5       	ldi	r23, 0x59	; 89
   1198a:	8d 2d       	mov	r24, r13
   1198c:	9b 2d       	mov	r25, r11
   1198e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4314
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11992:	ee 24       	eor	r14, r14
   11994:	ea 94       	dec	r14
   11996:	fe 2c       	mov	r15, r14
   11998:	00 e0       	ldi	r16, 0x00	; 0
   1199a:	18 ef       	ldi	r17, 0xF8	; 248
   1199c:	21 e0       	ldi	r18, 0x01	; 1
   1199e:	46 e4       	ldi	r20, 0x46	; 70
   119a0:	50 e0       	ldi	r21, 0x00	; 0
   119a2:	6e e1       	ldi	r22, 0x1E	; 30
   119a4:	70 e0       	ldi	r23, 0x00	; 0
   119a6:	8d 2d       	mov	r24, r13
   119a8:	9b 2d       	mov	r25, r11
   119aa:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
   119ae:	6f ef       	ldi	r22, 0xFF	; 255
   119b0:	8d e5       	ldi	r24, 0x5D	; 93
   119b2:	90 e0       	ldi	r25, 0x00	; 0
   119b4:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   119b8:	80 e0       	ldi	r24, 0x00	; 0
   119ba:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
   119be:	81 e0       	ldi	r24, 0x01	; 1
   119c0:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
   119c4:	82 e0       	ldi	r24, 0x02	; 2
   119c6:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
   119ca:	83 e0       	ldi	r24, 0x03	; 3
   119cc:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
   119d0:	84 e0       	ldi	r24, 0x04	; 4
   119d2:	0e 94 33 67 	call	0xce66	; 0xce66 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   119d6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
        {
          strcpy(tmp1, "");
   119d8:	62 ef       	ldi	r22, 0xF2	; 242
   119da:	72 e0       	ldi	r23, 0x02	; 2
   119dc:	ce 01       	movw	r24, r28
   119de:	8e 50       	subi	r24, 0x0E	; 14
   119e0:	9f 4f       	sbci	r25, 0xFF	; 255
   119e2:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
          remote_tds_clear(idx);
   119e6:	81 2f       	mov	r24, r17
   119e8:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   119ec:	1f 5f       	subi	r17, 0xFF	; 255
   119ee:	1a 30       	cpi	r17, 0x0A	; 10
   119f0:	99 f7       	brne	.-26     	; 0x119d8 <setup+0xae4>
   119f2:	e1 ef       	ldi	r30, 0xF1	; 241
   119f4:	8e 2e       	mov	r8, r30
   119f6:	99 24       	eor	r9, r9
   119f8:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   119fa:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
        {
          strcpy_P(str2, text_prog);
   119fc:	67 e9       	ldi	r22, 0x97	; 151
   119fe:	79 e5       	ldi	r23, 0x59	; 89
   11a00:	ce 01       	movw	r24, r28
   11a02:	88 57       	subi	r24, 0x78	; 120
   11a04:	9f 4f       	sbci	r25, 0xFF	; 255
   11a06:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
          thermostat_program_set_name(idx, str2);
   11a0a:	be 01       	movw	r22, r28
   11a0c:	68 57       	subi	r22, 0x78	; 120
   11a0e:	7f 4f       	sbci	r23, 0xFF	; 255
   11a10:	81 2f       	mov	r24, r17
   11a12:	0e 94 f8 65 	call	0xcbf0	; 0xcbf0 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   11a16:	6f ef       	ldi	r22, 0xFF	; 255
   11a18:	c4 01       	movw	r24, r8
   11a1a:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   11a1e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   11a20:	c1 2c       	mov	r12, r1
   11a22:	e1 2c       	mov	r14, r1
   11a24:	00 e0       	ldi	r16, 0x00	; 0
   11a26:	20 e0       	ldi	r18, 0x00	; 0
   11a28:	40 e0       	ldi	r20, 0x00	; 0
   11a2a:	6f 2d       	mov	r22, r15
   11a2c:	81 2f       	mov	r24, r17
   11a2e:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4335
            thermostat_program_set_threshold(idx, interval_id, 220);
   11a32:	4c ed       	ldi	r20, 0xDC	; 220
   11a34:	50 e0       	ldi	r21, 0x00	; 0
   11a36:	6f 2d       	mov	r22, r15
   11a38:	81 2f       	mov	r24, r17
   11a3a:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4336
            thermostat_program_set_week(idx, interval_id, 0);
   11a3e:	40 e0       	ldi	r20, 0x00	; 0
   11a40:	6f 2d       	mov	r22, r15
   11a42:	81 2f       	mov	r24, r17
   11a44:	0e 94 92 65 	call	0xcb24	; 0xcb24 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   11a48:	f3 94       	inc	r15
   11a4a:	9b e0       	ldi	r25, 0x0B	; 11
   11a4c:	f9 12       	cpse	r15, r25
   11a4e:	e8 cf       	rjmp	.-48     	; 0x11a20 <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4327
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   11a50:	1f 5f       	subi	r17, 0xFF	; 255
   11a52:	ad e4       	ldi	r26, 0x4D	; 77
   11a54:	8a 0e       	add	r8, r26
   11a56:	91 1c       	adc	r9, r1
   11a58:	18 30       	cpi	r17, 0x08	; 8
   11a5a:	81 f6       	brne	.-96     	; 0x119fc <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   11a5c:	7a e0       	ldi	r23, 0x0A	; 10
   11a5e:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   11a60:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   11a62:	be 01       	movw	r22, r28
   11a64:	68 53       	subi	r22, 0x38	; 56
   11a66:	7f 4f       	sbci	r23, 0xFF	; 255
   11a68:	80 2f       	mov	r24, r16
   11a6a:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
          strcpy(tds.name, "FREE");
   11a6e:	63 e6       	ldi	r22, 0x63	; 99
   11a70:	73 e0       	ldi	r23, 0x03	; 3
   11a72:	c4 5b       	subi	r28, 0xB4	; 180
   11a74:	de 4f       	sbci	r29, 0xFE	; 254
   11a76:	88 81       	ld	r24, Y
   11a78:	99 81       	ldd	r25, Y+1	; 0x01
   11a7a:	cc 54       	subi	r28, 0x4C	; 76
   11a7c:	d1 40       	sbci	r29, 0x01	; 1
   11a7e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
          tds.used = 0;
   11a82:	c8 53       	subi	r28, 0x38	; 56
   11a84:	df 4f       	sbci	r29, 0xFF	; 255
   11a86:	18 82       	st	Y, r1
   11a88:	c8 5c       	subi	r28, 0xC8	; 200
   11a8a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4345
          tds.offset = 0;
   11a8c:	ce 52       	subi	r28, 0x2E	; 46
   11a8e:	df 4f       	sbci	r29, 0xFF	; 255
   11a90:	19 82       	std	Y+1, r1	; 0x01
   11a92:	18 82       	st	Y, r1
   11a94:	c2 5d       	subi	r28, 0xD2	; 210
   11a96:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4346
          tds.assigned_ds2482 = 0;
   11a98:	cf 52       	subi	r28, 0x2F	; 47
   11a9a:	df 4f       	sbci	r29, 0xFF	; 255
   11a9c:	18 82       	st	Y, r1
   11a9e:	c1 5d       	subi	r28, 0xD1	; 209
   11aa0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4347
          tds.period = 10;
   11aa2:	c4 52       	subi	r28, 0x24	; 36
   11aa4:	df 4f       	sbci	r29, 0xFF	; 255
   11aa6:	f8 82       	st	Y, r15
   11aa8:	cc 5d       	subi	r28, 0xDC	; 220
   11aaa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   11aac:	c7 53       	subi	r28, 0x37	; 55
   11aae:	df 4f       	sbci	r29, 0xFF	; 255
   11ab0:	18 83       	st	Y, r17
   11ab2:	c9 5c       	subi	r28, 0xC9	; 201
   11ab4:	d0 40       	sbci	r29, 0x00	; 0
   11ab6:	c6 53       	subi	r28, 0x36	; 54
   11ab8:	df 4f       	sbci	r29, 0xFF	; 255
   11aba:	18 83       	st	Y, r17
   11abc:	ca 5c       	subi	r28, 0xCA	; 202
   11abe:	d0 40       	sbci	r29, 0x00	; 0
   11ac0:	c5 53       	subi	r28, 0x35	; 53
   11ac2:	df 4f       	sbci	r29, 0xFF	; 255
   11ac4:	18 83       	st	Y, r17
   11ac6:	cb 5c       	subi	r28, 0xCB	; 203
   11ac8:	d0 40       	sbci	r29, 0x00	; 0
   11aca:	c4 53       	subi	r28, 0x34	; 52
   11acc:	df 4f       	sbci	r29, 0xFF	; 255
   11ace:	18 83       	st	Y, r17
   11ad0:	cc 5c       	subi	r28, 0xCC	; 204
   11ad2:	d0 40       	sbci	r29, 0x00	; 0
   11ad4:	c3 53       	subi	r28, 0x33	; 51
   11ad6:	df 4f       	sbci	r29, 0xFF	; 255
   11ad8:	18 83       	st	Y, r17
   11ada:	cd 5c       	subi	r28, 0xCD	; 205
   11adc:	d0 40       	sbci	r29, 0x00	; 0
   11ade:	c2 53       	subi	r28, 0x32	; 50
   11ae0:	df 4f       	sbci	r29, 0xFF	; 255
   11ae2:	18 83       	st	Y, r17
   11ae4:	ce 5c       	subi	r28, 0xCE	; 206
   11ae6:	d0 40       	sbci	r29, 0x00	; 0
   11ae8:	c1 53       	subi	r28, 0x31	; 49
   11aea:	df 4f       	sbci	r29, 0xFF	; 255
   11aec:	18 83       	st	Y, r17
   11aee:	cf 5c       	subi	r28, 0xCF	; 207
   11af0:	d0 40       	sbci	r29, 0x00	; 0
   11af2:	c0 53       	subi	r28, 0x30	; 48
   11af4:	df 4f       	sbci	r29, 0xFF	; 255
   11af6:	18 83       	st	Y, r17
   11af8:	c0 5d       	subi	r28, 0xD0	; 208
   11afa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
          set_tds18s20(idx, &tds);
   11afc:	be 01       	movw	r22, r28
   11afe:	68 53       	subi	r22, 0x38	; 56
   11b00:	7f 4f       	sbci	r23, 0xFF	; 255
   11b02:	80 2f       	mov	r24, r16
   11b04:	0e 94 ef 67 	call	0xcfde	; 0xcfde <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4340
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   11b08:	0f 5f       	subi	r16, 0xFF	; 255
   11b0a:	06 30       	cpi	r16, 0x06	; 6
   11b0c:	09 f0       	breq	.+2      	; 0x11b10 <setup+0xc1c>
   11b0e:	a9 cf       	rjmp	.-174    	; 0x11a62 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   11b10:	84 e1       	ldi	r24, 0x14	; 20
   11b12:	c2 52       	subi	r28, 0x22	; 34
   11b14:	df 4f       	sbci	r29, 0xFF	; 255
   11b16:	88 83       	st	Y, r24
   11b18:	ce 5d       	subi	r28, 0xDE	; 222
   11b1a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   11b1c:	8c e0       	ldi	r24, 0x0C	; 12
   11b1e:	c1 52       	subi	r28, 0x21	; 33
   11b20:	df 4f       	sbci	r29, 0xFF	; 255
   11b22:	88 83       	st	Y, r24
   11b24:	cf 5d       	subi	r28, 0xDF	; 223
   11b26:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   11b28:	8e e0       	ldi	r24, 0x0E	; 14
   11b2a:	c0 52       	subi	r28, 0x20	; 32
   11b2c:	df 4f       	sbci	r29, 0xFF	; 255
   11b2e:	88 83       	st	Y, r24
   11b30:	c0 5e       	subi	r28, 0xE0	; 224
   11b32:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   11b34:	91 e1       	ldi	r25, 0x11	; 17
   11b36:	cf 51       	subi	r28, 0x1F	; 31
   11b38:	df 4f       	sbci	r29, 0xFF	; 255
   11b3a:	98 83       	st	Y, r25
   11b3c:	c1 5e       	subi	r28, 0xE1	; 225
   11b3e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   11b40:	ce 51       	subi	r28, 0x1E	; 30
   11b42:	df 4f       	sbci	r29, 0xFF	; 255
   11b44:	88 83       	st	Y, r24
   11b46:	c2 5e       	subi	r28, 0xE2	; 226
   11b48:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   11b4a:	cd 51       	subi	r28, 0x1D	; 29
   11b4c:	df 4f       	sbci	r29, 0xFF	; 255
   11b4e:	18 82       	st	Y, r1
   11b50:	c3 5e       	subi	r28, 0xE3	; 227
   11b52:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4352
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   11b54:	ce 01       	movw	r24, r28
   11b56:	82 52       	subi	r24, 0x22	; 34
   11b58:	9f 4f       	sbci	r25, 0xFF	; 255
   11b5a:	0e 94 58 aa 	call	0x154b0	; 0x154b0 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
   11b5e:	61 e0       	ldi	r22, 0x01	; 1
   11b60:	81 e0       	ldi	r24, 0x01	; 1
   11b62:	90 e0       	ldi	r25, 0x00	; 0
   11b64:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   11b68:	82 e0       	ldi	r24, 0x02	; 2
   11b6a:	80 93 a8 0c 	sts	0x0CA8, r24	; 0x800ca8 <device>
   11b6e:	91 e0       	ldi	r25, 0x01	; 1
   11b70:	90 93 a9 0c 	sts	0x0CA9, r25	; 0x800ca9 <device+0x1>
   11b74:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <device+0x2>
   11b78:	20 91 7c 0a 	lds	r18, 0x0A7C	; 0x800a7c <dvanact>
   11b7c:	30 91 7d 0a 	lds	r19, 0x0A7D	; 0x800a7d <dvanact+0x1>
   11b80:	36 95       	lsr	r19
   11b82:	27 95       	ror	r18
   11b84:	20 93 ab 0c 	sts	0x0CAB, r18	; 0x800cab <device+0x3>
   11b88:	20 91 44 0b 	lds	r18, 0x0B44	; 0x800b44 <light_curr>
   11b8c:	30 91 45 0b 	lds	r19, 0x0B45	; 0x800b45 <light_curr+0x1>
   11b90:	36 95       	lsr	r19
   11b92:	27 95       	ror	r18
   11b94:	20 93 ac 0c 	sts	0x0CAC, r18	; 0x800cac <device+0x4>
   11b98:	20 91 7a 0a 	lds	r18, 0x0A7A	; 0x800a7a <proud>
   11b9c:	30 91 7b 0a 	lds	r19, 0x0A7B	; 0x800a7b <proud+0x1>
   11ba0:	36 95       	lsr	r19
   11ba2:	27 95       	ror	r18
   11ba4:	20 93 ad 0c 	sts	0x0CAD, r18	; 0x800cad <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
   11ba8:	30 ec       	ldi	r19, 0xC0	; 192
   11baa:	30 93 ae 0c 	sts	0x0CAE, r19	; 0x800cae <device+0x6>
   11bae:	28 ea       	ldi	r18, 0xA8	; 168
   11bb0:	20 93 af 0c 	sts	0x0CAF, r18	; 0x800caf <device+0x7>
   11bb4:	80 93 b0 0c 	sts	0x0CB0, r24	; 0x800cb0 <device+0x8>
   11bb8:	4e e6       	ldi	r20, 0x6E	; 110
   11bba:	40 93 b1 0c 	sts	0x0CB1, r20	; 0x800cb1 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4357
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   11bbe:	10 93 b2 0c 	sts	0x0CB2, r17	; 0x800cb2 <device+0xa>
   11bc2:	10 93 b3 0c 	sts	0x0CB3, r17	; 0x800cb3 <device+0xb>
   11bc6:	10 93 b4 0c 	sts	0x0CB4, r17	; 0x800cb4 <device+0xc>
   11bca:	10 92 b5 0c 	sts	0x0CB5, r1	; 0x800cb5 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4359

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   11bce:	30 93 ba 0c 	sts	0x0CBA, r19	; 0x800cba <device+0x12>
   11bd2:	20 93 bb 0c 	sts	0x0CBB, r18	; 0x800cbb <device+0x13>
   11bd6:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <device+0x14>
   11bda:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   11bde:	30 93 b6 0c 	sts	0x0CB6, r19	; 0x800cb6 <device+0xe>
   11be2:	20 93 b7 0c 	sts	0x0CB7, r18	; 0x800cb7 <device+0xf>
   11be6:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <device+0x10>
   11bea:	90 93 b9 0c 	sts	0x0CB9, r25	; 0x800cb9 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   11bee:	30 93 c8 0c 	sts	0x0CC8, r19	; 0x800cc8 <device+0x20>
   11bf2:	20 93 c9 0c 	sts	0x0CC9, r18	; 0x800cc9 <device+0x21>
   11bf6:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <device+0x22>
   11bfa:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4362
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   11bfe:	30 93 f6 0c 	sts	0x0CF6, r19	; 0x800cf6 <device+0x4e>
   11c02:	20 93 f7 0c 	sts	0x0CF7, r18	; 0x800cf7 <device+0x4f>
   11c06:	80 93 f8 0c 	sts	0x0CF8, r24	; 0x800cf8 <device+0x50>
   11c0a:	90 93 f9 0c 	sts	0x0CF9, r25	; 0x800cf9 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
        device.mqtt_port = 1883;
   11c0e:	8b e5       	ldi	r24, 0x5B	; 91
   11c10:	97 e0       	ldi	r25, 0x07	; 7
   11c12:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <device+0x25>
   11c16:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
        strcpy(device.mqtt_user, "saric");
   11c1a:	64 ed       	ldi	r22, 0xD4	; 212
   11c1c:	76 e0       	ldi	r23, 0x06	; 6
   11c1e:	8e ec       	ldi	r24, 0xCE	; 206
   11c20:	9c e0       	ldi	r25, 0x0C	; 12
   11c22:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4365
        strcpy(device.mqtt_key, "no");
   11c26:	6a ed       	ldi	r22, 0xDA	; 218
   11c28:	76 e0       	ldi	r23, 0x06	; 6
   11c2a:	82 ee       	ldi	r24, 0xE2	; 226
   11c2c:	9c e0       	ldi	r25, 0x0C	; 12
   11c2e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
        save_setup_network();
   11c32:	0e 94 78 68 	call	0xd0f0	; 0xd0f0 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
        strcpy(str1, "TERM D1");
   11c36:	6d ed       	ldi	r22, 0xDD	; 221
   11c38:	76 e0       	ldi	r23, 0x06	; 6
   11c3a:	8d 2d       	mov	r24, r13
   11c3c:	9b 2d       	mov	r25, r11
   11c3e:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
        device_set_name(str1);
   11c42:	8d 2d       	mov	r24, r13
   11c44:	9b 2d       	mov	r25, r11
   11c46:	0e 94 50 68 	call	0xd0a0	; 0xd0a0 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4370
        char hostname[10];
        device_get_name(hostname);
   11c4a:	ce 01       	movw	r24, r28
   11c4c:	82 52       	subi	r24, 0x22	; 34
   11c4e:	9f 4f       	sbci	r25, 0xFF	; 255
   11c50:	0e 94 6f 72 	call	0xe4de	; 0xe4de <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4371
        default_ring = NO_DEFAULT_RING;
   11c54:	10 93 82 0a 	sts	0x0A82, r17	; 0x800a82 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   11c58:	6f ef       	ldi	r22, 0xFF	; 255
   11c5a:	8c e5       	ldi	r24, 0x5C	; 92
   11c5c:	90 e0       	ldi	r25, 0x00	; 0
   11c5e:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
   11c62:	f0 cc       	rjmp	.-1568   	; 0x11644 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
        default_ring = NO_DEFAULT_RING;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   11c64:	6b e8       	ldi	r22, 0x8B	; 139
   11c66:	79 e5       	ldi	r23, 0x59	; 89
   11c68:	8d 2d       	mov	r24, r13
   11c6a:	9b 2d       	mov	r25, r11
   11c6c:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11c70:	ee 24       	eor	r14, r14
   11c72:	ea 94       	dec	r14
   11c74:	fe 2c       	mov	r15, r14
   11c76:	00 ee       	ldi	r16, 0xE0	; 224
   11c78:	17 e0       	ldi	r17, 0x07	; 7
   11c7a:	21 e0       	ldi	r18, 0x01	; 1
   11c7c:	46 e4       	ldi	r20, 0x46	; 70
   11c7e:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11c80:	6e e1       	ldi	r22, 0x1E	; 30
   11c82:	70 e0       	ldi	r23, 0x00	; 0
   11c84:	5d c0       	rjmp	.+186    	; 0x11d40 <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
   11c86:	b3 e0       	ldi	r27, 0x03	; 3
   11c88:	ab 12       	cpse	r10, r27
   11c8a:	72 c0       	rjmp	.+228    	; 0x11d70 <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   11c8c:	61 e0       	ldi	r22, 0x01	; 1
   11c8e:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   11c92:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   11c96:	61 e0       	ldi	r22, 0x01	; 1
   11c98:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   11c9c:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   11ca0:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   11ca4:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   11ca8:	0e 94 67 3b 	call	0x76ce	; 0x76ce <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   11cac:	60 e0       	ldi	r22, 0x00	; 0
   11cae:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   11cb2:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   11cb6:	61 e0       	ldi	r22, 0x01	; 1
   11cb8:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   11cbc:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   11cc0:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   11cc4:	60 e4       	ldi	r22, 0x40	; 64
   11cc6:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   11cca:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   11cce:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   11cd2:	61 e0       	ldi	r22, 0x01	; 1
   11cd4:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   11cd8:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
   11cdc:	4b ea       	ldi	r20, 0xAB	; 171
   11cde:	60 e0       	ldi	r22, 0x00	; 0
   11ce0:	70 e0       	ldi	r23, 0x00	; 0
   11ce2:	cb 01       	movw	r24, r22
   11ce4:	0e 94 b2 a1 	call	0x14364	; 0x14364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
      if (SRAM.readByte(0) == 0xAB)
   11ce8:	60 e0       	ldi	r22, 0x00	; 0
   11cea:	70 e0       	ldi	r23, 0x00	; 0
   11cec:	cb 01       	movw	r24, r22
   11cee:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
      {
        strcpy_P(str1, text_test_ram);
   11cf2:	6e e7       	ldi	r22, 0x7E	; 126
   11cf4:	79 e5       	ldi	r23, 0x59	; 89
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   11cf6:	8b 3a       	cpi	r24, 0xAB	; 171
   11cf8:	41 f5       	brne	.+80     	; 0x11d4a <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
      {
        strcpy_P(str1, text_test_ram);
   11cfa:	8d 2d       	mov	r24, r13
   11cfc:	9b 2d       	mov	r25, r11
   11cfe:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
        strcat(str1, " init ...");
   11d02:	65 ee       	ldi	r22, 0xE5	; 229
   11d04:	76 e0       	ldi	r23, 0x06	; 6
   11d06:	8d 2d       	mov	r24, r13
   11d08:	9b 2d       	mov	r25, r11
   11d0a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11d0e:	ee 24       	eor	r14, r14
   11d10:	ea 94       	dec	r14
   11d12:	fe 2c       	mov	r15, r14
   11d14:	00 ee       	ldi	r16, 0xE0	; 224
   11d16:	17 e0       	ldi	r17, 0x07	; 7
   11d18:	21 e0       	ldi	r18, 0x01	; 1
   11d1a:	40 e5       	ldi	r20, 0x50	; 80
   11d1c:	50 e0       	ldi	r21, 0x00	; 0
   11d1e:	6e e1       	ldi	r22, 0x1E	; 30
   11d20:	70 e0       	ldi	r23, 0x00	; 0
   11d22:	8d 2d       	mov	r24, r13
   11d24:	9b 2d       	mov	r25, r11
   11d26:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4403
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   11d2a:	6b e7       	ldi	r22, 0x7B	; 123
   11d2c:	79 e5       	ldi	r23, 0x59	; 89
   11d2e:	8d 2d       	mov	r24, r13
   11d30:	9b 2d       	mov	r25, r11
   11d32:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11d36:	21 e0       	ldi	r18, 0x01	; 1
   11d38:	40 e5       	ldi	r20, 0x50	; 80
   11d3a:	50 e0       	ldi	r21, 0x00	; 0
   11d3c:	62 ed       	ldi	r22, 0xD2	; 210
   11d3e:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11d40:	8d 2d       	mov	r24, r13
   11d42:	9b 2d       	mov	r25, r11
   11d44:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   11d48:	7d cc       	rjmp	.-1798   	; 0x11644 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4408
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   11d4a:	8d 2d       	mov	r24, r13
   11d4c:	9b 2d       	mov	r25, r11
   11d4e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
        strcat_P(str1, text_err);
   11d52:	66 e0       	ldi	r22, 0x06	; 6
   11d54:	7a e5       	ldi	r23, 0x5A	; 90
   11d56:	8d 2d       	mov	r24, r13
   11d58:	9b 2d       	mov	r25, r11
   11d5a:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11d5e:	ee 24       	eor	r14, r14
   11d60:	ea 94       	dec	r14
   11d62:	fe 2c       	mov	r15, r14
   11d64:	00 e0       	ldi	r16, 0x00	; 0
   11d66:	18 ef       	ldi	r17, 0xF8	; 248
   11d68:	21 e0       	ldi	r18, 0x01	; 1
   11d6a:	40 e5       	ldi	r20, 0x50	; 80
   11d6c:	50 e0       	ldi	r21, 0x00	; 0
   11d6e:	88 cf       	rjmp	.-240    	; 0x11c80 <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
      }
    }

    //// init EEPROMKY
    if (init == 4)
   11d70:	e4 e0       	ldi	r30, 0x04	; 4
   11d72:	ae 12       	cpse	r10, r30
   11d74:	e5 c4       	rjmp	.+2506   	; 0x12740 <setup+0x184c>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   11d76:	61 e0       	ldi	r22, 0x01	; 1
   11d78:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <SROM+0xa>
   11d7c:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
   11d80:	61 e0       	ldi	r22, 0x01	; 1
   11d82:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <SROM+0xa>
   11d86:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
   11d8a:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   11d8e:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   11d92:	0e 94 67 3b 	call	0x76ce	; 0x76ce <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
   11d96:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <SROM+0x4>
   11d9a:	90 91 ff 0c 	lds	r25, 0x0CFF	; 0x800cff <SROM+0x5>
   11d9e:	a0 91 00 0d 	lds	r26, 0x0D00	; 0x800d00 <SROM+0x6>
   11da2:	b0 91 01 0d 	lds	r27, 0x0D01	; 0x800d01 <SROM+0x7>
   11da6:	89 2b       	or	r24, r25
   11da8:	8a 2b       	or	r24, r26
   11daa:	8b 2b       	or	r24, r27
   11dac:	a9 f0       	breq	.+42     	; 0x11dd8 <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   11dae:	0e 94 73 a2 	call	0x144e6	; 0x144e6 <EEPROM_CAT25::getStatusRegister() [clone .constprop.85]>
   11db2:	80 fd       	sbrc	r24, 0
   11db4:	fc cf       	rjmp	.-8      	; 0x11dae <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
   11db6:	86 e0       	ldi	r24, 0x06	; 6
   11db8:	0e 94 2b a2 	call	0x14456	; 0x14456 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
   11dbc:	0e 94 26 a2 	call	0x1444c	; 0x1444c <EEPROM_CAT25::endCommand() [clone .constprop.88]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   11dc0:	82 e0       	ldi	r24, 0x02	; 2
   11dc2:	0e 94 2b a2 	call	0x14456	; 0x14456 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   11dc6:	6a eb       	ldi	r22, 0xBA	; 186
   11dc8:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   11dcc:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   11dd0:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   11dd4:	0e 94 26 a2 	call	0x1444c	; 0x1444c <EEPROM_CAT25::endCommand() [clone .constprop.88]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   11dd8:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <SROM+0x4>
   11ddc:	90 91 ff 0c 	lds	r25, 0x0CFF	; 0x800cff <SROM+0x5>
   11de0:	a0 91 00 0d 	lds	r26, 0x0D00	; 0x800d00 <SROM+0x6>
   11de4:	b0 91 01 0d 	lds	r27, 0x0D01	; 0x800d01 <SROM+0x7>
   11de8:	89 2b       	or	r24, r25
   11dea:	8a 2b       	or	r24, r26
   11dec:	8b 2b       	or	r24, r27
   11dee:	71 f1       	breq	.+92     	; 0x11e4c <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   11df0:	0e 94 73 a2 	call	0x144e6	; 0x144e6 <EEPROM_CAT25::getStatusRegister() [clone .constprop.85]>
   11df4:	80 fd       	sbrc	r24, 0
   11df6:	fc cf       	rjmp	.-8      	; 0x11df0 <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   11df8:	83 e0       	ldi	r24, 0x03	; 3
   11dfa:	0e 94 2b a2 	call	0x14456	; 0x14456 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   11dfe:	6f ef       	ldi	r22, 0xFF	; 255
   11e00:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   11e04:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   11e08:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
   11e0c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   11e0e:	0e 94 26 a2 	call	0x1444c	; 0x1444c <EEPROM_CAT25::endCommand() [clone .constprop.88]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   11e12:	1a 3b       	cpi	r17, 0xBA	; 186
   11e14:	d9 f4       	brne	.+54     	; 0x11e4c <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4422

      {
        strcpy_P(str1, text_test_eeprom);
   11e16:	6b e6       	ldi	r22, 0x6B	; 107
   11e18:	79 e5       	ldi	r23, 0x59	; 89
   11e1a:	8d 2d       	mov	r24, r13
   11e1c:	9b 2d       	mov	r25, r11
   11e1e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
        strcat_P(str1, text_ok);
   11e22:	6b e7       	ldi	r22, 0x7B	; 123
   11e24:	79 e5       	ldi	r23, 0x59	; 89
   11e26:	8d 2d       	mov	r24, r13
   11e28:	9b 2d       	mov	r25, r11
   11e2a:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11e2e:	ee 24       	eor	r14, r14
   11e30:	ea 94       	dec	r14
   11e32:	fe 2c       	mov	r15, r14
   11e34:	00 ee       	ldi	r16, 0xE0	; 224
   11e36:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11e38:	21 e0       	ldi	r18, 0x01	; 1
   11e3a:	4a e5       	ldi	r20, 0x5A	; 90
   11e3c:	50 e0       	ldi	r21, 0x00	; 0
   11e3e:	6e e1       	ldi	r22, 0x1E	; 30
   11e40:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11e42:	8d 2d       	mov	r24, r13
   11e44:	9b 2d       	mov	r25, r11
   11e46:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   11e4a:	fc c0       	rjmp	.+504    	; 0x12044 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   11e4c:	6b e6       	ldi	r22, 0x6B	; 107
   11e4e:	79 e5       	ldi	r23, 0x59	; 89
   11e50:	8d 2d       	mov	r24, r13
   11e52:	9b 2d       	mov	r25, r11
   11e54:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4429
        strcat_P(str1, text_err);
   11e58:	66 e0       	ldi	r22, 0x06	; 6
   11e5a:	7a e5       	ldi	r23, 0x5A	; 90
   11e5c:	8d 2d       	mov	r24, r13
   11e5e:	9b 2d       	mov	r25, r11
   11e60:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   11e64:	ee 24       	eor	r14, r14
   11e66:	ea 94       	dec	r14
   11e68:	fe 2c       	mov	r15, r14
   11e6a:	00 e0       	ldi	r16, 0x00	; 0
   11e6c:	18 ef       	ldi	r17, 0xF8	; 248
   11e6e:	e4 cf       	rjmp	.-56     	; 0x11e38 <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   11e70:	69 e5       	ldi	r22, 0x59	; 89
   11e72:	79 e5       	ldi	r23, 0x59	; 89
   11e74:	8d 2d       	mov	r24, r13
   11e76:	9b 2d       	mov	r25, r11
   11e78:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   11e7c:	ee 24       	eor	r14, r14
   11e7e:	ea 94       	dec	r14
   11e80:	fe 2c       	mov	r15, r14
   11e82:	00 ee       	ldi	r16, 0xE0	; 224
   11e84:	17 e0       	ldi	r17, 0x07	; 7
   11e86:	21 e0       	ldi	r18, 0x01	; 1
   11e88:	44 e6       	ldi	r20, 0x64	; 100
   11e8a:	50 e0       	ldi	r21, 0x00	; 0
   11e8c:	6e e1       	ldi	r22, 0x1E	; 30
   11e8e:	70 e0       	ldi	r23, 0x00	; 0
   11e90:	8d 2d       	mov	r24, r13
   11e92:	9b 2d       	mov	r25, r11
   11e94:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   11e98:	a8 ea       	ldi	r26, 0xA8	; 168
   11e9a:	ea 2e       	mov	r14, r26
   11e9c:	ac e0       	ldi	r26, 0x0C	; 12
   11e9e:	fa 2e       	mov	r15, r26
   11ea0:	0e e6       	ldi	r16, 0x6E	; 110
   11ea2:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
   11ea4:	c8 01       	movw	r24, r16
   11ea6:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11eaa:	d7 01       	movw	r26, r14
   11eac:	8d 93       	st	X+, r24
   11eae:	7d 01       	movw	r14, r26
   11eb0:	0f 5f       	subi	r16, 0xFF	; 255
   11eb2:	1f 4f       	sbci	r17, 0xFF	; 255
   11eb4:	04 37       	cpi	r16, 0x74	; 116
   11eb6:	11 05       	cpc	r17, r1
   11eb8:	a9 f7       	brne	.-22     	; 0x11ea4 <setup+0xfb0>
   11eba:	ee ea       	ldi	r30, 0xAE	; 174
   11ebc:	ee 2e       	mov	r14, r30
   11ebe:	ec e0       	ldi	r30, 0x0C	; 12
   11ec0:	fe 2e       	mov	r15, r30
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
   11ec2:	c8 01       	movw	r24, r16
   11ec4:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11ec8:	f7 01       	movw	r30, r14
   11eca:	81 93       	st	Z+, r24
   11ecc:	7f 01       	movw	r14, r30
   11ece:	0f 5f       	subi	r16, 0xFF	; 255
   11ed0:	1f 4f       	sbci	r17, 0xFF	; 255
   11ed2:	08 37       	cpi	r16, 0x78	; 120
   11ed4:	11 05       	cpc	r17, r1
   11ed6:	a9 f7       	brne	.-22     	; 0x11ec2 <setup+0xfce>
   11ed8:	72 eb       	ldi	r23, 0xB2	; 178
   11eda:	e7 2e       	mov	r14, r23
   11edc:	7c e0       	ldi	r23, 0x0C	; 12
   11ede:	f7 2e       	mov	r15, r23
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
   11ee0:	c8 01       	movw	r24, r16
   11ee2:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11ee6:	d7 01       	movw	r26, r14
   11ee8:	8d 93       	st	X+, r24
   11eea:	7d 01       	movw	r14, r26
   11eec:	0f 5f       	subi	r16, 0xFF	; 255
   11eee:	1f 4f       	sbci	r17, 0xFF	; 255
   11ef0:	0c 37       	cpi	r16, 0x7C	; 124
   11ef2:	11 05       	cpc	r17, r1
   11ef4:	a9 f7       	brne	.-22     	; 0x11ee0 <setup+0xfec>
   11ef6:	5a eb       	ldi	r21, 0xBA	; 186
   11ef8:	85 2e       	mov	r8, r21
   11efa:	5c e0       	ldi	r21, 0x0C	; 12
   11efc:	95 2e       	mov	r9, r21
   11efe:	60 e8       	ldi	r22, 0x80	; 128
   11f00:	e6 2e       	mov	r14, r22
   11f02:	f1 2c       	mov	r15, r1
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
   11f04:	c7 01       	movw	r24, r14
   11f06:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f0a:	f4 01       	movw	r30, r8
   11f0c:	81 93       	st	Z+, r24
   11f0e:	4f 01       	movw	r8, r30
   11f10:	ff ef       	ldi	r31, 0xFF	; 255
   11f12:	ef 1a       	sub	r14, r31
   11f14:	ff 0a       	sbc	r15, r31
   11f16:	24 e8       	ldi	r18, 0x84	; 132
   11f18:	e2 16       	cp	r14, r18
   11f1a:	f1 04       	cpc	r15, r1
   11f1c:	99 f7       	brne	.-26     	; 0x11f04 <setup+0x1010>
   11f1e:	46 eb       	ldi	r20, 0xB6	; 182
   11f20:	84 2e       	mov	r8, r20
   11f22:	4c e0       	ldi	r20, 0x0C	; 12
   11f24:	94 2e       	mov	r9, r20
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
   11f26:	c8 01       	movw	r24, r16
   11f28:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f2c:	d4 01       	movw	r26, r8
   11f2e:	8d 93       	st	X+, r24
   11f30:	4d 01       	movw	r8, r26
   11f32:	0f 5f       	subi	r16, 0xFF	; 255
   11f34:	1f 4f       	sbci	r17, 0xFF	; 255
   11f36:	00 38       	cpi	r16, 0x80	; 128
   11f38:	11 05       	cpc	r17, r1
   11f3a:	a9 f7       	brne	.-22     	; 0x11f26 <setup+0x1032>
   11f3c:	3e eb       	ldi	r19, 0xBE	; 190
   11f3e:	83 2e       	mov	r8, r19
   11f40:	3c e0       	ldi	r19, 0x0C	; 12
   11f42:	93 2e       	mov	r9, r19
   11f44:	04 e6       	ldi	r16, 0x64	; 100
   11f46:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
   11f48:	c8 01       	movw	r24, r16
   11f4a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f4e:	f4 01       	movw	r30, r8
   11f50:	81 93       	st	Z+, r24
   11f52:	4f 01       	movw	r8, r30
   11f54:	0f 5f       	subi	r16, 0xFF	; 255
   11f56:	1f 4f       	sbci	r17, 0xFF	; 255
   11f58:	0d 36       	cpi	r16, 0x6D	; 109
   11f5a:	11 05       	cpc	r17, r1
   11f5c:	a9 f7       	brne	.-22     	; 0x11f48 <setup+0x1054>
   11f5e:	08 ec       	ldi	r16, 0xC8	; 200
   11f60:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
   11f62:	c7 01       	movw	r24, r14
   11f64:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f68:	d8 01       	movw	r26, r16
   11f6a:	8d 93       	st	X+, r24
   11f6c:	8d 01       	movw	r16, r26
   11f6e:	bf ef       	ldi	r27, 0xFF	; 255
   11f70:	eb 1a       	sub	r14, r27
   11f72:	fb 0a       	sbc	r15, r27
   11f74:	e8 e8       	ldi	r30, 0x88	; 136
   11f76:	ee 16       	cp	r14, r30
   11f78:	f1 04       	cpc	r15, r1
   11f7a:	99 f7       	brne	.-26     	; 0x11f62 <setup+0x106e>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
   11f7c:	88 e8       	ldi	r24, 0x88	; 136
   11f7e:	90 e0       	ldi	r25, 0x00	; 0
   11f80:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f84:	18 2f       	mov	r17, r24
   11f86:	89 e8       	ldi	r24, 0x89	; 137
   11f88:	90 e0       	ldi	r25, 0x00	; 0
   11f8a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11f8e:	21 2f       	mov	r18, r17
   11f90:	30 e0       	ldi	r19, 0x00	; 0
   11f92:	32 2f       	mov	r19, r18
   11f94:	22 27       	eor	r18, r18
   11f96:	82 0f       	add	r24, r18
   11f98:	93 2f       	mov	r25, r19
   11f9a:	91 1d       	adc	r25, r1
   11f9c:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <device+0x25>
   11fa0:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <device+0x24>
   11fa4:	2e ec       	ldi	r18, 0xCE	; 206
   11fa6:	e2 2e       	mov	r14, r18
   11fa8:	2c e0       	ldi	r18, 0x0C	; 12
   11faa:	f2 2e       	mov	r15, r18
   11fac:	0a e8       	ldi	r16, 0x8A	; 138
   11fae:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
   11fb0:	c8 01       	movw	r24, r16
   11fb2:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11fb6:	d7 01       	movw	r26, r14
   11fb8:	8d 93       	st	X+, r24
   11fba:	7d 01       	movw	r14, r26
   11fbc:	0f 5f       	subi	r16, 0xFF	; 255
   11fbe:	1f 4f       	sbci	r17, 0xFF	; 255
   11fc0:	0e 39       	cpi	r16, 0x9E	; 158
   11fc2:	11 05       	cpc	r17, r1
   11fc4:	a9 f7       	brne	.-22     	; 0x11fb0 <setup+0x10bc>
   11fc6:	82 ee       	ldi	r24, 0xE2	; 226
   11fc8:	e8 2e       	mov	r14, r24
   11fca:	8c e0       	ldi	r24, 0x0C	; 12
   11fcc:	f8 2e       	mov	r15, r24
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
   11fce:	c8 01       	movw	r24, r16
   11fd0:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11fd4:	f7 01       	movw	r30, r14
   11fd6:	81 93       	st	Z+, r24
   11fd8:	7f 01       	movw	r14, r30
   11fda:	0f 5f       	subi	r16, 0xFF	; 255
   11fdc:	1f 4f       	sbci	r17, 0xFF	; 255
   11fde:	02 3b       	cpi	r16, 0xB2	; 178
   11fe0:	11 05       	cpc	r17, r1
   11fe2:	a9 f7       	brne	.-22     	; 0x11fce <setup+0x10da>
   11fe4:	b6 ef       	ldi	r27, 0xF6	; 246
   11fe6:	eb 2e       	mov	r14, r27
   11fe8:	bc e0       	ldi	r27, 0x0C	; 12
   11fea:	fb 2e       	mov	r15, r27
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
   11fec:	c8 01       	movw	r24, r16
   11fee:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   11ff2:	d7 01       	movw	r26, r14
   11ff4:	8d 93       	st	X+, r24
   11ff6:	7d 01       	movw	r14, r26
   11ff8:	0f 5f       	subi	r16, 0xFF	; 255
   11ffa:	1f 4f       	sbci	r17, 0xFF	; 255
   11ffc:	06 3b       	cpi	r16, 0xB6	; 182
   11ffe:	11 05       	cpc	r17, r1
   12000:	a9 f7       	brne	.-22     	; 0x11fec <setup+0x10f8>
   12002:	4d e8       	ldi	r20, 0x8D	; 141
   12004:	5a e0       	ldi	r21, 0x0A	; 10
   12006:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   12008:	60 e2       	ldi	r22, 0x20	; 32
   1200a:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:35
   1200c:	90 e0       	ldi	r25, 0x00	; 0
   1200e:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4444
   12010:	fc 01       	movw	r30, r24
   12012:	ee 0f       	add	r30, r30
   12014:	ff 1f       	adc	r31, r31
   12016:	e4 0f       	add	r30, r20
   12018:	f5 1f       	adc	r31, r21
   1201a:	70 87       	std	Z+8, r23	; 0x08
   1201c:	67 83       	std	Z+7, r22	; 0x07
   1201e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4443
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   12020:	8a 30       	cpi	r24, 0x0A	; 10
   12022:	91 05       	cpc	r25, r1
   12024:	a9 f7       	brne	.-22     	; 0x12010 <setup+0x111c>
   12026:	21 50       	subi	r18, 0x01	; 1
   12028:	42 5e       	subi	r20, 0xE2	; 226
   1202a:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4442
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   1202c:	21 11       	cpse	r18, r1
   1202e:	ee cf       	rjmp	.-36     	; 0x1200c <setup+0x1118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   12030:	10 92 88 0a 	sts	0x0A88, r1	; 0x800a88 <last_output_update>
   12034:	10 92 89 0a 	sts	0x0A89, r1	; 0x800a89 <last_output_update+0x1>
   12038:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <last_output_update+0x2>
   1203c:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <last_output_update+0x3>
   12040:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
   12044:	a3 94       	inc	r10
   12046:	c4 5c       	subi	r28, 0xC4	; 196
   12048:	de 4f       	sbci	r29, 0xFE	; 254
   1204a:	e8 81       	ld	r30, Y
   1204c:	f9 81       	ldd	r31, Y+1	; 0x01
   1204e:	cc 53       	subi	r28, 0x3C	; 60
   12050:	d1 40       	sbci	r29, 0x01	; 1
   12052:	3f 96       	adiw	r30, 0x0f	; 15
   12054:	c4 5c       	subi	r28, 0xC4	; 196
   12056:	de 4f       	sbci	r29, 0xFE	; 254
   12058:	f9 83       	std	Y+1, r31	; 0x01
   1205a:	e8 83       	st	Y, r30
   1205c:	cc 53       	subi	r28, 0x3C	; 60
   1205e:	d1 40       	sbci	r29, 0x01	; 1
   12060:	f0 e1       	ldi	r31, 0x10	; 16
   12062:	af 12       	cpse	r10, r31
   12064:	8f c9       	rjmp	.-3298   	; 0x11384 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   12066:	64 ef       	ldi	r22, 0xF4	; 244
   12068:	71 e0       	ldi	r23, 0x01	; 1
   1206a:	80 e0       	ldi	r24, 0x00	; 0
   1206c:	90 e0       	ldi	r25, 0x00	; 0
   1206e:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
  MenuPrepareStyle();
   12072:	0e 94 b7 51 	call	0xa36e	; 0xa36e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4623
  draw_menu(true);
   12076:	81 e0       	ldi	r24, 0x01	; 1
   12078:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
  a2d_run_now = 1;
   1207c:	81 e0       	ldi	r24, 0x01	; 1
   1207e:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626

}
   12082:	c3 5b       	subi	r28, 0xB3	; 179
   12084:	de 4f       	sbci	r29, 0xFE	; 254
   12086:	0f b6       	in	r0, 0x3f	; 63
   12088:	f8 94       	cli
   1208a:	de bf       	out	0x3e, r29	; 62
   1208c:	0f be       	out	0x3f, r0	; 63
   1208e:	cd bf       	out	0x3d, r28	; 61
   12090:	df 91       	pop	r29
   12092:	cf 91       	pop	r28
   12094:	1f 91       	pop	r17
   12096:	0f 91       	pop	r16
   12098:	ff 90       	pop	r15
   1209a:	ef 90       	pop	r14
   1209c:	df 90       	pop	r13
   1209e:	cf 90       	pop	r12
   120a0:	bf 90       	pop	r11
   120a2:	af 90       	pop	r10
   120a4:	9f 90       	pop	r9
   120a6:	8f 90       	pop	r8
   120a8:	7f 90       	pop	r7
   120aa:	6f 90       	pop	r6
   120ac:	5f 90       	pop	r5
   120ae:	4f 90       	pop	r4
   120b0:	3f 90       	pop	r3
   120b2:	2f 90       	pop	r2
   120b4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4453
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   120b6:	6d e4       	ldi	r22, 0x4D	; 77
   120b8:	79 e5       	ldi	r23, 0x59	; 89
   120ba:	c1 01       	movw	r24, r2
   120bc:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   120c0:	ee 24       	eor	r14, r14
   120c2:	ea 94       	dec	r14
   120c4:	fe 2c       	mov	r15, r14
   120c6:	00 ee       	ldi	r16, 0xE0	; 224
   120c8:	17 e0       	ldi	r17, 0x07	; 7
   120ca:	21 e0       	ldi	r18, 0x01	; 1
   120cc:	4e e6       	ldi	r20, 0x6E	; 110
   120ce:	50 e0       	ldi	r21, 0x00	; 0
   120d0:	6e e1       	ldi	r22, 0x1E	; 30
   120d2:	70 e0       	ldi	r23, 0x00	; 0
   120d4:	c1 01       	movw	r24, r2
   120d6:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   120da:	20 91 57 0e 	lds	r18, 0x0E57	; 0x800e57 <my_lcd+0x14>
   120de:	30 91 58 0e 	lds	r19, 0x0E58	; 0x800e58 <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   120e2:	40 91 55 0e 	lds	r20, 0x0E55	; 0x800e55 <my_lcd+0x12>
   120e6:	50 91 56 0e 	lds	r21, 0x0E56	; 0x800e56 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   120ea:	90 91 59 0e 	lds	r25, 0x0E59	; 0x800e59 <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   120ee:	e0 91 3a 0e 	lds	r30, 0x0E3A	; 0x800e3a <my_touch+0x15>
   120f2:	f0 91 3b 0e 	lds	r31, 0x0E3B	; 0x800e3b <my_touch+0x16>
   120f6:	80 81       	ld	r24, Z
   120f8:	60 91 41 0e 	lds	r22, 0x0E41	; 0x800e41 <my_touch+0x1c>
   120fc:	86 2b       	or	r24, r22
   120fe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
   12100:	e0 91 36 0e 	lds	r30, 0x0E36	; 0x800e36 <my_touch+0x11>
   12104:	f0 91 37 0e 	lds	r31, 0x0E37	; 0x800e37 <my_touch+0x12>
   12108:	80 81       	ld	r24, Z
   1210a:	60 91 3f 0e 	lds	r22, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   1210e:	86 2b       	or	r24, r22
   12110:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
   12112:	e0 91 34 0e 	lds	r30, 0x0E34	; 0x800e34 <my_touch+0xf>
   12116:	f0 91 35 0e 	lds	r31, 0x0E35	; 0x800e35 <my_touch+0x10>
   1211a:	80 81       	ld	r24, Z
   1211c:	60 91 3e 0e 	lds	r22, 0x0E3E	; 0x800e3e <my_touch+0x19>
   12120:	86 2b       	or	r24, r22
   12122:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
   12124:	50 93 2e 0e 	sts	0x0E2E, r21	; 0x800e2e <my_touch+0x9>
   12128:	40 93 2d 0e 	sts	0x0E2D, r20	; 0x800e2d <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
   1212c:	30 93 30 0e 	sts	0x0E30, r19	; 0x800e30 <my_touch+0xb>
   12130:	20 93 2f 0e 	sts	0x0E2F, r18	; 0x800e2f <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   12134:	90 93 33 0e 	sts	0x0E33, r25	; 0x800e33 <my_touch+0xe>
   12138:	85 cf       	rjmp	.-246    	; 0x12044 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   1213a:	66 e0       	ldi	r22, 0x06	; 6
   1213c:	7a e5       	ldi	r23, 0x5A	; 90
   1213e:	8d 2d       	mov	r24, r13
   12140:	9b 2d       	mov	r25, r11
   12142:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   12146:	ee 24       	eor	r14, r14
   12148:	ea 94       	dec	r14
   1214a:	fe 2c       	mov	r15, r14
   1214c:	00 e0       	ldi	r16, 0x00	; 0
   1214e:	18 ef       	ldi	r17, 0xF8	; 248
   12150:	21 e0       	ldi	r18, 0x01	; 1
   12152:	48 e7       	ldi	r20, 0x78	; 120
   12154:	50 e0       	ldi	r21, 0x00	; 0
   12156:	60 ea       	ldi	r22, 0xA0	; 160
   12158:	70 e0       	ldi	r23, 0x00	; 0
   1215a:	8d 2d       	mov	r24, r13
   1215c:	9b 2d       	mov	r25, r11
   1215e:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   12162:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   12166:	84 60       	ori	r24, 0x04	; 4
   12168:	3d c3       	rjmp	.+1658   	; 0x127e4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4487
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   1216a:	e8 e0       	ldi	r30, 0x08	; 8
   1216c:	ae 12       	cpse	r10, r30
   1216e:	9d c0       	rjmp	.+314    	; 0x122aa <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4489
    {
      strcpy_P(str1, text_onewire_hledam);
   12170:	61 e3       	ldi	r22, 0x31	; 49
   12172:	79 e5       	ldi	r23, 0x59	; 89
   12174:	8d 2d       	mov	r24, r13
   12176:	9b 2d       	mov	r25, r11
   12178:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4490
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1217c:	ee 24       	eor	r14, r14
   1217e:	ea 94       	dec	r14
   12180:	fe 2c       	mov	r15, r14
   12182:	00 ee       	ldi	r16, 0xE0	; 224
   12184:	17 e0       	ldi	r17, 0x07	; 7
   12186:	21 e0       	ldi	r18, 0x01	; 1
   12188:	42 e8       	ldi	r20, 0x82	; 130
   1218a:	50 e0       	ldi	r21, 0x00	; 0
   1218c:	6e e1       	ldi	r22, 0x1E	; 30
   1218e:	70 e0       	ldi	r23, 0x00	; 0
   12190:	8d 2d       	mov	r24, r13
   12192:	9b 2d       	mov	r25, r11
   12194:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491
      Global_HWwirenum = 0;
   12198:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   1219c:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <ds2482_address+0x1>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   121a0:	10 91 d9 09 	lds	r17, 0x09D9	; 0x8009d9 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   121a4:	81 2f       	mov	r24, r17
   121a6:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   121aa:	82 e8       	ldi	r24, 0x82	; 130
   121ac:	9e e0       	ldi	r25, 0x0E	; 14
   121ae:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   121b2:	81 11       	cpse	r24, r1
   121b4:	10 c0       	rjmp	.+32     	; 0x121d6 <setup+0x12e2>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   121b6:	81 2f       	mov	r24, r17
   121b8:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   121bc:	82 ed       	ldi	r24, 0xD2	; 210
   121be:	90 e0       	ldi	r25, 0x00	; 0
   121c0:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   121c4:	60 e0       	ldi	r22, 0x00	; 0
   121c6:	82 e8       	ldi	r24, 0x82	; 130
   121c8:	9e e0       	ldi	r25, 0x0E	; 14
   121ca:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   121ce:	82 e8       	ldi	r24, 0x82	; 130
   121d0:	9e e0       	ldi	r25, 0x0E	; 14
   121d2:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   121d6:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <ds2482_address>
   121da:	0e 94 b6 a8 	call	0x1516c	; 0x1516c <ds2482reset(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   121de:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <ds2482_address>
   121e2:	0e 94 80 a9 	call	0x15300	; 0x15300 <ds2482owReset(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   121e6:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   121ea:	10 92 d8 0b 	sts	0x0BD8, r1	; 0x800bd8 <lastDevice>
   121ee:	10 92 cf 0b 	sts	0x0BCF, r1	; 0x800bcf <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   121f2:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]>
one_hw_search_device():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   121f6:	81 11       	cpse	r24, r1
   121f8:	35 c0       	rjmp	.+106    	; 0x12264 <setup+0x1370>
   121fa:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   121fc:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   121fe:	80 91 da 09 	lds	r24, 0x09DA	; 0x8009da <ds2482_address+0x1>
   12202:	86 30       	cpi	r24, 0x06	; 6
   12204:	78 f5       	brcc	.+94     	; 0x12264 <setup+0x1370>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   12206:	20 91 75 0a 	lds	r18, 0x0A75	; 0x800a75 <Global_HWwirenum>
   1220a:	42 2f       	mov	r20, r18
   1220c:	50 e0       	ldi	r21, 0x00	; 0
   1220e:	a0 ed       	ldi	r26, 0xD0	; 208
   12210:	bb e0       	ldi	r27, 0x0B	; 11
   12212:	21 9f       	mul	r18, r17
   12214:	90 01       	movw	r18, r0
   12216:	11 24       	eor	r1, r1
   12218:	90 e0       	ldi	r25, 0x00	; 0
   1221a:	80 e0       	ldi	r24, 0x00	; 0
   1221c:	6d 91       	ld	r22, X+
   1221e:	fc 01       	movw	r30, r24
   12220:	e2 0f       	add	r30, r18
   12222:	f3 1f       	adc	r31, r19
   12224:	ed 5c       	subi	r30, 0xCD	; 205
   12226:	f5 4f       	sbci	r31, 0xF5	; 245
   12228:	60 83       	st	Z, r22
   1222a:	01 96       	adiw	r24, 0x01	; 1
   1222c:	88 30       	cpi	r24, 0x08	; 8
   1222e:	91 05       	cpc	r25, r1
   12230:	a9 f7       	brne	.-22     	; 0x1221c <setup+0x1328>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   12232:	14 9f       	mul	r17, r20
   12234:	f0 01       	movw	r30, r0
   12236:	15 9f       	mul	r17, r21
   12238:	f0 0d       	add	r31, r0
   1223a:	11 24       	eor	r1, r1
   1223c:	ed 5c       	subi	r30, 0xCD	; 205
   1223e:	f5 4f       	sbci	r31, 0xF5	; 245
   12240:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   12242:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   12244:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <ds2482_address>
   12248:	0e 94 b6 a9 	call	0x1536c	; 0x1536c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   1224c:	90 91 da 09 	lds	r25, 0x09DA	; 0x8009da <ds2482_address+0x1>
   12250:	9f 5f       	subi	r25, 0xFF	; 255
   12252:	90 93 da 09 	sts	0x09DA, r25	; 0x8009da <ds2482_address+0x1>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   12256:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <Global_HWwirenum>
   1225a:	9f 5f       	subi	r25, 0xFF	; 255
   1225c:	90 93 75 0a 	sts	0x0A75, r25	; 0x800a75 <Global_HWwirenum>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   12260:	85 30       	cpi	r24, 0x05	; 5
   12262:	69 f6       	brne	.-102    	; 0x121fe <setup+0x130a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
      one_hw_search_device(0);
      tds_update_associate();
   12264:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
      strcpy (str1, "Nalezeno: ");
   12268:	6f ee       	ldi	r22, 0xEF	; 239
   1226a:	76 e0       	ldi	r23, 0x06	; 6
   1226c:	8d 2d       	mov	r24, r13
   1226e:	9b 2d       	mov	r25, r11
   12270:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
      itoa(Global_HWwirenum, str2, 10);
   12274:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   12278:	4a e0       	ldi	r20, 0x0A	; 10
   1227a:	be 01       	movw	r22, r28
   1227c:	68 57       	subi	r22, 0x78	; 120
   1227e:	7f 4f       	sbci	r23, 0xFF	; 255
   12280:	90 e0       	ldi	r25, 0x00	; 0
   12282:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
      strcat(str1, str2);
   12286:	be 01       	movw	r22, r28
   12288:	68 57       	subi	r22, 0x78	; 120
   1228a:	7f 4f       	sbci	r23, 0xFF	; 255
   1228c:	8d 2d       	mov	r24, r13
   1228e:	9b 2d       	mov	r25, r11
   12290:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   12294:	ee 24       	eor	r14, r14
   12296:	ea 94       	dec	r14
   12298:	fe 2c       	mov	r15, r14
   1229a:	00 ee       	ldi	r16, 0xE0	; 224
   1229c:	17 e0       	ldi	r17, 0x07	; 7
   1229e:	21 e0       	ldi	r18, 0x01	; 1
   122a0:	42 e8       	ldi	r20, 0x82	; 130
   122a2:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   122a4:	60 ea       	ldi	r22, 0xA0	; 160
   122a6:	70 e0       	ldi	r23, 0x00	; 0
   122a8:	cc cd       	rjmp	.-1128   	; 0x11e42 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4501
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   122aa:	f9 e0       	ldi	r31, 0x09	; 9
   122ac:	af 12       	cpse	r10, r31
   122ae:	9d c2       	rjmp	.+1338   	; 0x127ea <setup+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4503
    {
      digitalWrite(ETH_RST, HIGH);
   122b0:	61 e0       	ldi	r22, 0x01	; 1
   122b2:	86 e0       	ldi	r24, 0x06	; 6
   122b4:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
      delay(10);
   122b8:	6a e0       	ldi	r22, 0x0A	; 10
   122ba:	70 e0       	ldi	r23, 0x00	; 0
   122bc:	80 e0       	ldi	r24, 0x00	; 0
   122be:	90 e0       	ldi	r25, 0x00	; 0
   122c0:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
      digitalWrite(ETH_RST, LOW);
   122c4:	60 e0       	ldi	r22, 0x00	; 0
   122c6:	86 e0       	ldi	r24, 0x06	; 6
   122c8:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4506
      delay(10);
   122cc:	6a e0       	ldi	r22, 0x0A	; 10
   122ce:	70 e0       	ldi	r23, 0x00	; 0
   122d0:	80 e0       	ldi	r24, 0x00	; 0
   122d2:	90 e0       	ldi	r25, 0x00	; 0
   122d4:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
      digitalWrite(ETH_RST, HIGH);
   122d8:	61 e0       	ldi	r22, 0x01	; 1
   122da:	86 e0       	ldi	r24, 0x06	; 6
   122dc:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
      delay(100);
   122e0:	64 e6       	ldi	r22, 0x64	; 100
   122e2:	70 e0       	ldi	r23, 0x00	; 0
   122e4:	80 e0       	ldi	r24, 0x00	; 0
   122e6:	90 e0       	ldi	r25, 0x00	; 0
   122e8:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   122ec:	8f e0       	ldi	r24, 0x0F	; 15
   122ee:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   122f2:	82 ee       	ldi	r24, 0xE2	; 226
   122f4:	92 e0       	ldi	r25, 0x02	; 2
   122f6:	ce 5c       	subi	r28, 0xCE	; 206
   122f8:	de 4f       	sbci	r29, 0xFE	; 254
   122fa:	99 83       	std	Y+1, r25	; 0x01
   122fc:	88 83       	st	Y, r24
   122fe:	c2 53       	subi	r28, 0x32	; 50
   12300:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   12302:	24 e0       	ldi	r18, 0x04	; 4
   12304:	e2 eb       	ldi	r30, 0xB2	; 178
   12306:	fc e0       	ldi	r31, 0x0C	; 12
   12308:	cc 5b       	subi	r28, 0xBC	; 188
   1230a:	de 4f       	sbci	r29, 0xFE	; 254
   1230c:	a8 81       	ld	r26, Y
   1230e:	b9 81       	ldd	r27, Y+1	; 0x01
   12310:	c4 54       	subi	r28, 0x44	; 68
   12312:	d1 40       	sbci	r29, 0x01	; 1
   12314:	01 90       	ld	r0, Z+
   12316:	0d 92       	st	X+, r0
   12318:	2a 95       	dec	r18
   1231a:	e1 f7       	brne	.-8      	; 0x12314 <setup+0x1420>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   1231c:	c4 5d       	subi	r28, 0xD4	; 212
   1231e:	de 4f       	sbci	r29, 0xFE	; 254
   12320:	99 83       	std	Y+1, r25	; 0x01
   12322:	88 83       	st	Y, r24
   12324:	cc 52       	subi	r28, 0x2C	; 44
   12326:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   12328:	24 e0       	ldi	r18, 0x04	; 4
   1232a:	ea eb       	ldi	r30, 0xBA	; 186
   1232c:	fc e0       	ldi	r31, 0x0C	; 12
   1232e:	ca 5b       	subi	r28, 0xBA	; 186
   12330:	de 4f       	sbci	r29, 0xFE	; 254
   12332:	a8 81       	ld	r26, Y
   12334:	b9 81       	ldd	r27, Y+1	; 0x01
   12336:	c6 54       	subi	r28, 0x46	; 70
   12338:	d1 40       	sbci	r29, 0x01	; 1
   1233a:	01 90       	ld	r0, Z+
   1233c:	0d 92       	st	X+, r0
   1233e:	2a 95       	dec	r18
   12340:	e1 f7       	brne	.-8      	; 0x1233a <setup+0x1446>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   12342:	ca 5d       	subi	r28, 0xDA	; 218
   12344:	de 4f       	sbci	r29, 0xFE	; 254
   12346:	99 83       	std	Y+1, r25	; 0x01
   12348:	88 83       	st	Y, r24
   1234a:	c6 52       	subi	r28, 0x26	; 38
   1234c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1234e:	24 e0       	ldi	r18, 0x04	; 4
   12350:	e6 eb       	ldi	r30, 0xB6	; 182
   12352:	fc e0       	ldi	r31, 0x0C	; 12
   12354:	c8 5b       	subi	r28, 0xB8	; 184
   12356:	de 4f       	sbci	r29, 0xFE	; 254
   12358:	a8 81       	ld	r26, Y
   1235a:	b9 81       	ldd	r27, Y+1	; 0x01
   1235c:	c8 54       	subi	r28, 0x48	; 72
   1235e:	d1 40       	sbci	r29, 0x01	; 1
   12360:	01 90       	ld	r0, Z+
   12362:	0d 92       	st	X+, r0
   12364:	2a 95       	dec	r18
   12366:	e1 f7       	brne	.-8      	; 0x12360 <setup+0x146c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
   12368:	c2 52       	subi	r28, 0x22	; 34
   1236a:	df 4f       	sbci	r29, 0xFF	; 255
   1236c:	99 83       	std	Y+1, r25	; 0x01
   1236e:	88 83       	st	Y, r24
   12370:	ce 5d       	subi	r28, 0xDE	; 222
   12372:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   12374:	84 e0       	ldi	r24, 0x04	; 4
   12376:	ee ea       	ldi	r30, 0xAE	; 174
   12378:	fc e0       	ldi	r31, 0x0C	; 12
   1237a:	c6 5b       	subi	r28, 0xB6	; 182
   1237c:	de 4f       	sbci	r29, 0xFE	; 254
   1237e:	a8 81       	ld	r26, Y
   12380:	b9 81       	ldd	r27, Y+1	; 0x01
   12382:	ca 54       	subi	r28, 0x4A	; 74
   12384:	d1 40       	sbci	r29, 0x01	; 1
   12386:	01 90       	ld	r0, Z+
   12388:	0d 92       	st	X+, r0
   1238a:	8a 95       	dec	r24
   1238c:	e1 f7       	brne	.-8      	; 0x12386 <setup+0x1492>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   1238e:	9e 01       	movw	r18, r28
   12390:	2e 5c       	subi	r18, 0xCE	; 206
   12392:	3e 4f       	sbci	r19, 0xFE	; 254
   12394:	ae 01       	movw	r20, r28
   12396:	44 5d       	subi	r20, 0xD4	; 212
   12398:	5e 4f       	sbci	r21, 0xFE	; 254
   1239a:	be 01       	movw	r22, r28
   1239c:	6a 5d       	subi	r22, 0xDA	; 218
   1239e:	7e 4f       	sbci	r23, 0xFE	; 254
   123a0:	ce 01       	movw	r24, r28
   123a2:	82 52       	subi	r24, 0x22	; 34
   123a4:	9f 4f       	sbci	r25, 0xFF	; 255
   123a6:	0e 94 a0 b0 	call	0x16140	; 0x16140 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.98]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
      strcpy_P(str1, text_ethernet_rozhrani);
   123aa:	6f e1       	ldi	r22, 0x1F	; 31
   123ac:	79 e5       	ldi	r23, 0x59	; 89
   123ae:	8d 2d       	mov	r24, r13
   123b0:	9b 2d       	mov	r25, r11
   123b2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4512
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   123b6:	ee 24       	eor	r14, r14
   123b8:	ea 94       	dec	r14
   123ba:	fe 2c       	mov	r15, r14
   123bc:	00 ee       	ldi	r16, 0xE0	; 224
   123be:	17 e0       	ldi	r17, 0x07	; 7
   123c0:	21 e0       	ldi	r18, 0x01	; 1
   123c2:	4c e8       	ldi	r20, 0x8C	; 140
   123c4:	50 e0       	ldi	r21, 0x00	; 0
   123c6:	6e e1       	ldi	r22, 0x1E	; 30
   123c8:	70 e0       	ldi	r23, 0x00	; 0
   123ca:	8d 2d       	mov	r24, r13
   123cc:	9b 2d       	mov	r25, r11
   123ce:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
      delay(100);
   123d2:	64 e6       	ldi	r22, 0x64	; 100
   123d4:	70 e0       	ldi	r23, 0x00	; 0
   123d6:	80 e0       	ldi	r24, 0x00	; 0
   123d8:	90 e0       	ldi	r25, 0x00	; 0
   123da:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
   123de:	32 ce       	rjmp	.-924    	; 0x12044 <setup+0x1150>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   123e0:	90 62       	ori	r25, 0x20	; 32
   123e2:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
   123e6:	42 c2       	rjmp	.+1156   	; 0x1286c <setup+0x1978>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4544
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   123e8:	6b e7       	ldi	r22, 0x7B	; 123
   123ea:	79 e5       	ldi	r23, 0x59	; 89
   123ec:	8d 2d       	mov	r24, r13
   123ee:	9b 2d       	mov	r25, r11
   123f0:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   123f4:	ee 24       	eor	r14, r14
   123f6:	ea 94       	dec	r14
   123f8:	fe 2c       	mov	r15, r14
   123fa:	00 ee       	ldi	r16, 0xE0	; 224
   123fc:	17 e0       	ldi	r17, 0x07	; 7
   123fe:	5b c2       	rjmp	.+1206   	; 0x128b6 <setup+0x19c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4551
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   12400:	3b e0       	ldi	r19, 0x0B	; 11
   12402:	a3 12       	cpse	r10, r19
   12404:	0f c0       	rjmp	.+30     	; 0x12424 <setup+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
    {
      strcpy_P(str1, text_rest_rozhrani);
   12406:	60 ef       	ldi	r22, 0xF0	; 240
   12408:	78 e5       	ldi	r23, 0x58	; 88
   1240a:	8d 2d       	mov	r24, r13
   1240c:	9b 2d       	mov	r25, r11
   1240e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4554
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   12412:	ee 24       	eor	r14, r14
   12414:	ea 94       	dec	r14
   12416:	fe 2c       	mov	r15, r14
   12418:	00 ee       	ldi	r16, 0xE0	; 224
   1241a:	17 e0       	ldi	r17, 0x07	; 7
   1241c:	21 e0       	ldi	r18, 0x01	; 1
   1241e:	40 ea       	ldi	r20, 0xA0	; 160
   12420:	50 e0       	ldi	r21, 0x00	; 0
   12422:	0d cd       	rjmp	.-1510   	; 0x11e3e <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
    }
    ///
    /// inicializace nrf
    if (init == 12)
   12424:	8c e0       	ldi	r24, 0x0C	; 12
   12426:	a8 12       	cpse	r10, r24
   12428:	4a c2       	rjmp	.+1172   	; 0x128be <setup+0x19ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4560
    {
      strcpy_P(str1, text_nrf_rozhrani);
   1242a:	63 ee       	ldi	r22, 0xE3	; 227
   1242c:	78 e5       	ldi	r23, 0x58	; 88
   1242e:	8d 2d       	mov	r24, r13
   12430:	9b 2d       	mov	r25, r11
   12432:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4561
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   12436:	ee 24       	eor	r14, r14
   12438:	ea 94       	dec	r14
   1243a:	fe 2c       	mov	r15, r14
   1243c:	00 ee       	ldi	r16, 0xE0	; 224
   1243e:	17 e0       	ldi	r17, 0x07	; 7
   12440:	21 e0       	ldi	r18, 0x01	; 1
   12442:	4a ea       	ldi	r20, 0xAA	; 170
   12444:	50 e0       	ldi	r21, 0x00	; 0
   12446:	fb cc       	rjmp	.-1546   	; 0x11e3e <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   12448:	d8 01       	movw	r26, r16
   1244a:	d2 96       	adiw	r26, 0x32	; 50
   1244c:	8d 91       	ld	r24, X+
   1244e:	9d 91       	ld	r25, X+
   12450:	0d 90       	ld	r0, X+
   12452:	bc 91       	ld	r27, X
   12454:	a0 2d       	mov	r26, r0
   12456:	c8 5c       	subi	r28, 0xC8	; 200
   12458:	de 4f       	sbci	r29, 0xFE	; 254
   1245a:	88 83       	st	Y, r24
   1245c:	99 83       	std	Y+1, r25	; 0x01
   1245e:	aa 83       	std	Y+2, r26	; 0x02
   12460:	bb 83       	std	Y+3, r27	; 0x03
   12462:	c8 53       	subi	r28, 0x38	; 56
   12464:	d1 40       	sbci	r29, 0x01	; 1
   12466:	9c 01       	movw	r18, r24
   12468:	ad 01       	movw	r20, r26
   1246a:	c3 01       	movw	r24, r6
   1246c:	b2 01       	movw	r22, r4
   1246e:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
   12472:	87 fd       	sbrc	r24, 7
   12474:	13 c3       	rjmp	.+1574   	; 0x12a9c <setup+0x1ba8>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   12476:	d8 01       	movw	r26, r16
   12478:	da 96       	adiw	r26, 0x3a	; 58
   1247a:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   1247c:	f8 01       	movw	r30, r16
   1247e:	12 aa       	std	Z+50, r1	; 0x32
   12480:	13 aa       	std	Z+51, r1	; 0x33
   12482:	14 aa       	std	Z+52, r1	; 0x34
   12484:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   12486:	80 e0       	ldi	r24, 0x00	; 0
   12488:	90 e0       	ldi	r25, 0x00	; 0
   1248a:	af e7       	ldi	r26, 0x7F	; 127
   1248c:	b3 e4       	ldi	r27, 0x43	; 67
   1248e:	86 ab       	std	Z+54, r24	; 0x36
   12490:	97 ab       	std	Z+55, r25	; 0x37
   12492:	a0 af       	std	Z+56, r26	; 0x38
   12494:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   12496:	26 8d       	ldd	r18, Z+30	; 0x1e
   12498:	37 8d       	ldd	r19, Z+31	; 0x1f
   1249a:	c8 5c       	subi	r28, 0xC8	; 200
   1249c:	de 4f       	sbci	r29, 0xFE	; 254
   1249e:	39 83       	std	Y+1, r19	; 0x01
   124a0:	28 83       	st	Y, r18
   124a2:	c8 53       	subi	r28, 0x38	; 56
   124a4:	d1 40       	sbci	r29, 0x01	; 1
   124a6:	d9 01       	movw	r26, r18
   124a8:	4d 90       	ld	r4, X+
   124aa:	5d 90       	ld	r5, X+
   124ac:	6d 90       	ld	r6, X+
   124ae:	7c 90       	ld	r7, X
   124b0:	20 e0       	ldi	r18, 0x00	; 0
   124b2:	30 e0       	ldi	r19, 0x00	; 0
   124b4:	4f e7       	ldi	r20, 0x7F	; 127
   124b6:	53 e4       	ldi	r21, 0x43	; 67
   124b8:	c3 01       	movw	r24, r6
   124ba:	b2 01       	movw	r22, r4
   124bc:	0e 94 53 cf 	call	0x19ea6	; 0x19ea6 <__gesf2>
   124c0:	18 16       	cp	r1, r24
   124c2:	94 f5       	brge	.+100    	; 0x12528 <setup+0x1634>
   124c4:	80 e0       	ldi	r24, 0x00	; 0
   124c6:	90 e0       	ldi	r25, 0x00	; 0
   124c8:	af e7       	ldi	r26, 0x7F	; 127
   124ca:	b3 e4       	ldi	r27, 0x43	; 67
   124cc:	c8 5c       	subi	r28, 0xC8	; 200
   124ce:	de 4f       	sbci	r29, 0xFE	; 254
   124d0:	e8 81       	ld	r30, Y
   124d2:	f9 81       	ldd	r31, Y+1	; 0x01
   124d4:	c8 53       	subi	r28, 0x38	; 56
   124d6:	d1 40       	sbci	r29, 0x01	; 1
   124d8:	80 83       	st	Z, r24
   124da:	91 83       	std	Z+1, r25	; 0x01
   124dc:	a2 83       	std	Z+2, r26	; 0x02
   124de:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   124e0:	d8 01       	movw	r26, r16
   124e2:	96 96       	adiw	r26, 0x26	; 38
   124e4:	8d 91       	ld	r24, X+
   124e6:	9d 91       	ld	r25, X+
   124e8:	0d 90       	ld	r0, X+
   124ea:	bc 91       	ld	r27, X
   124ec:	a0 2d       	mov	r26, r0
   124ee:	c8 5c       	subi	r28, 0xC8	; 200
   124f0:	de 4f       	sbci	r29, 0xFE	; 254
   124f2:	88 83       	st	Y, r24
   124f4:	99 83       	std	Y+1, r25	; 0x01
   124f6:	aa 83       	std	Y+2, r26	; 0x02
   124f8:	bb 83       	std	Y+3, r27	; 0x03
   124fa:	c8 53       	subi	r28, 0x38	; 56
   124fc:	d1 40       	sbci	r29, 0x01	; 1
   124fe:	f8 01       	movw	r30, r16
   12500:	46 a8       	ldd	r4, Z+54	; 0x36
   12502:	57 a8       	ldd	r5, Z+55	; 0x37
   12504:	60 ac       	ldd	r6, Z+56	; 0x38
   12506:	71 ac       	ldd	r7, Z+57	; 0x39
   12508:	a3 01       	movw	r20, r6
   1250a:	92 01       	movw	r18, r4
   1250c:	bc 01       	movw	r22, r24
   1250e:	cd 01       	movw	r24, r26
   12510:	0e 94 53 cf 	call	0x19ea6	; 0x19ea6 <__gesf2>
   12514:	18 16       	cp	r1, r24
   12516:	ec f4       	brge	.+58     	; 0x12552 <setup+0x165e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   12518:	d8 01       	movw	r26, r16
   1251a:	96 96       	adiw	r26, 0x26	; 38
   1251c:	4d 92       	st	X+, r4
   1251e:	5d 92       	st	X+, r5
   12520:	6d 92       	st	X+, r6
   12522:	7c 92       	st	X, r7
   12524:	99 97       	sbiw	r26, 0x29	; 41
   12526:	28 c0       	rjmp	.+80     	; 0x12578 <setup+0x1684>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   12528:	20 e0       	ldi	r18, 0x00	; 0
   1252a:	30 e0       	ldi	r19, 0x00	; 0
   1252c:	a9 01       	movw	r20, r18
   1252e:	c3 01       	movw	r24, r6
   12530:	b2 01       	movw	r22, r4
   12532:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
   12536:	87 ff       	sbrs	r24, 7
   12538:	d3 cf       	rjmp	.-90     	; 0x124e0 <setup+0x15ec>
   1253a:	c8 5c       	subi	r28, 0xC8	; 200
   1253c:	de 4f       	sbci	r29, 0xFE	; 254
   1253e:	a8 81       	ld	r26, Y
   12540:	b9 81       	ldd	r27, Y+1	; 0x01
   12542:	c8 53       	subi	r28, 0x38	; 56
   12544:	d1 40       	sbci	r29, 0x01	; 1
   12546:	1d 92       	st	X+, r1
   12548:	1d 92       	st	X+, r1
   1254a:	1d 92       	st	X+, r1
   1254c:	1c 92       	st	X, r1
   1254e:	13 97       	sbiw	r26, 0x03	; 3
   12550:	c7 cf       	rjmp	.-114    	; 0x124e0 <setup+0x15ec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   12552:	f8 01       	movw	r30, r16
   12554:	42 a8       	ldd	r4, Z+50	; 0x32
   12556:	53 a8       	ldd	r5, Z+51	; 0x33
   12558:	64 a8       	ldd	r6, Z+52	; 0x34
   1255a:	75 a8       	ldd	r7, Z+53	; 0x35
   1255c:	a3 01       	movw	r20, r6
   1255e:	92 01       	movw	r18, r4
   12560:	c8 5c       	subi	r28, 0xC8	; 200
   12562:	de 4f       	sbci	r29, 0xFE	; 254
   12564:	68 81       	ld	r22, Y
   12566:	79 81       	ldd	r23, Y+1	; 0x01
   12568:	8a 81       	ldd	r24, Y+2	; 0x02
   1256a:	9b 81       	ldd	r25, Y+3	; 0x03
   1256c:	c8 53       	subi	r28, 0x38	; 56
   1256e:	d1 40       	sbci	r29, 0x01	; 1
   12570:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
   12574:	87 fd       	sbrc	r24, 7
   12576:	d0 cf       	rjmp	.-96     	; 0x12518 <setup+0x1624>
   12578:	c0 5c       	subi	r28, 0xC0	; 192
   1257a:	de 4f       	sbci	r29, 0xFE	; 254
   1257c:	e8 81       	ld	r30, Y
   1257e:	f9 81       	ldd	r31, Y+1	; 0x01
   12580:	c0 54       	subi	r28, 0x40	; 64
   12582:	d1 40       	sbci	r29, 0x01	; 1
   12584:	34 96       	adiw	r30, 0x04	; 4
   12586:	c0 5c       	subi	r28, 0xC0	; 192
   12588:	de 4f       	sbci	r29, 0xFE	; 254
   1258a:	f9 83       	std	Y+1, r31	; 0x01
   1258c:	e8 83       	st	Y, r30
   1258e:	c0 54       	subi	r28, 0x40	; 64
   12590:	d1 40       	sbci	r29, 0x01	; 1
   12592:	ce 5b       	subi	r28, 0xBE	; 190
   12594:	de 4f       	sbci	r29, 0xFE	; 254
   12596:	28 81       	ld	r18, Y
   12598:	39 81       	ldd	r19, Y+1	; 0x01
   1259a:	c2 54       	subi	r28, 0x42	; 66
   1259c:	d1 40       	sbci	r29, 0x01	; 1
   1259e:	2c 5f       	subi	r18, 0xFC	; 252
   125a0:	3f 4f       	sbci	r19, 0xFF	; 255
   125a2:	ce 5b       	subi	r28, 0xBE	; 190
   125a4:	de 4f       	sbci	r29, 0xFE	; 254
   125a6:	39 83       	std	Y+1, r19	; 0x01
   125a8:	28 83       	st	Y, r18
   125aa:	c2 54       	subi	r28, 0x42	; 66
   125ac:	d1 40       	sbci	r29, 0x01	; 1
   125ae:	34 e0       	ldi	r19, 0x04	; 4
   125b0:	e3 0e       	add	r14, r19
   125b2:	f1 1c       	adc	r15, r1
   125b4:	82 e0       	ldi	r24, 0x02	; 2
   125b6:	88 0e       	add	r8, r24
   125b8:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   125ba:	9a e0       	ldi	r25, 0x0A	; 10
   125bc:	89 16       	cp	r8, r25
   125be:	91 04       	cpc	r9, r1
   125c0:	09 f0       	breq	.+2      	; 0x125c4 <setup+0x16d0>
   125c2:	ad c1       	rjmp	.+858    	; 0x1291e <setup+0x1a2a>
   125c4:	a3 e8       	ldi	r26, 0x83	; 131
   125c6:	ba e0       	ldi	r27, 0x0A	; 10
   125c8:	c8 5c       	subi	r28, 0xC8	; 200
   125ca:	de 4f       	sbci	r29, 0xFE	; 254
   125cc:	b9 83       	std	Y+1, r27	; 0x01
   125ce:	a8 83       	st	Y, r26
   125d0:	c8 53       	subi	r28, 0x38	; 56
   125d2:	d1 40       	sbci	r29, 0x01	; 1
   125d4:	4b ed       	ldi	r20, 0xDB	; 219
   125d6:	44 2e       	mov	r4, r20
   125d8:	49 e0       	ldi	r20, 0x09	; 9
   125da:	54 2e       	mov	r5, r20
   125dc:	5f ee       	ldi	r21, 0xEF	; 239
   125de:	65 2e       	mov	r6, r21
   125e0:	59 e0       	ldi	r21, 0x09	; 9
   125e2:	75 2e       	mov	r7, r21
   125e4:	63 e0       	ldi	r22, 0x03	; 3
   125e6:	86 2e       	mov	r8, r22
   125e8:	6a e0       	ldi	r22, 0x0A	; 10
   125ea:	96 2e       	mov	r9, r22
   125ec:	77 e1       	ldi	r23, 0x17	; 23
   125ee:	e7 2e       	mov	r14, r23
   125f0:	7a e0       	ldi	r23, 0x0A	; 10
   125f2:	f7 2e       	mov	r15, r23
   125f4:	00 e6       	ldi	r16, 0x60	; 96
   125f6:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   125f8:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   125fa:	c8 5c       	subi	r28, 0xC8	; 200
   125fc:	de 4f       	sbci	r29, 0xFE	; 254
   125fe:	e8 81       	ld	r30, Y
   12600:	f9 81       	ldd	r31, Y+1	; 0x01
   12602:	c8 53       	subi	r28, 0x38	; 56
   12604:	d1 40       	sbci	r29, 0x01	; 1
   12606:	11 92       	st	Z+, r1
   12608:	c8 5c       	subi	r28, 0xC8	; 200
   1260a:	de 4f       	sbci	r29, 0xFE	; 254
   1260c:	f9 83       	std	Y+1, r31	; 0x01
   1260e:	e8 83       	st	Y, r30
   12610:	c8 53       	subi	r28, 0x38	; 56
   12612:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   12614:	c8 01       	movw	r24, r16
   12616:	0e 94 1d b0 	call	0x1603a	; 0x1603a <EEPROMreadFloat(unsigned int)>
   1261a:	d2 01       	movw	r26, r4
   1261c:	6d 93       	st	X+, r22
   1261e:	7d 93       	st	X+, r23
   12620:	8d 93       	st	X+, r24
   12622:	9d 93       	st	X+, r25
   12624:	2d 01       	movw	r4, r26
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   12626:	c8 01       	movw	r24, r16
   12628:	04 96       	adiw	r24, 0x04	; 4
   1262a:	0e 94 1d b0 	call	0x1603a	; 0x1603a <EEPROMreadFloat(unsigned int)>
   1262e:	f3 01       	movw	r30, r6
   12630:	61 93       	st	Z+, r22
   12632:	71 93       	st	Z+, r23
   12634:	81 93       	st	Z+, r24
   12636:	91 93       	st	Z+, r25
   12638:	3f 01       	movw	r6, r30
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   1263a:	c8 01       	movw	r24, r16
   1263c:	08 96       	adiw	r24, 0x08	; 8
   1263e:	0e 94 1d b0 	call	0x1603a	; 0x1603a <EEPROMreadFloat(unsigned int)>
   12642:	d4 01       	movw	r26, r8
   12644:	6d 93       	st	X+, r22
   12646:	7d 93       	st	X+, r23
   12648:	8d 93       	st	X+, r24
   1264a:	9d 93       	st	X+, r25
   1264c:	4d 01       	movw	r8, r26
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   1264e:	c8 01       	movw	r24, r16
   12650:	0c 96       	adiw	r24, 0x0c	; 12
   12652:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   12656:	f7 01       	movw	r30, r14
   12658:	81 93       	st	Z+, r24
   1265a:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   1265c:	8c 2d       	mov	r24, r12
   1265e:	0e 94 98 35 	call	0x6b30	; 0x6b30 <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   12662:	c3 94       	inc	r12
   12664:	0f 5d       	subi	r16, 0xDF	; 223
   12666:	1f 4f       	sbci	r17, 0xFF	; 255
   12668:	f5 e0       	ldi	r31, 0x05	; 5
   1266a:	cf 12       	cpse	r12, r31
   1266c:	c6 cf       	rjmp	.-116    	; 0x125fa <setup+0x1706>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   1266e:	8c e5       	ldi	r24, 0x5C	; 92
   12670:	90 e0       	ldi	r25, 0x00	; 0
   12672:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4578
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
   12676:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2842
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   1267a:	8d e5       	ldi	r24, 0x5D	; 93
   1267c:	90 e0       	ldi	r25, 0x00	; 0
   1267e:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4579
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
   12682:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <default_show_temp>
   12686:	de cc       	rjmp	.-1604   	; 0x12044 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4595
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   12688:	6b e7       	ldi	r22, 0x7B	; 123
   1268a:	79 e5       	ldi	r23, 0x59	; 89
   1268c:	c1 01       	movw	r24, r2
   1268e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4596
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   12692:	ee 24       	eor	r14, r14
   12694:	ea 94       	dec	r14
   12696:	fe 2c       	mov	r15, r14
   12698:	00 ee       	ldi	r16, 0xE0	; 224
   1269a:	17 e0       	ldi	r17, 0x07	; 7
   1269c:	21 e0       	ldi	r18, 0x01	; 1
   1269e:	4e eb       	ldi	r20, 0xBE	; 190
   126a0:	50 e0       	ldi	r21, 0x00	; 0
   126a2:	60 ea       	ldi	r22, 0xA0	; 160
   126a4:	70 e0       	ldi	r23, 0x00	; 0
   126a6:	c1 01       	movw	r24, r2
   126a8:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   126ac:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   126b0:	8d 7f       	andi	r24, 0xFD	; 253
   126b2:	98 c0       	rjmp	.+304    	; 0x127e4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4602
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   126b4:	bf e0       	ldi	r27, 0x0F	; 15
   126b6:	ab 12       	cpse	r10, r27
   126b8:	c5 cc       	rjmp	.-1654   	; 0x12044 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4604
    {
      strcpy_P(str1, text_rtc_cas);
   126ba:	6e ea       	ldi	r22, 0xAE	; 174
   126bc:	78 e5       	ldi	r23, 0x58	; 88
   126be:	8d 2d       	mov	r24, r13
   126c0:	9b 2d       	mov	r25, r11
   126c2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4605
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   126c6:	ee 24       	eor	r14, r14
   126c8:	ea 94       	dec	r14
   126ca:	fe 2c       	mov	r15, r14
   126cc:	00 ee       	ldi	r16, 0xE0	; 224
   126ce:	17 e0       	ldi	r17, 0x07	; 7
   126d0:	21 e0       	ldi	r18, 0x01	; 1
   126d2:	48 ec       	ldi	r20, 0xC8	; 200
   126d4:	50 e0       	ldi	r21, 0x00	; 0
   126d6:	6e e1       	ldi	r22, 0x1E	; 30
   126d8:	70 e0       	ldi	r23, 0x00	; 0
   126da:	8d 2d       	mov	r24, r13
   126dc:	9b 2d       	mov	r25, r11
   126de:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4606
      if (rtc.isrunning())
   126e2:	0e 94 9f a8 	call	0x1513e	; 0x1513e <RTC_DS1307::isrunning() [clone .constprop.127]>
   126e6:	88 23       	and	r24, r24
   126e8:	99 f0       	breq	.+38     	; 0x12710 <setup+0x181c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4608
      {
        strcpy_P(str1, text_ok);
   126ea:	6b e7       	ldi	r22, 0x7B	; 123
   126ec:	79 e5       	ldi	r23, 0x59	; 89
   126ee:	8d 2d       	mov	r24, r13
   126f0:	9b 2d       	mov	r25, r11
   126f2:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4609
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   126f6:	21 e0       	ldi	r18, 0x01	; 1
   126f8:	48 ec       	ldi	r20, 0xC8	; 200
   126fa:	50 e0       	ldi	r21, 0x00	; 0
   126fc:	60 ea       	ldi	r22, 0xA0	; 160
   126fe:	70 e0       	ldi	r23, 0x00	; 0
   12700:	8d 2d       	mov	r24, r13
   12702:	9b 2d       	mov	r25, r11
   12704:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   12708:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   1270c:	8e 7f       	andi	r24, 0xFE	; 254
   1270e:	6a c0       	rjmp	.+212    	; 0x127e4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4614
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   12710:	66 e0       	ldi	r22, 0x06	; 6
   12712:	7a e5       	ldi	r23, 0x5A	; 90
   12714:	8d 2d       	mov	r24, r13
   12716:	9b 2d       	mov	r25, r11
   12718:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4615
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1271c:	ee 24       	eor	r14, r14
   1271e:	ea 94       	dec	r14
   12720:	fe 2c       	mov	r15, r14
   12722:	00 e0       	ldi	r16, 0x00	; 0
   12724:	18 ef       	ldi	r17, 0xF8	; 248
   12726:	21 e0       	ldi	r18, 0x01	; 1
   12728:	48 ec       	ldi	r20, 0xC8	; 200
   1272a:	50 e0       	ldi	r21, 0x00	; 0
   1272c:	60 ea       	ldi	r22, 0xA0	; 160
   1272e:	70 e0       	ldi	r23, 0x00	; 0
   12730:	8d 2d       	mov	r24, r13
   12732:	9b 2d       	mov	r25, r11
   12734:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   12738:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   1273c:	81 60       	ori	r24, 0x01	; 1
   1273e:	52 c0       	rjmp	.+164    	; 0x127e4 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
   12740:	25 e0       	ldi	r18, 0x05	; 5
   12742:	a2 16       	cp	r10, r18
   12744:	09 f4       	brne	.+2      	; 0x12748 <setup+0x1854>
   12746:	94 cb       	rjmp	.-2264   	; 0x11e70 <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4451
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   12748:	36 e0       	ldi	r19, 0x06	; 6
   1274a:	a3 16       	cp	r10, r19
   1274c:	09 f4       	brne	.+2      	; 0x12750 <setup+0x185c>
   1274e:	b3 cc       	rjmp	.-1690   	; 0x120b6 <setup+0x11c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4459
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   12750:	87 e0       	ldi	r24, 0x07	; 7
   12752:	a8 12       	cpse	r10, r24
   12754:	0a cd       	rjmp	.-1516   	; 0x1216a <setup+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
    {
      strcpy_P(str1, text_onewire_rozhrani);
   12756:	6e e3       	ldi	r22, 0x3E	; 62
   12758:	79 e5       	ldi	r23, 0x59	; 89
   1275a:	8d 2d       	mov	r24, r13
   1275c:	9b 2d       	mov	r25, r11
   1275e:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   12762:	ee 24       	eor	r14, r14
   12764:	ea 94       	dec	r14
   12766:	fe 2c       	mov	r15, r14
   12768:	00 ee       	ldi	r16, 0xE0	; 224
   1276a:	17 e0       	ldi	r17, 0x07	; 7
   1276c:	21 e0       	ldi	r18, 0x01	; 1
   1276e:	48 e7       	ldi	r20, 0x78	; 120
   12770:	50 e0       	ldi	r21, 0x00	; 0
   12772:	6e e1       	ldi	r22, 0x1E	; 30
   12774:	70 e0       	ldi	r23, 0x00	; 0
   12776:	8d 2d       	mov	r24, r13
   12778:	9b 2d       	mov	r25, r11
   1277a:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
      ds2482_address[0].i2c_addr = 0b0011000;
   1277e:	88 e1       	ldi	r24, 0x18	; 24
   12780:	80 93 d9 09 	sts	0x09D9, r24	; 0x8009d9 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464
      ds2482_address[0].HWwirenum = 0;
   12784:	10 92 da 09 	sts	0x09DA, r1	; 0x8009da <ds2482_address+0x1>
   12788:	ed e8       	ldi	r30, 0x8D	; 141
   1278a:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   1278c:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
        status_tds18s20[idx].period_now = 0;
   1278e:	14 8e       	std	Z+28, r1	; 0x1c
   12790:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   12792:	bb e0       	ldi	r27, 0x0B	; 11
   12794:	e1 34       	cpi	r30, 0x41	; 65
   12796:	fb 07       	cpc	r31, r27
   12798:	c9 f7       	brne	.-14     	; 0x1278c <setup+0x1898>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1279a:	4a e0       	ldi	r20, 0x0A	; 10
   1279c:	be 01       	movw	r22, r28
   1279e:	6e 50       	subi	r22, 0x0E	; 14
   127a0:	7f 4f       	sbci	r23, 0xFF	; 255
   127a2:	88 e1       	ldi	r24, 0x18	; 24
   127a4:	90 e0       	ldi	r25, 0x00	; 0
   127a6:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4472
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   127aa:	80 91 d9 09 	lds	r24, 0x09D9	; 0x8009d9 <ds2482_address>
   127ae:	0e 94 b6 a8 	call	0x1516c	; 0x1516c <ds2482reset(unsigned char)>
   127b2:	81 11       	cpse	r24, r1
   127b4:	c2 cc       	rjmp	.-1660   	; 0x1213a <setup+0x1246>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
      {
        strcpy_P(str1, text_ok);
   127b6:	6b e7       	ldi	r22, 0x7B	; 123
   127b8:	79 e5       	ldi	r23, 0x59	; 89
   127ba:	8d 2d       	mov	r24, r13
   127bc:	9b 2d       	mov	r25, r11
   127be:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   127c2:	ee 24       	eor	r14, r14
   127c4:	ea 94       	dec	r14
   127c6:	fe 2c       	mov	r15, r14
   127c8:	00 ee       	ldi	r16, 0xE0	; 224
   127ca:	17 e0       	ldi	r17, 0x07	; 7
   127cc:	21 e0       	ldi	r18, 0x01	; 1
   127ce:	48 e7       	ldi	r20, 0x78	; 120
   127d0:	50 e0       	ldi	r21, 0x00	; 0
   127d2:	60 ea       	ldi	r22, 0xA0	; 160
   127d4:	70 e0       	ldi	r23, 0x00	; 0
   127d6:	8d 2d       	mov	r24, r13
   127d8:	9b 2d       	mov	r25, r11
   127da:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   127de:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
   127e2:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   127e4:	80 93 41 0b 	sts	0x0B41, r24	; 0x800b41 <selftest_data>
   127e8:	2d cc       	rjmp	.-1958   	; 0x12044 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4517
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   127ea:	9a e0       	ldi	r25, 0x0A	; 10
   127ec:	a9 12       	cpse	r10, r25
   127ee:	08 ce       	rjmp	.-1008   	; 0x12400 <setup+0x150c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   127f0:	61 e1       	ldi	r22, 0x11	; 17
   127f2:	79 e5       	ldi	r23, 0x59	; 89
   127f4:	c1 01       	movw	r24, r2
   127f6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   127fa:	ee 24       	eor	r14, r14
   127fc:	ea 94       	dec	r14
   127fe:	fe 2c       	mov	r15, r14
   12800:	00 ee       	ldi	r16, 0xE0	; 224
   12802:	17 e0       	ldi	r17, 0x07	; 7
   12804:	21 e0       	ldi	r18, 0x01	; 1
   12806:	46 e9       	ldi	r20, 0x96	; 150
   12808:	50 e0       	ldi	r21, 0x00	; 0
   1280a:	6e e1       	ldi	r22, 0x1E	; 30
   1280c:	70 e0       	ldi	r23, 0x00	; 0
   1280e:	c1 01       	movw	r24, r2
   12810:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4521
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   12814:	80 91 cc 0c 	lds	r24, 0x0CCC	; 0x800ccc <device+0x24>
   12818:	90 91 cd 0c 	lds	r25, 0x0CCD	; 0x800ccd <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   1281c:	20 91 cb 0c 	lds	r18, 0x0CCB	; 0x800ccb <device+0x23>
   12820:	30 91 ca 0c 	lds	r19, 0x0CCA	; 0x800cca <device+0x22>
   12824:	40 91 c9 0c 	lds	r20, 0x0CC9	; 0x800cc9 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   12828:	50 91 c8 0c 	lds	r21, 0x0CC8	; 0x800cc8 <device+0x20>
   1282c:	50 93 ac 10 	sts	0x10AC, r21	; 0x8010ac <mqtt_client+0x211>
   12830:	40 93 ad 10 	sts	0x10AD, r20	; 0x8010ad <mqtt_client+0x212>
   12834:	30 93 ae 10 	sts	0x10AE, r19	; 0x8010ae <mqtt_client+0x213>
   12838:	20 93 af 10 	sts	0x10AF, r18	; 0x8010af <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   1283c:	90 93 b3 10 	sts	0x10B3, r25	; 0x8010b3 <mqtt_client+0x218>
   12840:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   12844:	10 92 b1 10 	sts	0x10B1, r1	; 0x8010b1 <mqtt_client+0x216>
   12848:	10 92 b0 10 	sts	0x10B0, r1	; 0x8010b0 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   1284c:	83 e7       	ldi	r24, 0x73	; 115
   1284e:	98 e7       	ldi	r25, 0x78	; 120
   12850:	90 93 a9 10 	sts	0x10A9, r25	; 0x8010a9 <mqtt_client+0x20e>
   12854:	80 93 a8 10 	sts	0x10A8, r24	; 0x8010a8 <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(const char* header)
{
  header_out = header;
   12858:	82 e0       	ldi	r24, 0x02	; 2
   1285a:	99 e5       	ldi	r25, 0x59	; 89
   1285c:	90 93 dc 0b 	sts	0x0BDC, r25	; 0x800bdc <header_out+0x1>
   12860:	80 93 db 0b 	sts	0x0BDB, r24	; 0x800bdb <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   12864:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   12868:	2b 01       	movw	r4, r22
   1286a:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
      while ((millis() - milis) < 3000 )
   1286c:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   12870:	64 19       	sub	r22, r4
   12872:	75 09       	sbc	r23, r5
   12874:	86 09       	sbc	r24, r6
   12876:	97 09       	sbc	r25, r7
   12878:	68 3b       	cpi	r22, 0xB8	; 184
   1287a:	7b 40       	sbci	r23, 0x0B	; 11
   1287c:	81 05       	cpc	r24, r1
   1287e:	91 05       	cpc	r25, r1
   12880:	58 f4       	brcc	.+22     	; 0x12898 <setup+0x19a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
      {
        mqtt_client.loop();
   12882:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <PubSubClient::loop() [clone .constprop.104]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4528
        if (mqtt_reconnect() == 0)
   12886:	0e 94 2a 86 	call	0x10c54	; 0x10c54 <mqtt_reconnect()>
   1288a:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <selftest_data>
   1288e:	81 11       	cpse	r24, r1
   12890:	a7 cd       	rjmp	.-1202   	; 0x123e0 <setup+0x14ec>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   12892:	9f 7d       	andi	r25, 0xDF	; 223
   12894:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   12898:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   1289c:	85 ff       	sbrs	r24, 5
   1289e:	a4 cd       	rjmp	.-1208   	; 0x123e8 <setup+0x14f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4539
      {
        strcpy_P(str1, text_err);
   128a0:	66 e0       	ldi	r22, 0x06	; 6
   128a2:	7a e5       	ldi	r23, 0x5A	; 90
   128a4:	8d 2d       	mov	r24, r13
   128a6:	9b 2d       	mov	r25, r11
   128a8:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4540
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   128ac:	ee 24       	eor	r14, r14
   128ae:	ea 94       	dec	r14
   128b0:	fe 2c       	mov	r15, r14
   128b2:	00 e0       	ldi	r16, 0x00	; 0
   128b4:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   128b6:	21 e0       	ldi	r18, 0x01	; 1
   128b8:	46 e9       	ldi	r20, 0x96	; 150
   128ba:	50 e0       	ldi	r21, 0x00	; 0
   128bc:	f3 cc       	rjmp	.-1562   	; 0x122a4 <setup+0x13b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   128be:	ad e0       	ldi	r26, 0x0D	; 13
   128c0:	aa 12       	cpse	r10, r26
   128c2:	0c 94 22 8b 	jmp	0x11644	; 0x11644 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4567
    {
      strcpy_P(str1, text_pid_regulator);
   128c6:	65 ed       	ldi	r22, 0xD5	; 213
   128c8:	78 e5       	ldi	r23, 0x58	; 88
   128ca:	8d 2d       	mov	r24, r13
   128cc:	9b 2d       	mov	r25, r11
   128ce:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4568
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   128d2:	ee 24       	eor	r14, r14
   128d4:	ea 94       	dec	r14
   128d6:	fe 2c       	mov	r15, r14
   128d8:	00 ee       	ldi	r16, 0xE0	; 224
   128da:	17 e0       	ldi	r17, 0x07	; 7
   128dc:	21 e0       	ldi	r18, 0x01	; 1
   128de:	44 eb       	ldi	r20, 0xB4	; 180
   128e0:	50 e0       	ldi	r21, 0x00	; 0
   128e2:	6e e1       	ldi	r22, 0x1E	; 30
   128e4:	70 e0       	ldi	r23, 0x00	; 0
   128e6:	8d 2d       	mov	r24, r13
   128e8:	9b 2d       	mov	r25, r11
   128ea:	0e 94 fd 9b 	call	0x137fa	; 0x137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>
   128ee:	a9 e8       	ldi	r26, 0x89	; 137
   128f0:	b8 e0       	ldi	r27, 0x08	; 8
   128f2:	c0 5c       	subi	r28, 0xC0	; 192
   128f4:	de 4f       	sbci	r29, 0xFE	; 254
   128f6:	b9 83       	std	Y+1, r27	; 0x01
   128f8:	a8 83       	st	Y, r26
   128fa:	c0 54       	subi	r28, 0x40	; 64
   128fc:	d1 40       	sbci	r29, 0x01	; 1
   128fe:	e5 e7       	ldi	r30, 0x75	; 117
   12900:	f8 e0       	ldi	r31, 0x08	; 8
   12902:	ce 5b       	subi	r28, 0xBE	; 190
   12904:	de 4f       	sbci	r29, 0xFE	; 254
   12906:	f9 83       	std	Y+1, r31	; 0x01
   12908:	e8 83       	st	Y, r30
   1290a:	c2 54       	subi	r28, 0x42	; 66
   1290c:	d1 40       	sbci	r29, 0x01	; 1
   1290e:	fd e9       	ldi	r31, 0x9D	; 157
   12910:	ef 2e       	mov	r14, r31
   12912:	f8 e0       	ldi	r31, 0x08	; 8
   12914:	ff 2e       	mov	r15, r31
   12916:	91 2c       	mov	r9, r1
   12918:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
   1291a:	cc 24       	eor	r12, r12
   1291c:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1291e:	8c e3       	ldi	r24, 0x3C	; 60
   12920:	90 e0       	ldi	r25, 0x00	; 0
   12922:	0e 94 40 c8 	call	0x19080	; 0x19080 <malloc>
   12926:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   12928:	c0 5c       	subi	r28, 0xC0	; 192
   1292a:	de 4f       	sbci	r29, 0xFE	; 254
   1292c:	e8 81       	ld	r30, Y
   1292e:	f9 81       	ldd	r31, Y+1	; 0x01
   12930:	c0 54       	subi	r28, 0x40	; 64
   12932:	d1 40       	sbci	r29, 0x01	; 1
   12934:	dc 01       	movw	r26, r24
   12936:	5f 96       	adiw	r26, 0x1f	; 31
   12938:	fc 93       	st	X, r31
   1293a:	ee 93       	st	-X, r30
   1293c:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   1293e:	ce 5b       	subi	r28, 0xBE	; 190
   12940:	de 4f       	sbci	r29, 0xFE	; 254
   12942:	28 81       	ld	r18, Y
   12944:	39 81       	ldd	r19, Y+1	; 0x01
   12946:	c2 54       	subi	r28, 0x42	; 66
   12948:	d1 40       	sbci	r29, 0x01	; 1
   1294a:	5d 96       	adiw	r26, 0x1d	; 29
   1294c:	3c 93       	st	X, r19
   1294e:	2e 93       	st	-X, r18
   12950:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   12952:	91 96       	adiw	r26, 0x21	; 33
   12954:	fc 92       	st	X, r15
   12956:	ee 92       	st	-X, r14
   12958:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   1295a:	da 96       	adiw	r26, 0x3a	; 58
   1295c:	1c 92       	st	X, r1
   1295e:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   12960:	d2 96       	adiw	r26, 0x32	; 50
   12962:	1d 92       	st	X+, r1
   12964:	1d 92       	st	X+, r1
   12966:	1d 92       	st	X+, r1
   12968:	1c 92       	st	X, r1
   1296a:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1296c:	80 e0       	ldi	r24, 0x00	; 0
   1296e:	90 e0       	ldi	r25, 0x00	; 0
   12970:	af e7       	ldi	r26, 0x7F	; 127
   12972:	b3 e4       	ldi	r27, 0x43	; 67
   12974:	f8 01       	movw	r30, r16
   12976:	86 ab       	std	Z+54, r24	; 0x36
   12978:	97 ab       	std	Z+55, r25	; 0x37
   1297a:	a0 af       	std	Z+56, r26	; 0x38
   1297c:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   1297e:	84 e6       	ldi	r24, 0x64	; 100
   12980:	90 e0       	ldi	r25, 0x00	; 0
   12982:	a0 e0       	ldi	r26, 0x00	; 0
   12984:	b0 e0       	ldi	r27, 0x00	; 0
   12986:	86 a7       	std	Z+46, r24	; 0x2e
   12988:	97 a7       	std	Z+47, r25	; 0x2f
   1298a:	a0 ab       	std	Z+48, r26	; 0x30
   1298c:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
   1298e:	11 8e       	std	Z+25, r1	; 0x19
   12990:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   12992:	21 e0       	ldi	r18, 0x01	; 1
   12994:	30 e0       	ldi	r19, 0x00	; 0
   12996:	33 8f       	std	Z+27, r19	; 0x1b
   12998:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   1299a:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   1299c:	80 e0       	ldi	r24, 0x00	; 0
   1299e:	90 e0       	ldi	r25, 0x00	; 0
   129a0:	a0 e0       	ldi	r26, 0x00	; 0
   129a2:	b0 e4       	ldi	r27, 0x40	; 64
   129a4:	80 83       	st	Z, r24
   129a6:	91 83       	std	Z+1, r25	; 0x01
   129a8:	a2 83       	std	Z+2, r26	; 0x02
   129aa:	b3 83       	std	Z+3, r27	; 0x03
   129ac:	80 e0       	ldi	r24, 0x00	; 0
   129ae:	90 e0       	ldi	r25, 0x00	; 0
   129b0:	a0 ea       	ldi	r26, 0xA0	; 160
   129b2:	b0 e4       	ldi	r27, 0x40	; 64
   129b4:	84 83       	std	Z+4, r24	; 0x04
   129b6:	95 83       	std	Z+5, r25	; 0x05
   129b8:	a6 83       	std	Z+6, r26	; 0x06
   129ba:	b7 83       	std	Z+7, r27	; 0x07
   129bc:	80 e0       	ldi	r24, 0x00	; 0
   129be:	90 e0       	ldi	r25, 0x00	; 0
   129c0:	a0 e8       	ldi	r26, 0x80	; 128
   129c2:	bf e3       	ldi	r27, 0x3F	; 63
   129c4:	80 87       	std	Z+8, r24	; 0x08
   129c6:	91 87       	std	Z+9, r25	; 0x09
   129c8:	a2 87       	std	Z+10, r26	; 0x0a
   129ca:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
   129cc:	80 e0       	ldi	r24, 0x00	; 0
   129ce:	90 e0       	ldi	r25, 0x00	; 0
   129d0:	a0 e0       	ldi	r26, 0x00	; 0
   129d2:	b0 e4       	ldi	r27, 0x40	; 64
   129d4:	84 87       	std	Z+12, r24	; 0x0c
   129d6:	95 87       	std	Z+13, r25	; 0x0d
   129d8:	a6 87       	std	Z+14, r26	; 0x0e
   129da:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   129dc:	80 e0       	ldi	r24, 0x00	; 0
   129de:	90 e0       	ldi	r25, 0x00	; 0
   129e0:	a0 e0       	ldi	r26, 0x00	; 0
   129e2:	bf e3       	ldi	r27, 0x3F	; 63
   129e4:	80 8b       	std	Z+16, r24	; 0x10
   129e6:	91 8b       	std	Z+17, r25	; 0x11
   129e8:	a2 8b       	std	Z+18, r26	; 0x12
   129ea:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   129ec:	80 e0       	ldi	r24, 0x00	; 0
   129ee:	90 e0       	ldi	r25, 0x00	; 0
   129f0:	a0 e2       	ldi	r26, 0x20	; 32
   129f2:	b1 e4       	ldi	r27, 0x41	; 65
   129f4:	84 8b       	std	Z+20, r24	; 0x14
   129f6:	95 8b       	std	Z+21, r25	; 0x15
   129f8:	a6 8b       	std	Z+22, r26	; 0x16
   129fa:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   129fc:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   12a00:	28 ee       	ldi	r18, 0xE8	; 232
   12a02:	33 e0       	ldi	r19, 0x03	; 3
   12a04:	40 e0       	ldi	r20, 0x00	; 0
   12a06:	50 e0       	ldi	r21, 0x00	; 0
   12a08:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   12a0c:	f8 01       	movw	r30, r16
   12a0e:	86 a5       	ldd	r24, Z+46	; 0x2e
   12a10:	97 a5       	ldd	r25, Z+47	; 0x2f
   12a12:	a0 a9       	ldd	r26, Z+48	; 0x30
   12a14:	b1 a9       	ldd	r27, Z+49	; 0x31
   12a16:	28 1b       	sub	r18, r24
   12a18:	39 0b       	sbc	r19, r25
   12a1a:	4a 0b       	sbc	r20, r26
   12a1c:	5b 0b       	sbc	r21, r27
   12a1e:	d8 01       	movw	r26, r16
   12a20:	22 a3       	std	Z+34, r18	; 0x22
   12a22:	33 a3       	std	Z+35, r19	; 0x23
   12a24:	44 a3       	std	Z+36, r20	; 0x24
   12a26:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   12a28:	e0 91 a6 0c 	lds	r30, 0x0CA6	; 0x800ca6 <array_pids>
   12a2c:	f0 91 a7 0c 	lds	r31, 0x0CA7	; 0x800ca7 <array_pids+0x1>
   12a30:	e8 0d       	add	r30, r8
   12a32:	f9 1d       	adc	r31, r9
   12a34:	11 83       	std	Z+1, r17	; 0x01
   12a36:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   12a38:	da 96       	adiw	r26, 0x3a	; 58
   12a3a:	8c 91       	ld	r24, X
   12a3c:	da 97       	sbiw	r26, 0x3a	; 58
   12a3e:	81 11       	cpse	r24, r1
   12a40:	1a cd       	rjmp	.-1484   	; 0x12476 <setup+0x1582>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   12a42:	5e 96       	adiw	r26, 0x1e	; 30
   12a44:	ed 91       	ld	r30, X+
   12a46:	fc 91       	ld	r31, X
   12a48:	40 80       	ld	r4, Z
   12a4a:	51 80       	ldd	r5, Z+1	; 0x01
   12a4c:	62 80       	ldd	r6, Z+2	; 0x02
   12a4e:	73 80       	ldd	r7, Z+3	; 0x03
   12a50:	f8 01       	movw	r30, r16
   12a52:	46 a2       	std	Z+38, r4	; 0x26
   12a54:	57 a2       	std	Z+39, r5	; 0x27
   12a56:	60 a6       	std	Z+40, r6	; 0x28
   12a58:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   12a5a:	04 8c       	ldd	r0, Z+28	; 0x1c
   12a5c:	f5 8d       	ldd	r31, Z+29	; 0x1d
   12a5e:	e0 2d       	mov	r30, r0
   12a60:	80 81       	ld	r24, Z
   12a62:	91 81       	ldd	r25, Z+1	; 0x01
   12a64:	a2 81       	ldd	r26, Z+2	; 0x02
   12a66:	b3 81       	ldd	r27, Z+3	; 0x03
   12a68:	f8 01       	movw	r30, r16
   12a6a:	82 a7       	std	Z+42, r24	; 0x2a
   12a6c:	93 a7       	std	Z+43, r25	; 0x2b
   12a6e:	a4 a7       	std	Z+44, r26	; 0x2c
   12a70:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   12a72:	86 a9       	ldd	r24, Z+54	; 0x36
   12a74:	97 a9       	ldd	r25, Z+55	; 0x37
   12a76:	a0 ad       	ldd	r26, Z+56	; 0x38
   12a78:	b1 ad       	ldd	r27, Z+57	; 0x39
   12a7a:	c8 5c       	subi	r28, 0xC8	; 200
   12a7c:	de 4f       	sbci	r29, 0xFE	; 254
   12a7e:	88 83       	st	Y, r24
   12a80:	99 83       	std	Y+1, r25	; 0x01
   12a82:	aa 83       	std	Y+2, r26	; 0x02
   12a84:	bb 83       	std	Y+3, r27	; 0x03
   12a86:	c8 53       	subi	r28, 0x38	; 56
   12a88:	d1 40       	sbci	r29, 0x01	; 1
   12a8a:	9c 01       	movw	r18, r24
   12a8c:	ad 01       	movw	r20, r26
   12a8e:	c3 01       	movw	r24, r6
   12a90:	b2 01       	movw	r22, r4
   12a92:	0e 94 53 cf 	call	0x19ea6	; 0x19ea6 <__gesf2>
   12a96:	18 16       	cp	r1, r24
   12a98:	0c f0       	brlt	.+2      	; 0x12a9c <setup+0x1ba8>
   12a9a:	d6 cc       	rjmp	.-1620   	; 0x12448 <setup+0x1554>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   12a9c:	c8 5c       	subi	r28, 0xC8	; 200
   12a9e:	de 4f       	sbci	r29, 0xFE	; 254
   12aa0:	88 81       	ld	r24, Y
   12aa2:	99 81       	ldd	r25, Y+1	; 0x01
   12aa4:	aa 81       	ldd	r26, Y+2	; 0x02
   12aa6:	bb 81       	ldd	r27, Y+3	; 0x03
   12aa8:	c8 53       	subi	r28, 0x38	; 56
   12aaa:	d1 40       	sbci	r29, 0x01	; 1
   12aac:	f8 01       	movw	r30, r16
   12aae:	86 a3       	std	Z+38, r24	; 0x26
   12ab0:	97 a3       	std	Z+39, r25	; 0x27
   12ab2:	a0 a7       	std	Z+40, r26	; 0x28
   12ab4:	b1 a7       	std	Z+41, r27	; 0x29
   12ab6:	df cc       	rjmp	.-1602   	; 0x12476 <setup+0x1582>

00012ab8 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
  display_element_set_string(name, 8, args2, &menu_tds_save_name);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
   12ab8:	1f 93       	push	r17
   12aba:	cf 93       	push	r28
   12abc:	df 93       	push	r29
   12abe:	cd b7       	in	r28, 0x3d	; 61
   12ac0:	de b7       	in	r29, 0x3e	; 62
   12ac2:	63 97       	sbiw	r28, 0x13	; 19
   12ac4:	0f b6       	in	r0, 0x3f	; 63
   12ac6:	f8 94       	cli
   12ac8:	de bf       	out	0x3e, r29	; 62
   12aca:	0f be       	out	0x3f, r0	; 63
   12acc:	cd bf       	out	0x3d, r28	; 61
   12ace:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
   12ad0:	ae 01       	movw	r20, r28
   12ad2:	4f 5f       	subi	r20, 0xFF	; 255
   12ad4:	5f 4f       	sbci	r21, 0xFF	; 255
   12ad6:	be 01       	movw	r22, r28
   12ad8:	6d 5e       	subi	r22, 0xED	; 237
   12ada:	7f 4f       	sbci	r23, 0xFF	; 255
   12adc:	81 2f       	mov	r24, r17
   12ade:	0e 94 e7 73 	call	0xe7ce	; 0xe7ce <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
   12ae2:	70 e0       	ldi	r23, 0x00	; 0
   12ae4:	60 e0       	ldi	r22, 0x00	; 0
   12ae6:	87 e6       	ldi	r24, 0x67	; 103
   12ae8:	90 e0       	ldi	r25, 0x00	; 0
   12aea:	0e 94 ea 9b 	call	0x137d4	; 0x137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2294
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function)
{
  strcpy(dialog_set_string, str);
   12aee:	be 01       	movw	r22, r28
   12af0:	6f 5f       	subi	r22, 0xFF	; 255
   12af2:	7f 4f       	sbci	r23, 0xFF	; 255
   12af4:	86 e3       	ldi	r24, 0x36	; 54
   12af6:	99 e0       	ldi	r25, 0x09	; 9
   12af8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295
  dialog_set_string_max_length = max_length;
   12afc:	82 e1       	ldi	r24, 0x12	; 18
   12afe:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
  dialog_set_string_args = idx;
   12b02:	10 93 34 09 	sts	0x0934, r17	; 0x800934 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2297
  dialog_save_string_function = save_function;
   12b06:	85 ed       	ldi	r24, 0xD5	; 213
   12b08:	97 e7       	ldi	r25, 0x77	; 119
   12b0a:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <dialog_save_string_function+0x1>
   12b0e:	80 93 32 09 	sts	0x0932, r24	; 0x800932 <dialog_save_string_function>
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, args3);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name);
  //dialog_save_variable_function = ;
}
   12b12:	63 96       	adiw	r28, 0x13	; 19
   12b14:	0f b6       	in	r0, 0x3f	; 63
   12b16:	f8 94       	cli
   12b18:	de bf       	out	0x3e, r29	; 62
   12b1a:	0f be       	out	0x3f, r0	; 63
   12b1c:	cd bf       	out	0x3d, r28	; 61
   12b1e:	df 91       	pop	r29
   12b20:	cf 91       	pop	r28
   12b22:	1f 91       	pop	r17
   12b24:	08 95       	ret

00012b26 <twi_readFrom.part.0.constprop.173>:
twi_readFrom.part.0.constprop.173():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   12b26:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <twi_state>
   12b2a:	91 11       	cpse	r25, r1
   12b2c:	fc cf       	rjmp	.-8      	; 0x12b26 <twi_readFrom.part.0.constprop.173>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   12b2e:	91 e0       	ldi	r25, 0x01	; 1
   12b30:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   12b34:	90 93 b7 11 	sts	0x11B7, r25	; 0x8011b7 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   12b38:	2f ef       	ldi	r18, 0xFF	; 255
   12b3a:	20 93 b6 11 	sts	0x11B6, r18	; 0x8011b6 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   12b3e:	10 92 b5 11 	sts	0x11B5, r1	; 0x8011b5 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   12b42:	26 0f       	add	r18, r22
   12b44:	20 93 b4 11 	sts	0x11B4, r18	; 0x8011b4 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   12b48:	90 93 b3 11 	sts	0x11B3, r25	; 0x8011b3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   12b4c:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <twi_slarw>
   12b50:	88 0f       	add	r24, r24
   12b52:	89 2b       	or	r24, r25
   12b54:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   12b58:	80 91 b2 11 	lds	r24, 0x11B2	; 0x8011b2 <twi_inRepStart>
   12b5c:	81 30       	cpi	r24, 0x01	; 1
   12b5e:	f9 f4       	brne	.+62     	; 0x12b9e <twi_readFrom.part.0.constprop.173+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   12b60:	10 92 b2 11 	sts	0x11B2, r1	; 0x8011b2 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   12b64:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <twi_slarw>
   12b68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   12b6c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12b70:	83 fd       	sbrc	r24, 3
   12b72:	f8 cf       	rjmp	.-16     	; 0x12b64 <twi_readFrom.part.0.constprop.173+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   12b74:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   12b76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   12b7a:	80 91 b8 11 	lds	r24, 0x11B8	; 0x8011b8 <twi_state>
   12b7e:	81 30       	cpi	r24, 0x01	; 1
   12b80:	e1 f3       	breq	.-8      	; 0x12b7a <twi_readFrom.part.0.constprop.173+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   12b82:	80 91 b5 11 	lds	r24, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   12b86:	86 17       	cp	r24, r22
   12b88:	10 f4       	brcc	.+4      	; 0x12b8e <twi_readFrom.part.0.constprop.173+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   12b8a:	60 91 b5 11 	lds	r22, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   12b8e:	a2 e9       	ldi	r26, 0x92	; 146
   12b90:	b1 e1       	ldi	r27, 0x11	; 17
   12b92:	e2 e7       	ldi	r30, 0x72	; 114
   12b94:	f1 e1       	ldi	r31, 0x11	; 17
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   12b96:	80 e0       	ldi	r24, 0x00	; 0
   12b98:	86 13       	cpse	r24, r22
   12b9a:	03 c0       	rjmp	.+6      	; 0x12ba2 <twi_readFrom.part.0.constprop.173+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   12b9c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   12b9e:	85 ee       	ldi	r24, 0xE5	; 229
   12ba0:	ea cf       	rjmp	.-44     	; 0x12b76 <twi_readFrom.part.0.constprop.173+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   12ba2:	9d 91       	ld	r25, X+
   12ba4:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   12ba6:	8f 5f       	subi	r24, 0xFF	; 255
   12ba8:	f7 cf       	rjmp	.-18     	; 0x12b98 <twi_readFrom.part.0.constprop.173+0x72>

00012baa <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   12baa:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   12bae:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   12bb2:	2f ef       	ldi	r18, 0xFF	; 255
   12bb4:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   12bb6:	98 17       	cp	r25, r24
   12bb8:	48 f4       	brcc	.+18     	; 0x12bcc <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   12bba:	e9 2f       	mov	r30, r25
   12bbc:	f0 e0       	ldi	r31, 0x00	; 0
   12bbe:	ee 58       	subi	r30, 0x8E	; 142
   12bc0:	fe 4e       	sbci	r31, 0xEE	; 238
   12bc2:	20 81       	ld	r18, Z
   12bc4:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   12bc6:	9f 5f       	subi	r25, 0xFF	; 255
   12bc8:	90 93 6d 11 	sts	0x116D, r25	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   12bcc:	c9 01       	movw	r24, r18
   12bce:	08 95       	ret

00012bd0 <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   12bd0:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   12bd4:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   12bd8:	2f ef       	ldi	r18, 0xFF	; 255
   12bda:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   12bdc:	98 17       	cp	r25, r24
   12bde:	48 f4       	brcc	.+18     	; 0x12bf2 <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   12be0:	e9 2f       	mov	r30, r25
   12be2:	f0 e0       	ldi	r31, 0x00	; 0
   12be4:	ee 58       	subi	r30, 0x8E	; 142
   12be6:	fe 4e       	sbci	r31, 0xEE	; 238
   12be8:	20 81       	ld	r18, Z
   12bea:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   12bec:	9f 5f       	subi	r25, 0xFF	; 255
   12bee:	90 93 6d 11 	sts	0x116D, r25	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   12bf2:	c9 01       	movw	r24, r18
   12bf4:	08 95       	ret

00012bf6 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   12bf6:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   12bfa:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:239
}
   12bfe:	89 1b       	sub	r24, r25
   12c00:	99 0b       	sbc	r25, r25
   12c02:	08 95       	ret

00012c04 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
   12c04:	08 95       	ret

00012c06 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
   12c06:	08 95       	ret

00012c08 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   12c08:	fc 01       	movw	r30, r24
   12c0a:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   12c0c:	44 8d       	ldd	r20, Z+28	; 0x1c
   12c0e:	25 2f       	mov	r18, r21
   12c10:	30 e0       	ldi	r19, 0x00	; 0
   12c12:	84 2f       	mov	r24, r20
   12c14:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   12c16:	82 1b       	sub	r24, r18
   12c18:	93 0b       	sbc	r25, r19
   12c1a:	54 17       	cp	r21, r20
   12c1c:	10 f0       	brcs	.+4      	; 0x12c22 <HardwareSerial::availableForWrite()+0x1a>
   12c1e:	cf 96       	adiw	r24, 0x3f	; 63
   12c20:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   12c22:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   12c24:	08 95       	ret

00012c26 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   12c26:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   12c28:	91 8d       	ldd	r25, Z+25	; 0x19
   12c2a:	82 8d       	ldd	r24, Z+26	; 0x1a
   12c2c:	98 17       	cp	r25, r24
   12c2e:	61 f0       	breq	.+24     	; 0x12c48 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   12c30:	a2 8d       	ldd	r26, Z+26	; 0x1a
   12c32:	ae 0f       	add	r26, r30
   12c34:	bf 2f       	mov	r27, r31
   12c36:	b1 1d       	adc	r27, r1
   12c38:	5d 96       	adiw	r26, 0x1d	; 29
   12c3a:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   12c3c:	92 8d       	ldd	r25, Z+26	; 0x1a
   12c3e:	9f 5f       	subi	r25, 0xFF	; 255
   12c40:	9f 73       	andi	r25, 0x3F	; 63
   12c42:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   12c44:	90 e0       	ldi	r25, 0x00	; 0
   12c46:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   12c48:	8f ef       	ldi	r24, 0xFF	; 255
   12c4a:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   12c4c:	08 95       	ret

00012c4e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   12c4e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   12c50:	91 8d       	ldd	r25, Z+25	; 0x19
   12c52:	82 8d       	ldd	r24, Z+26	; 0x1a
   12c54:	98 17       	cp	r25, r24
   12c56:	31 f0       	breq	.+12     	; 0x12c64 <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   12c58:	82 8d       	ldd	r24, Z+26	; 0x1a
   12c5a:	e8 0f       	add	r30, r24
   12c5c:	f1 1d       	adc	r31, r1
   12c5e:	85 8d       	ldd	r24, Z+29	; 0x1d
   12c60:	90 e0       	ldi	r25, 0x00	; 0
   12c62:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   12c64:	8f ef       	ldi	r24, 0xFF	; 255
   12c66:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   12c68:	08 95       	ret

00012c6a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   12c6a:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   12c6c:	91 8d       	ldd	r25, Z+25	; 0x19
   12c6e:	22 8d       	ldd	r18, Z+26	; 0x1a
   12c70:	89 2f       	mov	r24, r25
   12c72:	90 e0       	ldi	r25, 0x00	; 0
   12c74:	80 5c       	subi	r24, 0xC0	; 192
   12c76:	9f 4f       	sbci	r25, 0xFF	; 255
   12c78:	82 1b       	sub	r24, r18
   12c7a:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   12c7c:	8f 73       	andi	r24, 0x3F	; 63
   12c7e:	99 27       	eor	r25, r25
   12c80:	08 95       	ret

00012c82 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   12c82:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   12c84:	a4 8d       	ldd	r26, Z+28	; 0x1c
   12c86:	a8 0f       	add	r26, r24
   12c88:	b9 2f       	mov	r27, r25
   12c8a:	b1 1d       	adc	r27, r1
   12c8c:	a3 5a       	subi	r26, 0xA3	; 163
   12c8e:	bf 4f       	sbci	r27, 0xFF	; 255
   12c90:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   12c92:	84 8d       	ldd	r24, Z+28	; 0x1c
   12c94:	90 e0       	ldi	r25, 0x00	; 0
   12c96:	01 96       	adiw	r24, 0x01	; 1
   12c98:	8f 73       	andi	r24, 0x3F	; 63
   12c9a:	99 27       	eor	r25, r25
   12c9c:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   12c9e:	a6 89       	ldd	r26, Z+22	; 0x16
   12ca0:	b7 89       	ldd	r27, Z+23	; 0x17
   12ca2:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   12ca4:	a0 89       	ldd	r26, Z+16	; 0x10
   12ca6:	b1 89       	ldd	r27, Z+17	; 0x11
   12ca8:	8c 91       	ld	r24, X
   12caa:	80 64       	ori	r24, 0x40	; 64
   12cac:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   12cae:	93 8d       	ldd	r25, Z+27	; 0x1b
   12cb0:	84 8d       	ldd	r24, Z+28	; 0x1c
   12cb2:	98 13       	cpse	r25, r24
   12cb4:	06 c0       	rjmp	.+12     	; 0x12cc2 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   12cb6:	02 88       	ldd	r0, Z+18	; 0x12
   12cb8:	f3 89       	ldd	r31, Z+19	; 0x13
   12cba:	e0 2d       	mov	r30, r0
   12cbc:	80 81       	ld	r24, Z
   12cbe:	8f 7d       	andi	r24, 0xDF	; 223
   12cc0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   12cc2:	08 95       	ret

00012cc4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   12cc4:	ef 92       	push	r14
   12cc6:	ff 92       	push	r15
   12cc8:	0f 93       	push	r16
   12cca:	1f 93       	push	r17
   12ccc:	cf 93       	push	r28
   12cce:	df 93       	push	r29
   12cd0:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   12cd2:	81 e0       	ldi	r24, 0x01	; 1
   12cd4:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   12cd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
   12cd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   12cda:	98 13       	cpse	r25, r24
   12cdc:	16 c0       	rjmp	.+44     	; 0x12d0a <HardwareSerial::write(unsigned char)+0x46>
   12cde:	e8 89       	ldd	r30, Y+16	; 0x10
   12ce0:	f9 89       	ldd	r31, Y+17	; 0x11
   12ce2:	80 81       	ld	r24, Z
   12ce4:	85 ff       	sbrs	r24, 5
   12ce6:	11 c0       	rjmp	.+34     	; 0x12d0a <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   12ce8:	ee 89       	ldd	r30, Y+22	; 0x16
   12cea:	ff 89       	ldd	r31, Y+23	; 0x17
   12cec:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   12cee:	e8 89       	ldd	r30, Y+16	; 0x10
   12cf0:	f9 89       	ldd	r31, Y+17	; 0x11
   12cf2:	80 81       	ld	r24, Z
   12cf4:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   12cf6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   12cf8:	81 e0       	ldi	r24, 0x01	; 1
   12cfa:	90 e0       	ldi	r25, 0x00	; 0
   12cfc:	df 91       	pop	r29
   12cfe:	cf 91       	pop	r28
   12d00:	1f 91       	pop	r17
   12d02:	0f 91       	pop	r16
   12d04:	ff 90       	pop	r15
   12d06:	ef 90       	pop	r14
   12d08:	08 95       	ret
   12d0a:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   12d0c:	0b 8d       	ldd	r16, Y+27	; 0x1b
   12d0e:	10 e0       	ldi	r17, 0x00	; 0
   12d10:	0f 5f       	subi	r16, 0xFF	; 255
   12d12:	1f 4f       	sbci	r17, 0xFF	; 255
   12d14:	0f 73       	andi	r16, 0x3F	; 63
   12d16:	11 27       	eor	r17, r17
   12d18:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   12d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   12d1c:	8e 11       	cpse	r24, r14
   12d1e:	0c c0       	rjmp	.+24     	; 0x12d38 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   12d20:	0f b6       	in	r0, 0x3f	; 63
   12d22:	07 fc       	sbrc	r0, 7
   12d24:	fa cf       	rjmp	.-12     	; 0x12d1a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   12d26:	e8 89       	ldd	r30, Y+16	; 0x10
   12d28:	f9 89       	ldd	r31, Y+17	; 0x11
   12d2a:	80 81       	ld	r24, Z
   12d2c:	85 ff       	sbrs	r24, 5
   12d2e:	f5 cf       	rjmp	.-22     	; 0x12d1a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   12d30:	ce 01       	movw	r24, r28
   12d32:	0e 94 41 96 	call	0x12c82	; 0x12c82 <HardwareSerial::_tx_udr_empty_irq()>
   12d36:	f1 cf       	rjmp	.-30     	; 0x12d1a <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   12d38:	eb 8d       	ldd	r30, Y+27	; 0x1b
   12d3a:	ec 0f       	add	r30, r28
   12d3c:	fd 2f       	mov	r31, r29
   12d3e:	f1 1d       	adc	r31, r1
   12d40:	e3 5a       	subi	r30, 0xA3	; 163
   12d42:	ff 4f       	sbci	r31, 0xFF	; 255
   12d44:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   12d46:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   12d48:	ea 89       	ldd	r30, Y+18	; 0x12
   12d4a:	fb 89       	ldd	r31, Y+19	; 0x13
   12d4c:	80 81       	ld	r24, Z
   12d4e:	80 62       	ori	r24, 0x20	; 32
   12d50:	d2 cf       	rjmp	.-92     	; 0x12cf6 <HardwareSerial::write(unsigned char)+0x32>

00012d52 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   12d52:	cf 93       	push	r28
   12d54:	df 93       	push	r29
   12d56:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   12d58:	88 8d       	ldd	r24, Y+24	; 0x18
   12d5a:	88 23       	and	r24, r24
   12d5c:	b9 f0       	breq	.+46     	; 0x12d8c <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   12d5e:	aa 89       	ldd	r26, Y+18	; 0x12
   12d60:	bb 89       	ldd	r27, Y+19	; 0x13
   12d62:	e8 89       	ldd	r30, Y+16	; 0x10
   12d64:	f9 89       	ldd	r31, Y+17	; 0x11
   12d66:	8c 91       	ld	r24, X
   12d68:	85 fd       	sbrc	r24, 5
   12d6a:	03 c0       	rjmp	.+6      	; 0x12d72 <HardwareSerial::flush()+0x20>
   12d6c:	80 81       	ld	r24, Z
   12d6e:	86 fd       	sbrc	r24, 6
   12d70:	0d c0       	rjmp	.+26     	; 0x12d8c <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   12d72:	0f b6       	in	r0, 0x3f	; 63
   12d74:	07 fc       	sbrc	r0, 7
   12d76:	f7 cf       	rjmp	.-18     	; 0x12d66 <HardwareSerial::flush()+0x14>
   12d78:	8c 91       	ld	r24, X
   12d7a:	85 ff       	sbrs	r24, 5
   12d7c:	f2 cf       	rjmp	.-28     	; 0x12d62 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   12d7e:	80 81       	ld	r24, Z
   12d80:	85 ff       	sbrs	r24, 5
   12d82:	ed cf       	rjmp	.-38     	; 0x12d5e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   12d84:	ce 01       	movw	r24, r28
   12d86:	0e 94 41 96 	call	0x12c82	; 0x12c82 <HardwareSerial::_tx_udr_empty_irq()>
   12d8a:	e9 cf       	rjmp	.-46     	; 0x12d5e <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   12d8c:	df 91       	pop	r29
   12d8e:	cf 91       	pop	r28
   12d90:	08 95       	ret

00012d92 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
   12d92:	86 ef       	ldi	r24, 0xF6	; 246
   12d94:	9b e0       	ldi	r25, 0x0B	; 11
   12d96:	0e 94 35 96 	call	0x12c6a	; 0x12c6a <HardwareSerial::available()>
   12d9a:	21 e0       	ldi	r18, 0x01	; 1
   12d9c:	89 2b       	or	r24, r25
   12d9e:	09 f4       	brne	.+2      	; 0x12da2 <Serial0_available()+0x10>
   12da0:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
   12da2:	82 2f       	mov	r24, r18
   12da4:	08 95       	ret

00012da6 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   12da6:	80 e0       	ldi	r24, 0x00	; 0
   12da8:	90 e0       	ldi	r25, 0x00	; 0
   12daa:	89 2b       	or	r24, r25
   12dac:	29 f0       	breq	.+10     	; 0x12db8 <serialEventRun()+0x12>
   12dae:	0e 94 c9 96 	call	0x12d92	; 0x12d92 <Serial0_available()>
   12db2:	81 11       	cpse	r24, r1
   12db4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   12db8:	80 e0       	ldi	r24, 0x00	; 0
   12dba:	90 e0       	ldi	r25, 0x00	; 0
   12dbc:	89 2b       	or	r24, r25
   12dbe:	49 f0       	breq	.+18     	; 0x12dd2 <serialEventRun()+0x2c>
   12dc0:	80 e0       	ldi	r24, 0x00	; 0
   12dc2:	90 e0       	ldi	r25, 0x00	; 0
   12dc4:	89 2b       	or	r24, r25
   12dc6:	29 f0       	breq	.+10     	; 0x12dd2 <serialEventRun()+0x2c>
   12dc8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   12dcc:	81 11       	cpse	r24, r1
   12dce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   12dd2:	08 95       	ret

00012dd4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   12dd4:	af 92       	push	r10
   12dd6:	bf 92       	push	r11
   12dd8:	cf 92       	push	r12
   12dda:	df 92       	push	r13
   12ddc:	ef 92       	push	r14
   12dde:	ff 92       	push	r15
   12de0:	0f 93       	push	r16
   12de2:	1f 93       	push	r17
   12de4:	cf 93       	push	r28
   12de6:	df 93       	push	r29
   12de8:	6c 01       	movw	r12, r24
   12dea:	7b 01       	movw	r14, r22
   12dec:	8b 01       	movw	r16, r22
   12dee:	04 0f       	add	r16, r20
   12df0:	15 1f       	adc	r17, r21
   12df2:	eb 01       	movw	r28, r22
   12df4:	5e 01       	movw	r10, r28
   12df6:	ae 18       	sub	r10, r14
   12df8:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
   12dfa:	c0 17       	cp	r28, r16
   12dfc:	d1 07       	cpc	r29, r17
   12dfe:	59 f0       	breq	.+22     	; 0x12e16 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
   12e00:	69 91       	ld	r22, Y+
   12e02:	d6 01       	movw	r26, r12
   12e04:	ed 91       	ld	r30, X+
   12e06:	fc 91       	ld	r31, X
   12e08:	01 90       	ld	r0, Z+
   12e0a:	f0 81       	ld	r31, Z
   12e0c:	e0 2d       	mov	r30, r0
   12e0e:	c6 01       	movw	r24, r12
   12e10:	19 95       	eicall
   12e12:	89 2b       	or	r24, r25
   12e14:	79 f7       	brne	.-34     	; 0x12df4 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
   12e16:	c5 01       	movw	r24, r10
   12e18:	df 91       	pop	r29
   12e1a:	cf 91       	pop	r28
   12e1c:	1f 91       	pop	r17
   12e1e:	0f 91       	pop	r16
   12e20:	ff 90       	pop	r15
   12e22:	ef 90       	pop	r14
   12e24:	df 90       	pop	r13
   12e26:	cf 90       	pop	r12
   12e28:	bf 90       	pop	r11
   12e2a:	af 90       	pop	r10
   12e2c:	08 95       	ret

00012e2e <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
   12e2e:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
   12e30:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
   12e32:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <timer0_overflow_count>
   12e36:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <timer0_overflow_count+0x1>
   12e3a:	a0 91 4b 11 	lds	r26, 0x114B	; 0x80114b <timer0_overflow_count+0x2>
   12e3e:	b0 91 4c 11 	lds	r27, 0x114C	; 0x80114c <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
   12e42:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
   12e44:	a8 9b       	sbis	0x15, 0	; 21
   12e46:	05 c0       	rjmp	.+10     	; 0x12e52 <micros+0x24>
   12e48:	2f 3f       	cpi	r18, 0xFF	; 255
   12e4a:	19 f0       	breq	.+6      	; 0x12e52 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
   12e4c:	01 96       	adiw	r24, 0x01	; 1
   12e4e:	a1 1d       	adc	r26, r1
   12e50:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
   12e52:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
   12e54:	ba 2f       	mov	r27, r26
   12e56:	a9 2f       	mov	r26, r25
   12e58:	98 2f       	mov	r25, r24
   12e5a:	88 27       	eor	r24, r24
   12e5c:	bc 01       	movw	r22, r24
   12e5e:	cd 01       	movw	r24, r26
   12e60:	62 0f       	add	r22, r18
   12e62:	71 1d       	adc	r23, r1
   12e64:	81 1d       	adc	r24, r1
   12e66:	91 1d       	adc	r25, r1
   12e68:	42 e0       	ldi	r20, 0x02	; 2
   12e6a:	66 0f       	add	r22, r22
   12e6c:	77 1f       	adc	r23, r23
   12e6e:	88 1f       	adc	r24, r24
   12e70:	99 1f       	adc	r25, r25
   12e72:	4a 95       	dec	r20
   12e74:	d1 f7       	brne	.-12     	; 0x12e6a <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
   12e76:	08 95       	ret

00012e78 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   12e78:	cf 93       	push	r28
   12e7a:	df 93       	push	r29
   12e7c:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   12e7e:	89 e3       	ldi	r24, 0x39	; 57
   12e80:	95 e0       	ldi	r25, 0x05	; 5
   12e82:	9e 83       	std	Y+6, r25	; 0x06
   12e84:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   12e86:	88 81       	ld	r24, Y
   12e88:	99 81       	ldd	r25, Y+1	; 0x01
   12e8a:	dc 01       	movw	r26, r24
   12e8c:	ed 91       	ld	r30, X+
   12e8e:	fc 91       	ld	r31, X
   12e90:	06 84       	ldd	r0, Z+14	; 0x0e
   12e92:	f7 85       	ldd	r31, Z+15	; 0x0f
   12e94:	e0 2d       	mov	r30, r0
   12e96:	69 e3       	ldi	r22, 0x39	; 57
   12e98:	75 e0       	ldi	r23, 0x05	; 5
   12e9a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   12e9c:	81 e0       	ldi	r24, 0x01	; 1
   12e9e:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   12ea0:	df 91       	pop	r29
   12ea2:	cf 91       	pop	r28
   12ea4:	08 95       	ret

00012ea6 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   12ea6:	85 ed       	ldi	r24, 0xD5	; 213
   12ea8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   12eac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12eb0:	84 fd       	sbrc	r24, 4
   12eb2:	fc cf       	rjmp	.-8      	; 0x12eac <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   12eb4:	10 92 b8 11 	sts	0x11B8, r1	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
   12eb8:	08 95       	ret

00012eba <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
   12eba:	20 91 21 11 	lds	r18, 0x1121	; 0x801121 <twi_txBufferLength>
   12ebe:	26 0f       	add	r18, r22
   12ec0:	33 27       	eor	r19, r19
   12ec2:	33 1f       	adc	r19, r19
   12ec4:	21 32       	cpi	r18, 0x21	; 33
   12ec6:	31 05       	cpc	r19, r1
   12ec8:	ec f4       	brge	.+58     	; 0x12f04 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
   12eca:	20 91 b8 11 	lds	r18, 0x11B8	; 0x8011b8 <twi_state>
   12ece:	fc 01       	movw	r30, r24
   12ed0:	90 e0       	ldi	r25, 0x00	; 0
   12ed2:	80 e0       	ldi	r24, 0x00	; 0
   12ed4:	24 30       	cpi	r18, 0x04	; 4
   12ed6:	69 f0       	breq	.+26     	; 0x12ef2 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:313
    return 2;
   12ed8:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
   12eda:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
   12edc:	a0 91 21 11 	lds	r26, 0x1121	; 0x801121 <twi_txBufferLength>
   12ee0:	21 91       	ld	r18, Z+
   12ee2:	ac 01       	movw	r20, r24
   12ee4:	4f 5f       	subi	r20, 0xFF	; 255
   12ee6:	5e 4e       	sbci	r21, 0xEE	; 238
   12ee8:	a4 0f       	add	r26, r20
   12eea:	b5 2f       	mov	r27, r21
   12eec:	b1 1d       	adc	r27, r1
   12eee:	2c 93       	st	X, r18
   12ef0:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
   12ef2:	86 17       	cp	r24, r22
   12ef4:	98 f3       	brcs	.-26     	; 0x12edc <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
   12ef6:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <twi_txBufferLength>
   12efa:	68 0f       	add	r22, r24
   12efc:	60 93 21 11 	sts	0x1121, r22	; 0x801121 <twi_txBufferLength>
   12f00:	80 e0       	ldi	r24, 0x00	; 0
   12f02:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
   12f04:	81 e0       	ldi	r24, 0x01	; 1
   12f06:	08 95       	ret

00012f08 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
   12f08:	08 95       	ret

00012f0a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
   12f0a:	e0 91 6d 11 	lds	r30, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   12f0e:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   12f12:	e8 17       	cp	r30, r24
   12f14:	30 f4       	brcc	.+12     	; 0x12f22 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
   12f16:	f0 e0       	ldi	r31, 0x00	; 0
   12f18:	ee 58       	subi	r30, 0x8E	; 142
   12f1a:	fe 4e       	sbci	r31, 0xEE	; 238
   12f1c:	80 81       	ld	r24, Z
   12f1e:	90 e0       	ldi	r25, 0x00	; 0
   12f20:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
   12f22:	8f ef       	ldi	r24, 0xFF	; 255
   12f24:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
   12f26:	08 95       	ret

00012f28 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   12f28:	cf 92       	push	r12
   12f2a:	df 92       	push	r13
   12f2c:	ef 92       	push	r14
   12f2e:	ff 92       	push	r15
   12f30:	0f 93       	push	r16
   12f32:	1f 93       	push	r17
   12f34:	cf 93       	push	r28
   12f36:	df 93       	push	r29
   12f38:	7c 01       	movw	r14, r24
   12f3a:	cb 01       	movw	r24, r22
   12f3c:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
   12f3e:	20 91 71 11 	lds	r18, 0x1171	; 0x801171 <TwoWire::transmitting>
   12f42:	22 23       	and	r18, r18
   12f44:	89 f0       	breq	.+34     	; 0x12f68 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   12f46:	eb 01       	movw	r28, r22
   12f48:	6b 01       	movw	r12, r22
   12f4a:	c4 0e       	add	r12, r20
   12f4c:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
   12f4e:	cc 15       	cp	r28, r12
   12f50:	dd 05       	cpc	r29, r13
   12f52:	69 f0       	breq	.+26     	; 0x12f6e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
   12f54:	69 91       	ld	r22, Y+
   12f56:	d7 01       	movw	r26, r14
   12f58:	ed 91       	ld	r30, X+
   12f5a:	fc 91       	ld	r31, X
   12f5c:	01 90       	ld	r0, Z+
   12f5e:	f0 81       	ld	r31, Z
   12f60:	e0 2d       	mov	r30, r0
   12f62:	c7 01       	movw	r24, r14
   12f64:	19 95       	eicall
   12f66:	f3 cf       	rjmp	.-26     	; 0x12f4e <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
   12f68:	64 2f       	mov	r22, r20
   12f6a:	0e 94 5d 97 	call	0x12eba	; 0x12eba <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
   12f6e:	c8 01       	movw	r24, r16
   12f70:	df 91       	pop	r29
   12f72:	cf 91       	pop	r28
   12f74:	1f 91       	pop	r17
   12f76:	0f 91       	pop	r16
   12f78:	ff 90       	pop	r15
   12f7a:	ef 90       	pop	r14
   12f7c:	df 90       	pop	r13
   12f7e:	cf 90       	pop	r12
   12f80:	08 95       	ret

00012f82 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
   12f82:	cf 93       	push	r28
   12f84:	df 93       	push	r29
   12f86:	1f 92       	push	r1
   12f88:	cd b7       	in	r28, 0x3d	; 61
   12f8a:	de b7       	in	r29, 0x3e	; 62
   12f8c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
   12f8e:	20 91 71 11 	lds	r18, 0x1171	; 0x801171 <TwoWire::transmitting>
   12f92:	22 23       	and	r18, r18
   12f94:	f9 f0       	breq	.+62     	; 0x12fd4 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
   12f96:	20 91 6e 11 	lds	r18, 0x116E	; 0x80116e <TwoWire::txBufferLength>
   12f9a:	20 32       	cpi	r18, 0x20	; 32
   12f9c:	58 f0       	brcs	.+22     	; 0x12fb4 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   12f9e:	21 e0       	ldi	r18, 0x01	; 1
   12fa0:	30 e0       	ldi	r19, 0x00	; 0
   12fa2:	fc 01       	movw	r30, r24
   12fa4:	33 83       	std	Z+3, r19	; 0x03
   12fa6:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
   12fa8:	90 e0       	ldi	r25, 0x00	; 0
   12faa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
   12fac:	0f 90       	pop	r0
   12fae:	df 91       	pop	r29
   12fb0:	cf 91       	pop	r28
   12fb2:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
   12fb4:	80 91 6f 11 	lds	r24, 0x116F	; 0x80116f <TwoWire::txBufferIndex>
   12fb8:	e8 2f       	mov	r30, r24
   12fba:	f0 e0       	ldi	r31, 0x00	; 0
   12fbc:	ef 51       	subi	r30, 0x1F	; 31
   12fbe:	ff 4e       	sbci	r31, 0xEF	; 239
   12fc0:	99 81       	ldd	r25, Y+1	; 0x01
   12fc2:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
   12fc4:	8f 5f       	subi	r24, 0xFF	; 255
   12fc6:	80 93 6f 11 	sts	0x116F, r24	; 0x80116f <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
   12fca:	80 93 6e 11 	sts	0x116E, r24	; 0x80116e <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
   12fce:	81 e0       	ldi	r24, 0x01	; 1
   12fd0:	90 e0       	ldi	r25, 0x00	; 0
   12fd2:	ec cf       	rjmp	.-40     	; 0x12fac <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
   12fd4:	61 e0       	ldi	r22, 0x01	; 1
   12fd6:	ce 01       	movw	r24, r28
   12fd8:	01 96       	adiw	r24, 0x01	; 1
   12fda:	0e 94 5d 97 	call	0x12eba	; 0x12eba <twi_transmit>
   12fde:	f7 cf       	rjmp	.-18     	; 0x12fce <TwoWire::write(unsigned char)+0x4c>

00012fe0 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   12fe0:	08 95       	ret

00012fe2 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   12fe2:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   12fe4:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   12fe6:	0d b4       	in	r0, 0x2d	; 45
   12fe8:	07 fe       	sbrs	r0, 7
   12fea:	fd cf       	rjmp	.-6      	; 0x12fe6 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:221
    return SPDR;
   12fec:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:222
  }
   12fee:	08 95       	ret

00012ff0 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   12ff0:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   12ff2:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:208
  }
   12ff4:	08 95       	ret

00012ff6 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   12ff6:	cf 93       	push	r28
   12ff8:	df 93       	push	r29
   12ffa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   12ffc:	89 8d       	ldd	r24, Y+25	; 0x19
   12ffe:	9a 8d       	ldd	r25, Y+26	; 0x1a
   13000:	89 2b       	or	r24, r25
   13002:	41 f0       	breq	.+16     	; 0x13014 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   13004:	e8 81       	ld	r30, Y
   13006:	f9 81       	ldd	r31, Y+1	; 0x01
   13008:	02 84       	ldd	r0, Z+10	; 0x0a
   1300a:	f3 85       	ldd	r31, Z+11	; 0x0b
   1300c:	e0 2d       	mov	r30, r0
   1300e:	ce 01       	movw	r24, r28
   13010:	19 95       	eicall
   13012:	f4 cf       	rjmp	.-24     	; 0x12ffc <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
   13014:	df 91       	pop	r29
   13016:	cf 91       	pop	r28
   13018:	08 95       	ret

0001301a <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   1301a:	cf 93       	push	r28
   1301c:	df 93       	push	r29
   1301e:	1f 92       	push	r1
   13020:	cd b7       	in	r28, 0x3d	; 61
   13022:	de b7       	in	r29, 0x3e	; 62
   13024:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   13026:	dc 01       	movw	r26, r24
   13028:	ed 91       	ld	r30, X+
   1302a:	fc 91       	ld	r31, X
   1302c:	02 80       	ldd	r0, Z+2	; 0x02
   1302e:	f3 81       	ldd	r31, Z+3	; 0x03
   13030:	e0 2d       	mov	r30, r0
   13032:	41 e0       	ldi	r20, 0x01	; 1
   13034:	50 e0       	ldi	r21, 0x00	; 0
   13036:	be 01       	movw	r22, r28
   13038:	6f 5f       	subi	r22, 0xFF	; 255
   1303a:	7f 4f       	sbci	r23, 0xFF	; 255
   1303c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   1303e:	0f 90       	pop	r0
   13040:	df 91       	pop	r29
   13042:	cf 91       	pop	r28
   13044:	08 95       	ret

00013046 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   13046:	fc 01       	movw	r30, r24
   13048:	81 8d       	ldd	r24, Z+25	; 0x19
   1304a:	92 8d       	ldd	r25, Z+26	; 0x1a
   1304c:	08 95       	ret

0001304e <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   1304e:	fc 01       	movw	r30, r24
   13050:	85 89       	ldd	r24, Z+21	; 0x15
   13052:	96 89       	ldd	r25, Z+22	; 0x16
   13054:	08 95       	ret

00013056 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   13056:	22 ee       	ldi	r18, 0xE2	; 226
   13058:	32 e0       	ldi	r19, 0x02	; 2
   1305a:	fc 01       	movw	r30, r24
   1305c:	31 83       	std	Z+1, r19	; 0x01
   1305e:	20 83       	st	Z, r18
   13060:	fb 01       	movw	r30, r22
   13062:	41 89       	ldd	r20, Z+17	; 0x11
   13064:	52 89       	ldd	r21, Z+18	; 0x12
   13066:	63 89       	ldd	r22, Z+19	; 0x13
   13068:	74 89       	ldd	r23, Z+20	; 0x14
   1306a:	fc 01       	movw	r30, r24
   1306c:	42 83       	std	Z+2, r20	; 0x02
   1306e:	53 83       	std	Z+3, r21	; 0x03
   13070:	64 83       	std	Z+4, r22	; 0x04
   13072:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   13074:	08 95       	ret

00013076 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   13076:	80 e0       	ldi	r24, 0x00	; 0
   13078:	08 95       	ret

0001307a <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   1307a:	fc 01       	movw	r30, r24
   1307c:	94 85       	ldd	r25, Z+12	; 0x0c
   1307e:	fb 01       	movw	r30, r22
   13080:	84 85       	ldd	r24, Z+12	; 0x0c
   13082:	98 13       	cpse	r25, r24
   13084:	03 c0       	rjmp	.+6      	; 0x1308c <EthernetClient::operator==(EthernetClient const&)+0x12>
   13086:	81 e0       	ldi	r24, 0x01	; 1
   13088:	98 30       	cpi	r25, 0x08	; 8
   1308a:	09 f4       	brne	.+2      	; 0x1308e <EthernetClient::operator==(EthernetClient const&)+0x14>
   1308c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   1308e:	08 95       	ret

00013090 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   13090:	21 e0       	ldi	r18, 0x01	; 1
   13092:	fc 01       	movw	r30, r24
   13094:	84 85       	ldd	r24, Z+12	; 0x0c
   13096:	88 30       	cpi	r24, 0x08	; 8
   13098:	09 f4       	brne	.+2      	; 0x1309c <EthernetClient::operator bool()+0xc>
   1309a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   1309c:	82 2f       	mov	r24, r18
   1309e:	08 95       	ret

000130a0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.156():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   130a0:	2f 92       	push	r2
   130a2:	3f 92       	push	r3
   130a4:	4f 92       	push	r4
   130a6:	5f 92       	push	r5
   130a8:	6f 92       	push	r6
   130aa:	7f 92       	push	r7
   130ac:	8f 92       	push	r8
   130ae:	9f 92       	push	r9
   130b0:	af 92       	push	r10
   130b2:	bf 92       	push	r11
   130b4:	cf 92       	push	r12
   130b6:	df 92       	push	r13
   130b8:	ef 92       	push	r14
   130ba:	ff 92       	push	r15
   130bc:	0f 93       	push	r16
   130be:	1f 93       	push	r17
   130c0:	cf 93       	push	r28
   130c2:	df 93       	push	r29
   130c4:	cd b7       	in	r28, 0x3d	; 61
   130c6:	de b7       	in	r29, 0x3e	; 62
   130c8:	2d 97       	sbiw	r28, 0x0d	; 13
   130ca:	0f b6       	in	r0, 0x3f	; 63
   130cc:	f8 94       	cli
   130ce:	de bf       	out	0x3e, r29	; 62
   130d0:	0f be       	out	0x3f, r0	; 63
   130d2:	cd bf       	out	0x3d, r28	; 61
   130d4:	fc 01       	movw	r30, r24
   130d6:	a0 81       	ld	r26, Z
   130d8:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   130da:	cb 01       	movw	r24, r22
   130dc:	8e 50       	subi	r24, 0x0E	; 14
   130de:	97 42       	sbci	r25, 0x27	; 39
   130e0:	02 97       	sbiw	r24, 0x02	; 2
   130e2:	20 f5       	brcc	.+72     	; 0x1312c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   130e4:	fd 01       	movw	r30, r26
   130e6:	01 90       	ld	r0, Z+
   130e8:	00 20       	and	r0, r0
   130ea:	e9 f7       	brne	.-6      	; 0x130e6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x46>
   130ec:	31 97       	sbiw	r30, 0x01	; 1
   130ee:	ea 1b       	sub	r30, r26
   130f0:	fb 0b       	sbc	r31, r27
   130f2:	80 91 4f 0e 	lds	r24, 0x0E4F	; 0x800e4f <my_lcd+0xc>
   130f6:	26 e0       	ldi	r18, 0x06	; 6
   130f8:	82 9f       	mul	r24, r18
   130fa:	c0 01       	movw	r24, r0
   130fc:	11 24       	eor	r1, r1
   130fe:	8e 9f       	mul	r24, r30
   13100:	90 01       	movw	r18, r0
   13102:	8f 9f       	mul	r24, r31
   13104:	30 0d       	add	r19, r0
   13106:	9e 9f       	mul	r25, r30
   13108:	30 0d       	add	r19, r0
   1310a:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   1310c:	80 91 55 0e 	lds	r24, 0x0E55	; 0x800e55 <my_lcd+0x12>
   13110:	90 91 56 0e 	lds	r25, 0x0E56	; 0x800e56 <my_lcd+0x13>
   13114:	82 1b       	sub	r24, r18
   13116:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   13118:	6e 30       	cpi	r22, 0x0E	; 14
   1311a:	77 42       	sbci	r23, 0x27	; 39
   1311c:	89 f5       	brne	.+98     	; 0x13180 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   1311e:	bc 01       	movw	r22, r24
   13120:	97 ff       	sbrs	r25, 7
   13122:	02 c0       	rjmp	.+4      	; 0x13128 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x88>
   13124:	6f 5f       	subi	r22, 0xFF	; 255
   13126:	7f 4f       	sbci	r23, 0xFF	; 255
   13128:	75 95       	asr	r23
   1312a:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   1312c:	70 93 46 0e 	sts	0x0E46, r23	; 0x800e46 <my_lcd+0x3>
   13130:	60 93 45 0e 	sts	0x0E45, r22	; 0x800e45 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   13134:	50 93 48 0e 	sts	0x0E48, r21	; 0x800e48 <my_lcd+0x5>
   13138:	40 93 47 0e 	sts	0x0E47, r20	; 0x800e47 <my_lcd+0x4>
   1313c:	be 83       	std	Y+6, r27	; 0x06
   1313e:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   13140:	ed 81       	ldd	r30, Y+5	; 0x05
   13142:	fe 81       	ldd	r31, Y+6	; 0x06
   13144:	91 91       	ld	r25, Z+
   13146:	fe 83       	std	Y+6, r31	; 0x06
   13148:	ed 83       	std	Y+5, r30	; 0x05
   1314a:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   1314c:	99 23       	and	r25, r25
   1314e:	09 f4       	brne	.+2      	; 0x13152 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xb2>
   13150:	dd c0       	rjmp	.+442    	; 0x1330c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   13152:	9a 30       	cpi	r25, 0x0A	; 10
   13154:	c9 f4       	brne	.+50     	; 0x13188 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   13156:	80 91 4f 0e 	lds	r24, 0x0E4F	; 0x800e4f <my_lcd+0xc>
   1315a:	f8 e0       	ldi	r31, 0x08	; 8
   1315c:	8f 9f       	mul	r24, r31
   1315e:	c0 01       	movw	r24, r0
   13160:	11 24       	eor	r1, r1
   13162:	20 91 47 0e 	lds	r18, 0x0E47	; 0x800e47 <my_lcd+0x4>
   13166:	30 91 48 0e 	lds	r19, 0x0E48	; 0x800e48 <my_lcd+0x5>
   1316a:	82 0f       	add	r24, r18
   1316c:	93 1f       	adc	r25, r19
   1316e:	90 93 48 0e 	sts	0x0E48, r25	; 0x800e48 <my_lcd+0x5>
   13172:	80 93 47 0e 	sts	0x0E47, r24	; 0x800e47 <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   13176:	10 92 46 0e 	sts	0x0E46, r1	; 0x800e46 <my_lcd+0x3>
   1317a:	10 92 45 0e 	sts	0x0E45, r1	; 0x800e45 <my_lcd+0x2>
   1317e:	e0 cf       	rjmp	.-64     	; 0x13140 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   13180:	bc 01       	movw	r22, r24
   13182:	61 50       	subi	r22, 0x01	; 1
   13184:	71 09       	sbc	r23, r1
   13186:	d2 cf       	rjmp	.-92     	; 0x1312c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   13188:	9d 30       	cpi	r25, 0x0D	; 13
   1318a:	d1 f2       	breq	.-76     	; 0x13140 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1318c:	20 91 45 0e 	lds	r18, 0x0E45	; 0x800e45 <my_lcd+0x2>
   13190:	30 91 46 0e 	lds	r19, 0x0E46	; 0x800e46 <my_lcd+0x3>
   13194:	39 87       	std	Y+9, r19	; 0x09
   13196:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   13198:	20 91 55 0e 	lds	r18, 0x0E55	; 0x800e55 <my_lcd+0x12>
   1319c:	30 91 56 0e 	lds	r19, 0x0E56	; 0x800e56 <my_lcd+0x13>
   131a0:	48 85       	ldd	r20, Y+8	; 0x08
   131a2:	59 85       	ldd	r21, Y+9	; 0x09
   131a4:	42 17       	cp	r20, r18
   131a6:	53 07       	cpc	r21, r19
   131a8:	0c f0       	brlt	.+2      	; 0x131ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x10c>
   131aa:	88 c0       	rjmp	.+272    	; 0x132bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   131ac:	60 90 47 0e 	lds	r6, 0x0E47	; 0x800e47 <my_lcd+0x4>
   131b0:	70 90 48 0e 	lds	r7, 0x0E48	; 0x800e48 <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   131b4:	20 91 57 0e 	lds	r18, 0x0E57	; 0x800e57 <my_lcd+0x14>
   131b8:	30 91 58 0e 	lds	r19, 0x0E58	; 0x800e58 <my_lcd+0x15>
   131bc:	62 16       	cp	r6, r18
   131be:	73 06       	cpc	r7, r19
   131c0:	0c f0       	brlt	.+2      	; 0x131c4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x124>
   131c2:	7c c0       	rjmp	.+248    	; 0x132bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   131c4:	50 91 4f 0e 	lds	r21, 0x0E4F	; 0x800e4f <my_lcd+0xc>
   131c8:	5a 83       	std	Y+2, r21	; 0x02
   131ca:	c5 2e       	mov	r12, r21
   131cc:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   131ce:	28 85       	ldd	r18, Y+8	; 0x08
   131d0:	39 85       	ldd	r19, Y+9	; 0x09
   131d2:	e6 e0       	ldi	r30, 0x06	; 6
   131d4:	5e 9f       	mul	r21, r30
   131d6:	20 0d       	add	r18, r0
   131d8:	31 1d       	adc	r19, r1
   131da:	11 24       	eor	r1, r1
   131dc:	12 16       	cp	r1, r18
   131de:	13 06       	cpc	r1, r19
   131e0:	0c f0       	brlt	.+2      	; 0x131e4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x144>
   131e2:	6c c0       	rjmp	.+216    	; 0x132bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x21c>
   131e4:	96 01       	movw	r18, r12
   131e6:	93 e0       	ldi	r25, 0x03	; 3
   131e8:	22 0f       	add	r18, r18
   131ea:	33 1f       	adc	r19, r19
   131ec:	9a 95       	dec	r25
   131ee:	e1 f7       	brne	.-8      	; 0x131e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x148>
   131f0:	26 0d       	add	r18, r6
   131f2:	37 1d       	adc	r19, r7
   131f4:	12 16       	cp	r1, r18
   131f6:	13 06       	cpc	r1, r19
   131f8:	0c f0       	brlt	.+2      	; 0x131fc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x15c>
   131fa:	60 c0       	rjmp	.+192    	; 0x132bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   131fc:	80 3b       	cpi	r24, 0xB0	; 176
   131fe:	08 f0       	brcs	.+2      	; 0x13202 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   13200:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   13202:	f0 91 50 0e 	lds	r31, 0x0E50	; 0x800e50 <my_lcd+0xd>
   13206:	ff 83       	std	Y+7, r31	; 0x07
   13208:	20 90 4b 0e 	lds	r2, 0x0E4B	; 0x800e4b <my_lcd+0x8>
   1320c:	30 90 4c 0e 	lds	r3, 0x0E4C	; 0x800e4c <my_lcd+0x9>
   13210:	20 91 49 0e 	lds	r18, 0x0E49	; 0x800e49 <my_lcd+0x6>
   13214:	30 91 4a 0e 	lds	r19, 0x0E4A	; 0x800e4a <my_lcd+0x7>
   13218:	3c 83       	std	Y+4, r19	; 0x04
   1321a:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1321c:	48 85       	ldd	r20, Y+8	; 0x08
   1321e:	59 85       	ldd	r21, Y+9	; 0x09
   13220:	5d 87       	std	Y+13, r21	; 0x0d
   13222:	4c 87       	std	Y+12, r20	; 0x0c
   13224:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.156():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   13226:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   13228:	24 e3       	ldi	r18, 0x34	; 52
   1322a:	3c e5       	ldi	r19, 0x5C	; 92
   1322c:	24 1b       	sub	r18, r20
   1322e:	35 0b       	sbc	r19, r21
   13230:	f9 01       	movw	r30, r18
   13232:	45 e0       	ldi	r20, 0x05	; 5
   13234:	84 9f       	mul	r24, r20
   13236:	e0 0d       	add	r30, r0
   13238:	f1 1d       	adc	r31, r1
   1323a:	11 24       	eor	r1, r1
   1323c:	fb 87       	std	Y+11, r31	; 0x0b
   1323e:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   13240:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.156():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   13242:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   13244:	55 30       	cpi	r21, 0x05	; 5
   13246:	29 f0       	breq	.+10     	; 0x13252 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   13248:	ea 85       	ldd	r30, Y+10	; 0x0a
   1324a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1324c:	ea 0d       	add	r30, r10
   1324e:	fb 1d       	adc	r31, r11
   13250:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.156():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   13252:	23 01       	movw	r4, r6
   13254:	91 2c       	mov	r9, r1
   13256:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   13258:	8e 2f       	mov	r24, r30
   1325a:	90 e0       	ldi	r25, 0x00	; 0
   1325c:	99 87       	std	Y+9, r25	; 0x09
   1325e:	88 87       	std	Y+8, r24	; 0x08
   13260:	e0 ff       	sbrs	r30, 0
   13262:	3c c0       	rjmp	.+120    	; 0x132dc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   13264:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   13266:	2b 81       	ldd	r18, Y+3	; 0x03
   13268:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   1326a:	eb 80       	ldd	r14, Y+3	; 0x03
   1326c:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   1326e:	91 30       	cpi	r25, 0x01	; 1
   13270:	09 f0       	breq	.+2      	; 0x13274 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1d4>
   13272:	42 c0       	rjmp	.+132    	; 0x132f8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   13274:	a3 01       	movw	r20, r6
   13276:	48 0d       	add	r20, r8
   13278:	59 1d       	adc	r21, r9
   1327a:	b5 01       	movw	r22, r10
   1327c:	83 e4       	ldi	r24, 0x43	; 67
   1327e:	9e e0       	ldi	r25, 0x0E	; 14
   13280:	0e 94 fe 32 	call	0x65fc	; 0x65fc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   13284:	e8 85       	ldd	r30, Y+8	; 0x08
   13286:	f9 85       	ldd	r31, Y+9	; 0x09
   13288:	f5 95       	asr	r31
   1328a:	e7 95       	ror	r30
   1328c:	3f ef       	ldi	r19, 0xFF	; 255
   1328e:	83 1a       	sub	r8, r19
   13290:	93 0a       	sbc	r9, r19
   13292:	4c 0c       	add	r4, r12
   13294:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   13296:	48 e0       	ldi	r20, 0x08	; 8
   13298:	84 16       	cp	r8, r20
   1329a:	91 04       	cpc	r9, r1
   1329c:	e9 f6       	brne	.-70     	; 0x13258 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1b8>
   1329e:	5f ef       	ldi	r21, 0xFF	; 255
   132a0:	a5 1a       	sub	r10, r21
   132a2:	b5 0a       	sbc	r11, r21
   132a4:	8c 85       	ldd	r24, Y+12	; 0x0c
   132a6:	9d 85       	ldd	r25, Y+13	; 0x0d
   132a8:	8c 0d       	add	r24, r12
   132aa:	9d 1d       	adc	r25, r13
   132ac:	9d 87       	std	Y+13, r25	; 0x0d
   132ae:	8c 87       	std	Y+12, r24	; 0x0c
   132b0:	99 81       	ldd	r25, Y+1	; 0x01
   132b2:	9f 5f       	subi	r25, 0xFF	; 255
   132b4:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   132b6:	96 30       	cpi	r25, 0x06	; 6
   132b8:	09 f0       	breq	.+2      	; 0x132bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x21c>
   132ba:	c2 cf       	rjmp	.-124    	; 0x13240 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   132bc:	20 91 4f 0e 	lds	r18, 0x0E4F	; 0x800e4f <my_lcd+0xc>
   132c0:	80 91 45 0e 	lds	r24, 0x0E45	; 0x800e45 <my_lcd+0x2>
   132c4:	90 91 46 0e 	lds	r25, 0x0E46	; 0x800e46 <my_lcd+0x3>
   132c8:	e6 e0       	ldi	r30, 0x06	; 6
   132ca:	2e 9f       	mul	r18, r30
   132cc:	80 0d       	add	r24, r0
   132ce:	91 1d       	adc	r25, r1
   132d0:	11 24       	eor	r1, r1
   132d2:	90 93 46 0e 	sts	0x0E46, r25	; 0x800e46 <my_lcd+0x3>
   132d6:	80 93 45 0e 	sts	0x0E45, r24	; 0x800e45 <my_lcd+0x2>
   132da:	32 cf       	rjmp	.-412    	; 0x13140 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   132dc:	eb 81       	ldd	r30, Y+3	; 0x03
   132de:	fc 81       	ldd	r31, Y+4	; 0x04
   132e0:	2e 16       	cp	r2, r30
   132e2:	3f 06       	cpc	r3, r31
   132e4:	79 f2       	breq	.-98     	; 0x13284 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   132e6:	ff 81       	ldd	r31, Y+7	; 0x07
   132e8:	f1 11       	cpse	r31, r1
   132ea:	cc cf       	rjmp	.-104    	; 0x13284 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   132ec:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   132ee:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   132f0:	21 30       	cpi	r18, 0x01	; 1
   132f2:	11 f4       	brne	.+4      	; 0x132f8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   132f4:	91 01       	movw	r18, r2
   132f6:	be cf       	rjmp	.-132    	; 0x13274 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   132f8:	86 01       	movw	r16, r12
   132fa:	96 01       	movw	r18, r12
   132fc:	a2 01       	movw	r20, r4
   132fe:	6c 85       	ldd	r22, Y+12	; 0x0c
   13300:	7d 85       	ldd	r23, Y+13	; 0x0d
   13302:	83 e4       	ldi	r24, 0x43	; 67
   13304:	9e e0       	ldi	r25, 0x0E	; 14
   13306:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1330a:	bc cf       	rjmp	.-136    	; 0x13284 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.156():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   1330c:	2d 96       	adiw	r28, 0x0d	; 13
   1330e:	0f b6       	in	r0, 0x3f	; 63
   13310:	f8 94       	cli
   13312:	de bf       	out	0x3e, r29	; 62
   13314:	0f be       	out	0x3f, r0	; 63
   13316:	cd bf       	out	0x3d, r28	; 61
   13318:	df 91       	pop	r29
   1331a:	cf 91       	pop	r28
   1331c:	1f 91       	pop	r17
   1331e:	0f 91       	pop	r16
   13320:	ff 90       	pop	r15
   13322:	ef 90       	pop	r14
   13324:	df 90       	pop	r13
   13326:	cf 90       	pop	r12
   13328:	bf 90       	pop	r11
   1332a:	af 90       	pop	r10
   1332c:	9f 90       	pop	r9
   1332e:	8f 90       	pop	r8
   13330:	7f 90       	pop	r7
   13332:	6f 90       	pop	r6
   13334:	5f 90       	pop	r5
   13336:	4f 90       	pop	r4
   13338:	3f 90       	pop	r3
   1333a:	2f 90       	pop	r2
   1333c:	08 95       	ret

0001333e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   1333e:	8f 92       	push	r8
   13340:	9f 92       	push	r9
   13342:	af 92       	push	r10
   13344:	bf 92       	push	r11
   13346:	ef 92       	push	r14
   13348:	ff 92       	push	r15
   1334a:	0f 93       	push	r16
   1334c:	1f 93       	push	r17
   1334e:	cf 93       	push	r28
   13350:	df 93       	push	r29
   13352:	cd b7       	in	r28, 0x3d	; 61
   13354:	de b7       	in	r29, 0x3e	; 62
   13356:	a1 97       	sbiw	r28, 0x21	; 33
   13358:	0f b6       	in	r0, 0x3f	; 63
   1335a:	f8 94       	cli
   1335c:	de bf       	out	0x3e, r29	; 62
   1335e:	0f be       	out	0x3f, r0	; 63
   13360:	cd bf       	out	0x3d, r28	; 61
   13362:	7c 01       	movw	r14, r24
   13364:	fa 01       	movw	r30, r20
   13366:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   13368:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   1336a:	22 30       	cpi	r18, 0x02	; 2
   1336c:	08 f4       	brcc	.+2      	; 0x13370 <Print::printNumber(unsigned long, unsigned char)+0x32>
   1336e:	2a e0       	ldi	r18, 0x0A	; 10
   13370:	8e 01       	movw	r16, r28
   13372:	0f 5d       	subi	r16, 0xDF	; 223
   13374:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   13376:	82 2e       	mov	r8, r18
   13378:	91 2c       	mov	r9, r1
   1337a:	b1 2c       	mov	r11, r1
   1337c:	a1 2c       	mov	r10, r1
   1337e:	bf 01       	movw	r22, r30
   13380:	a5 01       	movw	r20, r10
   13382:	94 01       	movw	r18, r8
   13384:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   13388:	f9 01       	movw	r30, r18
   1338a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1338c:	6a 30       	cpi	r22, 0x0A	; 10
   1338e:	74 f5       	brge	.+92     	; 0x133ec <Print::printNumber(unsigned long, unsigned char)+0xae>
   13390:	60 5d       	subi	r22, 0xD0	; 208
   13392:	d8 01       	movw	r26, r16
   13394:	6e 93       	st	-X, r22
   13396:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   13398:	23 2b       	or	r18, r19
   1339a:	24 2b       	or	r18, r20
   1339c:	25 2b       	or	r18, r21
   1339e:	79 f7       	brne	.-34     	; 0x1337e <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   133a0:	90 e0       	ldi	r25, 0x00	; 0
   133a2:	80 e0       	ldi	r24, 0x00	; 0
write():
   133a4:	10 97       	sbiw	r26, 0x00	; 0
   133a6:	89 f0       	breq	.+34     	; 0x133ca <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   133a8:	fd 01       	movw	r30, r26
   133aa:	01 90       	ld	r0, Z+
   133ac:	00 20       	and	r0, r0
   133ae:	e9 f7       	brne	.-6      	; 0x133aa <Print::printNumber(unsigned long, unsigned char)+0x6c>
   133b0:	31 97       	sbiw	r30, 0x01	; 1
   133b2:	af 01       	movw	r20, r30
   133b4:	4a 1b       	sub	r20, r26
   133b6:	5b 0b       	sbc	r21, r27
   133b8:	d7 01       	movw	r26, r14
   133ba:	ed 91       	ld	r30, X+
   133bc:	fc 91       	ld	r31, X
   133be:	02 80       	ldd	r0, Z+2	; 0x02
   133c0:	f3 81       	ldd	r31, Z+3	; 0x03
   133c2:	e0 2d       	mov	r30, r0
   133c4:	b8 01       	movw	r22, r16
   133c6:	c7 01       	movw	r24, r14
   133c8:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   133ca:	a1 96       	adiw	r28, 0x21	; 33
   133cc:	0f b6       	in	r0, 0x3f	; 63
   133ce:	f8 94       	cli
   133d0:	de bf       	out	0x3e, r29	; 62
   133d2:	0f be       	out	0x3f, r0	; 63
   133d4:	cd bf       	out	0x3d, r28	; 61
   133d6:	df 91       	pop	r29
   133d8:	cf 91       	pop	r28
   133da:	1f 91       	pop	r17
   133dc:	0f 91       	pop	r16
   133de:	ff 90       	pop	r15
   133e0:	ef 90       	pop	r14
   133e2:	bf 90       	pop	r11
   133e4:	af 90       	pop	r10
   133e6:	9f 90       	pop	r9
   133e8:	8f 90       	pop	r8
   133ea:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   133ec:	69 5c       	subi	r22, 0xC9	; 201
   133ee:	d1 cf       	rjmp	.-94     	; 0x13392 <Print::printNumber(unsigned long, unsigned char)+0x54>

000133f0 <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   133f0:	68 2f       	mov	r22, r24
   133f2:	88 e6       	ldi	r24, 0x68	; 104
   133f4:	0e 94 93 95 	call	0x12b26	; 0x12b26 <twi_readFrom.part.0.constprop.173>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   133f8:	10 92 6d 11 	sts	0x116D, r1	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   133fc:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   13400:	08 95       	ret

00013402 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   13402:	8f 92       	push	r8
   13404:	9f 92       	push	r9
   13406:	af 92       	push	r10
   13408:	bf 92       	push	r11
   1340a:	cf 92       	push	r12
   1340c:	df 92       	push	r13
   1340e:	ef 92       	push	r14
   13410:	ff 92       	push	r15
   13412:	0f 93       	push	r16
   13414:	1f 93       	push	r17
   13416:	cf 93       	push	r28
   13418:	df 93       	push	r29
   1341a:	7c 01       	movw	r14, r24
   1341c:	eb 01       	movw	r28, r22
   1341e:	6c 01       	movw	r12, r24
   13420:	82 e0       	ldi	r24, 0x02	; 2
   13422:	c8 0e       	add	r12, r24
   13424:	d1 1c       	adc	r13, r1
   13426:	47 01       	movw	r8, r14
   13428:	e5 e0       	ldi	r30, 0x05	; 5
   1342a:	8e 0e       	add	r8, r30
   1342c:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   1342e:	10 e0       	ldi	r17, 0x00	; 0
   13430:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   13432:	f6 01       	movw	r30, r12
   13434:	41 91       	ld	r20, Z+
   13436:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   13438:	50 e0       	ldi	r21, 0x00	; 0
   1343a:	70 e0       	ldi	r23, 0x00	; 0
   1343c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   1343e:	2a e0       	ldi	r18, 0x0A	; 10
   13440:	ce 01       	movw	r24, r28
   13442:	0e 94 9f 99 	call	0x1333e	; 0x1333e <Print::printNumber(unsigned long, unsigned char)>
   13446:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   13448:	e8 81       	ld	r30, Y
   1344a:	f9 81       	ldd	r31, Y+1	; 0x01
   1344c:	01 90       	ld	r0, Z+
   1344e:	f0 81       	ld	r31, Z
   13450:	e0 2d       	mov	r30, r0
   13452:	6e e2       	ldi	r22, 0x2E	; 46
   13454:	ce 01       	movw	r24, r28
   13456:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   13458:	8a 0d       	add	r24, r10
   1345a:	9b 1d       	adc	r25, r11
   1345c:	08 0f       	add	r16, r24
   1345e:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   13460:	c8 14       	cp	r12, r8
   13462:	d9 04       	cpc	r13, r9
   13464:	31 f7       	brne	.-52     	; 0x13432 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   13466:	f7 01       	movw	r30, r14
   13468:	45 81       	ldd	r20, Z+5	; 0x05
   1346a:	50 e0       	ldi	r21, 0x00	; 0
   1346c:	70 e0       	ldi	r23, 0x00	; 0
   1346e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   13470:	2a e0       	ldi	r18, 0x0A	; 10
   13472:	ce 01       	movw	r24, r28
   13474:	0e 94 9f 99 	call	0x1333e	; 0x1333e <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   13478:	80 0f       	add	r24, r16
   1347a:	91 1f       	adc	r25, r17
   1347c:	df 91       	pop	r29
   1347e:	cf 91       	pop	r28
   13480:	1f 91       	pop	r17
   13482:	0f 91       	pop	r16
   13484:	ff 90       	pop	r15
   13486:	ef 90       	pop	r14
   13488:	df 90       	pop	r13
   1348a:	cf 90       	pop	r12
   1348c:	bf 90       	pop	r11
   1348e:	af 90       	pop	r10
   13490:	9f 90       	pop	r9
   13492:	8f 90       	pop	r8
   13494:	08 95       	ret

00013496 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   13496:	1f 93       	push	r17
   13498:	cf 93       	push	r28
   1349a:	df 93       	push	r29
   1349c:	18 2f       	mov	r17, r24
   1349e:	66 e2       	ldi	r22, 0x26	; 38
   134a0:	70 e0       	ldi	r23, 0x00	; 0
   134a2:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   134a6:	c8 2f       	mov	r28, r24
   134a8:	d0 e0       	ldi	r29, 0x00	; 0
   134aa:	dc 2f       	mov	r29, r28
   134ac:	cc 27       	eor	r28, r28
   134ae:	67 e2       	ldi	r22, 0x27	; 39
   134b0:	70 e0       	ldi	r23, 0x00	; 0
   134b2:	81 2f       	mov	r24, r17
   134b4:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   134b8:	8c 0f       	add	r24, r28
   134ba:	9d 2f       	mov	r25, r29
   134bc:	91 1d       	adc	r25, r1
   134be:	df 91       	pop	r29
   134c0:	cf 91       	pop	r28
   134c2:	1f 91       	pop	r17
   134c4:	08 95       	ret

000134c6 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   134c6:	1f 93       	push	r17
   134c8:	cf 93       	push	r28
   134ca:	df 93       	push	r29
   134cc:	18 2f       	mov	r17, r24
   134ce:	60 e2       	ldi	r22, 0x20	; 32
   134d0:	70 e0       	ldi	r23, 0x00	; 0
   134d2:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   134d6:	c8 2f       	mov	r28, r24
   134d8:	d0 e0       	ldi	r29, 0x00	; 0
   134da:	dc 2f       	mov	r29, r28
   134dc:	cc 27       	eor	r28, r28
   134de:	61 e2       	ldi	r22, 0x21	; 33
   134e0:	70 e0       	ldi	r23, 0x00	; 0
   134e2:	81 2f       	mov	r24, r17
   134e4:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   134e8:	8c 0f       	add	r24, r28
   134ea:	9d 2f       	mov	r25, r29
   134ec:	91 1d       	adc	r25, r1
   134ee:	df 91       	pop	r29
   134f0:	cf 91       	pop	r28
   134f2:	1f 91       	pop	r17
   134f4:	08 95       	ret

000134f6 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   134f6:	0e 94 4d d0 	call	0x1a09a	; 0x1a09a <abort>

000134fa <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   134fa:	cf 92       	push	r12
   134fc:	df 92       	push	r13
   134fe:	ef 92       	push	r14
   13500:	ff 92       	push	r15
   13502:	0f 93       	push	r16
   13504:	1f 93       	push	r17
   13506:	cf 93       	push	r28
   13508:	df 93       	push	r29
   1350a:	cd b7       	in	r28, 0x3d	; 61
   1350c:	de b7       	in	r29, 0x3e	; 62
   1350e:	af 97       	sbiw	r28, 0x2f	; 47
   13510:	0f b6       	in	r0, 0x3f	; 63
   13512:	f8 94       	cli
   13514:	de bf       	out	0x3e, r29	; 62
   13516:	0f be       	out	0x3f, r0	; 63
   13518:	cd bf       	out	0x3d, r28	; 61
   1351a:	7c 01       	movw	r14, r24
   1351c:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   1351e:	02 ee       	ldi	r16, 0xE2	; 226
   13520:	12 e0       	ldi	r17, 0x02	; 2
   13522:	1a 83       	std	Y+2, r17	; 0x02
   13524:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   13526:	1c 86       	std	Y+12, r1	; 0x0c
   13528:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1352a:	88 ee       	ldi	r24, 0xE8	; 232
   1352c:	93 e0       	ldi	r25, 0x03	; 3
   1352e:	a0 e0       	ldi	r26, 0x00	; 0
   13530:	b0 e0       	ldi	r27, 0x00	; 0
   13532:	8d 87       	std	Y+13, r24	; 0x0d
   13534:	9e 87       	std	Y+14, r25	; 0x0e
   13536:	af 87       	std	Y+15, r26	; 0x0f
   13538:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   1353a:	88 e9       	ldi	r24, 0x98	; 152
   1353c:	92 e0       	ldi	r25, 0x02	; 2
   1353e:	9a 87       	std	Y+10, r25	; 0x0a
   13540:	89 87       	std	Y+9, r24	; 0x09
   13542:	88 e0       	ldi	r24, 0x08	; 8
   13544:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
   13546:	19 8f       	std	Y+25, r17	; 0x19
   13548:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   1354a:	1a 8e       	std	Y+26, r1	; 0x1a
   1354c:	1b 8e       	std	Y+27, r1	; 0x1b
   1354e:	1c 8e       	std	Y+28, r1	; 0x1c
   13550:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   13552:	1b a7       	std	Y+43, r17	; 0x2b
   13554:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   13556:	1c a6       	std	Y+44, r1	; 0x2c
   13558:	1d a6       	std	Y+45, r1	; 0x2d
   1355a:	1e a6       	std	Y+46, r1	; 0x2e
   1355c:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   1355e:	80 91 95 0c 	lds	r24, 0x0C95	; 0x800c95 <Ethernet+0x2>
   13562:	90 91 96 0c 	lds	r25, 0x0C96	; 0x800c96 <Ethernet+0x3>
   13566:	a0 91 97 0c 	lds	r26, 0x0C97	; 0x800c97 <Ethernet+0x4>
   1356a:	b0 91 98 0c 	lds	r27, 0x0C98	; 0x800c98 <Ethernet+0x5>
   1356e:	8e a3       	std	Y+38, r24	; 0x26
   13570:	9f a3       	std	Y+39, r25	; 0x27
   13572:	a8 a7       	std	Y+40, r26	; 0x28
   13574:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   13576:	8b 83       	std	Y+3, r24	; 0x03
   13578:	9c 83       	std	Y+4, r25	; 0x04
   1357a:	ad 83       	std	Y+5, r26	; 0x05
   1357c:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   1357e:	18 86       	std	Y+8, r1	; 0x08
   13580:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   13582:	ae 01       	movw	r20, r28
   13584:	46 5d       	subi	r20, 0xD6	; 214
   13586:	5f 4f       	sbci	r21, 0xFF	; 255
   13588:	ce 01       	movw	r24, r28
   1358a:	01 96       	adiw	r24, 0x01	; 1
   1358c:	0e 94 5c 47 	call	0x8eb8	; 0x8eb8 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   13590:	81 30       	cpi	r24, 0x01	; 1
   13592:	91 05       	cpc	r25, r1
   13594:	b1 f4       	brne	.+44     	; 0x135c2 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   13596:	d7 01       	movw	r26, r14
   13598:	ed 91       	ld	r30, X+
   1359a:	fc 91       	ld	r31, X
   1359c:	04 88       	ldd	r0, Z+20	; 0x14
   1359e:	f5 89       	ldd	r31, Z+21	; 0x15
   135a0:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   135a2:	1d a3       	std	Y+37, r17	; 0x25
   135a4:	0c a3       	std	Y+36, r16	; 0x24
   135a6:	8c a5       	ldd	r24, Y+44	; 0x2c
   135a8:	9d a5       	ldd	r25, Y+45	; 0x2d
   135aa:	ae a5       	ldd	r26, Y+46	; 0x2e
   135ac:	bf a5       	ldd	r27, Y+47	; 0x2f
   135ae:	8e a3       	std	Y+38, r24	; 0x26
   135b0:	9f a3       	std	Y+39, r25	; 0x27
   135b2:	a8 a7       	std	Y+40, r26	; 0x28
   135b4:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   135b6:	a6 01       	movw	r20, r12
   135b8:	be 01       	movw	r22, r28
   135ba:	6c 5d       	subi	r22, 0xDC	; 220
   135bc:	7f 4f       	sbci	r23, 0xFF	; 255
   135be:	c7 01       	movw	r24, r14
   135c0:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   135c2:	af 96       	adiw	r28, 0x2f	; 47
   135c4:	0f b6       	in	r0, 0x3f	; 63
   135c6:	f8 94       	cli
   135c8:	de bf       	out	0x3e, r29	; 62
   135ca:	0f be       	out	0x3f, r0	; 63
   135cc:	cd bf       	out	0x3d, r28	; 61
   135ce:	df 91       	pop	r29
   135d0:	cf 91       	pop	r28
   135d2:	1f 91       	pop	r17
   135d4:	0f 91       	pop	r16
   135d6:	ff 90       	pop	r15
   135d8:	ef 90       	pop	r14
   135da:	df 90       	pop	r13
   135dc:	cf 90       	pop	r12
   135de:	08 95       	ret

000135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.194():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   135e0:	ef 92       	push	r14
   135e2:	ff 92       	push	r15
   135e4:	0f 93       	push	r16
   135e6:	1f 93       	push	r17
   135e8:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   135ea:	e0 90 4d 0e 	lds	r14, 0x0E4D	; 0x800e4d <my_lcd+0xa>
   135ee:	f0 90 4e 0e 	lds	r15, 0x0E4E	; 0x800e4e <my_lcd+0xb>
   135f2:	01 e0       	ldi	r16, 0x01	; 1
   135f4:	10 e0       	ldi	r17, 0x00	; 0
   135f6:	ab 01       	movw	r20, r22
   135f8:	bc 01       	movw	r22, r24
   135fa:	83 e4       	ldi	r24, 0x43	; 67
   135fc:	9e e0       	ldi	r25, 0x0E	; 14
   135fe:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   13602:	1f 91       	pop	r17
   13604:	0f 91       	pop	r16
   13606:	ff 90       	pop	r15
   13608:	ef 90       	pop	r14
   1360a:	08 95       	ret

0001360c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1360c:	8f 92       	push	r8
   1360e:	9f 92       	push	r9
   13610:	af 92       	push	r10
   13612:	bf 92       	push	r11
   13614:	cf 92       	push	r12
   13616:	df 92       	push	r13
   13618:	ef 92       	push	r14
   1361a:	ff 92       	push	r15
   1361c:	0f 93       	push	r16
   1361e:	1f 93       	push	r17
   13620:	cf 93       	push	r28
   13622:	df 93       	push	r29
   13624:	6c 01       	movw	r12, r24
   13626:	eb 01       	movw	r28, r22
   13628:	4a 01       	movw	r8, r20
   1362a:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   1362c:	9a 01       	movw	r18, r20
   1362e:	28 1b       	sub	r18, r24
   13630:	39 0b       	sbc	r19, r25
   13632:	89 01       	movw	r16, r18
   13634:	0f 5f       	subi	r16, 0xFF	; 255
   13636:	1f 4f       	sbci	r17, 0xFF	; 255
   13638:	c7 01       	movw	r24, r14
   1363a:	86 1b       	sub	r24, r22
   1363c:	97 0b       	sbc	r25, r23
   1363e:	5c 01       	movw	r10, r24
   13640:	4f ef       	ldi	r20, 0xFF	; 255
   13642:	a4 1a       	sub	r10, r20
   13644:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   13646:	17 ff       	sbrs	r17, 7
   13648:	04 c0       	rjmp	.+8      	; 0x13652 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   1364a:	89 01       	movw	r16, r18
   1364c:	00 95       	com	r16
   1364e:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   13650:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   13652:	b7 fe       	sbrs	r11, 7
   13654:	04 c0       	rjmp	.+8      	; 0x1365e <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.193]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   13656:	5c 01       	movw	r10, r24
   13658:	a0 94       	com	r10
   1365a:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   1365c:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   1365e:	a8 01       	movw	r20, r16
   13660:	be 01       	movw	r22, r28
   13662:	c6 01       	movw	r24, r12
   13664:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   13668:	a8 01       	movw	r20, r16
   1366a:	b7 01       	movw	r22, r14
   1366c:	c6 01       	movw	r24, r12
   1366e:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.194]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   13672:	e0 90 4d 0e 	lds	r14, 0x0E4D	; 0x800e4d <my_lcd+0xa>
   13676:	f0 90 4e 0e 	lds	r15, 0x0E4E	; 0x800e4e <my_lcd+0xb>
   1367a:	85 01       	movw	r16, r10
   1367c:	21 e0       	ldi	r18, 0x01	; 1
   1367e:	30 e0       	ldi	r19, 0x00	; 0
   13680:	ae 01       	movw	r20, r28
   13682:	b6 01       	movw	r22, r12
   13684:	83 e4       	ldi	r24, 0x43	; 67
   13686:	9e e0       	ldi	r25, 0x0E	; 14
   13688:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1368c:	e0 90 4d 0e 	lds	r14, 0x0E4D	; 0x800e4d <my_lcd+0xa>
   13690:	f0 90 4e 0e 	lds	r15, 0x0E4E	; 0x800e4e <my_lcd+0xb>
   13694:	21 e0       	ldi	r18, 0x01	; 1
   13696:	30 e0       	ldi	r19, 0x00	; 0
   13698:	ae 01       	movw	r20, r28
   1369a:	b4 01       	movw	r22, r8
   1369c:	83 e4       	ldi	r24, 0x43	; 67
   1369e:	9e e0       	ldi	r25, 0x0E	; 14
   136a0:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   136a4:	df 91       	pop	r29
   136a6:	cf 91       	pop	r28
   136a8:	1f 91       	pop	r17
   136aa:	0f 91       	pop	r16
   136ac:	ff 90       	pop	r15
   136ae:	ef 90       	pop	r14
   136b0:	df 90       	pop	r13
   136b2:	cf 90       	pop	r12
   136b4:	bf 90       	pop	r11
   136b6:	af 90       	pop	r10
   136b8:	9f 90       	pop	r9
   136ba:	8f 90       	pop	r8
   136bc:	08 95       	ret

000136be <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.192():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   136be:	ef 92       	push	r14
   136c0:	ff 92       	push	r15
   136c2:	0f 93       	push	r16
   136c4:	1f 93       	push	r17
   136c6:	cf 93       	push	r28
   136c8:	df 93       	push	r29
   136ca:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   136cc:	ea 01       	movw	r28, r20
   136ce:	c8 1b       	sub	r28, r24
   136d0:	d9 0b       	sbc	r29, r25
   136d2:	9e 01       	movw	r18, r28
   136d4:	2f 5f       	subi	r18, 0xFF	; 255
   136d6:	3f 4f       	sbci	r19, 0xFF	; 255
   136d8:	df 01       	movw	r26, r30
   136da:	a6 1b       	sub	r26, r22
   136dc:	b7 0b       	sbc	r27, r23
   136de:	8d 01       	movw	r16, r26
   136e0:	0f 5f       	subi	r16, 0xFF	; 255
   136e2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   136e4:	37 ff       	sbrs	r19, 7
   136e6:	04 c0       	rjmp	.+8      	; 0x136f0 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   136e8:	9e 01       	movw	r18, r28
   136ea:	20 95       	com	r18
   136ec:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   136ee:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   136f0:	17 ff       	sbrs	r17, 7
   136f2:	04 c0       	rjmp	.+8      	; 0x136fc <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.192]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   136f4:	8d 01       	movw	r16, r26
   136f6:	00 95       	com	r16
   136f8:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   136fa:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   136fc:	e0 90 4d 0e 	lds	r14, 0x0E4D	; 0x800e4d <my_lcd+0xa>
   13700:	f0 90 4e 0e 	lds	r15, 0x0E4E	; 0x800e4e <my_lcd+0xb>
   13704:	ab 01       	movw	r20, r22
   13706:	bc 01       	movw	r22, r24
   13708:	83 e4       	ldi	r24, 0x43	; 67
   1370a:	9e e0       	ldi	r25, 0x0E	; 14
   1370c:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   13710:	df 91       	pop	r29
   13712:	cf 91       	pop	r28
   13714:	1f 91       	pop	r17
   13716:	0f 91       	pop	r16
   13718:	ff 90       	pop	r15
   1371a:	ef 90       	pop	r14
   1371c:	08 95       	ret

0001371e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.188]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.188():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   1371e:	cf 92       	push	r12
   13720:	df 92       	push	r13
   13722:	ef 92       	push	r14
   13724:	ff 92       	push	r15
   13726:	6b 01       	movw	r12, r22
   13728:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   1372a:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <SRAM+0x4>
   1372e:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <SRAM+0x5>
   13732:	a0 91 0f 0d 	lds	r26, 0x0D0F	; 0x800d0f <SRAM+0x6>
   13736:	b0 91 10 0d 	lds	r27, 0x0D10	; 0x800d10 <SRAM+0x7>
   1373a:	01 97       	sbiw	r24, 0x01	; 1
   1373c:	a1 40       	sbci	r26, 0x01	; 1
   1373e:	b1 05       	cpc	r27, r1
   13740:	48 f0       	brcs	.+18     	; 0x13754 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.188]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   13742:	b7 01       	movw	r22, r14
   13744:	88 27       	eor	r24, r24
   13746:	99 27       	eor	r25, r25
   13748:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   1374c:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   13750:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   13754:	99 27       	eor	r25, r25
   13756:	8f 2d       	mov	r24, r15
   13758:	7e 2d       	mov	r23, r14
   1375a:	6d 2d       	mov	r22, r13
   1375c:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   13760:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   13764:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   13768:	6c 2d       	mov	r22, r12
   1376a:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   1376e:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   13772:	ff 90       	pop	r15
   13774:	ef 90       	pop	r14
   13776:	df 90       	pop	r13
   13778:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   1377a:	0c 94 8e 4a 	jmp	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>

0001377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>:
_ZN7TwoWire17beginTransmissionEh.constprop.171():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   1377e:	91 e0       	ldi	r25, 0x01	; 1
   13780:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   13784:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   13788:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   1378c:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:150
}
   13790:	08 95       	ret

00013792 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.165]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.165():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   13792:	ef 92       	push	r14
   13794:	ff 92       	push	r15
   13796:	0f 93       	push	r16
   13798:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1379a:	e3 e4       	ldi	r30, 0x43	; 67
   1379c:	fe e0       	ldi	r31, 0x0E	; 14
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.165():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   1379e:	04 89       	ldd	r16, Z+20	; 0x14
   137a0:	15 89       	ldd	r17, Z+21	; 0x15
   137a2:	22 89       	ldd	r18, Z+18	; 0x12
   137a4:	33 89       	ldd	r19, Z+19	; 0x13
   137a6:	7c 01       	movw	r14, r24
   137a8:	50 e0       	ldi	r21, 0x00	; 0
   137aa:	40 e0       	ldi	r20, 0x00	; 0
   137ac:	70 e0       	ldi	r23, 0x00	; 0
   137ae:	60 e0       	ldi	r22, 0x00	; 0
   137b0:	cf 01       	movw	r24, r30
   137b2:	0e 94 4b 31 	call	0x6296	; 0x6296 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   137b6:	1f 91       	pop	r17
   137b8:	0f 91       	pop	r16
   137ba:	ff 90       	pop	r15
   137bc:	ef 90       	pop	r14
   137be:	08 95       	ret

000137c0 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]>:
_Z19MenuHistoryPrevMenujjh.constprop.164():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   137c0:	80 91 f5 0b 	lds	r24, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
   137c4:	88 23       	and	r24, r24
   137c6:	29 f0       	breq	.+10     	; 0x137d2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.164]+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
  {
    MenuHistoryIndex--;
   137c8:	81 50       	subi	r24, 0x01	; 1
   137ca:	80 93 f5 0b 	sts	0x0BF5, r24	; 0x800bf5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
    MenuPrepareStyle();
   137ce:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
  }
}
   137d2:	08 95       	ret

000137d4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]>:
_Z19MenuHistoryNextMenujjh.constprop.163():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2126
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t args3)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   137d4:	20 91 f5 0b 	lds	r18, 0x0BF5	; 0x800bf5 <MenuHistoryIndex>
   137d8:	2a 30       	cpi	r18, 0x0A	; 10
   137da:	70 f4       	brcc	.+28     	; 0x137f8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.163]+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
  {
    MenuHistoryIndex++;
   137dc:	2f 5f       	subi	r18, 0xFF	; 255
   137de:	20 93 f5 0b 	sts	0x0BF5, r18	; 0x800bf5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
    MenuHistory[MenuHistoryIndex] = id;
   137e2:	30 e0       	ldi	r19, 0x00	; 0
   137e4:	f9 01       	movw	r30, r18
   137e6:	e5 51       	subi	r30, 0x15	; 21
   137e8:	f4 4f       	sbci	r31, 0xF4	; 244
   137ea:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
    Global_menu_args1[MenuHistoryIndex] = args1;
   137ec:	2f 51       	subi	r18, 0x1F	; 31
   137ee:	34 4f       	sbci	r19, 0xF4	; 244
   137f0:	f9 01       	movw	r30, r18
   137f2:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
    MenuPrepareStyle();
   137f4:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
  }
}
   137f8:	08 95       	ret

000137fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]>:
_Z11show_stringPciihjjb.constprop.151():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2571
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   137fa:	8f 92       	push	r8
   137fc:	9f 92       	push	r9
   137fe:	af 92       	push	r10
   13800:	bf 92       	push	r11
   13802:	cf 92       	push	r12
   13804:	df 92       	push	r13
   13806:	ef 92       	push	r14
   13808:	ff 92       	push	r15
   1380a:	0f 93       	push	r16
   1380c:	1f 93       	push	r17
   1380e:	cf 93       	push	r28
   13810:	df 93       	push	r29
   13812:	00 d0       	rcall	.+0      	; 0x13814 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x1a>
   13814:	00 d0       	rcall	.+0      	; 0x13816 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x1c>
   13816:	cd b7       	in	r28, 0x3d	; 61
   13818:	de b7       	in	r29, 0x3e	; 62
   1381a:	6c 01       	movw	r12, r24
   1381c:	5b 01       	movw	r10, r22
   1381e:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   13820:	10 92 50 0e 	sts	0x0E50, r1	; 0x800e50 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   13824:	20 93 4f 0e 	sts	0x0E4F, r18	; 0x800e4f <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   13828:	10 93 4a 0e 	sts	0x0E4A, r17	; 0x800e4a <my_lcd+0x7>
   1382c:	00 93 49 0e 	sts	0x0E49, r16	; 0x800e49 <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   13830:	f0 92 4c 0e 	sts	0x0E4C, r15	; 0x800e4c <my_lcd+0x9>
   13834:	e0 92 4b 0e 	sts	0x0E4B, r14	; 0x800e4b <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   13838:	1a 82       	std	Y+2, r1	; 0x02
   1383a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1383c:	1c 82       	std	Y+4, r1	; 0x04
   1383e:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   13840:	1e 82       	std	Y+6, r1	; 0x06
   13842:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   13844:	00 97       	sbiw	r24, 0x00	; 0
   13846:	69 f1       	breq	.+90     	; 0x138a2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0xa8>
   13848:	fc 01       	movw	r30, r24
   1384a:	01 90       	ld	r0, Z+
   1384c:	00 20       	and	r0, r0
   1384e:	e9 f7       	brne	.-6      	; 0x1384a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x50>
   13850:	31 97       	sbiw	r30, 0x01	; 1
   13852:	8f 01       	movw	r16, r30
   13854:	08 1b       	sub	r16, r24
   13856:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   13858:	b8 01       	movw	r22, r16
   1385a:	6f 5f       	subi	r22, 0xFF	; 255
   1385c:	7f 4f       	sbci	r23, 0xFF	; 255
   1385e:	90 e0       	ldi	r25, 0x00	; 0
   13860:	80 e0       	ldi	r24, 0x00	; 0
   13862:	0e 94 6c cf 	call	0x19ed8	; 0x19ed8 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   13866:	00 97       	sbiw	r24, 0x00	; 0
   13868:	81 f0       	breq	.+32     	; 0x1388a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1386a:	9a 83       	std	Y+2, r25	; 0x02
   1386c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1386e:	1c 83       	std	Y+4, r17	; 0x04
   13870:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   13872:	2d 81       	ldd	r18, Y+5	; 0x05
   13874:	3e 81       	ldd	r19, Y+6	; 0x06
   13876:	23 2b       	or	r18, r19
   13878:	11 f4       	brne	.+4      	; 0x1387e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x84>
   1387a:	fc 01       	movw	r30, r24
   1387c:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1387e:	1e 83       	std	Y+6, r17	; 0x06
   13880:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   13882:	b6 01       	movw	r22, r12
   13884:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
   13888:	0c c0       	rjmp	.+24     	; 0x138a2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   1388a:	89 81       	ldd	r24, Y+1	; 0x01
   1388c:	9a 81       	ldd	r25, Y+2	; 0x02
   1388e:	00 97       	sbiw	r24, 0x00	; 0
   13890:	11 f0       	breq	.+4      	; 0x13896 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.151]+0x9c>
   13892:	0e 94 dc c8 	call	0x191b8	; 0x191b8 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   13896:	1a 82       	std	Y+2, r1	; 0x02
   13898:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1389a:	1e 82       	std	Y+6, r1	; 0x06
   1389c:	1d 82       	std	Y+5, r1	; 0x05
   1389e:	1c 82       	std	Y+4, r1	; 0x04
   138a0:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.151():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2577
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   138a2:	a4 01       	movw	r20, r8
   138a4:	b5 01       	movw	r22, r10
   138a6:	ce 01       	movw	r24, r28
   138a8:	01 96       	adiw	r24, 0x01	; 1
   138aa:	0e 94 50 98 	call	0x130a0	; 0x130a0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.156]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   138ae:	89 81       	ldd	r24, Y+1	; 0x01
   138b0:	9a 81       	ldd	r25, Y+2	; 0x02
   138b2:	0e 94 dc c8 	call	0x191b8	; 0x191b8 <free>
_Z11show_stringPciihjjb.constprop.151():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
}
   138b6:	26 96       	adiw	r28, 0x06	; 6
   138b8:	0f b6       	in	r0, 0x3f	; 63
   138ba:	f8 94       	cli
   138bc:	de bf       	out	0x3e, r29	; 62
   138be:	0f be       	out	0x3f, r0	; 63
   138c0:	cd bf       	out	0x3d, r28	; 61
   138c2:	df 91       	pop	r29
   138c4:	cf 91       	pop	r28
   138c6:	1f 91       	pop	r17
   138c8:	0f 91       	pop	r16
   138ca:	ff 90       	pop	r15
   138cc:	ef 90       	pop	r14
   138ce:	df 90       	pop	r13
   138d0:	cf 90       	pop	r12
   138d2:	bf 90       	pop	r11
   138d4:	af 90       	pop	r10
   138d6:	9f 90       	pop	r9
   138d8:	8f 90       	pop	r8
   138da:	08 95       	ret

000138dc <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.150():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   138dc:	cf 93       	push	r28
   138de:	df 93       	push	r29
   138e0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   138e2:	fa 01       	movw	r30, r20
   138e4:	32 96       	adiw	r30, 0x02	; 2
   138e6:	e6 0f       	add	r30, r22
   138e8:	f7 1f       	adc	r31, r23
   138ea:	dc 01       	movw	r26, r24
   138ec:	9d 01       	movw	r18, r26
   138ee:	2c 1b       	sub	r18, r28
   138f0:	3d 0b       	sbc	r19, r29
   138f2:	cf 01       	movw	r24, r30
   138f4:	86 1b       	sub	r24, r22
   138f6:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   138f8:	4d 91       	ld	r20, X+
   138fa:	44 23       	and	r20, r20
   138fc:	11 f0       	breq	.+4      	; 0x13902 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   138fe:	41 93       	st	Z+, r20
   13900:	f5 cf       	rjmp	.-22     	; 0x138ec <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   13902:	ac 01       	movw	r20, r24
   13904:	42 1b       	sub	r20, r18
   13906:	53 0b       	sbc	r21, r19
   13908:	64 0f       	add	r22, r20
   1390a:	75 1f       	adc	r23, r21
   1390c:	fb 01       	movw	r30, r22
   1390e:	32 97       	sbiw	r30, 0x02	; 2
   13910:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   13912:	61 50       	subi	r22, 0x01	; 1
   13914:	71 09       	sbc	r23, r1
   13916:	fb 01       	movw	r30, r22
   13918:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   1391a:	df 91       	pop	r29
   1391c:	cf 91       	pop	r28
   1391e:	08 95       	ret

00013920 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.118():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   13920:	ef 92       	push	r14
   13922:	ff 92       	push	r15
   13924:	0f 93       	push	r16
   13926:	1f 93       	push	r17
   13928:	cf 93       	push	r28
   1392a:	df 93       	push	r29
   1392c:	00 d0       	rcall	.+0      	; 0x1392e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0xe>
   1392e:	00 d0       	rcall	.+0      	; 0x13930 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x10>
   13930:	00 d0       	rcall	.+0      	; 0x13932 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x12>
   13932:	1f 92       	push	r1
   13934:	cd b7       	in	r28, 0x3d	; 61
   13936:	de b7       	in	r29, 0x3e	; 62
   13938:	fe 01       	movw	r30, r28
   1393a:	31 96       	adiw	r30, 0x01	; 1
   1393c:	ae 01       	movw	r20, r28
   1393e:	45 5f       	subi	r20, 0xF5	; 245
   13940:	5f 4f       	sbci	r21, 0xFF	; 255
   13942:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   13944:	20 91 34 0e 	lds	r18, 0x0E34	; 0x800e34 <my_touch+0xf>
   13948:	30 91 35 0e 	lds	r19, 0x0E35	; 0x800e35 <my_touch+0x10>
   1394c:	d9 01       	movw	r26, r18
   1394e:	6c 91       	ld	r22, X
   13950:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <my_touch+0x19>
   13954:	90 95       	com	r25
   13956:	96 23       	and	r25, r22
   13958:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   1395a:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <my_touch+0x11>
   1395e:	30 91 37 0e 	lds	r19, 0x0E37	; 0x800e37 <my_touch+0x12>
   13962:	d9 01       	movw	r26, r18
   13964:	6c 91       	ld	r22, X
   13966:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   1396a:	90 95       	com	r25
   1396c:	96 23       	and	r25, r22
   1396e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   13970:	20 91 3a 0e 	lds	r18, 0x0E3A	; 0x800e3a <my_touch+0x15>
   13974:	30 91 3b 0e 	lds	r19, 0x0E3B	; 0x800e3b <my_touch+0x16>
   13978:	d9 01       	movw	r26, r18
   1397a:	6c 91       	ld	r22, X
   1397c:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <my_touch+0x1c>
   13980:	90 95       	com	r25
   13982:	96 23       	and	r25, r22
   13984:	9c 93       	st	X, r25
   13986:	28 e0       	ldi	r18, 0x08	; 8
   13988:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.118():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   1398a:	10 e8       	ldi	r17, 0x80	; 128
   1398c:	60 91 3a 0e 	lds	r22, 0x0E3A	; 0x800e3a <my_touch+0x15>
   13990:	70 91 3b 0e 	lds	r23, 0x0E3B	; 0x800e3b <my_touch+0x16>
   13994:	90 91 41 0e 	lds	r25, 0x0E41	; 0x800e41 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   13998:	08 2f       	mov	r16, r24
   1399a:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   1399c:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   1399e:	09 f4       	brne	.+2      	; 0x139a2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x82>
   139a0:	b1 c0       	rjmp	.+354    	; 0x13b04 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   139a2:	0c 91       	ld	r16, X
   139a4:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   139a6:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   139a8:	60 91 36 0e 	lds	r22, 0x0E36	; 0x800e36 <my_touch+0x11>
   139ac:	70 91 37 0e 	lds	r23, 0x0E37	; 0x800e37 <my_touch+0x12>
   139b0:	db 01       	movw	r26, r22
   139b2:	0c 91       	ld	r16, X
   139b4:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   139b8:	90 95       	com	r25
   139ba:	90 23       	and	r25, r16
   139bc:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   139be:	60 91 36 0e 	lds	r22, 0x0E36	; 0x800e36 <my_touch+0x11>
   139c2:	70 91 37 0e 	lds	r23, 0x0E37	; 0x800e37 <my_touch+0x12>
   139c6:	db 01       	movw	r26, r22
   139c8:	9c 91       	ld	r25, X
   139ca:	00 91 3f 0e 	lds	r16, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   139ce:	90 2b       	or	r25, r16
   139d0:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   139d2:	16 95       	lsr	r17
   139d4:	21 50       	subi	r18, 0x01	; 1
   139d6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   139d8:	c9 f6       	brne	.-78     	; 0x1398c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   139da:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <my_touch+0x11>
   139de:	30 91 37 0e 	lds	r19, 0x0E37	; 0x800e37 <my_touch+0x12>
   139e2:	d9 01       	movw	r26, r18
   139e4:	6c 91       	ld	r22, X
   139e6:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   139ea:	90 95       	com	r25
   139ec:	96 23       	and	r25, r22
   139ee:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   139f0:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <my_touch+0x11>
   139f4:	30 91 37 0e 	lds	r19, 0x0E37	; 0x800e37 <my_touch+0x12>
   139f8:	d9 01       	movw	r26, r18
   139fa:	9c 91       	ld	r25, X
   139fc:	60 91 3f 0e 	lds	r22, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   13a00:	96 2b       	or	r25, r22
   13a02:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   13a04:	20 91 36 0e 	lds	r18, 0x0E36	; 0x800e36 <my_touch+0x11>
   13a08:	30 91 37 0e 	lds	r19, 0x0E37	; 0x800e37 <my_touch+0x12>
   13a0c:	d9 01       	movw	r26, r18
   13a0e:	6c 91       	ld	r22, X
   13a10:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   13a14:	90 95       	com	r25
   13a16:	96 23       	and	r25, r22
   13a18:	9c 93       	st	X, r25
   13a1a:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.118():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   13a1c:	30 e0       	ldi	r19, 0x00	; 0
   13a1e:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   13a20:	22 0f       	add	r18, r18
   13a22:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   13a24:	00 91 36 0e 	lds	r16, 0x0E36	; 0x800e36 <my_touch+0x11>
   13a28:	10 91 37 0e 	lds	r17, 0x0E37	; 0x800e37 <my_touch+0x12>
   13a2c:	d8 01       	movw	r26, r16
   13a2e:	7c 91       	ld	r23, X
   13a30:	90 91 3f 0e 	lds	r25, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   13a34:	90 95       	com	r25
   13a36:	97 23       	and	r25, r23
   13a38:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   13a3a:	00 91 36 0e 	lds	r16, 0x0E36	; 0x800e36 <my_touch+0x11>
   13a3e:	10 91 37 0e 	lds	r17, 0x0E37	; 0x800e37 <my_touch+0x12>
   13a42:	d8 01       	movw	r26, r16
   13a44:	9c 91       	ld	r25, X
   13a46:	70 91 3f 0e 	lds	r23, 0x0E3F	; 0x800e3f <my_touch+0x1a>
   13a4a:	97 2b       	or	r25, r23
   13a4c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   13a4e:	00 91 38 0e 	lds	r16, 0x0E38	; 0x800e38 <my_touch+0x13>
   13a52:	10 91 39 0e 	lds	r17, 0x0E39	; 0x800e39 <my_touch+0x14>
   13a56:	d8 01       	movw	r26, r16
   13a58:	9c 91       	ld	r25, X
   13a5a:	70 91 40 0e 	lds	r23, 0x0E40	; 0x800e40 <my_touch+0x1b>
   13a5e:	97 23       	and	r25, r23
   13a60:	11 f0       	breq	.+4      	; 0x13a66 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   13a62:	2f 5f       	subi	r18, 0xFF	; 255
   13a64:	3f 4f       	sbci	r19, 0xFF	; 255
   13a66:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   13a68:	d9 f6       	brne	.-74     	; 0x13a20 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   13a6a:	60 91 34 0e 	lds	r22, 0x0E34	; 0x800e34 <my_touch+0xf>
   13a6e:	70 91 35 0e 	lds	r23, 0x0E35	; 0x800e35 <my_touch+0x10>
   13a72:	db 01       	movw	r26, r22
   13a74:	9c 91       	ld	r25, X
   13a76:	10 91 3e 0e 	lds	r17, 0x0E3E	; 0x800e3e <my_touch+0x19>
   13a7a:	91 2b       	or	r25, r17
   13a7c:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   13a7e:	94 e0       	ldi	r25, 0x04	; 4
   13a80:	36 95       	lsr	r19
   13a82:	27 95       	ror	r18
   13a84:	9a 95       	dec	r25
   13a86:	e1 f7       	brne	.-8      	; 0x13a80 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.118():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   13a88:	d7 01       	movw	r26, r14
   13a8a:	2d 93       	st	X+, r18
   13a8c:	3d 93       	st	X+, r19
   13a8e:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   13a90:	a4 17       	cp	r26, r20
   13a92:	b5 07       	cpc	r27, r21
   13a94:	09 f0       	breq	.+2      	; 0x13a98 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x178>
   13a96:	56 cf       	rjmp	.-340    	; 0x13944 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x24>
   13a98:	cf 01       	movw	r24, r30
   13a9a:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   13a9c:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   13a9e:	20 81       	ld	r18, Z
   13aa0:	31 81       	ldd	r19, Z+1	; 0x01
   13aa2:	12 96       	adiw	r26, 0x02	; 2
   13aa4:	4d 91       	ld	r20, X+
   13aa6:	5c 91       	ld	r21, X
   13aa8:	13 97       	sbiw	r26, 0x03	; 3
   13aaa:	42 17       	cp	r20, r18
   13aac:	53 07       	cpc	r21, r19
   13aae:	30 f4       	brcc	.+12     	; 0x13abc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   13ab0:	51 83       	std	Z+1, r21	; 0x01
   13ab2:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   13ab4:	13 96       	adiw	r26, 0x03	; 3
   13ab6:	3c 93       	st	X, r19
   13ab8:	2e 93       	st	-X, r18
   13aba:	12 97       	sbiw	r26, 0x02	; 2
   13abc:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   13abe:	8a 17       	cp	r24, r26
   13ac0:	9b 07       	cpc	r25, r27
   13ac2:	69 f7       	brne	.-38     	; 0x13a9e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x17e>
   13ac4:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   13ac6:	e8 17       	cp	r30, r24
   13ac8:	f9 07       	cpc	r31, r25
   13aca:	41 f7       	brne	.-48     	; 0x13a9c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   13acc:	8b 81       	ldd	r24, Y+3	; 0x03
   13ace:	9c 81       	ldd	r25, Y+4	; 0x04
   13ad0:	2d 81       	ldd	r18, Y+5	; 0x05
   13ad2:	3e 81       	ldd	r19, Y+6	; 0x06
   13ad4:	82 0f       	add	r24, r18
   13ad6:	93 1f       	adc	r25, r19
   13ad8:	2f 81       	ldd	r18, Y+7	; 0x07
   13ada:	38 85       	ldd	r19, Y+8	; 0x08
   13adc:	82 0f       	add	r24, r18
   13ade:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   13ae0:	63 e0       	ldi	r22, 0x03	; 3
   13ae2:	70 e0       	ldi	r23, 0x00	; 0
   13ae4:	0e 94 bb cd 	call	0x19b76	; 0x19b76 <__udivmodhi4>
   13ae8:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   13aea:	2a 96       	adiw	r28, 0x0a	; 10
   13aec:	0f b6       	in	r0, 0x3f	; 63
   13aee:	f8 94       	cli
   13af0:	de bf       	out	0x3e, r29	; 62
   13af2:	0f be       	out	0x3f, r0	; 63
   13af4:	cd bf       	out	0x3d, r28	; 61
   13af6:	df 91       	pop	r29
   13af8:	cf 91       	pop	r28
   13afa:	1f 91       	pop	r17
   13afc:	0f 91       	pop	r16
   13afe:	ff 90       	pop	r15
   13b00:	ef 90       	pop	r14
   13b02:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   13b04:	0c 91       	ld	r16, X
   13b06:	90 95       	com	r25
   13b08:	90 23       	and	r25, r16
   13b0a:	4d cf       	rjmp	.-358    	; 0x139a6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.118]+0x86>

00013b0c <TwoWire::write(int) [clone .constprop.97]>:
_ZN7TwoWire5writeEi.constprop.97():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   13b0c:	68 2f       	mov	r22, r24
   13b0e:	82 e8       	ldi	r24, 0x82	; 130
   13b10:	9e e0       	ldi	r25, 0x0E	; 14
   13b12:	0c 94 c1 97 	jmp	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>

00013b16 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.72():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   13b16:	0f 93       	push	r16
   13b18:	1f 93       	push	r17
   13b1a:	cf 93       	push	r28
   13b1c:	df 93       	push	r29
   13b1e:	00 d0       	rcall	.+0      	; 0x13b20 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0xa>
   13b20:	00 d0       	rcall	.+0      	; 0x13b22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0xc>
   13b22:	cd b7       	in	r28, 0x3d	; 61
   13b24:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   13b26:	48 2f       	mov	r20, r24
   13b28:	43 70       	andi	r20, 0x03	; 3
   13b2a:	50 e0       	ldi	r21, 0x00	; 0
   13b2c:	50 93 5a 0e 	sts	0x0E5A, r21	; 0x800e5a <my_lcd+0x17>
   13b30:	40 93 59 0e 	sts	0x0E59, r20	; 0x800e59 <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   13b34:	28 2f       	mov	r18, r24
   13b36:	21 70       	andi	r18, 0x01	; 1
   13b38:	80 ff       	sbrs	r24, 0
   13b3a:	3d c1       	rjmp	.+634    	; 0x13db6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2a0>
   13b3c:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <my_lcd+0x10>
   13b40:	90 91 54 0e 	lds	r25, 0x0E54	; 0x800e54 <my_lcd+0x11>
   13b44:	90 93 56 0e 	sts	0x0E56, r25	; 0x800e56 <my_lcd+0x13>
   13b48:	80 93 55 0e 	sts	0x0E55, r24	; 0x800e55 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   13b4c:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <my_lcd+0xe>
   13b50:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <my_lcd+0xf>
   13b54:	21 11       	cpse	r18, r1
   13b56:	04 c0       	rjmp	.+8      	; 0x13b60 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4a>
   13b58:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <my_lcd+0x10>
   13b5c:	90 91 54 0e 	lds	r25, 0x0E54	; 0x800e54 <my_lcd+0x11>
   13b60:	90 93 58 0e 	sts	0x0E58, r25	; 0x800e58 <my_lcd+0x15>
   13b64:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   13b68:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   13b6c:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   13b70:	8c 91       	ld	r24, X
   13b72:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <my_lcd+0x3a>
   13b76:	89 23       	and	r24, r25
   13b78:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   13b7a:	40 91 5b 0e 	lds	r20, 0x0E5B	; 0x800e5b <my_lcd+0x18>
   13b7e:	50 91 5c 0e 	lds	r21, 0x0E5C	; 0x800e5c <my_lcd+0x19>
   13b82:	80 91 59 0e 	lds	r24, 0x0E59	; 0x800e59 <my_lcd+0x16>
   13b86:	90 91 5a 0e 	lds	r25, 0x0E5A	; 0x800e5a <my_lcd+0x17>
   13b8a:	a0 91 73 0e 	lds	r26, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13b8e:	b0 91 74 0e 	lds	r27, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13b92:	20 91 7e 0e 	lds	r18, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   13b96:	41 15       	cp	r20, r1
   13b98:	51 05       	cpc	r21, r1
   13b9a:	09 f0       	breq	.+2      	; 0x13b9e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x88>
   13b9c:	13 c1       	rjmp	.+550    	; 0x13dc4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2ae>
   13b9e:	01 97       	sbiw	r24, 0x01	; 1
   13ba0:	83 30       	cpi	r24, 0x03	; 3
   13ba2:	91 05       	cpc	r25, r1
   13ba4:	08 f0       	brcs	.+2      	; 0x13ba8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x92>
   13ba6:	0c c1       	rjmp	.+536    	; 0x13dc0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2aa>
   13ba8:	88 0f       	add	r24, r24
   13baa:	99 1f       	adc	r25, r25
   13bac:	fc 01       	movw	r30, r24
   13bae:	e0 5b       	subi	r30, 0xB0	; 176
   13bb0:	fd 4f       	sbci	r31, 0xFD	; 253
   13bb2:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   13bb4:	30 91 6b 0e 	lds	r19, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13bb8:	40 91 6c 0e 	lds	r20, 0x0E6C	; 0x800e6c <my_lcd+0x29>
   13bbc:	8c 91       	ld	r24, X
   13bbe:	28 23       	and	r18, r24
   13bc0:	2c 93       	st	X, r18
   13bc2:	42 b9       	out	0x02, r20	; 2
   13bc4:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13bc8:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13bcc:	80 81       	ld	r24, Z
   13bce:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13bd2:	82 23       	and	r24, r18
   13bd4:	80 83       	st	Z, r24
   13bd6:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13bda:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13bde:	80 81       	ld	r24, Z
   13be0:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13be4:	82 2b       	or	r24, r18
   13be6:	80 83       	st	Z, r24
   13be8:	32 b9       	out	0x02, r19	; 2
   13bea:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13bee:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13bf2:	80 81       	ld	r24, Z
   13bf4:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13bf8:	82 23       	and	r24, r18
   13bfa:	80 83       	st	Z, r24
   13bfc:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13c00:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13c04:	80 81       	ld	r24, Z
   13c06:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13c0a:	82 2b       	or	r24, r18
   13c0c:	80 83       	st	Z, r24
   13c0e:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13c12:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13c16:	80 81       	ld	r24, Z
   13c18:	20 91 7a 0e 	lds	r18, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13c1c:	82 2b       	or	r24, r18
   13c1e:	80 83       	st	Z, r24
   13c20:	80 e1       	ldi	r24, 0x10	; 16
   13c22:	82 b9       	out	0x02, r24	; 2
   13c24:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13c28:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13c2c:	80 81       	ld	r24, Z
   13c2e:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13c32:	82 23       	and	r24, r18
   13c34:	80 83       	st	Z, r24
   13c36:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13c3a:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13c3e:	80 81       	ld	r24, Z
   13c40:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13c44:	82 2b       	or	r24, r18
   13c46:	80 83       	st	Z, r24
   13c48:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   13c4a:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13c4e:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13c52:	80 81       	ld	r24, Z
   13c54:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13c58:	89 23       	and	r24, r25
   13c5a:	80 83       	st	Z, r24
   13c5c:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13c60:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13c64:	80 81       	ld	r24, Z
   13c66:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13c6a:	89 2b       	or	r24, r25
   13c6c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   13c6e:	00 91 57 0e 	lds	r16, 0x0E57	; 0x800e57 <my_lcd+0x14>
   13c72:	10 91 58 0e 	lds	r17, 0x0E58	; 0x800e58 <my_lcd+0x15>
   13c76:	01 50       	subi	r16, 0x01	; 1
   13c78:	11 09       	sbc	r17, r1
   13c7a:	20 91 55 0e 	lds	r18, 0x0E55	; 0x800e55 <my_lcd+0x12>
   13c7e:	30 91 56 0e 	lds	r19, 0x0E56	; 0x800e56 <my_lcd+0x13>
   13c82:	21 50       	subi	r18, 0x01	; 1
   13c84:	31 09       	sbc	r19, r1
   13c86:	50 e0       	ldi	r21, 0x00	; 0
   13c88:	40 e0       	ldi	r20, 0x00	; 0
   13c8a:	70 e0       	ldi	r23, 0x00	; 0
   13c8c:	60 e0       	ldi	r22, 0x00	; 0
   13c8e:	83 e4       	ldi	r24, 0x43	; 67
   13c90:	9e e0       	ldi	r25, 0x0E	; 14
   13c92:	0e 94 d4 4b 	call	0x97a8	; 0x97a8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   13c96:	80 91 5b 0e 	lds	r24, 0x0E5B	; 0x800e5b <my_lcd+0x18>
   13c9a:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <my_lcd+0x19>
   13c9e:	89 2b       	or	r24, r25
   13ca0:	09 f0       	breq	.+2      	; 0x13ca4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x18e>
   13ca2:	9e c1       	rjmp	.+828    	; 0x13fe0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   13ca4:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13ca8:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13cac:	80 81       	ld	r24, Z
   13cae:	90 91 7e 0e 	lds	r25, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   13cb2:	89 23       	and	r24, r25
   13cb4:	80 83       	st	Z, r24
   13cb6:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <my_lcd+0x24>
   13cba:	82 b9       	out	0x02, r24	; 2
   13cbc:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13cc0:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13cc4:	80 81       	ld	r24, Z
   13cc6:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13cca:	89 23       	and	r24, r25
   13ccc:	80 83       	st	Z, r24
   13cce:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13cd2:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13cd6:	80 81       	ld	r24, Z
   13cd8:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13cdc:	89 2b       	or	r24, r25
   13cde:	80 83       	st	Z, r24
   13ce0:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13ce4:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13ce8:	80 81       	ld	r24, Z
   13cea:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13cee:	89 2b       	or	r24, r25
   13cf0:	80 83       	st	Z, r24
   13cf2:	83 e0       	ldi	r24, 0x03	; 3
   13cf4:	82 b9       	out	0x02, r24	; 2
   13cf6:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13cfa:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13cfe:	80 81       	ld	r24, Z
   13d00:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13d04:	89 23       	and	r24, r25
   13d06:	80 83       	st	Z, r24
   13d08:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13d0c:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13d10:	80 81       	ld	r24, Z
   13d12:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13d16:	89 2b       	or	r24, r25
   13d18:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   13d1a:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13d1e:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13d22:	80 81       	ld	r24, Z
   13d24:	90 91 7e 0e 	lds	r25, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   13d28:	89 23       	and	r24, r25
   13d2a:	80 83       	st	Z, r24
   13d2c:	80 91 69 0e 	lds	r24, 0x0E69	; 0x800e69 <my_lcd+0x26>
   13d30:	82 b9       	out	0x02, r24	; 2
   13d32:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13d36:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13d3a:	80 81       	ld	r24, Z
   13d3c:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13d40:	89 23       	and	r24, r25
   13d42:	80 83       	st	Z, r24
   13d44:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13d48:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13d4c:	80 81       	ld	r24, Z
   13d4e:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13d52:	89 2b       	or	r24, r25
   13d54:	80 83       	st	Z, r24
   13d56:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13d5a:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13d5e:	80 81       	ld	r24, Z
   13d60:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13d64:	89 2b       	or	r24, r25
   13d66:	80 83       	st	Z, r24
   13d68:	12 b8       	out	0x02, r1	; 2
   13d6a:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13d6e:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13d72:	80 81       	ld	r24, Z
   13d74:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13d78:	89 23       	and	r24, r25
   13d7a:	80 83       	st	Z, r24
   13d7c:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13d80:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13d84:	80 81       	ld	r24, Z
   13d86:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13d8a:	89 2b       	or	r24, r25
   13d8c:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.72():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   13d8e:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   13d92:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   13d96:	80 81       	ld	r24, Z
   13d98:	90 91 79 0e 	lds	r25, 0x0E79	; 0x800e79 <my_lcd+0x36>
   13d9c:	89 2b       	or	r24, r25
   13d9e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   13da0:	26 96       	adiw	r28, 0x06	; 6
   13da2:	0f b6       	in	r0, 0x3f	; 63
   13da4:	f8 94       	cli
   13da6:	de bf       	out	0x3e, r29	; 62
   13da8:	0f be       	out	0x3f, r0	; 63
   13daa:	cd bf       	out	0x3d, r28	; 61
   13dac:	df 91       	pop	r29
   13dae:	cf 91       	pop	r28
   13db0:	1f 91       	pop	r17
   13db2:	0f 91       	pop	r16
   13db4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   13db6:	80 91 51 0e 	lds	r24, 0x0E51	; 0x800e51 <my_lcd+0xe>
   13dba:	90 91 52 0e 	lds	r25, 0x0E52	; 0x800e52 <my_lcd+0xf>
   13dbe:	c2 ce       	rjmp	.-636    	; 0x13b44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   13dc0:	90 e3       	ldi	r25, 0x30	; 48
   13dc2:	f8 ce       	rjmp	.-528    	; 0x13bb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   13dc4:	46 30       	cpi	r20, 0x06	; 6
   13dc6:	51 05       	cpc	r21, r1
   13dc8:	99 f5       	brne	.+102    	; 0x13e30 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   13dca:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   13dcc:	81 30       	cpi	r24, 0x01	; 1
   13dce:	91 05       	cpc	r25, r1
   13dd0:	51 f0       	breq	.+20     	; 0x13de6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   13dd2:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   13dd4:	81 30       	cpi	r24, 0x01	; 1
   13dd6:	91 05       	cpc	r25, r1
   13dd8:	30 f0       	brcs	.+12     	; 0x13de6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   13dda:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   13ddc:	82 30       	cpi	r24, 0x02	; 2
   13dde:	91 05       	cpc	r25, r1
   13de0:	11 f0       	breq	.+4      	; 0x13de6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2d0>
   13de2:	03 97       	sbiw	r24, 0x03	; 3
   13de4:	19 f1       	breq	.+70     	; 0x13e2c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   13de6:	8c 91       	ld	r24, X
   13de8:	28 23       	and	r18, r24
   13dea:	2c 93       	st	X, r18
   13dec:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13df0:	82 b9       	out	0x02, r24	; 2
   13df2:	a0 91 75 0e 	lds	r26, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13df6:	b0 91 76 0e 	lds	r27, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13dfa:	8c 91       	ld	r24, X
   13dfc:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13e00:	89 23       	and	r24, r25
   13e02:	8c 93       	st	X, r24
   13e04:	a0 91 75 0e 	lds	r26, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13e08:	b0 91 76 0e 	lds	r27, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13e0c:	8c 91       	ld	r24, X
   13e0e:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13e12:	89 2b       	or	r24, r25
   13e14:	8c 93       	st	X, r24
   13e16:	a0 91 73 0e 	lds	r26, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13e1a:	b0 91 74 0e 	lds	r27, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13e1e:	8c 91       	ld	r24, X
   13e20:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13e24:	89 2b       	or	r24, r25
   13e26:	8c 93       	st	X, r24
   13e28:	f2 b9       	out	0x02, r31	; 2
   13e2a:	0f cf       	rjmp	.-482    	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   13e2c:	f0 e6       	ldi	r31, 0x60	; 96
   13e2e:	db cf       	rjmp	.-74     	; 0x13de6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   13e30:	48 30       	cpi	r20, 0x08	; 8
   13e32:	51 05       	cpc	r21, r1
   13e34:	99 f5       	brne	.+102    	; 0x13e9c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   13e36:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   13e38:	81 30       	cpi	r24, 0x01	; 1
   13e3a:	91 05       	cpc	r25, r1
   13e3c:	51 f0       	breq	.+20     	; 0x13e52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   13e3e:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   13e40:	81 30       	cpi	r24, 0x01	; 1
   13e42:	91 05       	cpc	r25, r1
   13e44:	30 f0       	brcs	.+12     	; 0x13e52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   13e46:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   13e48:	82 30       	cpi	r24, 0x02	; 2
   13e4a:	91 05       	cpc	r25, r1
   13e4c:	11 f0       	breq	.+4      	; 0x13e52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x33c>
   13e4e:	03 97       	sbiw	r24, 0x03	; 3
   13e50:	19 f1       	breq	.+70     	; 0x13e98 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   13e52:	8c 91       	ld	r24, X
   13e54:	28 23       	and	r18, r24
   13e56:	2c 93       	st	X, r18
   13e58:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13e5c:	82 b9       	out	0x02, r24	; 2
   13e5e:	a0 91 75 0e 	lds	r26, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13e62:	b0 91 76 0e 	lds	r27, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13e66:	8c 91       	ld	r24, X
   13e68:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13e6c:	89 23       	and	r24, r25
   13e6e:	8c 93       	st	X, r24
   13e70:	a0 91 75 0e 	lds	r26, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13e74:	b0 91 76 0e 	lds	r27, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13e78:	8c 91       	ld	r24, X
   13e7a:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13e7e:	89 2b       	or	r24, r25
   13e80:	8c 93       	st	X, r24
   13e82:	a0 91 73 0e 	lds	r26, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13e86:	b0 91 74 0e 	lds	r27, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13e8a:	8c 91       	ld	r24, X
   13e8c:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13e90:	89 2b       	or	r24, r25
   13e92:	8c 93       	st	X, r24
   13e94:	e2 b9       	out	0x02, r30	; 2
   13e96:	d9 ce       	rjmp	.-590    	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   13e98:	e8 e2       	ldi	r30, 0x28	; 40
   13e9a:	db cf       	rjmp	.-74     	; 0x13e52 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   13e9c:	45 30       	cpi	r20, 0x05	; 5
   13e9e:	51 05       	cpc	r21, r1
   13ea0:	a1 f5       	brne	.+104    	; 0x13f0a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   13ea2:	81 30       	cpi	r24, 0x01	; 1
   13ea4:	91 05       	cpc	r25, r1
   13ea6:	49 f1       	breq	.+82     	; 0x13efa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x3e4>
   13ea8:	70 f1       	brcs	.+92     	; 0x13f06 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x3f0>
   13eaa:	82 30       	cpi	r24, 0x02	; 2
   13eac:	91 05       	cpc	r25, r1
   13eae:	39 f1       	breq	.+78     	; 0x13efe <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x3e8>
   13eb0:	03 97       	sbiw	r24, 0x03	; 3
   13eb2:	39 f1       	breq	.+78     	; 0x13f02 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   13eb4:	8c 91       	ld	r24, X
   13eb6:	28 23       	and	r18, r24
   13eb8:	2c 93       	st	X, r18
   13eba:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13ebe:	82 b9       	out	0x02, r24	; 2
   13ec0:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13ec4:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13ec8:	80 81       	ld	r24, Z
   13eca:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13ece:	89 23       	and	r24, r25
   13ed0:	80 83       	st	Z, r24
   13ed2:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13ed6:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13eda:	80 81       	ld	r24, Z
   13edc:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13ee0:	89 2b       	or	r24, r25
   13ee2:	80 83       	st	Z, r24
   13ee4:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13ee8:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13eec:	80 81       	ld	r24, Z
   13eee:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13ef2:	89 2b       	or	r24, r25
   13ef4:	80 83       	st	Z, r24
   13ef6:	72 b9       	out	0x02, r23	; 2
   13ef8:	a8 ce       	rjmp	.-688    	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   13efa:	78 e7       	ldi	r23, 0x78	; 120
   13efc:	db cf       	rjmp	.-74     	; 0x13eb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   13efe:	78 ec       	ldi	r23, 0xC8	; 200
   13f00:	d9 cf       	rjmp	.-78     	; 0x13eb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   13f02:	78 ea       	ldi	r23, 0xA8	; 168
   13f04:	d7 cf       	rjmp	.-82     	; 0x13eb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   13f06:	78 e0       	ldi	r23, 0x08	; 8
   13f08:	d5 cf       	rjmp	.-86     	; 0x13eb4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   13f0a:	47 30       	cpi	r20, 0x07	; 7
   13f0c:	51 05       	cpc	r21, r1
   13f0e:	a1 f5       	brne	.+104    	; 0x13f78 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   13f10:	81 30       	cpi	r24, 0x01	; 1
   13f12:	91 05       	cpc	r25, r1
   13f14:	49 f1       	breq	.+82     	; 0x13f68 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x452>
   13f16:	70 f1       	brcs	.+92     	; 0x13f74 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x45e>
   13f18:	82 30       	cpi	r24, 0x02	; 2
   13f1a:	91 05       	cpc	r25, r1
   13f1c:	39 f1       	breq	.+78     	; 0x13f6c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x456>
   13f1e:	03 97       	sbiw	r24, 0x03	; 3
   13f20:	39 f1       	breq	.+78     	; 0x13f70 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   13f22:	8c 91       	ld	r24, X
   13f24:	28 23       	and	r18, r24
   13f26:	2c 93       	st	X, r18
   13f28:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13f2c:	82 b9       	out	0x02, r24	; 2
   13f2e:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13f32:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13f36:	80 81       	ld	r24, Z
   13f38:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13f3c:	89 23       	and	r24, r25
   13f3e:	80 83       	st	Z, r24
   13f40:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13f44:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13f48:	80 81       	ld	r24, Z
   13f4a:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13f4e:	89 2b       	or	r24, r25
   13f50:	80 83       	st	Z, r24
   13f52:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13f56:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13f5a:	80 81       	ld	r24, Z
   13f5c:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13f60:	89 2b       	or	r24, r25
   13f62:	80 83       	st	Z, r24
   13f64:	62 b9       	out	0x02, r22	; 2
   13f66:	71 ce       	rjmp	.-798    	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   13f68:	68 ea       	ldi	r22, 0xA8	; 168
   13f6a:	db cf       	rjmp	.-74     	; 0x13f22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   13f6c:	68 e1       	ldi	r22, 0x18	; 24
   13f6e:	d9 cf       	rjmp	.-78     	; 0x13f22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   13f70:	68 e7       	ldi	r22, 0x78	; 120
   13f72:	d7 cf       	rjmp	.-82     	; 0x13f22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   13f74:	68 ec       	ldi	r22, 0xC8	; 200
   13f76:	d5 cf       	rjmp	.-86     	; 0x13f22 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   13f78:	81 30       	cpi	r24, 0x01	; 1
   13f7a:	91 05       	cpc	r25, r1
   13f7c:	49 f1       	breq	.+82     	; 0x13fd0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4ba>
   13f7e:	70 f1       	brcs	.+92     	; 0x13fdc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4c6>
   13f80:	82 30       	cpi	r24, 0x02	; 2
   13f82:	91 05       	cpc	r25, r1
   13f84:	39 f1       	breq	.+78     	; 0x13fd4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4be>
   13f86:	03 97       	sbiw	r24, 0x03	; 3
   13f88:	39 f1       	breq	.+78     	; 0x13fd8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   13f8a:	8c 91       	ld	r24, X
   13f8c:	28 23       	and	r18, r24
   13f8e:	2c 93       	st	X, r18
   13f90:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <my_lcd+0x28>
   13f94:	82 b9       	out	0x02, r24	; 2
   13f96:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13f9a:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13f9e:	80 81       	ld	r24, Z
   13fa0:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   13fa4:	89 23       	and	r24, r25
   13fa6:	80 83       	st	Z, r24
   13fa8:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   13fac:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   13fb0:	80 81       	ld	r24, Z
   13fb2:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   13fb6:	89 2b       	or	r24, r25
   13fb8:	80 83       	st	Z, r24
   13fba:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   13fbe:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   13fc2:	80 81       	ld	r24, Z
   13fc4:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   13fc8:	89 2b       	or	r24, r25
   13fca:	80 83       	st	Z, r24
   13fcc:	32 b9       	out	0x02, r19	; 2
   13fce:	3d ce       	rjmp	.-902    	; 0x13c4a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   13fd0:	38 e2       	ldi	r19, 0x28	; 40
   13fd2:	db cf       	rjmp	.-74     	; 0x13f8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   13fd4:	38 e9       	ldi	r19, 0x98	; 152
   13fd6:	d9 cf       	rjmp	.-78     	; 0x13f8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   13fd8:	38 ef       	ldi	r19, 0xF8	; 248
   13fda:	d7 cf       	rjmp	.-82     	; 0x13f8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   13fdc:	38 e4       	ldi	r19, 0x48	; 72
   13fde:	d5 cf       	rjmp	.-86     	; 0x13f8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   13fe0:	80 91 53 0e 	lds	r24, 0x0E53	; 0x800e53 <my_lcd+0x10>
   13fe4:	90 91 54 0e 	lds	r25, 0x0E54	; 0x800e54 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   13fe8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   13fea:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   13fec:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   13fee:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   13ff0:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   13ff2:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   13ff4:	60 91 67 0e 	lds	r22, 0x0E67	; 0x800e67 <my_lcd+0x24>
   13ff8:	70 91 68 0e 	lds	r23, 0x0E68	; 0x800e68 <my_lcd+0x25>
   13ffc:	26 e0       	ldi	r18, 0x06	; 6
   13ffe:	ae 01       	movw	r20, r28
   14000:	4f 5f       	subi	r20, 0xFF	; 255
   14002:	5f 4f       	sbci	r21, 0xFF	; 255
   14004:	83 e4       	ldi	r24, 0x43	; 67
   14006:	9e e0       	ldi	r25, 0x0E	; 14
   14008:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   1400c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   1400e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   14010:	60 91 69 0e 	lds	r22, 0x0E69	; 0x800e69 <my_lcd+0x26>
   14014:	70 91 6a 0e 	lds	r23, 0x0E6A	; 0x800e6a <my_lcd+0x27>
   14018:	22 e0       	ldi	r18, 0x02	; 2
   1401a:	ae 01       	movw	r20, r28
   1401c:	4f 5f       	subi	r20, 0xFF	; 255
   1401e:	5f 4f       	sbci	r21, 0xFF	; 255
   14020:	83 e4       	ldi	r24, 0x43	; 67
   14022:	9e e0       	ldi	r25, 0x0E	; 14
   14024:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   14028:	80 91 5b 0e 	lds	r24, 0x0E5B	; 0x800e5b <my_lcd+0x18>
   1402c:	90 91 5c 0e 	lds	r25, 0x0E5C	; 0x800e5c <my_lcd+0x19>
   14030:	01 97       	sbiw	r24, 0x01	; 1
   14032:	61 f4       	brne	.+24     	; 0x1404c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   14034:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   14036:	21 e0       	ldi	r18, 0x01	; 1
   14038:	ae 01       	movw	r20, r28
   1403a:	4f 5f       	subi	r20, 0xFF	; 255
   1403c:	5f 4f       	sbci	r21, 0xFF	; 255
   1403e:	61 e0       	ldi	r22, 0x01	; 1
   14040:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   14042:	83 e4       	ldi	r24, 0x43	; 67
   14044:	9e e0       	ldi	r25, 0x0E	; 14
   14046:	0e 94 57 4b 	call	0x96ae	; 0x96ae <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1404a:	a1 ce       	rjmp	.-702    	; 0x13d8e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x278>
   1404c:	20 e0       	ldi	r18, 0x00	; 0
   1404e:	50 e0       	ldi	r21, 0x00	; 0
   14050:	40 e0       	ldi	r20, 0x00	; 0
   14052:	63 e1       	ldi	r22, 0x13	; 19
   14054:	70 e0       	ldi	r23, 0x00	; 0
   14056:	f5 cf       	rjmp	.-22     	; 0x14042 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.72]+0x52c>

00014058 <log_error(PubSubClient*, char*) [clone .constprop.59]>:
_Z9log_errorP12PubSubClientPc.constprop.59():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:451
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   14058:	0f 93       	push	r16
   1405a:	1f 93       	push	r17
   1405c:	cf 93       	push	r28
   1405e:	df 93       	push	r29
   14060:	cd b7       	in	r28, 0x3d	; 61
   14062:	de b7       	in	r29, 0x3e	; 62
   14064:	60 97       	sbiw	r28, 0x10	; 16
   14066:	0f b6       	in	r0, 0x3f	; 63
   14068:	f8 94       	cli
   1406a:	de bf       	out	0x3e, r29	; 62
   1406c:	0f be       	out	0x3f, r0	; 63
   1406e:	cd bf       	out	0x3d, r28	; 61
   14070:	8c 01       	movw	r16, r24
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:454
{
  char topic[16];
  strcpy(topic, "log-app");
   14072:	6a ef       	ldi	r22, 0xFA	; 250
   14074:	76 e0       	ldi	r23, 0x06	; 6
   14076:	ce 01       	movw	r24, r28
   14078:	01 96       	adiw	r24, 0x01	; 1
   1407a:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:455
  send_mqtt_general_payload(mqtt_client, topic, log);
   1407e:	a8 01       	movw	r20, r16
   14080:	be 01       	movw	r22, r28
   14082:	6f 5f       	subi	r22, 0xFF	; 255
   14084:	7f 4f       	sbci	r23, 0xFF	; 255
   14086:	8b e9       	ldi	r24, 0x9B	; 155
   14088:	9e e0       	ldi	r25, 0x0E	; 14
   1408a:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:456
}
   1408e:	60 96       	adiw	r28, 0x10	; 16
   14090:	0f b6       	in	r0, 0x3f	; 63
   14092:	f8 94       	cli
   14094:	de bf       	out	0x3e, r29	; 62
   14096:	0f be       	out	0x3f, r0	; 63
   14098:	cd bf       	out	0x3d, r28	; 61
   1409a:	df 91       	pop	r29
   1409c:	cf 91       	pop	r28
   1409e:	1f 91       	pop	r17
   140a0:	0f 91       	pop	r16
   140a2:	08 95       	ret

000140a4 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]>:
_Z10parseBytesPKccPhii.constprop.58():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   140a4:	cf 92       	push	r12
   140a6:	df 92       	push	r13
   140a8:	ef 92       	push	r14
   140aa:	ff 92       	push	r15
   140ac:	0f 93       	push	r16
   140ae:	1f 93       	push	r17
   140b0:	cf 93       	push	r28
   140b2:	df 93       	push	r29
   140b4:	8b 01       	movw	r16, r22
   140b6:	7b 01       	movw	r14, r22
   140b8:	e4 0e       	add	r14, r20
   140ba:	f5 1e       	adc	r15, r21
   140bc:	cf e4       	ldi	r28, 0x4F	; 79
   140be:	db e0       	ldi	r29, 0x0B	; 11
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   140c0:	c8 2e       	mov	r12, r24
   140c2:	88 0f       	add	r24, r24
   140c4:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   140c6:	4a e0       	ldi	r20, 0x0A	; 10
   140c8:	50 e0       	ldi	r21, 0x00	; 0
   140ca:	70 e0       	ldi	r23, 0x00	; 0
   140cc:	60 e0       	ldi	r22, 0x00	; 0
   140ce:	ce 01       	movw	r24, r28
   140d0:	0e 94 bb c2 	call	0x18576	; 0x18576 <strtoul>
   140d4:	f8 01       	movw	r30, r16
   140d6:	61 93       	st	Z+, r22
   140d8:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
    str = strchr(str, sep);               // Find next separator
   140da:	b6 01       	movw	r22, r12
   140dc:	ce 01       	movw	r24, r28
   140de:	0e 94 66 d0 	call	0x1a0cc	; 0x1a0cc <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:108
    if (str == NULL || *str == '\0') {
   140e2:	00 97       	sbiw	r24, 0x00	; 0
   140e4:	49 f0       	breq	.+18     	; 0x140f8 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]+0x54>
   140e6:	fc 01       	movw	r30, r24
   140e8:	20 81       	ld	r18, Z
   140ea:	22 23       	and	r18, r18
   140ec:	29 f0       	breq	.+10     	; 0x140f8 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   140ee:	ec 01       	movw	r28, r24
   140f0:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:105
{
 return x;
}

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   140f2:	0e 15       	cp	r16, r14
   140f4:	1f 05       	cpc	r17, r15
   140f6:	39 f7       	brne	.-50     	; 0x140c6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.58]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:113
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   140f8:	df 91       	pop	r29
   140fa:	cf 91       	pop	r28
   140fc:	1f 91       	pop	r17
   140fe:	0f 91       	pop	r16
   14100:	ff 90       	pop	r15
   14102:	ef 90       	pop	r14
   14104:	df 90       	pop	r13
   14106:	cf 90       	pop	r12
   14108:	08 95       	ret

0001410a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1410a:	ff 92       	push	r15
   1410c:	0f 93       	push	r16
   1410e:	1f 93       	push	r17
   14110:	cf 93       	push	r28
   14112:	df 93       	push	r29
   14114:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   14116:	10 e0       	ldi	r17, 0x00	; 0
   14118:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1411a:	8f 2d       	mov	r24, r15
   1411c:	0e 94 63 9a 	call	0x134c6	; 0x134c6 <W5500Class::readSnTX_FSR(unsigned char)>
   14120:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   14122:	89 2b       	or	r24, r25
   14124:	21 f0       	breq	.+8      	; 0x1412e <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   14126:	8f 2d       	mov	r24, r15
   14128:	0e 94 63 9a 	call	0x134c6	; 0x134c6 <W5500Class::readSnTX_FSR(unsigned char)>
   1412c:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1412e:	c0 17       	cp	r28, r16
   14130:	d1 07       	cpc	r29, r17
   14132:	99 f7       	brne	.-26     	; 0x1411a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   14134:	ce 01       	movw	r24, r28
   14136:	df 91       	pop	r29
   14138:	cf 91       	pop	r28
   1413a:	1f 91       	pop	r17
   1413c:	0f 91       	pop	r16
   1413e:	ff 90       	pop	r15
   14140:	08 95       	ret

00014142 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   14142:	ff 92       	push	r15
   14144:	0f 93       	push	r16
   14146:	1f 93       	push	r17
   14148:	cf 93       	push	r28
   1414a:	df 93       	push	r29
   1414c:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   1414e:	10 e0       	ldi	r17, 0x00	; 0
   14150:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   14152:	8f 2d       	mov	r24, r15
   14154:	0e 94 4b 9a 	call	0x13496	; 0x13496 <W5500Class::readSnRX_RSR(unsigned char)>
   14158:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1415a:	89 2b       	or	r24, r25
   1415c:	21 f0       	breq	.+8      	; 0x14166 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   1415e:	8f 2d       	mov	r24, r15
   14160:	0e 94 4b 9a 	call	0x13496	; 0x13496 <W5500Class::readSnRX_RSR(unsigned char)>
   14164:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   14166:	c0 17       	cp	r28, r16
   14168:	d1 07       	cpc	r29, r17
   1416a:	99 f7       	brne	.-26     	; 0x14152 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   1416c:	ce 01       	movw	r24, r28
   1416e:	df 91       	pop	r29
   14170:	cf 91       	pop	r28
   14172:	1f 91       	pop	r17
   14174:	0f 91       	pop	r16
   14176:	ff 90       	pop	r15
   14178:	08 95       	ret

0001417a <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   1417a:	1f 92       	push	r1
   1417c:	0f 92       	push	r0
   1417e:	0f b6       	in	r0, 0x3f	; 63
   14180:	0f 92       	push	r0
   14182:	11 24       	eor	r1, r1
   14184:	0b b6       	in	r0, 0x3b	; 59
   14186:	0f 92       	push	r0
   14188:	2f 93       	push	r18
   1418a:	3f 93       	push	r19
   1418c:	4f 93       	push	r20
   1418e:	5f 93       	push	r21
   14190:	6f 93       	push	r22
   14192:	7f 93       	push	r23
   14194:	8f 93       	push	r24
   14196:	9f 93       	push	r25
   14198:	af 93       	push	r26
   1419a:	bf 93       	push	r27
   1419c:	ef 93       	push	r30
   1419e:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   141a0:	86 ef       	ldi	r24, 0xF6	; 246
   141a2:	9b e0       	ldi	r25, 0x0B	; 11
   141a4:	0e 94 41 96 	call	0x12c82	; 0x12c82 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   141a8:	ff 91       	pop	r31
   141aa:	ef 91       	pop	r30
   141ac:	bf 91       	pop	r27
   141ae:	af 91       	pop	r26
   141b0:	9f 91       	pop	r25
   141b2:	8f 91       	pop	r24
   141b4:	7f 91       	pop	r23
   141b6:	6f 91       	pop	r22
   141b8:	5f 91       	pop	r21
   141ba:	4f 91       	pop	r20
   141bc:	3f 91       	pop	r19
   141be:	2f 91       	pop	r18
   141c0:	0f 90       	pop	r0
   141c2:	0b be       	out	0x3b, r0	; 59
   141c4:	0f 90       	pop	r0
   141c6:	0f be       	out	0x3f, r0	; 63
   141c8:	0f 90       	pop	r0
   141ca:	1f 90       	pop	r1
   141cc:	18 95       	reti

000141ce <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   141ce:	1f 92       	push	r1
   141d0:	0f 92       	push	r0
   141d2:	0f b6       	in	r0, 0x3f	; 63
   141d4:	0f 92       	push	r0
   141d6:	11 24       	eor	r1, r1
   141d8:	0b b6       	in	r0, 0x3b	; 59
   141da:	0f 92       	push	r0
   141dc:	2f 93       	push	r18
   141de:	8f 93       	push	r24
   141e0:	9f 93       	push	r25
   141e2:	ef 93       	push	r30
   141e4:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   141e6:	e0 91 06 0c 	lds	r30, 0x0C06	; 0x800c06 <Serial+0x10>
   141ea:	f0 91 07 0c 	lds	r31, 0x0C07	; 0x800c07 <Serial+0x11>
   141ee:	80 81       	ld	r24, Z
   141f0:	e0 91 0c 0c 	lds	r30, 0x0C0C	; 0x800c0c <Serial+0x16>
   141f4:	f0 91 0d 0c 	lds	r31, 0x0C0D	; 0x800c0d <Serial+0x17>
   141f8:	82 fd       	sbrc	r24, 2
   141fa:	1d c0       	rjmp	.+58     	; 0x14236 <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   141fc:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   141fe:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <Serial+0x19>
   14202:	8f 5f       	subi	r24, 0xFF	; 255
   14204:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   14206:	20 91 10 0c 	lds	r18, 0x0C10	; 0x800c10 <Serial+0x1a>
   1420a:	82 17       	cp	r24, r18
   1420c:	41 f0       	breq	.+16     	; 0x1421e <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   1420e:	e0 91 0f 0c 	lds	r30, 0x0C0F	; 0x800c0f <Serial+0x19>
   14212:	f0 e0       	ldi	r31, 0x00	; 0
   14214:	ea 50       	subi	r30, 0x0A	; 10
   14216:	f4 4f       	sbci	r31, 0xF4	; 244
   14218:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   1421a:	80 93 0f 0c 	sts	0x0C0F, r24	; 0x800c0f <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   1421e:	ff 91       	pop	r31
   14220:	ef 91       	pop	r30
   14222:	9f 91       	pop	r25
   14224:	8f 91       	pop	r24
   14226:	2f 91       	pop	r18
   14228:	0f 90       	pop	r0
   1422a:	0b be       	out	0x3b, r0	; 59
   1422c:	0f 90       	pop	r0
   1422e:	0f be       	out	0x3f, r0	; 63
   14230:	0f 90       	pop	r0
   14232:	1f 90       	pop	r1
   14234:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   14236:	80 81       	ld	r24, Z
   14238:	f2 cf       	rjmp	.-28     	; 0x1421e <__vector_25+0x50>

0001423a <turnOffPWM.lto_priv.238>:
turnOffPWM.lto_priv.238():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   1423a:	82 50       	subi	r24, 0x02	; 2
   1423c:	82 31       	cpi	r24, 0x12	; 18
   1423e:	08 f0       	brcs	.+2      	; 0x14242 <turnOffPWM.lto_priv.238+0x8>
   14240:	5f c0       	rjmp	.+190    	; 0x14300 <turnOffPWM.lto_priv.238+0xc6>
   14242:	e8 2f       	mov	r30, r24
   14244:	f0 e0       	ldi	r31, 0x00	; 0
   14246:	88 27       	eor	r24, r24
   14248:	e7 5d       	subi	r30, 0xD7	; 215
   1424a:	fe 45       	sbci	r31, 0x5E	; 94
   1424c:	8f 4f       	sbci	r24, 0xFF	; 255
   1424e:	0c 94 64 cf 	jmp	0x19ec8	; 0x19ec8 <__tablejump2__>
   14252:	7d a1       	ldd	r23, Y+37	; 0x25
   14254:	81 a1       	ldd	r24, Z+33	; 0x21
   14256:	3b a1       	ldd	r19, Y+35	; 0x23
   14258:	41 a1       	ldd	r20, Z+33	; 0x21
   1425a:	45 a1       	ldd	r20, Z+37	; 0x25
   1425c:	80 a1       	ldd	r24, Z+32	; 0x20
   1425e:	49 a1       	ldd	r20, Y+33	; 0x21
   14260:	4f a1       	ldd	r20, Y+39	; 0x27
   14262:	53 a1       	ldd	r21, Z+35	; 0x23
   14264:	59 a1       	ldd	r21, Y+33	; 0x21
   14266:	5d a1       	ldd	r21, Y+37	; 0x25
   14268:	61 a1       	ldd	r22, Z+33	; 0x21
   1426a:	67 a1       	ldd	r22, Z+39	; 0x27
   1426c:	6b a1       	ldd	r22, Y+35	; 0x23
   1426e:	80 a1       	ldd	r24, Z+32	; 0x20
   14270:	6f a1       	ldd	r22, Y+39	; 0x27
   14272:	75 a1       	ldd	r23, Z+37	; 0x25
   14274:	79 a1       	ldd	r23, Y+33	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   14276:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1427a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   1427c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   14280:	08 95       	ret
   14282:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   14286:	8f 7d       	andi	r24, 0xDF	; 223
   14288:	f9 cf       	rjmp	.-14     	; 0x1427c <turnOffPWM.lto_priv.238+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1428a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1428e:	87 7f       	andi	r24, 0xF7	; 247
   14290:	f5 cf       	rjmp	.-22     	; 0x1427c <turnOffPWM.lto_priv.238+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   14292:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   14296:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   14298:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1429c:	08 95       	ret
   1429e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   142a2:	8f 7d       	andi	r24, 0xDF	; 223
   142a4:	f9 cf       	rjmp	.-14     	; 0x14298 <turnOffPWM.lto_priv.238+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   142a6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   142aa:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   142ac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   142b0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   142b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   142b6:	8f 7d       	andi	r24, 0xDF	; 223
   142b8:	f9 cf       	rjmp	.-14     	; 0x142ac <turnOffPWM.lto_priv.238+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   142ba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   142be:	87 7f       	andi	r24, 0xF7	; 247
   142c0:	f5 cf       	rjmp	.-22     	; 0x142ac <turnOffPWM.lto_priv.238+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   142c2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   142c6:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   142c8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   142cc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   142ce:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   142d2:	8f 7d       	andi	r24, 0xDF	; 223
   142d4:	f9 cf       	rjmp	.-14     	; 0x142c8 <turnOffPWM.lto_priv.238+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   142d6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   142da:	87 7f       	andi	r24, 0xF7	; 247
   142dc:	f5 cf       	rjmp	.-22     	; 0x142c8 <turnOffPWM.lto_priv.238+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   142de:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   142e2:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   142e4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   142e8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   142ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   142ee:	8f 7d       	andi	r24, 0xDF	; 223
   142f0:	f9 cf       	rjmp	.-14     	; 0x142e4 <turnOffPWM.lto_priv.238+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   142f2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   142f6:	87 7f       	andi	r24, 0xF7	; 247
   142f8:	f5 cf       	rjmp	.-22     	; 0x142e4 <turnOffPWM.lto_priv.238+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   142fa:	84 b5       	in	r24, 0x24	; 36
   142fc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   142fe:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   14300:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   14302:	84 b5       	in	r24, 0x24	; 36
   14304:	8f 7d       	andi	r24, 0xDF	; 223
   14306:	fb cf       	rjmp	.-10     	; 0x142fe <turnOffPWM.lto_priv.238+0xc4>

00014308 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   14308:	1f 93       	push	r17
   1430a:	cf 93       	push	r28
   1430c:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   1430e:	28 2f       	mov	r18, r24
   14310:	30 e0       	ldi	r19, 0x00	; 0
   14312:	f9 01       	movw	r30, r18
   14314:	ec 56       	subi	r30, 0x6C	; 108
   14316:	f4 4a       	sbci	r31, 0xA4	; 164
   14318:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1431a:	f9 01       	movw	r30, r18
   1431c:	e1 5c       	subi	r30, 0xC1	; 193
   1431e:	fe 49       	sbci	r31, 0x9E	; 158
   14320:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   14322:	f9 01       	movw	r30, r18
   14324:	eb 57       	subi	r30, 0x7B	; 123
   14326:	fe 49       	sbci	r31, 0x9E	; 158
   14328:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   1432a:	cc 23       	and	r28, r28
   1432c:	a9 f0       	breq	.+42     	; 0x14358 <digitalWrite+0x50>
   1432e:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   14330:	81 11       	cpse	r24, r1
   14332:	0e 94 1d a1 	call	0x1423a	; 0x1423a <turnOffPWM.lto_priv.238>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   14336:	ec 2f       	mov	r30, r28
   14338:	f0 e0       	ldi	r31, 0x00	; 0
   1433a:	ee 0f       	add	r30, r30
   1433c:	ff 1f       	adc	r31, r31
   1433e:	eb 58       	subi	r30, 0x8B	; 139
   14340:	fe 49       	sbci	r31, 0x9E	; 158
   14342:	a5 91       	lpm	r26, Z+
   14344:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   14346:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   14348:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   1434a:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   1434c:	11 11       	cpse	r17, r1
   1434e:	08 c0       	rjmp	.+16     	; 0x14360 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   14350:	d0 95       	com	r29
   14352:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   14354:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   14356:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
   14358:	df 91       	pop	r29
   1435a:	cf 91       	pop	r28
   1435c:	1f 91       	pop	r17
   1435e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   14360:	de 2b       	or	r29, r30
   14362:	f8 cf       	rjmp	.-16     	; 0x14354 <digitalWrite+0x4c>

00014364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   14364:	cf 92       	push	r12
   14366:	df 92       	push	r13
   14368:	ef 92       	push	r14
   1436a:	ff 92       	push	r15
   1436c:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   1436e:	c0 90 0d 0d 	lds	r12, 0x0D0D	; 0x800d0d <SRAM+0x4>
   14372:	d0 90 0e 0d 	lds	r13, 0x0D0E	; 0x800d0e <SRAM+0x5>
   14376:	e0 90 0f 0d 	lds	r14, 0x0D0F	; 0x800d0f <SRAM+0x6>
   1437a:	f0 90 10 0d 	lds	r15, 0x0D10	; 0x800d10 <SRAM+0x7>
   1437e:	6c 15       	cp	r22, r12
   14380:	7d 05       	cpc	r23, r13
   14382:	8e 05       	cpc	r24, r14
   14384:	9f 05       	cpc	r25, r15
   14386:	38 f5       	brcc	.+78     	; 0x143d6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]+0x72>
   14388:	c4 2f       	mov	r28, r20
   1438a:	6b 01       	movw	r12, r22
   1438c:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   1438e:	60 e0       	ldi	r22, 0x00	; 0
   14390:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   14394:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   14398:	62 e0       	ldi	r22, 0x02	; 2
   1439a:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   1439e:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   143a2:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   143a6:	c7 01       	movw	r24, r14
   143a8:	b6 01       	movw	r22, r12
   143aa:	0e 94 8f 9b 	call	0x1371e	; 0x1371e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.188]>
_ZN9SRAM_23LC9writeByteEmh.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   143ae:	6c 2f       	mov	r22, r28
   143b0:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   143b4:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   143b8:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   143bc:	61 e0       	ldi	r22, 0x01	; 1
   143be:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   143c2:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
   143c6:	81 e0       	ldi	r24, 0x01	; 1
   143c8:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   143ca:	cf 91       	pop	r28
   143cc:	ff 90       	pop	r15
   143ce:	ef 90       	pop	r14
   143d0:	df 90       	pop	r13
   143d2:	cf 90       	pop	r12
   143d4:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   143d6:	90 e0       	ldi	r25, 0x00	; 0
   143d8:	80 e0       	ldi	r24, 0x00	; 0
   143da:	f7 cf       	rjmp	.-18     	; 0x143ca <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]+0x66>

000143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>:
_ZN9SRAM_23LC8readByteEm.constprop.182():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   143dc:	cf 92       	push	r12
   143de:	df 92       	push	r13
   143e0:	ef 92       	push	r14
   143e2:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   143e4:	c0 90 0d 0d 	lds	r12, 0x0D0D	; 0x800d0d <SRAM+0x4>
   143e8:	d0 90 0e 0d 	lds	r13, 0x0D0E	; 0x800d0e <SRAM+0x5>
   143ec:	e0 90 0f 0d 	lds	r14, 0x0D0F	; 0x800d0f <SRAM+0x6>
   143f0:	f0 90 10 0d 	lds	r15, 0x0D10	; 0x800d10 <SRAM+0x7>
   143f4:	6c 15       	cp	r22, r12
   143f6:	7d 05       	cpc	r23, r13
   143f8:	8e 05       	cpc	r24, r14
   143fa:	9f 05       	cpc	r25, r15
   143fc:	28 f5       	brcc	.+74     	; 0x14448 <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]+0x6c>
   143fe:	6b 01       	movw	r12, r22
   14400:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   14402:	60 e0       	ldi	r22, 0x00	; 0
   14404:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   14408:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1440c:	63 e0       	ldi	r22, 0x03	; 3
   1440e:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   14412:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   14416:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1441a:	c7 01       	movw	r24, r14
   1441c:	b6 01       	movw	r22, r12
   1441e:	0e 94 8f 9b 	call	0x1371e	; 0x1371e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.188]>
_ZN9SRAM_23LC8readByteEm.constprop.182():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   14422:	6f ef       	ldi	r22, 0xFF	; 255
   14424:	80 91 09 0d 	lds	r24, 0x0D09	; 0x800d09 <SRAM>
   14428:	90 91 0a 0d 	lds	r25, 0x0D0A	; 0x800d0a <SRAM+0x1>
   1442c:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
   14430:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   14432:	61 e0       	ldi	r22, 0x01	; 1
   14434:	80 91 11 0d 	lds	r24, 0x0D11	; 0x800d11 <SRAM+0x8>
   14438:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.182():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   1443c:	8f 2d       	mov	r24, r15
   1443e:	ff 90       	pop	r15
   14440:	ef 90       	pop	r14
   14442:	df 90       	pop	r13
   14444:	cf 90       	pop	r12
   14446:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   14448:	f1 2c       	mov	r15, r1
   1444a:	f8 cf       	rjmp	.-16     	; 0x1443c <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]+0x60>

0001444c <EEPROM_CAT25::endCommand() [clone .constprop.88]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1444c:	61 e0       	ldi	r22, 0x01	; 1
   1444e:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <SROM+0xa>
   14452:	0c 94 84 a1 	jmp	0x14308	; 0x14308 <digitalWrite>

00014456 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.86():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   14456:	cf 93       	push	r28
   14458:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   1445a:	60 e0       	ldi	r22, 0x00	; 0
   1445c:	80 91 04 0d 	lds	r24, 0x0D04	; 0x800d04 <SROM+0xa>
   14460:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   14464:	6c 2f       	mov	r22, r28
   14466:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   1446a:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   1446e:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   14472:	c2 50       	subi	r28, 0x02	; 2
   14474:	c2 30       	cpi	r28, 0x02	; 2
   14476:	a8 f5       	brcc	.+106    	; 0x144e2 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   14478:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <SROM+0x4>
   1447c:	90 91 ff 0c 	lds	r25, 0x0CFF	; 0x800cff <SROM+0x5>
   14480:	a0 91 00 0d 	lds	r26, 0x0D00	; 0x800d00 <SROM+0x6>
   14484:	b0 91 01 0d 	lds	r27, 0x0D01	; 0x800d01 <SROM+0x7>
   14488:	01 97       	sbiw	r24, 0x01	; 1
   1448a:	a1 40       	sbci	r26, 0x01	; 1
   1448c:	b1 05       	cpc	r27, r1
   1448e:	38 f0       	brcs	.+14     	; 0x1449e <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   14490:	60 e0       	ldi	r22, 0x00	; 0
   14492:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   14496:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   1449a:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1449e:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <SROM+0x4>
   144a2:	90 91 ff 0c 	lds	r25, 0x0CFF	; 0x800cff <SROM+0x5>
   144a6:	a0 91 00 0d 	lds	r26, 0x0D00	; 0x800d00 <SROM+0x6>
   144aa:	b0 91 01 0d 	lds	r27, 0x0D01	; 0x800d01 <SROM+0x7>
   144ae:	81 30       	cpi	r24, 0x01	; 1
   144b0:	91 40       	sbci	r25, 0x01	; 1
   144b2:	a1 05       	cpc	r26, r1
   144b4:	b1 05       	cpc	r27, r1
   144b6:	68 f0       	brcs	.+26     	; 0x144d2 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]+0x7c>
   144b8:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <SROM+0x2>
   144bc:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <SROM+0x3>
   144c0:	0b 97       	sbiw	r24, 0x0b	; 11
   144c2:	39 f0       	breq	.+14     	; 0x144d2 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   144c4:	60 e0       	ldi	r22, 0x00	; 0
   144c6:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   144ca:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   144ce:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   144d2:	60 e0       	ldi	r22, 0x00	; 0
   144d4:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   144d8:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.86():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   144dc:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   144de:	0c 94 8e 4a 	jmp	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.86():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   144e2:	cf 91       	pop	r28
   144e4:	08 95       	ret

000144e6 <EEPROM_CAT25::getStatusRegister() [clone .constprop.85]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.85():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   144e6:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   144e8:	85 e0       	ldi	r24, 0x05	; 5
   144ea:	0e 94 2b a2 	call	0x14456	; 0x14456 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.86]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   144ee:	6f ef       	ldi	r22, 0xFF	; 255
   144f0:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <SROM>
   144f4:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <SROM+0x1>
   144f8:	0e 94 8e 4a 	call	0x951c	; 0x951c <SoftSPIB::transfer(unsigned char)>
   144fc:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   144fe:	0e 94 26 a2 	call	0x1444c	; 0x1444c <EEPROM_CAT25::endCommand() [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   14502:	8c 2f       	mov	r24, r28
   14504:	cf 91       	pop	r28
   14506:	08 95       	ret

00014508 <TwoWire::begin() [clone .constprop.61]>:
_ZN7TwoWire5beginEv.constprop.61():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   14508:	10 92 6d 11 	sts	0x116D, r1	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1450c:	10 92 6c 11 	sts	0x116C, r1	; 0x80116c <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   14510:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   14514:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   14518:	10 92 b8 11 	sts	0x11B8, r1	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1451c:	81 e0       	ldi	r24, 0x01	; 1
   1451e:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   14522:	10 92 b2 11 	sts	0x11B2, r1	; 0x8011b2 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   14526:	61 e0       	ldi	r22, 0x01	; 1
   14528:	83 e1       	ldi	r24, 0x13	; 19
   1452a:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   1452e:	61 e0       	ldi	r22, 0x01	; 1
   14530:	82 e1       	ldi	r24, 0x12	; 18
   14532:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   14536:	e9 eb       	ldi	r30, 0xB9	; 185
   14538:	f0 e0       	ldi	r31, 0x00	; 0
   1453a:	80 81       	ld	r24, Z
   1453c:	8e 7f       	andi	r24, 0xFE	; 254
   1453e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   14540:	80 81       	ld	r24, Z
   14542:	8d 7f       	andi	r24, 0xFD	; 253
   14544:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   14546:	88 e4       	ldi	r24, 0x48	; 72
   14548:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   1454c:	85 e4       	ldi	r24, 0x45	; 69
   1454e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   14552:	82 e0       	ldi	r24, 0x02	; 2
   14554:	96 e9       	ldi	r25, 0x96	; 150
   14556:	90 93 6a 11 	sts	0x116A, r25	; 0x80116a <twi_onSlaveTransmit+0x1>
   1455a:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   1455e:	83 e0       	ldi	r24, 0x03	; 3
   14560:	96 e9       	ldi	r25, 0x96	; 150
   14562:	90 93 68 11 	sts	0x1168, r25	; 0x801168 <twi_onSlaveReceive+0x1>
   14566:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.61():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   1456a:	08 95       	ret

0001456c <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   1456c:	61 e0       	ldi	r22, 0x01	; 1
   1456e:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <SPI_CS>
   14572:	0c 94 84 a1 	jmp	0x14308	; 0x14308 <digitalWrite>

00014576 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   14576:	60 e0       	ldi	r22, 0x00	; 0
   14578:	80 91 6b 11 	lds	r24, 0x116B	; 0x80116b <SPI_CS>
   1457c:	0c 94 84 a1 	jmp	0x14308	; 0x14308 <digitalWrite>

00014580 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   14580:	1f 93       	push	r17
   14582:	cf 93       	push	r28
   14584:	df 93       	push	r29
   14586:	18 2f       	mov	r17, r24
   14588:	d6 2f       	mov	r29, r22
   1458a:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   1458c:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <wiznet_SPI_settings>
   14590:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <wiznet_SPI_settings+0x1>
   14594:	0e 94 f8 97 	call	0x12ff0	; 0x12ff0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   14598:	0e 94 bb a2 	call	0x14576	; 0x14576 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1459c:	80 e0       	ldi	r24, 0x00	; 0
   1459e:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   145a2:	81 2f       	mov	r24, r17
   145a4:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   145a8:	8d 2f       	mov	r24, r29
   145aa:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   145ae:	8c 2f       	mov	r24, r28
   145b0:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   145b4:	0e 94 b6 a2 	call	0x1456c	; 0x1456c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   145b8:	81 e0       	ldi	r24, 0x01	; 1
   145ba:	df 91       	pop	r29
   145bc:	cf 91       	pop	r28
   145be:	1f 91       	pop	r17
   145c0:	08 95       	ret

000145c2 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   145c2:	cf 93       	push	r28
   145c4:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   145c6:	90 e0       	ldi	r25, 0x00	; 0
   145c8:	fc 01       	movw	r30, r24
   145ca:	e1 5c       	subi	r30, 0xC1	; 193
   145cc:	fe 49       	sbci	r31, 0x9E	; 158
   145ce:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   145d0:	8b 57       	subi	r24, 0x7B	; 123
   145d2:	9e 49       	sbci	r25, 0x9E	; 158
   145d4:	fc 01       	movw	r30, r24
   145d6:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   145d8:	88 23       	and	r24, r24
   145da:	c9 f0       	breq	.+50     	; 0x1460e <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   145dc:	90 e0       	ldi	r25, 0x00	; 0
   145de:	88 0f       	add	r24, r24
   145e0:	99 1f       	adc	r25, r25
   145e2:	fc 01       	movw	r30, r24
   145e4:	ec 57       	subi	r30, 0x7C	; 124
   145e6:	f4 4a       	sbci	r31, 0xA4	; 164
   145e8:	a5 91       	lpm	r26, Z+
   145ea:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   145ec:	fc 01       	movw	r30, r24
   145ee:	eb 58       	subi	r30, 0x8B	; 139
   145f0:	fe 49       	sbci	r31, 0x9E	; 158
   145f2:	c5 91       	lpm	r28, Z+
   145f4:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   145f6:	61 11       	cpse	r22, r1
   145f8:	0d c0       	rjmp	.+26     	; 0x14614 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   145fa:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   145fc:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   145fe:	8c 91       	ld	r24, X
   14600:	20 95       	com	r18
   14602:	82 23       	and	r24, r18
   14604:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   14606:	88 81       	ld	r24, Y
   14608:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1460a:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1460c:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   1460e:	df 91       	pop	r29
   14610:	cf 91       	pop	r28
   14612:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   14614:	62 30       	cpi	r22, 0x02	; 2
   14616:	51 f4       	brne	.+20     	; 0x1462c <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   14618:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1461a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1461c:	3c 91       	ld	r19, X
   1461e:	82 2f       	mov	r24, r18
   14620:	80 95       	com	r24
   14622:	83 23       	and	r24, r19
   14624:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   14626:	e8 81       	ld	r30, Y
   14628:	2e 2b       	or	r18, r30
   1462a:	ef cf       	rjmp	.-34     	; 0x1460a <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   1462c:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   1462e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   14630:	ec 91       	ld	r30, X
   14632:	2e 2b       	or	r18, r30
   14634:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   14636:	8f bf       	out	0x3f, r24	; 63
   14638:	ea cf       	rjmp	.-44     	; 0x1460e <pinMode+0x4c>

0001463a <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
   1463a:	8f 92       	push	r8
   1463c:	9f 92       	push	r9
   1463e:	af 92       	push	r10
   14640:	bf 92       	push	r11
   14642:	cf 92       	push	r12
   14644:	df 92       	push	r13
   14646:	ef 92       	push	r14
   14648:	ff 92       	push	r15
   1464a:	6b 01       	movw	r12, r22
   1464c:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
   1464e:	0e 94 17 97 	call	0x12e2e	; 0x12e2e <micros>
   14652:	4b 01       	movw	r8, r22
   14654:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
   14656:	c1 14       	cp	r12, r1
   14658:	d1 04       	cpc	r13, r1
   1465a:	e1 04       	cpc	r14, r1
   1465c:	f1 04       	cpc	r15, r1
   1465e:	b9 f0       	breq	.+46     	; 0x1468e <delay+0x54>
   14660:	0e 94 17 97 	call	0x12e2e	; 0x12e2e <micros>
   14664:	68 19       	sub	r22, r8
   14666:	79 09       	sbc	r23, r9
   14668:	8a 09       	sbc	r24, r10
   1466a:	9b 09       	sbc	r25, r11
   1466c:	68 3e       	cpi	r22, 0xE8	; 232
   1466e:	73 40       	sbci	r23, 0x03	; 3
   14670:	81 05       	cpc	r24, r1
   14672:	91 05       	cpc	r25, r1
   14674:	80 f3       	brcs	.-32     	; 0x14656 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
   14676:	21 e0       	ldi	r18, 0x01	; 1
   14678:	c2 1a       	sub	r12, r18
   1467a:	d1 08       	sbc	r13, r1
   1467c:	e1 08       	sbc	r14, r1
   1467e:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
   14680:	88 ee       	ldi	r24, 0xE8	; 232
   14682:	88 0e       	add	r8, r24
   14684:	83 e0       	ldi	r24, 0x03	; 3
   14686:	98 1e       	adc	r9, r24
   14688:	a1 1c       	adc	r10, r1
   1468a:	b1 1c       	adc	r11, r1
   1468c:	e4 cf       	rjmp	.-56     	; 0x14656 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
   1468e:	ff 90       	pop	r15
   14690:	ef 90       	pop	r14
   14692:	df 90       	pop	r13
   14694:	cf 90       	pop	r12
   14696:	bf 90       	pop	r11
   14698:	af 90       	pop	r10
   1469a:	9f 90       	pop	r9
   1469c:	8f 90       	pop	r8
   1469e:	08 95       	ret

000146a0 <LCDWIKI_KBV::reset() [clone .constprop.69]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   146a0:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   146a4:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   146a8:	80 81       	ld	r24, Z
   146aa:	90 91 79 0e 	lds	r25, 0x0E79	; 0x800e79 <my_lcd+0x36>
   146ae:	89 2b       	or	r24, r25
   146b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   146b2:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   146b6:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   146ba:	80 81       	ld	r24, Z
   146bc:	90 91 7c 0e 	lds	r25, 0x0E7C	; 0x800e7c <my_lcd+0x39>
   146c0:	89 2b       	or	r24, r25
   146c2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   146c4:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   146c8:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   146cc:	80 81       	ld	r24, Z
   146ce:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   146d2:	89 2b       	or	r24, r25
   146d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   146d6:	80 91 81 0e 	lds	r24, 0x0E81	; 0x800e81 <my_lcd+0x3e>
   146da:	88 23       	and	r24, r24
   146dc:	71 f0       	breq	.+28     	; 0x146fa <LCDWIKI_KBV::reset() [clone .constprop.69]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   146de:	60 e0       	ldi	r22, 0x00	; 0
   146e0:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   146e4:	62 e0       	ldi	r22, 0x02	; 2
   146e6:	70 e0       	ldi	r23, 0x00	; 0
   146e8:	80 e0       	ldi	r24, 0x00	; 0
   146ea:	90 e0       	ldi	r25, 0x00	; 0
   146ec:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   146f0:	61 e0       	ldi	r22, 0x01	; 1
   146f2:	80 91 81 0e 	lds	r24, 0x0E81	; 0x800e81 <my_lcd+0x3e>
   146f6:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   146fa:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   146fe:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   14702:	80 81       	ld	r24, Z
   14704:	90 91 7d 0e 	lds	r25, 0x0E7D	; 0x800e7d <my_lcd+0x3a>
   14708:	89 23       	and	r24, r25
   1470a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1470c:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   14710:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   14714:	80 81       	ld	r24, Z
   14716:	90 91 7e 0e 	lds	r25, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   1471a:	89 23       	and	r24, r25
   1471c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1471e:	12 b8       	out	0x02, r1	; 2
   14720:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   14724:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   14728:	80 81       	ld	r24, Z
   1472a:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   1472e:	89 23       	and	r24, r25
   14730:	80 83       	st	Z, r24
   14732:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   14736:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   1473a:	80 81       	ld	r24, Z
   1473c:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   14740:	89 2b       	or	r24, r25
   14742:	80 83       	st	Z, r24
   14744:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   14746:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   1474a:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   1474e:	90 81       	ld	r25, Z
   14750:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   14754:	92 23       	and	r25, r18
   14756:	90 83       	st	Z, r25
   14758:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   1475c:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   14760:	90 81       	ld	r25, Z
   14762:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   14766:	92 2b       	or	r25, r18
   14768:	90 83       	st	Z, r25
   1476a:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   1476c:	61 f7       	brne	.-40     	; 0x14746 <LCDWIKI_KBV::reset() [clone .constprop.69]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   1476e:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   14772:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   14776:	80 81       	ld	r24, Z
   14778:	90 91 79 0e 	lds	r25, 0x0E79	; 0x800e79 <my_lcd+0x36>
   1477c:	89 2b       	or	r24, r25
   1477e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   14780:	08 95       	ret

00014782 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.67():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   14782:	cf 93       	push	r28
   14784:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   14786:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   1478a:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   1478e:	90 81       	ld	r25, Z
   14790:	20 91 7d 0e 	lds	r18, 0x0E7D	; 0x800e7d <my_lcd+0x3a>
   14794:	92 23       	and	r25, r18
   14796:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   14798:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   1479c:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   147a0:	90 81       	ld	r25, Z
   147a2:	20 91 7e 0e 	lds	r18, 0x0E7E	; 0x800e7e <my_lcd+0x3b>
   147a6:	92 23       	and	r25, r18
   147a8:	90 83       	st	Z, r25
   147aa:	12 b8       	out	0x02, r1	; 2
   147ac:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   147b0:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   147b4:	90 81       	ld	r25, Z
   147b6:	20 91 7f 0e 	lds	r18, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   147ba:	92 23       	and	r25, r18
   147bc:	90 83       	st	Z, r25
   147be:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   147c2:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   147c6:	90 81       	ld	r25, Z
   147c8:	20 91 7b 0e 	lds	r18, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   147cc:	92 2b       	or	r25, r18
   147ce:	90 83       	st	Z, r25
   147d0:	82 b9       	out	0x02, r24	; 2
   147d2:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   147d6:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   147da:	80 81       	ld	r24, Z
   147dc:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <my_lcd+0x3c>
   147e0:	89 23       	and	r24, r25
   147e2:	80 83       	st	Z, r24
   147e4:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   147e8:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   147ec:	80 81       	ld	r24, Z
   147ee:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   147f2:	89 2b       	or	r24, r25
   147f4:	80 83       	st	Z, r24
   147f6:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   147fa:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   147fe:	80 81       	ld	r24, Z
   14800:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   14804:	89 2b       	or	r24, r25
   14806:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   14808:	81 b1       	in	r24, 0x01	; 1
   1480a:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1480c:	61 e0       	ldi	r22, 0x01	; 1
   1480e:	70 e0       	ldi	r23, 0x00	; 0
   14810:	80 e0       	ldi	r24, 0x00	; 0
   14812:	90 e0       	ldi	r25, 0x00	; 0
   14814:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   14818:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   1481c:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   14820:	80 81       	ld	r24, Z
   14822:	90 91 80 0e 	lds	r25, 0x0E80	; 0x800e80 <my_lcd+0x3d>
   14826:	89 23       	and	r24, r25
   14828:	80 83       	st	Z, r24
   1482a:	20 b1       	in	r18, 0x00	; 0
   1482c:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   14830:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   14834:	90 81       	ld	r25, Z
   14836:	80 91 7c 0e 	lds	r24, 0x0E7C	; 0x800e7c <my_lcd+0x39>
   1483a:	98 2b       	or	r25, r24
   1483c:	90 83       	st	Z, r25
   1483e:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   14842:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   14846:	90 81       	ld	r25, Z
   14848:	80 91 80 0e 	lds	r24, 0x0E80	; 0x800e80 <my_lcd+0x3d>
   1484c:	98 23       	and	r25, r24
   1484e:	90 83       	st	Z, r25
   14850:	80 b1       	in	r24, 0x00	; 0
   14852:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   14856:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   1485a:	90 81       	ld	r25, Z
   1485c:	30 91 7c 0e 	lds	r19, 0x0E7C	; 0x800e7c <my_lcd+0x39>
   14860:	93 2b       	or	r25, r19
   14862:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   14864:	c1 30       	cpi	r28, 0x01	; 1
   14866:	79 f0       	breq	.+30     	; 0x14886 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   14868:	e0 91 71 0e 	lds	r30, 0x0E71	; 0x800e71 <my_lcd+0x2e>
   1486c:	f0 91 72 0e 	lds	r31, 0x0E72	; 0x800e72 <my_lcd+0x2f>
   14870:	90 81       	ld	r25, Z
   14872:	30 91 79 0e 	lds	r19, 0x0E79	; 0x800e79 <my_lcd+0x36>
   14876:	93 2b       	or	r25, r19
   14878:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   1487a:	91 b1       	in	r25, 0x01	; 1
   1487c:	9f ef       	ldi	r25, 0xFF	; 255
   1487e:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   14880:	92 2f       	mov	r25, r18
   14882:	cf 91       	pop	r28
   14884:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   14886:	c0 e0       	ldi	r28, 0x00	; 0
   14888:	c7 cf       	rjmp	.-114    	; 0x14818 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.67]+0x96>

0001488a <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1488a:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1488c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
   1488e:	60 91 45 11 	lds	r22, 0x1145	; 0x801145 <timer0_millis>
   14892:	70 91 46 11 	lds	r23, 0x1146	; 0x801146 <timer0_millis+0x1>
   14896:	80 91 47 11 	lds	r24, 0x1147	; 0x801147 <timer0_millis+0x2>
   1489a:	90 91 48 11 	lds	r25, 0x1148	; 0x801148 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
   1489e:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
   148a0:	08 95       	ret

000148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>:
_ZN12PubSubClient8readByteEPh.constprop.142():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   148a2:	cf 92       	push	r12
   148a4:	df 92       	push	r13
   148a6:	ef 92       	push	r14
   148a8:	ff 92       	push	r15
   148aa:	cf 93       	push	r28
   148ac:	df 93       	push	r29
   148ae:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   148b0:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   148b4:	6b 01       	movw	r12, r22
   148b6:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   148b8:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   148bc:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   148c0:	dc 01       	movw	r26, r24
   148c2:	ed 91       	ld	r30, X+
   148c4:	fc 91       	ld	r31, X
   148c6:	00 84       	ldd	r0, Z+8	; 0x08
   148c8:	f1 85       	ldd	r31, Z+9	; 0x09
   148ca:	e0 2d       	mov	r30, r0
   148cc:	19 95       	eicall
   148ce:	89 2b       	or	r24, r25
   148d0:	69 f4       	brne	.+26     	; 0x148ec <PubSubClient::readByte(unsigned char*) [clone .constprop.142]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   148d2:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   148d6:	6c 19       	sub	r22, r12
   148d8:	7d 09       	sbc	r23, r13
   148da:	8e 09       	sbc	r24, r14
   148dc:	9f 09       	sbc	r25, r15
   148de:	64 36       	cpi	r22, 0x64	; 100
   148e0:	71 05       	cpc	r23, r1
   148e2:	81 05       	cpc	r24, r1
   148e4:	91 05       	cpc	r25, r1
   148e6:	40 f3       	brcs	.-48     	; 0x148b8 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   148e8:	80 e0       	ldi	r24, 0x00	; 0
   148ea:	0d c0       	rjmp	.+26     	; 0x14906 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   148ec:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   148f0:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   148f4:	dc 01       	movw	r26, r24
   148f6:	ed 91       	ld	r30, X+
   148f8:	fc 91       	ld	r31, X
   148fa:	02 84       	ldd	r0, Z+10	; 0x0a
   148fc:	f3 85       	ldd	r31, Z+11	; 0x0b
   148fe:	e0 2d       	mov	r30, r0
   14900:	19 95       	eicall
   14902:	88 83       	st	Y, r24
   14904:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   14906:	df 91       	pop	r29
   14908:	cf 91       	pop	r28
   1490a:	ff 90       	pop	r15
   1490c:	ef 90       	pop	r14
   1490e:	df 90       	pop	r13
   14910:	cf 90       	pop	r12
   14912:	08 95       	ret

00014914 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient10readPacketEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   14914:	3f 92       	push	r3
   14916:	4f 92       	push	r4
   14918:	5f 92       	push	r5
   1491a:	6f 92       	push	r6
   1491c:	7f 92       	push	r7
   1491e:	8f 92       	push	r8
   14920:	9f 92       	push	r9
   14922:	af 92       	push	r10
   14924:	bf 92       	push	r11
   14926:	cf 92       	push	r12
   14928:	df 92       	push	r13
   1492a:	ef 92       	push	r14
   1492c:	ff 92       	push	r15
   1492e:	0f 93       	push	r16
   14930:	1f 93       	push	r17
   14932:	cf 93       	push	r28
   14934:	df 93       	push	r29
   14936:	1f 92       	push	r1
   14938:	cd b7       	in	r28, 0x3d	; 61
   1493a:	de b7       	in	r29, 0x3e	; 62
   1493c:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   1493e:	8d e9       	ldi	r24, 0x9D	; 157
   14940:	9e e0       	ldi	r25, 0x0E	; 14
   14942:	0e 94 51 a4 	call	0x148a2	; 0x148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>
   14946:	81 11       	cpse	r24, r1
   14948:	16 c0       	rjmp	.+44     	; 0x14976 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   1494a:	10 e0       	ldi	r17, 0x00	; 0
   1494c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   1494e:	c8 01       	movw	r24, r16
   14950:	0f 90       	pop	r0
   14952:	df 91       	pop	r29
   14954:	cf 91       	pop	r28
   14956:	1f 91       	pop	r17
   14958:	0f 91       	pop	r16
   1495a:	ff 90       	pop	r15
   1495c:	ef 90       	pop	r14
   1495e:	df 90       	pop	r13
   14960:	cf 90       	pop	r12
   14962:	bf 90       	pop	r11
   14964:	af 90       	pop	r10
   14966:	9f 90       	pop	r9
   14968:	8f 90       	pop	r8
   1496a:	7f 90       	pop	r7
   1496c:	6f 90       	pop	r6
   1496e:	5f 90       	pop	r5
   14970:	4f 90       	pop	r4
   14972:	3f 90       	pop	r3
   14974:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   14976:	30 90 9d 0e 	lds	r3, 0x0E9D	; 0x800e9d <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   1497a:	19 82       	std	Y+1, r1	; 0x01
   1497c:	3e e9       	ldi	r19, 0x9E	; 158
   1497e:	83 2e       	mov	r8, r19
   14980:	3e e0       	ldi	r19, 0x0E	; 14
   14982:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   14984:	ee 24       	eor	r14, r14
   14986:	e3 94       	inc	r14
   14988:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   1498a:	d1 2c       	mov	r13, r1
   1498c:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   1498e:	41 2c       	mov	r4, r1
   14990:	51 2c       	mov	r5, r1
   14992:	32 01       	movw	r6, r4
   14994:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   14996:	ce 01       	movw	r24, r28
   14998:	01 96       	adiw	r24, 0x01	; 1
   1499a:	0e 94 51 a4 	call	0x148a2	; 0x148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>
   1499e:	88 23       	and	r24, r24
   149a0:	a1 f2       	breq	.-88     	; 0x1494a <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   149a2:	87 01       	movw	r16, r14
   149a4:	0f 5f       	subi	r16, 0xFF	; 255
   149a6:	1f 4f       	sbci	r17, 0xFF	; 255
   149a8:	89 81       	ldd	r24, Y+1	; 0x01
   149aa:	d4 01       	movw	r26, r8
   149ac:	8d 93       	st	X+, r24
   149ae:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   149b0:	28 2f       	mov	r18, r24
   149b2:	2f 77       	andi	r18, 0x7F	; 127
   149b4:	30 e0       	ldi	r19, 0x00	; 0
   149b6:	24 9d       	mul	r18, r4
   149b8:	a0 01       	movw	r20, r0
   149ba:	25 9d       	mul	r18, r5
   149bc:	50 0d       	add	r21, r0
   149be:	34 9d       	mul	r19, r4
   149c0:	50 0d       	add	r21, r0
   149c2:	11 24       	eor	r1, r1
   149c4:	c4 0e       	add	r12, r20
   149c6:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   149c8:	27 e0       	ldi	r18, 0x07	; 7
   149ca:	44 0c       	add	r4, r4
   149cc:	55 1c       	adc	r5, r5
   149ce:	66 1c       	adc	r6, r6
   149d0:	77 1c       	adc	r7, r7
   149d2:	2a 95       	dec	r18
   149d4:	d1 f7       	brne	.-12     	; 0x149ca <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   149d6:	87 fd       	sbrc	r24, 7
   149d8:	31 c0       	rjmp	.+98     	; 0x14a3c <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x128>
   149da:	b3 2d       	mov	r27, r3
   149dc:	b0 7f       	andi	r27, 0xF0	; 240
   149de:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   149e0:	8f ef       	ldi	r24, 0xFF	; 255
   149e2:	80 0f       	add	r24, r16
   149e4:	f5 01       	movw	r30, r10
   149e6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   149e8:	f0 e3       	ldi	r31, 0x30	; 48
   149ea:	bf 13       	cpse	r27, r31
   149ec:	29 c0       	rjmp	.+82     	; 0x14a40 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   149ee:	c8 01       	movw	r24, r16
   149f0:	83 56       	subi	r24, 0x63	; 99
   149f2:	91 4f       	sbci	r25, 0xF1	; 241
   149f4:	0e 94 51 a4 	call	0x148a2	; 0x148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>
   149f8:	88 23       	and	r24, r24
   149fa:	09 f4       	brne	.+2      	; 0x149fe <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0xea>
   149fc:	a6 cf       	rjmp	.-180    	; 0x1494a <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x36>
   149fe:	c7 01       	movw	r24, r14
   14a00:	81 56       	subi	r24, 0x61	; 97
   14a02:	91 4f       	sbci	r25, 0xF1	; 241
   14a04:	0e 94 51 a4 	call	0x148a2	; 0x148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>
   14a08:	88 23       	and	r24, r24
   14a0a:	09 f4       	brne	.+2      	; 0x14a0e <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0xfa>
   14a0c:	9e cf       	rjmp	.-196    	; 0x1494a <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   14a0e:	0e 5f       	subi	r16, 0xFE	; 254
   14a10:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   14a12:	d5 01       	movw	r26, r10
   14a14:	ec 91       	ld	r30, X
   14a16:	f0 e0       	ldi	r31, 0x00	; 0
   14a18:	e5 56       	subi	r30, 0x65	; 101
   14a1a:	f1 4f       	sbci	r31, 0xF1	; 241
   14a1c:	e3 80       	ldd	r14, Z+3	; 0x03
   14a1e:	f1 2c       	mov	r15, r1
   14a20:	fe 2c       	mov	r15, r14
   14a22:	ee 24       	eor	r14, r14
   14a24:	84 81       	ldd	r24, Z+4	; 0x04
   14a26:	e8 0e       	add	r14, r24
   14a28:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   14a2a:	80 91 9d 0e 	lds	r24, 0x0E9D	; 0x800e9d <mqtt_client+0x2>
   14a2e:	81 ff       	sbrs	r24, 1
   14a30:	03 c0       	rjmp	.+6      	; 0x14a38 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   14a32:	b2 e0       	ldi	r27, 0x02	; 2
   14a34:	eb 0e       	add	r14, r27
   14a36:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   14a38:	92 e0       	ldi	r25, 0x02	; 2
   14a3a:	05 c0       	rjmp	.+10     	; 0x14a46 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   14a3c:	78 01       	movw	r14, r16
   14a3e:	ab cf       	rjmp	.-170    	; 0x14996 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   14a40:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   14a42:	f1 2c       	mov	r15, r1
   14a44:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   14a46:	69 2e       	mov	r6, r25
   14a48:	71 2c       	mov	r7, r1
   14a4a:	60 1a       	sub	r6, r16
   14a4c:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   14a4e:	8e ef       	ldi	r24, 0xFE	; 254
   14a50:	88 2e       	mov	r8, r24
   14a52:	99 24       	eor	r9, r9
   14a54:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   14a56:	c3 01       	movw	r24, r6
   14a58:	80 0f       	add	r24, r16
   14a5a:	91 1f       	adc	r25, r17
   14a5c:	8c 15       	cp	r24, r12
   14a5e:	9d 05       	cpc	r25, r13
   14a60:	78 f5       	brcc	.+94     	; 0x14ac0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   14a62:	ce 01       	movw	r24, r28
   14a64:	01 96       	adiw	r24, 0x01	; 1
   14a66:	0e 94 51 a4 	call	0x148a2	; 0x148a2 <PubSubClient::readByte(unsigned char*) [clone .constprop.142]>
   14a6a:	88 23       	and	r24, r24
   14a6c:	09 f4       	brne	.+2      	; 0x14a70 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x15c>
   14a6e:	6d cf       	rjmp	.-294    	; 0x1494a <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   14a70:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <mqtt_client+0x219>
   14a74:	90 91 b5 10 	lds	r25, 0x10B5	; 0x8010b5 <mqtt_client+0x21a>
   14a78:	00 97       	sbiw	r24, 0x00	; 0
   14a7a:	b1 f0       	breq	.+44     	; 0x14aa8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   14a7c:	e0 e3       	ldi	r30, 0x30	; 48
   14a7e:	3e 12       	cpse	r3, r30
   14a80:	13 c0       	rjmp	.+38     	; 0x14aa8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x194>
   14a82:	d5 01       	movw	r26, r10
   14a84:	2c 91       	ld	r18, X
   14a86:	f4 01       	movw	r30, r8
   14a88:	e2 1b       	sub	r30, r18
   14a8a:	f1 09       	sbc	r31, r1
   14a8c:	9f 01       	movw	r18, r30
   14a8e:	20 0f       	add	r18, r16
   14a90:	31 1f       	adc	r19, r17
   14a92:	e2 16       	cp	r14, r18
   14a94:	f3 06       	cpc	r15, r19
   14a96:	40 f4       	brcc	.+16     	; 0x14aa8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   14a98:	dc 01       	movw	r26, r24
   14a9a:	ed 91       	ld	r30, X+
   14a9c:	fc 91       	ld	r31, X
   14a9e:	01 90       	ld	r0, Z+
   14aa0:	f0 81       	ld	r31, Z
   14aa2:	e0 2d       	mov	r30, r0
   14aa4:	69 81       	ldd	r22, Y+1	; 0x01
   14aa6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   14aa8:	01 15       	cp	r16, r1
   14aaa:	b2 e0       	ldi	r27, 0x02	; 2
   14aac:	1b 07       	cpc	r17, r27
   14aae:	28 f4       	brcc	.+10     	; 0x14aba <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   14ab0:	89 81       	ldd	r24, Y+1	; 0x01
   14ab2:	f8 01       	movw	r30, r16
   14ab4:	e5 56       	subi	r30, 0x65	; 101
   14ab6:	f1 4f       	sbci	r31, 0xF1	; 241
   14ab8:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   14aba:	0f 5f       	subi	r16, 0xFF	; 255
   14abc:	1f 4f       	sbci	r17, 0xFF	; 255
   14abe:	cb cf       	rjmp	.-106    	; 0x14a56 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   14ac0:	80 91 b4 10 	lds	r24, 0x10B4	; 0x8010b4 <mqtt_client+0x219>
   14ac4:	90 91 b5 10 	lds	r25, 0x10B5	; 0x8010b5 <mqtt_client+0x21a>
   14ac8:	89 2b       	or	r24, r25
   14aca:	09 f0       	breq	.+2      	; 0x14ace <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x1ba>
   14acc:	40 cf       	rjmp	.-384    	; 0x1494e <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x3a>
   14ace:	01 30       	cpi	r16, 0x01	; 1
   14ad0:	e2 e0       	ldi	r30, 0x02	; 2
   14ad2:	1e 07       	cpc	r17, r30
   14ad4:	08 f0       	brcs	.+2      	; 0x14ad8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x1c4>
   14ad6:	39 cf       	rjmp	.-398    	; 0x1494a <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x36>
   14ad8:	3a cf       	rjmp	.-396    	; 0x1494e <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]+0x3a>

00014ada <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   14ada:	cf 92       	push	r12
   14adc:	df 92       	push	r13
   14ade:	ef 92       	push	r14
   14ae0:	ff 92       	push	r15
   14ae2:	0f 93       	push	r16
   14ae4:	1f 93       	push	r17
   14ae6:	cf 93       	push	r28
   14ae8:	df 93       	push	r29
   14aea:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   14aec:	cf 80       	ldd	r12, Y+7	; 0x07
   14aee:	d8 84       	ldd	r13, Y+8	; 0x08
   14af0:	e9 84       	ldd	r14, Y+9	; 0x09
   14af2:	fa 84       	ldd	r15, Y+10	; 0x0a
   14af4:	8f 85       	ldd	r24, Y+15	; 0x0f
   14af6:	98 89       	ldd	r25, Y+16	; 0x10
   14af8:	a9 89       	ldd	r26, Y+17	; 0x11
   14afa:	ba 89       	ldd	r27, Y+18	; 0x12
   14afc:	c8 0e       	add	r12, r24
   14afe:	d9 1e       	adc	r13, r25
   14b00:	ea 1e       	adc	r14, r26
   14b02:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   14b04:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   14b08:	0b 89       	ldd	r16, Y+19	; 0x13
   14b0a:	1c 89       	ldd	r17, Y+20	; 0x14
   14b0c:	2d 89       	ldd	r18, Y+21	; 0x15
   14b0e:	3e 89       	ldd	r19, Y+22	; 0x16
   14b10:	60 1b       	sub	r22, r16
   14b12:	71 0b       	sbc	r23, r17
   14b14:	82 0b       	sbc	r24, r18
   14b16:	93 0b       	sbc	r25, r19
   14b18:	28 ee       	ldi	r18, 0xE8	; 232
   14b1a:	33 e0       	ldi	r19, 0x03	; 3
   14b1c:	40 e0       	ldi	r20, 0x00	; 0
   14b1e:	50 e0       	ldi	r21, 0x00	; 0
   14b20:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   14b24:	ca 01       	movw	r24, r20
   14b26:	b9 01       	movw	r22, r18
   14b28:	6c 0d       	add	r22, r12
   14b2a:	7d 1d       	adc	r23, r13
   14b2c:	8e 1d       	adc	r24, r14
   14b2e:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   14b30:	df 91       	pop	r29
   14b32:	cf 91       	pop	r28
   14b34:	1f 91       	pop	r17
   14b36:	0f 91       	pop	r16
   14b38:	ff 90       	pop	r15
   14b3a:	ef 90       	pop	r14
   14b3c:	df 90       	pop	r13
   14b3e:	cf 90       	pop	r12
   14b40:	08 95       	ret

00014b42 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   14b42:	cf 93       	push	r28
   14b44:	df 93       	push	r29
   14b46:	00 d0       	rcall	.+0      	; 0x14b48 <NTPClient::getYear() const+0x6>
   14b48:	1f 92       	push	r1
   14b4a:	cd b7       	in	r28, 0x3d	; 61
   14b4c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   14b4e:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   14b52:	69 83       	std	Y+1, r22	; 0x01
   14b54:	7a 83       	std	Y+2, r23	; 0x02
   14b56:	8b 83       	std	Y+3, r24	; 0x03
   14b58:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   14b5a:	ce 01       	movw	r24, r28
   14b5c:	01 96       	adiw	r24, 0x01	; 1
   14b5e:	0e 94 f3 b3 	call	0x167e6	; 0x167e6 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   14b62:	fc 01       	movw	r30, r24
   14b64:	86 81       	ldd	r24, Z+6	; 0x06
   14b66:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   14b68:	84 59       	subi	r24, 0x94	; 148
   14b6a:	98 4f       	sbci	r25, 0xF8	; 248
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	0f 90       	pop	r0
   14b72:	0f 90       	pop	r0
   14b74:	df 91       	pop	r29
   14b76:	cf 91       	pop	r28
   14b78:	08 95       	ret

00014b7a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   14b7a:	1f 92       	push	r1
   14b7c:	0f 92       	push	r0
   14b7e:	0f b6       	in	r0, 0x3f	; 63
   14b80:	0f 92       	push	r0
   14b82:	11 24       	eor	r1, r1
   14b84:	2f 93       	push	r18
   14b86:	3f 93       	push	r19
   14b88:	8f 93       	push	r24
   14b8a:	9f 93       	push	r25
   14b8c:	af 93       	push	r26
   14b8e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   14b90:	80 91 45 11 	lds	r24, 0x1145	; 0x801145 <timer0_millis>
   14b94:	90 91 46 11 	lds	r25, 0x1146	; 0x801146 <timer0_millis+0x1>
   14b98:	a0 91 47 11 	lds	r26, 0x1147	; 0x801147 <timer0_millis+0x2>
   14b9c:	b0 91 48 11 	lds	r27, 0x1148	; 0x801148 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
   14ba0:	30 91 44 11 	lds	r19, 0x1144	; 0x801144 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
   14ba4:	23 e0       	ldi	r18, 0x03	; 3
   14ba6:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
   14ba8:	2d 37       	cpi	r18, 0x7D	; 125
   14baa:	68 f1       	brcs	.+90     	; 0x14c06 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
   14bac:	26 e8       	ldi	r18, 0x86	; 134
   14bae:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
   14bb0:	02 96       	adiw	r24, 0x02	; 2
   14bb2:	a1 1d       	adc	r26, r1
   14bb4:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
   14bb6:	20 93 44 11 	sts	0x1144, r18	; 0x801144 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
   14bba:	80 93 45 11 	sts	0x1145, r24	; 0x801145 <timer0_millis>
   14bbe:	90 93 46 11 	sts	0x1146, r25	; 0x801146 <timer0_millis+0x1>
   14bc2:	a0 93 47 11 	sts	0x1147, r26	; 0x801147 <timer0_millis+0x2>
   14bc6:	b0 93 48 11 	sts	0x1148, r27	; 0x801148 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
   14bca:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <timer0_overflow_count>
   14bce:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <timer0_overflow_count+0x1>
   14bd2:	a0 91 4b 11 	lds	r26, 0x114B	; 0x80114b <timer0_overflow_count+0x2>
   14bd6:	b0 91 4c 11 	lds	r27, 0x114C	; 0x80114c <timer0_overflow_count+0x3>
   14bda:	01 96       	adiw	r24, 0x01	; 1
   14bdc:	a1 1d       	adc	r26, r1
   14bde:	b1 1d       	adc	r27, r1
   14be0:	80 93 49 11 	sts	0x1149, r24	; 0x801149 <timer0_overflow_count>
   14be4:	90 93 4a 11 	sts	0x114A, r25	; 0x80114a <timer0_overflow_count+0x1>
   14be8:	a0 93 4b 11 	sts	0x114B, r26	; 0x80114b <timer0_overflow_count+0x2>
   14bec:	b0 93 4c 11 	sts	0x114C, r27	; 0x80114c <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
   14bf0:	bf 91       	pop	r27
   14bf2:	af 91       	pop	r26
   14bf4:	9f 91       	pop	r25
   14bf6:	8f 91       	pop	r24
   14bf8:	3f 91       	pop	r19
   14bfa:	2f 91       	pop	r18
   14bfc:	0f 90       	pop	r0
   14bfe:	0f be       	out	0x3f, r0	; 63
   14c00:	0f 90       	pop	r0
   14c02:	1f 90       	pop	r1
   14c04:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
   14c06:	01 96       	adiw	r24, 0x01	; 1
   14c08:	a1 1d       	adc	r26, r1
   14c0a:	b1 1d       	adc	r27, r1
   14c0c:	d4 cf       	rjmp	.-88     	; 0x14bb6 <__vector_23+0x3c>

00014c0e <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   14c0e:	1f 92       	push	r1
   14c10:	0f 92       	push	r0
   14c12:	0f b6       	in	r0, 0x3f	; 63
   14c14:	0f 92       	push	r0
   14c16:	11 24       	eor	r1, r1
   14c18:	0b b6       	in	r0, 0x3b	; 59
   14c1a:	0f 92       	push	r0
   14c1c:	2f 93       	push	r18
   14c1e:	3f 93       	push	r19
   14c20:	4f 93       	push	r20
   14c22:	5f 93       	push	r21
   14c24:	6f 93       	push	r22
   14c26:	7f 93       	push	r23
   14c28:	8f 93       	push	r24
   14c2a:	9f 93       	push	r25
   14c2c:	af 93       	push	r26
   14c2e:	bf 93       	push	r27
   14c30:	cf 93       	push	r28
   14c32:	ef 93       	push	r30
   14c34:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   14c36:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   14c38:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   14c3c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   14c40:	e0 91 2f 0a 	lds	r30, 0x0A2F	; 0x800a2f <_ZL17a2d_interupt_func.lto_priv.233>
   14c44:	f0 91 30 0a 	lds	r31, 0x0A30	; 0x800a30 <_ZL17a2d_interupt_func.lto_priv.233+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   14c48:	68 2f       	mov	r22, r24
   14c4a:	70 e0       	ldi	r23, 0x00	; 0
   14c4c:	76 2f       	mov	r23, r22
   14c4e:	66 27       	eor	r22, r22
   14c50:	69 0f       	add	r22, r25
   14c52:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   14c54:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <a2d_input>
   14c58:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   14c5a:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   14c5c:	ff 91       	pop	r31
   14c5e:	ef 91       	pop	r30
   14c60:	cf 91       	pop	r28
   14c62:	bf 91       	pop	r27
   14c64:	af 91       	pop	r26
   14c66:	9f 91       	pop	r25
   14c68:	8f 91       	pop	r24
   14c6a:	7f 91       	pop	r23
   14c6c:	6f 91       	pop	r22
   14c6e:	5f 91       	pop	r21
   14c70:	4f 91       	pop	r20
   14c72:	3f 91       	pop	r19
   14c74:	2f 91       	pop	r18
   14c76:	0f 90       	pop	r0
   14c78:	0b be       	out	0x3b, r0	; 59
   14c7a:	0f 90       	pop	r0
   14c7c:	0f be       	out	0x3f, r0	; 63
   14c7e:	0f 90       	pop	r0
   14c80:	1f 90       	pop	r1
   14c82:	18 95       	reti

00014c84 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   14c84:	20 91 2d 0a 	lds	r18, 0x0A2D	; 0x800a2d <a2d_reference>
   14c88:	90 e4       	ldi	r25, 0x40	; 64
   14c8a:	29 9f       	mul	r18, r25
   14c8c:	90 01       	movw	r18, r0
   14c8e:	11 24       	eor	r1, r1
   14c90:	28 0f       	add	r18, r24
   14c92:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   14c96:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   14c9a:	ea e7       	ldi	r30, 0x7A	; 122
   14c9c:	f0 e0       	ldi	r31, 0x00	; 0
   14c9e:	80 81       	ld	r24, Z
   14ca0:	80 64       	ori	r24, 0x40	; 64
   14ca2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   14ca4:	08 95       	ret

00014ca6 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   14ca6:	cf 92       	push	r12
   14ca8:	df 92       	push	r13
   14caa:	ef 92       	push	r14
   14cac:	ff 92       	push	r15
   14cae:	0f 93       	push	r16
   14cb0:	1f 93       	push	r17
   14cb2:	cf 93       	push	r28
   14cb4:	df 93       	push	r29
   14cb6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   14cb8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   14cbc:	0b 89       	ldd	r16, Y+19	; 0x13
   14cbe:	1c 89       	ldd	r17, Y+20	; 0x14
   14cc0:	2d 89       	ldd	r18, Y+21	; 0x15
   14cc2:	3e 89       	ldd	r19, Y+22	; 0x16
   14cc4:	60 1b       	sub	r22, r16
   14cc6:	71 0b       	sbc	r23, r17
   14cc8:	82 0b       	sbc	r24, r18
   14cca:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   14ccc:	cb 84       	ldd	r12, Y+11	; 0x0b
   14cce:	dc 84       	ldd	r13, Y+12	; 0x0c
   14cd0:	ed 84       	ldd	r14, Y+13	; 0x0d
   14cd2:	fe 84       	ldd	r15, Y+14	; 0x0e
   14cd4:	6c 15       	cp	r22, r12
   14cd6:	7d 05       	cpc	r23, r13
   14cd8:	8e 05       	cpc	r24, r14
   14cda:	9f 05       	cpc	r25, r15
   14cdc:	28 f4       	brcc	.+10     	; 0x14ce8 <NTPClient::update()+0x42>
   14cde:	01 2b       	or	r16, r17
   14ce0:	02 2b       	or	r16, r18
   14ce2:	03 2b       	or	r16, r19
   14ce4:	09 f0       	breq	.+2      	; 0x14ce8 <NTPClient::update()+0x42>
   14ce6:	9e c0       	rjmp	.+316    	; 0x14e24 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   14ce8:	8a 81       	ldd	r24, Y+2	; 0x02
   14cea:	81 11       	cpse	r24, r1
   14cec:	03 c0       	rjmp	.+6      	; 0x14cf4 <NTPClient::update()+0x4e>
   14cee:	ce 01       	movw	r24, r28
   14cf0:	0e 94 3c 97 	call	0x12e78	; 0x12e78 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   14cf4:	7e 01       	movw	r14, r28
   14cf6:	87 e1       	ldi	r24, 0x17	; 23
   14cf8:	e8 0e       	add	r14, r24
   14cfa:	f1 1c       	adc	r15, r1
   14cfc:	8c e2       	ldi	r24, 0x2C	; 44
   14cfe:	fe 01       	movw	r30, r28
   14d00:	7b 96       	adiw	r30, 0x1b	; 27
   14d02:	df 01       	movw	r26, r30
   14d04:	1d 92       	st	X+, r1
   14d06:	8a 95       	dec	r24
   14d08:	e9 f7       	brne	.-6      	; 0x14d04 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   14d0a:	83 ee       	ldi	r24, 0xE3	; 227
   14d0c:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   14d0e:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   14d10:	86 e0       	ldi	r24, 0x06	; 6
   14d12:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   14d14:	8c ee       	ldi	r24, 0xEC	; 236
   14d16:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   14d18:	81 e3       	ldi	r24, 0x31	; 49
   14d1a:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   14d1c:	9e e4       	ldi	r25, 0x4E	; 78
   14d1e:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   14d20:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   14d22:	84 e3       	ldi	r24, 0x34	; 52
   14d24:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   14d26:	88 81       	ld	r24, Y
   14d28:	99 81       	ldd	r25, Y+1	; 0x01
   14d2a:	6b 81       	ldd	r22, Y+3	; 0x03
   14d2c:	7c 81       	ldd	r23, Y+4	; 0x04
   14d2e:	dc 01       	movw	r26, r24
   14d30:	ed 91       	ld	r30, X+
   14d32:	fc 91       	ld	r31, X
   14d34:	06 88       	ldd	r0, Z+22	; 0x16
   14d36:	f7 89       	ldd	r31, Z+23	; 0x17
   14d38:	e0 2d       	mov	r30, r0
   14d3a:	4b e7       	ldi	r20, 0x7B	; 123
   14d3c:	50 e0       	ldi	r21, 0x00	; 0
   14d3e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   14d40:	88 81       	ld	r24, Y
   14d42:	99 81       	ldd	r25, Y+1	; 0x01
   14d44:	dc 01       	movw	r26, r24
   14d46:	ed 91       	ld	r30, X+
   14d48:	fc 91       	ld	r31, X
   14d4a:	02 80       	ldd	r0, Z+2	; 0x02
   14d4c:	f3 81       	ldd	r31, Z+3	; 0x03
   14d4e:	e0 2d       	mov	r30, r0
   14d50:	40 e3       	ldi	r20, 0x30	; 48
   14d52:	50 e0       	ldi	r21, 0x00	; 0
   14d54:	b7 01       	movw	r22, r14
   14d56:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   14d58:	88 81       	ld	r24, Y
   14d5a:	99 81       	ldd	r25, Y+1	; 0x01
   14d5c:	dc 01       	movw	r26, r24
   14d5e:	ed 91       	ld	r30, X+
   14d60:	fc 91       	ld	r31, X
   14d62:	00 8c       	ldd	r0, Z+24	; 0x18
   14d64:	f1 8d       	ldd	r31, Z+25	; 0x19
   14d66:	e0 2d       	mov	r30, r0
   14d68:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   14d6a:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   14d6c:	6a e0       	ldi	r22, 0x0A	; 10
   14d6e:	70 e0       	ldi	r23, 0x00	; 0
   14d70:	80 e0       	ldi	r24, 0x00	; 0
   14d72:	90 e0       	ldi	r25, 0x00	; 0
   14d74:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   14d78:	88 81       	ld	r24, Y
   14d7a:	99 81       	ldd	r25, Y+1	; 0x01
   14d7c:	dc 01       	movw	r26, r24
   14d7e:	ed 91       	ld	r30, X+
   14d80:	fc 91       	ld	r31, X
   14d82:	02 8c       	ldd	r0, Z+26	; 0x1a
   14d84:	f3 8d       	ldd	r31, Z+27	; 0x1b
   14d86:	e0 2d       	mov	r30, r0
   14d88:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   14d8a:	15 36       	cpi	r17, 0x65	; 101
   14d8c:	09 f4       	brne	.+2      	; 0x14d90 <NTPClient::update()+0xea>
   14d8e:	54 c0       	rjmp	.+168    	; 0x14e38 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   14d90:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   14d92:	89 2b       	or	r24, r25
   14d94:	59 f3       	breq	.-42     	; 0x14d6c <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   14d96:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   14d9a:	21 2f       	mov	r18, r17
   14d9c:	30 e0       	ldi	r19, 0x00	; 0
   14d9e:	a9 01       	movw	r20, r18
   14da0:	4f 5f       	subi	r20, 0xFF	; 255
   14da2:	5f 4f       	sbci	r21, 0xFF	; 255
   14da4:	ea e0       	ldi	r30, 0x0A	; 10
   14da6:	e4 9f       	mul	r30, r20
   14da8:	90 01       	movw	r18, r0
   14daa:	e5 9f       	mul	r30, r21
   14dac:	30 0d       	add	r19, r0
   14dae:	11 24       	eor	r1, r1
   14db0:	89 01       	movw	r16, r18
   14db2:	33 0f       	add	r19, r19
   14db4:	22 0b       	sbc	r18, r18
   14db6:	33 0b       	sbc	r19, r19
   14db8:	ab 01       	movw	r20, r22
   14dba:	bc 01       	movw	r22, r24
   14dbc:	40 1b       	sub	r20, r16
   14dbe:	51 0b       	sbc	r21, r17
   14dc0:	62 0b       	sbc	r22, r18
   14dc2:	73 0b       	sbc	r23, r19
   14dc4:	4b 8b       	std	Y+19, r20	; 0x13
   14dc6:	5c 8b       	std	Y+20, r21	; 0x14
   14dc8:	6d 8b       	std	Y+21, r22	; 0x15
   14dca:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   14dcc:	88 81       	ld	r24, Y
   14dce:	99 81       	ldd	r25, Y+1	; 0x01
   14dd0:	dc 01       	movw	r26, r24
   14dd2:	ed 91       	ld	r30, X+
   14dd4:	fc 91       	ld	r31, X
   14dd6:	04 8c       	ldd	r0, Z+28	; 0x1c
   14dd8:	f5 8d       	ldd	r31, Z+29	; 0x1d
   14dda:	e0 2d       	mov	r30, r0
   14ddc:	40 e3       	ldi	r20, 0x30	; 48
   14dde:	50 e0       	ldi	r21, 0x00	; 0
   14de0:	b7 01       	movw	r22, r14
   14de2:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   14de4:	fe 01       	movw	r30, r28
   14de6:	ff 96       	adiw	r30, 0x3f	; 63
   14de8:	80 81       	ld	r24, Z
   14dea:	91 81       	ldd	r25, Z+1	; 0x01
   14dec:	98 27       	eor	r25, r24
   14dee:	89 27       	eor	r24, r25
   14df0:	98 27       	eor	r25, r24
   14df2:	b0 e0       	ldi	r27, 0x00	; 0
   14df4:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   14df6:	dc 01       	movw	r26, r24
   14df8:	99 27       	eor	r25, r25
   14dfa:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   14dfc:	32 96       	adiw	r30, 0x02	; 2
   14dfe:	40 81       	ld	r20, Z
   14e00:	51 81       	ldd	r21, Z+1	; 0x01
   14e02:	54 27       	eor	r21, r20
   14e04:	45 27       	eor	r20, r21
   14e06:	54 27       	eor	r21, r20
   14e08:	70 e0       	ldi	r23, 0x00	; 0
   14e0a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   14e0c:	84 2b       	or	r24, r20
   14e0e:	95 2b       	or	r25, r21
   14e10:	a6 2b       	or	r26, r22
   14e12:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   14e14:	80 58       	subi	r24, 0x80	; 128
   14e16:	9e 47       	sbci	r25, 0x7E	; 126
   14e18:	aa 4a       	sbci	r26, 0xAA	; 170
   14e1a:	b3 48       	sbci	r27, 0x83	; 131
   14e1c:	8f 87       	std	Y+15, r24	; 0x0f
   14e1e:	98 8b       	std	Y+16, r25	; 0x10
   14e20:	a9 8b       	std	Y+17, r26	; 0x11
   14e22:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   14e24:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   14e26:	df 91       	pop	r29
   14e28:	cf 91       	pop	r28
   14e2a:	1f 91       	pop	r17
   14e2c:	0f 91       	pop	r16
   14e2e:	ff 90       	pop	r15
   14e30:	ef 90       	pop	r14
   14e32:	df 90       	pop	r13
   14e34:	cf 90       	pop	r12
   14e36:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   14e38:	80 e0       	ldi	r24, 0x00	; 0
   14e3a:	f5 cf       	rjmp	.-22     	; 0x14e26 <NTPClient::update()+0x180>

00014e3c <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   14e3c:	1f 92       	push	r1
   14e3e:	0f 92       	push	r0
   14e40:	0f b6       	in	r0, 0x3f	; 63
   14e42:	0f 92       	push	r0
   14e44:	11 24       	eor	r1, r1
   14e46:	0b b6       	in	r0, 0x3b	; 59
   14e48:	0f 92       	push	r0
   14e4a:	2f 93       	push	r18
   14e4c:	3f 93       	push	r19
   14e4e:	4f 93       	push	r20
   14e50:	5f 93       	push	r21
   14e52:	6f 93       	push	r22
   14e54:	7f 93       	push	r23
   14e56:	8f 93       	push	r24
   14e58:	9f 93       	push	r25
   14e5a:	af 93       	push	r26
   14e5c:	bf 93       	push	r27
   14e5e:	ef 93       	push	r30
   14e60:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   14e62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   14e66:	88 7f       	andi	r24, 0xF8	; 248
   14e68:	80 36       	cpi	r24, 0x60	; 96
   14e6a:	09 f4       	brne	.+2      	; 0x14e6e <__vector_39+0x32>
   14e6c:	4d c0       	rjmp	.+154    	; 0x14f08 <__vector_39+0xcc>
   14e6e:	08 f0       	brcs	.+2      	; 0x14e72 <__vector_39+0x36>
   14e70:	40 c0       	rjmp	.+128    	; 0x14ef2 <__vector_39+0xb6>
   14e72:	88 32       	cpi	r24, 0x28	; 40
   14e74:	09 f4       	brne	.+2      	; 0x14e78 <__vector_39+0x3c>
   14e76:	a9 c0       	rjmp	.+338    	; 0x14fca <__vector_39+0x18e>
   14e78:	28 f5       	brcc	.+74     	; 0x14ec4 <__vector_39+0x88>
   14e7a:	80 31       	cpi	r24, 0x10	; 16
   14e7c:	09 f4       	brne	.+2      	; 0x14e80 <__vector_39+0x44>
   14e7e:	9d c0       	rjmp	.+314    	; 0x14fba <__vector_39+0x17e>
   14e80:	c8 f4       	brcc	.+50     	; 0x14eb4 <__vector_39+0x78>
   14e82:	88 23       	and	r24, r24
   14e84:	09 f4       	brne	.+2      	; 0x14e88 <__vector_39+0x4c>
   14e86:	fb c0       	rjmp	.+502    	; 0x1507e <__vector_39+0x242>
   14e88:	88 30       	cpi	r24, 0x08	; 8
   14e8a:	09 f4       	brne	.+2      	; 0x14e8e <__vector_39+0x52>
   14e8c:	96 c0       	rjmp	.+300    	; 0x14fba <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   14e8e:	ff 91       	pop	r31
   14e90:	ef 91       	pop	r30
   14e92:	bf 91       	pop	r27
   14e94:	af 91       	pop	r26
   14e96:	9f 91       	pop	r25
   14e98:	8f 91       	pop	r24
   14e9a:	7f 91       	pop	r23
   14e9c:	6f 91       	pop	r22
   14e9e:	5f 91       	pop	r21
   14ea0:	4f 91       	pop	r20
   14ea2:	3f 91       	pop	r19
   14ea4:	2f 91       	pop	r18
   14ea6:	0f 90       	pop	r0
   14ea8:	0b be       	out	0x3b, r0	; 59
   14eaa:	0f 90       	pop	r0
   14eac:	0f be       	out	0x3f, r0	; 63
   14eae:	0f 90       	pop	r0
   14eb0:	1f 90       	pop	r1
   14eb2:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14eb4:	88 31       	cpi	r24, 0x18	; 24
   14eb6:	09 f4       	brne	.+2      	; 0x14eba <__vector_39+0x7e>
   14eb8:	88 c0       	rjmp	.+272    	; 0x14fca <__vector_39+0x18e>
   14eba:	80 32       	cpi	r24, 0x20	; 32
   14ebc:	41 f7       	brne	.-48     	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   14ebe:	80 93 b6 11 	sts	0x11B6, r24	; 0x8011b6 <twi_error>
   14ec2:	14 c0       	rjmp	.+40     	; 0x14eec <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14ec4:	80 34       	cpi	r24, 0x40	; 64
   14ec6:	09 f4       	brne	.+2      	; 0x14eca <__vector_39+0x8e>
   14ec8:	9d c0       	rjmp	.+314    	; 0x15004 <__vector_39+0x1c8>
   14eca:	40 f4       	brcc	.+16     	; 0x14edc <__vector_39+0xa0>
   14ecc:	80 33       	cpi	r24, 0x30	; 48
   14ece:	b9 f3       	breq	.-18     	; 0x14ebe <__vector_39+0x82>
   14ed0:	88 33       	cpi	r24, 0x38	; 56
   14ed2:	e9 f6       	brne	.-70     	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   14ed4:	80 93 b6 11 	sts	0x11B6, r24	; 0x8011b6 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   14ed8:	85 ec       	ldi	r24, 0xC5	; 197
   14eda:	b0 c0       	rjmp	.+352    	; 0x1503c <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14edc:	80 35       	cpi	r24, 0x50	; 80
   14ede:	09 f4       	brne	.+2      	; 0x14ee2 <__vector_39+0xa6>
   14ee0:	85 c0       	rjmp	.+266    	; 0x14fec <__vector_39+0x1b0>
   14ee2:	88 35       	cpi	r24, 0x58	; 88
   14ee4:	09 f4       	brne	.+2      	; 0x14ee8 <__vector_39+0xac>
   14ee6:	96 c0       	rjmp	.+300    	; 0x15014 <__vector_39+0x1d8>
   14ee8:	88 34       	cpi	r24, 0x48	; 72
   14eea:	89 f6       	brne	.-94     	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   14eec:	0e 94 53 97 	call	0x12ea6	; 0x12ea6 <twi_stop>
   14ef0:	ce cf       	rjmp	.-100    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14ef2:	88 39       	cpi	r24, 0x98	; 152
   14ef4:	09 f4       	brne	.+2      	; 0x14ef8 <__vector_39+0xbc>
   14ef6:	8c c0       	rjmp	.+280    	; 0x15010 <__vector_39+0x1d4>
   14ef8:	38 f5       	brcc	.+78     	; 0x14f48 <__vector_39+0x10c>
   14efa:	88 37       	cpi	r24, 0x78	; 120
   14efc:	29 f0       	breq	.+10     	; 0x14f08 <__vector_39+0xcc>
   14efe:	50 f4       	brcc	.+20     	; 0x14f14 <__vector_39+0xd8>
   14f00:	88 36       	cpi	r24, 0x68	; 104
   14f02:	11 f0       	breq	.+4      	; 0x14f08 <__vector_39+0xcc>
   14f04:	80 37       	cpi	r24, 0x70	; 112
   14f06:	19 f6       	brne	.-122    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   14f08:	83 e0       	ldi	r24, 0x03	; 3
   14f0a:	80 93 b8 11 	sts	0x11B8, r24	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   14f0e:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <twi_rxBufferIndex>
   14f12:	57 c0       	rjmp	.+174    	; 0x14fc2 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14f14:	88 38       	cpi	r24, 0x88	; 136
   14f16:	09 f4       	brne	.+2      	; 0x14f1a <__vector_39+0xde>
   14f18:	7b c0       	rjmp	.+246    	; 0x15010 <__vector_39+0x1d4>
   14f1a:	80 39       	cpi	r24, 0x90	; 144
   14f1c:	19 f0       	breq	.+6      	; 0x14f24 <__vector_39+0xe8>
   14f1e:	80 38       	cpi	r24, 0x80	; 128
   14f20:	09 f0       	breq	.+2      	; 0x14f24 <__vector_39+0xe8>
   14f22:	b5 cf       	rjmp	.-150    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   14f24:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <twi_rxBufferIndex>
   14f28:	80 32       	cpi	r24, 0x20	; 32
   14f2a:	08 f0       	brcs	.+2      	; 0x14f2e <__vector_39+0xf2>
   14f2c:	71 c0       	rjmp	.+226    	; 0x15010 <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   14f2e:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <twi_rxBufferIndex>
   14f32:	81 e0       	ldi	r24, 0x01	; 1
   14f34:	8e 0f       	add	r24, r30
   14f36:	80 93 43 11 	sts	0x1143, r24	; 0x801143 <twi_rxBufferIndex>
   14f3a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   14f3e:	f0 e0       	ldi	r31, 0x00	; 0
   14f40:	ed 5d       	subi	r30, 0xDD	; 221
   14f42:	fe 4e       	sbci	r31, 0xEE	; 238
   14f44:	80 83       	st	Z, r24
   14f46:	3d c0       	rjmp	.+122    	; 0x14fc2 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14f48:	80 3b       	cpi	r24, 0xB0	; 176
   14f4a:	39 f0       	breq	.+14     	; 0x14f5a <__vector_39+0x11e>
   14f4c:	e0 f4       	brcc	.+56     	; 0x14f86 <__vector_39+0x14a>
   14f4e:	80 3a       	cpi	r24, 0xA0	; 160
   14f50:	09 f4       	brne	.+2      	; 0x14f54 <__vector_39+0x118>
   14f52:	79 c0       	rjmp	.+242    	; 0x15046 <__vector_39+0x20a>
   14f54:	88 3a       	cpi	r24, 0xA8	; 168
   14f56:	09 f0       	breq	.+2      	; 0x14f5a <__vector_39+0x11e>
   14f58:	9a cf       	rjmp	.-204    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   14f5a:	84 e0       	ldi	r24, 0x04	; 4
   14f5c:	80 93 b8 11 	sts	0x11B8, r24	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   14f60:	10 92 22 11 	sts	0x1122, r1	; 0x801122 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   14f64:	10 92 21 11 	sts	0x1121, r1	; 0x801121 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   14f68:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <twi_onSlaveTransmit>
   14f6c:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <twi_onSlaveTransmit+0x1>
   14f70:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   14f72:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <twi_txBufferLength>
   14f76:	81 11       	cpse	r24, r1
   14f78:	0f c0       	rjmp	.+30     	; 0x14f98 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   14f7a:	81 e0       	ldi	r24, 0x01	; 1
   14f7c:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   14f80:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <twi_txBuffer>
   14f84:	09 c0       	rjmp	.+18     	; 0x14f98 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   14f86:	80 3c       	cpi	r24, 0xC0	; 192
   14f88:	09 f4       	brne	.+2      	; 0x14f8c <__vector_39+0x150>
   14f8a:	a6 cf       	rjmp	.-180    	; 0x14ed8 <__vector_39+0x9c>
   14f8c:	88 3c       	cpi	r24, 0xC8	; 200
   14f8e:	09 f4       	brne	.+2      	; 0x14f92 <__vector_39+0x156>
   14f90:	a3 cf       	rjmp	.-186    	; 0x14ed8 <__vector_39+0x9c>
   14f92:	88 3b       	cpi	r24, 0xB8	; 184
   14f94:	09 f0       	breq	.+2      	; 0x14f98 <__vector_39+0x15c>
   14f96:	7b cf       	rjmp	.-266    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   14f98:	e0 91 22 11 	lds	r30, 0x1122	; 0x801122 <twi_txBufferIndex>
   14f9c:	81 e0       	ldi	r24, 0x01	; 1
   14f9e:	8e 0f       	add	r24, r30
   14fa0:	80 93 22 11 	sts	0x1122, r24	; 0x801122 <twi_txBufferIndex>
   14fa4:	f0 e0       	ldi	r31, 0x00	; 0
   14fa6:	ef 5f       	subi	r30, 0xFF	; 255
   14fa8:	fe 4e       	sbci	r31, 0xEE	; 238
   14faa:	80 81       	ld	r24, Z
   14fac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   14fb0:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <twi_txBufferIndex>
   14fb4:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <twi_txBufferLength>
   14fb8:	29 c0       	rjmp	.+82     	; 0x1500c <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   14fba:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   14fbe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   14fc2:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   14fc4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   14fc8:	62 cf       	rjmp	.-316    	; 0x14e8e <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   14fca:	90 91 b5 11 	lds	r25, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   14fce:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <twi_masterBufferLength>
   14fd2:	98 17       	cp	r25, r24
   14fd4:	58 f5       	brcc	.+86     	; 0x1502c <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   14fd6:	e0 91 b5 11 	lds	r30, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   14fda:	81 e0       	ldi	r24, 0x01	; 1
   14fdc:	8e 0f       	add	r24, r30
   14fde:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <twi_masterBufferIndex>
   14fe2:	f0 e0       	ldi	r31, 0x00	; 0
   14fe4:	ee 56       	subi	r30, 0x6E	; 110
   14fe6:	fe 4e       	sbci	r31, 0xEE	; 238
   14fe8:	80 81       	ld	r24, Z
   14fea:	e9 cf       	rjmp	.-46     	; 0x14fbe <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   14fec:	e0 91 b5 11 	lds	r30, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   14ff0:	81 e0       	ldi	r24, 0x01	; 1
   14ff2:	8e 0f       	add	r24, r30
   14ff4:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <twi_masterBufferIndex>
   14ff8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   14ffc:	f0 e0       	ldi	r31, 0x00	; 0
   14ffe:	ee 56       	subi	r30, 0x6E	; 110
   15000:	fe 4e       	sbci	r31, 0xEE	; 238
   15002:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   15004:	90 91 b5 11 	lds	r25, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   15008:	80 91 b4 11 	lds	r24, 0x11B4	; 0x8011b4 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1500c:	98 17       	cp	r25, r24
   1500e:	c8 f2       	brcs	.-78     	; 0x14fc2 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   15010:	85 e8       	ldi	r24, 0x85	; 133
   15012:	d8 cf       	rjmp	.-80     	; 0x14fc4 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   15014:	e0 91 b5 11 	lds	r30, 0x11B5	; 0x8011b5 <twi_masterBufferIndex>
   15018:	81 e0       	ldi	r24, 0x01	; 1
   1501a:	8e 0f       	add	r24, r30
   1501c:	80 93 b5 11 	sts	0x11B5, r24	; 0x8011b5 <twi_masterBufferIndex>
   15020:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   15024:	f0 e0       	ldi	r31, 0x00	; 0
   15026:	ee 56       	subi	r30, 0x6E	; 110
   15028:	fe 4e       	sbci	r31, 0xEE	; 238
   1502a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   1502c:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <twi_sendStop>
   15030:	81 11       	cpse	r24, r1
   15032:	5c cf       	rjmp	.-328    	; 0x14eec <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   15034:	81 e0       	ldi	r24, 0x01	; 1
   15036:	80 93 b2 11 	sts	0x11B2, r24	; 0x8011b2 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   1503a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   1503c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   15040:	10 92 b8 11 	sts	0x11B8, r1	; 0x8011b8 <twi_state>
   15044:	24 cf       	rjmp	.-440    	; 0x14e8e <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   15046:	85 ec       	ldi	r24, 0xC5	; 197
   15048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   1504c:	10 92 b8 11 	sts	0x11B8, r1	; 0x8011b8 <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   15050:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <twi_rxBufferIndex>
   15054:	80 32       	cpi	r24, 0x20	; 32
   15056:	30 f4       	brcc	.+12     	; 0x15064 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   15058:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <twi_rxBufferIndex>
   1505c:	f0 e0       	ldi	r31, 0x00	; 0
   1505e:	ed 5d       	subi	r30, 0xDD	; 221
   15060:	fe 4e       	sbci	r31, 0xEE	; 238
   15062:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   15064:	60 91 43 11 	lds	r22, 0x1143	; 0x801143 <twi_rxBufferIndex>
   15068:	70 e0       	ldi	r23, 0x00	; 0
   1506a:	e0 91 67 11 	lds	r30, 0x1167	; 0x801167 <twi_onSlaveReceive>
   1506e:	f0 91 68 11 	lds	r31, 0x1168	; 0x801168 <twi_onSlaveReceive+0x1>
   15072:	83 e2       	ldi	r24, 0x23	; 35
   15074:	91 e1       	ldi	r25, 0x11	; 17
   15076:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   15078:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <twi_rxBufferIndex>
   1507c:	08 cf       	rjmp	.-496    	; 0x14e8e <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   1507e:	10 92 b6 11 	sts	0x11B6, r1	; 0x8011b6 <twi_error>
   15082:	34 cf       	rjmp	.-408    	; 0x14eec <__vector_39+0xb0>

00015084 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   15084:	20 91 6e 11 	lds	r18, 0x116E	; 0x80116e <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   15088:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   1508a:	21 32       	cpi	r18, 0x21	; 33
   1508c:	08 f0       	brcs	.+2      	; 0x15090 <TwoWire::endTransmission()+0xc>
   1508e:	44 c0       	rjmp	.+136    	; 0x15118 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   15090:	80 91 b8 11 	lds	r24, 0x11B8	; 0x8011b8 <twi_state>
   15094:	81 11       	cpse	r24, r1
   15096:	fc cf       	rjmp	.-8      	; 0x15090 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
   15098:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   1509c:	92 e0       	ldi	r25, 0x02	; 2
   1509e:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   150a2:	91 e0       	ldi	r25, 0x01	; 1
   150a4:	90 93 b7 11 	sts	0x11B7, r25	; 0x8011b7 <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   150a8:	9f ef       	ldi	r25, 0xFF	; 255
   150aa:	90 93 b6 11 	sts	0x11B6, r25	; 0x8011b6 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   150ae:	10 92 b5 11 	sts	0x11B5, r1	; 0x8011b5 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   150b2:	20 93 b4 11 	sts	0x11B4, r18	; 0x8011b4 <twi_masterBufferLength>
   150b6:	a1 ee       	ldi	r26, 0xE1	; 225
   150b8:	b0 e1       	ldi	r27, 0x10	; 16
   150ba:	e2 e9       	ldi	r30, 0x92	; 146
   150bc:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   150be:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   150c0:	29 13       	cpse	r18, r25
   150c2:	31 c0       	rjmp	.+98     	; 0x15126 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   150c4:	10 92 b3 11 	sts	0x11B3, r1	; 0x8011b3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   150c8:	90 91 b3 11 	lds	r25, 0x11B3	; 0x8011b3 <twi_slarw>
   150cc:	88 0f       	add	r24, r24
   150ce:	89 2b       	or	r24, r25
   150d0:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   150d4:	80 91 b2 11 	lds	r24, 0x11B2	; 0x8011b2 <twi_inRepStart>
   150d8:	81 30       	cpi	r24, 0x01	; 1
   150da:	49 f5       	brne	.+82     	; 0x1512e <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   150dc:	10 92 b2 11 	sts	0x11B2, r1	; 0x8011b2 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   150e0:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <twi_slarw>
   150e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   150e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   150ec:	83 fd       	sbrc	r24, 3
   150ee:	f8 cf       	rjmp	.-16     	; 0x150e0 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   150f0:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   150f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   150f6:	80 91 b8 11 	lds	r24, 0x11B8	; 0x8011b8 <twi_state>
   150fa:	82 30       	cpi	r24, 0x02	; 2
   150fc:	e1 f3       	breq	.-8      	; 0x150f6 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   150fe:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <twi_error>
   15102:	8f 3f       	cpi	r24, 0xFF	; 255
   15104:	b1 f0       	breq	.+44     	; 0x15132 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   15106:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <twi_error>
   1510a:	80 32       	cpi	r24, 0x20	; 32
   1510c:	a1 f0       	breq	.+40     	; 0x15136 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   1510e:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <twi_error>
   15112:	80 33       	cpi	r24, 0x30	; 48
   15114:	91 f0       	breq	.+36     	; 0x1513a <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   15116:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   15118:	10 92 6f 11 	sts	0x116F, r1	; 0x80116f <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   1511c:	10 92 6e 11 	sts	0x116E, r1	; 0x80116e <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   15120:	10 92 71 11 	sts	0x1171, r1	; 0x801171 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   15124:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   15126:	3d 91       	ld	r19, X+
   15128:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1512a:	9f 5f       	subi	r25, 0xFF	; 255
   1512c:	c9 cf       	rjmp	.-110    	; 0x150c0 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   1512e:	85 ee       	ldi	r24, 0xE5	; 229
   15130:	e0 cf       	rjmp	.-64     	; 0x150f2 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   15132:	80 e0       	ldi	r24, 0x00	; 0
   15134:	f1 cf       	rjmp	.-30     	; 0x15118 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   15136:	82 e0       	ldi	r24, 0x02	; 2
   15138:	ef cf       	rjmp	.-34     	; 0x15118 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   1513a:	83 e0       	ldi	r24, 0x03	; 3
   1513c:	ed cf       	rjmp	.-38     	; 0x15118 <TwoWire::endTransmission()+0x94>

0001513e <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   1513e:	88 e6       	ldi	r24, 0x68	; 104
   15140:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   15144:	60 e0       	ldi	r22, 0x00	; 0
   15146:	82 e8       	ldi	r24, 0x82	; 130
   15148:	9e e0       	ldi	r25, 0x0E	; 14
   1514a:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   1514e:	82 e8       	ldi	r24, 0x82	; 130
   15150:	9e e0       	ldi	r25, 0x0E	; 14
   15152:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   15156:	81 e0       	ldi	r24, 0x01	; 1
   15158:	90 e0       	ldi	r25, 0x00	; 0
   1515a:	0e 94 f8 99 	call	0x133f0	; 0x133f0 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   1515e:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   15162:	80 58       	subi	r24, 0x80	; 128
   15164:	87 fb       	bst	r24, 7
   15166:	88 27       	eor	r24, r24
   15168:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   1516a:	08 95       	ret

0001516c <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   1516c:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   15170:	80 ef       	ldi	r24, 0xF0	; 240
   15172:	90 e0       	ldi	r25, 0x00	; 0
   15174:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   15178:	82 e8       	ldi	r24, 0x82	; 130
   1517a:	9e e0       	ldi	r25, 0x0E	; 14
   1517c:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   15180:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   15182:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   15184:	08 95       	ret

00015186 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   15186:	86 2f       	mov	r24, r22
twi_readFrom():
   15188:	64 2f       	mov	r22, r20
   1518a:	0e 94 93 95 	call	0x12b26	; 0x12b26 <twi_readFrom.part.0.constprop.173>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   1518e:	10 92 6d 11 	sts	0x116D, r1	; 0x80116d <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   15192:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   15196:	08 95       	ret

00015198 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   15198:	ff 92       	push	r15
   1519a:	0f 93       	push	r16
   1519c:	1f 93       	push	r17
   1519e:	cf 93       	push	r28
   151a0:	df 93       	push	r29
   151a2:	d8 2f       	mov	r29, r24
   151a4:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   151a6:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   151aa:	86 e9       	ldi	r24, 0x96	; 150
   151ac:	90 e0       	ldi	r25, 0x00	; 0
   151ae:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   151b2:	82 e8       	ldi	r24, 0x82	; 130
   151b4:	9e e0       	ldi	r25, 0x0E	; 14
   151b6:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   151ba:	ce ef       	ldi	r28, 0xFE	; 254
   151bc:	88 23       	and	r24, r24
   151be:	41 f0       	breq	.+16     	; 0x151d0 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   151c0:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   151c2:	8c 2f       	mov	r24, r28
   151c4:	df 91       	pop	r29
   151c6:	cf 91       	pop	r28
   151c8:	1f 91       	pop	r17
   151ca:	0f 91       	pop	r16
   151cc:	ff 90       	pop	r15
   151ce:	08 95       	ret
   151d0:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   151d2:	e1 f1       	breq	.+120    	; 0x1524c <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   151d4:	41 e0       	ldi	r20, 0x01	; 1
   151d6:	6d 2f       	mov	r22, r29
   151d8:	82 e8       	ldi	r24, 0x82	; 130
   151da:	9e e0       	ldi	r25, 0x0E	; 14
   151dc:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   151e0:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   151e4:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   151e8:	89 1b       	sub	r24, r25
   151ea:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   151ec:	18 16       	cp	r1, r24
   151ee:	19 06       	cpc	r1, r25
   151f0:	1c f4       	brge	.+6      	; 0x151f8 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   151f2:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   151f6:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   151f8:	f0 fc       	sbrc	r15, 0
   151fa:	ea cf       	rjmp	.-44     	; 0x151d0 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   151fc:	8d 2f       	mov	r24, r29
   151fe:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   15202:	81 ee       	ldi	r24, 0xE1	; 225
   15204:	90 e0       	ldi	r25, 0x00	; 0
   15206:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   1520a:	61 ee       	ldi	r22, 0xE1	; 225
   1520c:	82 e8       	ldi	r24, 0x82	; 130
   1520e:	9e e0       	ldi	r25, 0x0E	; 14
   15210:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   15214:	82 e8       	ldi	r24, 0x82	; 130
   15216:	9e e0       	ldi	r25, 0x0E	; 14
   15218:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   1521c:	c8 2f       	mov	r28, r24
   1521e:	81 11       	cpse	r24, r1
   15220:	cf cf       	rjmp	.-98     	; 0x151c0 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   15222:	41 e0       	ldi	r20, 0x01	; 1
   15224:	6d 2f       	mov	r22, r29
   15226:	82 e8       	ldi	r24, 0x82	; 130
   15228:	9e e0       	ldi	r25, 0x0E	; 14
   1522a:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
   1522e:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   15232:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   15236:	89 1b       	sub	r24, r25
   15238:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   1523a:	18 16       	cp	r1, r24
   1523c:	19 06       	cpc	r1, r25
   1523e:	0c f0       	brlt	.+2      	; 0x15242 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   15240:	c0 cf       	rjmp	.-128    	; 0x151c2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   15242:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   15246:	f8 01       	movw	r30, r16
   15248:	80 83       	st	Z, r24
   1524a:	bb cf       	rjmp	.-138    	; 0x151c2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1524c:	c4 e0       	ldi	r28, 0x04	; 4
   1524e:	b9 cf       	rjmp	.-142    	; 0x151c2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

00015250 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   15250:	0f 93       	push	r16
   15252:	1f 93       	push	r17
   15254:	cf 93       	push	r28
   15256:	df 93       	push	r29
   15258:	08 2f       	mov	r16, r24
   1525a:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1525c:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   15260:	85 ea       	ldi	r24, 0xA5	; 165
   15262:	90 e0       	ldi	r25, 0x00	; 0
   15264:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   15268:	6d 2f       	mov	r22, r29
   1526a:	82 e8       	ldi	r24, 0x82	; 130
   1526c:	9e e0       	ldi	r25, 0x0E	; 14
   1526e:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   15272:	82 e8       	ldi	r24, 0x82	; 130
   15274:	9e e0       	ldi	r25, 0x0E	; 14
   15276:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   1527a:	c8 2f       	mov	r28, r24
   1527c:	81 11       	cpse	r24, r1
   1527e:	1d c0       	rjmp	.+58     	; 0x152ba <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   15280:	1e ef       	ldi	r17, 0xFE	; 254
   15282:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   15284:	e1 f0       	breq	.+56     	; 0x152be <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   15286:	41 e0       	ldi	r20, 0x01	; 1
   15288:	60 2f       	mov	r22, r16
   1528a:	82 e8       	ldi	r24, 0x82	; 130
   1528c:	9e e0       	ldi	r25, 0x0E	; 14
   1528e:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
   15292:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   15296:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   1529a:	89 1b       	sub	r24, r25
   1529c:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1529e:	18 16       	cp	r1, r24
   152a0:	19 06       	cpc	r1, r25
   152a2:	1c f4       	brge	.+6      	; 0x152aa <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   152a4:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   152a8:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   152aa:	d0 fd       	sbrc	r29, 0
   152ac:	ea cf       	rjmp	.-44     	; 0x15282 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   152ae:	8c 2f       	mov	r24, r28
   152b0:	df 91       	pop	r29
   152b2:	cf 91       	pop	r28
   152b4:	1f 91       	pop	r17
   152b6:	0f 91       	pop	r16
   152b8:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   152ba:	c3 e0       	ldi	r28, 0x03	; 3
   152bc:	f8 cf       	rjmp	.-16     	; 0x152ae <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   152be:	c4 e0       	ldi	r28, 0x04	; 4
   152c0:	f6 cf       	rjmp	.-20     	; 0x152ae <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

000152c2 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   152c2:	ef 92       	push	r14
   152c4:	ff 92       	push	r15
   152c6:	1f 93       	push	r17
   152c8:	cf 93       	push	r28
   152ca:	df 93       	push	r29
   152cc:	18 2f       	mov	r17, r24
   152ce:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   152d0:	65 e5       	ldi	r22, 0x55	; 85
   152d2:	0e 94 28 a9 	call	0x15250	; 0x15250 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   152d6:	81 11       	cpse	r24, r1
   152d8:	0d c0       	rjmp	.+26     	; 0x152f4 <owMatchRom(unsigned char, unsigned char*)+0x32>
   152da:	e7 01       	movw	r28, r14
   152dc:	88 e0       	ldi	r24, 0x08	; 8
   152de:	e8 0e       	add	r14, r24
   152e0:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   152e2:	69 91       	ld	r22, Y+
   152e4:	81 2f       	mov	r24, r17
   152e6:	0e 94 28 a9 	call	0x15250	; 0x15250 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   152ea:	81 11       	cpse	r24, r1
   152ec:	03 c0       	rjmp	.+6      	; 0x152f4 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   152ee:	ec 16       	cp	r14, r28
   152f0:	fd 06       	cpc	r15, r29
   152f2:	b9 f7       	brne	.-18     	; 0x152e2 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   152f4:	df 91       	pop	r29
   152f6:	cf 91       	pop	r28
   152f8:	1f 91       	pop	r17
   152fa:	ff 90       	pop	r15
   152fc:	ef 90       	pop	r14
   152fe:	08 95       	ret

00015300 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   15300:	0f 93       	push	r16
   15302:	1f 93       	push	r17
   15304:	cf 93       	push	r28
   15306:	df 93       	push	r29
   15308:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1530a:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   1530e:	84 eb       	ldi	r24, 0xB4	; 180
   15310:	90 e0       	ldi	r25, 0x00	; 0
   15312:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   15316:	82 e8       	ldi	r24, 0x82	; 130
   15318:	9e e0       	ldi	r25, 0x0E	; 14
   1531a:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   1531e:	c8 2f       	mov	r28, r24
   15320:	81 11       	cpse	r24, r1
   15322:	1b c0       	rjmp	.+54     	; 0x1535a <ds2482owReset(unsigned char)+0x5a>
   15324:	de ef       	ldi	r29, 0xFE	; 254
   15326:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   15328:	f9 f0       	breq	.+62     	; 0x15368 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   1532a:	41 e0       	ldi	r20, 0x01	; 1
   1532c:	60 2f       	mov	r22, r16
   1532e:	82 e8       	ldi	r24, 0x82	; 130
   15330:	9e e0       	ldi	r25, 0x0E	; 14
   15332:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
   15336:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   1533a:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   1533e:	89 1b       	sub	r24, r25
   15340:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   15342:	18 16       	cp	r1, r24
   15344:	19 06       	cpc	r1, r25
   15346:	1c f4       	brge	.+6      	; 0x1534e <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   15348:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   1534c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   1534e:	10 fd       	sbrc	r17, 0
   15350:	ea cf       	rjmp	.-44     	; 0x15326 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   15352:	11 fd       	sbrc	r17, 1
   15354:	03 c0       	rjmp	.+6      	; 0x1535c <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   15356:	c5 e0       	ldi	r28, 0x05	; 5
   15358:	01 c0       	rjmp	.+2      	; 0x1535c <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1535a:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   1535c:	8c 2f       	mov	r24, r28
   1535e:	df 91       	pop	r29
   15360:	cf 91       	pop	r28
   15362:	1f 91       	pop	r17
   15364:	0f 91       	pop	r16
   15366:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   15368:	c4 e0       	ldi	r28, 0x04	; 4
   1536a:	f8 cf       	rjmp	.-16     	; 0x1535c <ds2482owReset(unsigned char)+0x5c>

0001536c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]>:
_Z11owMatchNexthPh.constprop.95():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   1536c:	df 92       	push	r13
   1536e:	ef 92       	push	r14
   15370:	ff 92       	push	r15
   15372:	0f 93       	push	r16
   15374:	1f 93       	push	r17
   15376:	cf 93       	push	r28
   15378:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1537a:	90 91 d8 0b 	lds	r25, 0x0BD8	; 0x800bd8 <lastDevice>
   1537e:	99 23       	and	r25, r25
   15380:	51 f0       	breq	.+20     	; 0x15396 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   15382:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   15384:	8d 2f       	mov	r24, r29
   15386:	df 91       	pop	r29
   15388:	cf 91       	pop	r28
   1538a:	1f 91       	pop	r17
   1538c:	0f 91       	pop	r16
   1538e:	ff 90       	pop	r15
   15390:	ef 90       	pop	r14
   15392:	df 90       	pop	r13
   15394:	08 95       	ret
   15396:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   15398:	0e 94 80 a9 	call	0x15300	; 0x15300 <ds2482owReset(unsigned char)>
   1539c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1539e:	81 11       	cpse	r24, r1
   153a0:	f1 cf       	rjmp	.-30     	; 0x15384 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   153a2:	60 ef       	ldi	r22, 0xF0	; 240
   153a4:	8f 2d       	mov	r24, r15
   153a6:	0e 94 28 a9 	call	0x15250	; 0x15250 <ds2482owWriteByte(unsigned char, unsigned char)>
   153aa:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   153ac:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   153ae:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   153b0:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   153b2:	81 11       	cpse	r24, r1
   153b4:	e7 cf       	rjmp	.-50     	; 0x15384 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   153b6:	80 91 cf 0b 	lds	r24, 0x0BCF	; 0x800bcf <lastDiscrepancy>
   153ba:	08 17       	cp	r16, r24
   153bc:	50 f4       	brcc	.+20     	; 0x153d2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   153be:	ee 2d       	mov	r30, r14
   153c0:	f0 e0       	ldi	r31, 0x00	; 0
   153c2:	e0 53       	subi	r30, 0x30	; 48
   153c4:	f4 4f       	sbci	r31, 0xF4	; 244
   153c6:	80 81       	ld	r24, Z
   153c8:	81 23       	and	r24, r17
   153ca:	c1 e0       	ldi	r28, 0x01	; 1
   153cc:	29 f4       	brne	.+10     	; 0x153d8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   153ce:	c0 e0       	ldi	r28, 0x00	; 0
   153d0:	03 c0       	rjmp	.+6      	; 0x153d8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x6c>
   153d2:	c1 e0       	ldi	r28, 0x01	; 1
   153d4:	80 13       	cpse	r24, r16
   153d6:	fb cf       	rjmp	.-10     	; 0x153ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   153d8:	8f 2d       	mov	r24, r15
   153da:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   153de:	88 e7       	ldi	r24, 0x78	; 120
   153e0:	90 e0       	ldi	r25, 0x00	; 0
   153e2:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
_Z11owMatchNexthPh.constprop.95():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   153e6:	90 e0       	ldi	r25, 0x00	; 0
   153e8:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   153ea:	cc 23       	and	r28, r28
   153ec:	11 f0       	breq	.+4      	; 0x153f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x86>
_Z11owMatchNexthPh.constprop.95():
   153ee:	80 e8       	ldi	r24, 0x80	; 128
   153f0:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   153f2:	0e 94 86 9d 	call	0x13b0c	; 0x13b0c <TwoWire::write(int) [clone .constprop.97]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   153f6:	82 e8       	ldi	r24, 0x82	; 130
   153f8:	9e e0       	ldi	r25, 0x0E	; 14
   153fa:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
   153fe:	81 11       	cpse	r24, r1
   15400:	53 c0       	rjmp	.+166    	; 0x154a8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x13c>
   15402:	6e ef       	ldi	r22, 0xFE	; 254
   15404:	d6 2e       	mov	r13, r22
   15406:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   15408:	dd 20       	and	r13, r13
   1540a:	09 f4       	brne	.+2      	; 0x1540e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0xa2>
   1540c:	4f c0       	rjmp	.+158    	; 0x154ac <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1540e:	41 e0       	ldi	r20, 0x01	; 1
   15410:	6f 2d       	mov	r22, r15
   15412:	82 e8       	ldi	r24, 0x82	; 130
   15414:	9e e0       	ldi	r25, 0x0E	; 14
   15416:	0e 94 c3 a8 	call	0x15186	; 0x15186 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
   1541a:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <TwoWire::rxBufferLength>
   1541e:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <TwoWire::rxBufferIndex>
   15422:	89 1b       	sub	r24, r25
   15424:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   15426:	18 16       	cp	r1, r24
   15428:	19 06       	cpc	r1, r25
   1542a:	1c f4       	brge	.+6      	; 0x15432 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1542c:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   15430:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   15432:	c0 fd       	sbrc	r28, 0
   15434:	e8 cf       	rjmp	.-48     	; 0x15406 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x9a>
_Z11owMatchNexthPh.constprop.95():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   15436:	2c 2f       	mov	r18, r28
   15438:	30 e0       	ldi	r19, 0x00	; 0
   1543a:	c9 01       	movw	r24, r18
   1543c:	45 e0       	ldi	r20, 0x05	; 5
   1543e:	95 95       	asr	r25
   15440:	87 95       	ror	r24
   15442:	4a 95       	dec	r20
   15444:	e1 f7       	brne	.-8      	; 0x1543e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0xd2>
   15446:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   15448:	22 0f       	add	r18, r18
   1544a:	23 2f       	mov	r18, r19
   1544c:	22 1f       	adc	r18, r18
   1544e:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   15450:	83 30       	cpi	r24, 0x03	; 3
   15452:	99 f0       	breq	.+38     	; 0x1547a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x10e>
   15454:	ee 2d       	mov	r30, r14
   15456:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   15458:	81 11       	cpse	r24, r1
   1545a:	1b c0       	rjmp	.+54     	; 0x15492 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1545c:	22 23       	and	r18, r18
   1545e:	11 f1       	breq	.+68     	; 0x154a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   15460:	e0 53       	subi	r30, 0x30	; 48
   15462:	f4 4f       	sbci	r31, 0xF4	; 244
   15464:	80 81       	ld	r24, Z
   15466:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   15468:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1546a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1546c:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1546e:	11 f4       	brne	.+4      	; 0x15474 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   15470:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   15472:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   15474:	88 e0       	ldi	r24, 0x08	; 8
   15476:	e8 12       	cpse	r14, r24
   15478:	9e cf       	rjmp	.-196    	; 0x153b6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   1547a:	01 34       	cpi	r16, 0x41	; 65
   1547c:	08 f4       	brcc	.+2      	; 0x15480 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x114>
   1547e:	81 cf       	rjmp	.-254    	; 0x15382 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   15480:	d0 93 cf 0b 	sts	0x0BCF, r29	; 0x800bcf <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   15484:	81 e0       	ldi	r24, 0x01	; 1
   15486:	d1 11       	cpse	r29, r1
   15488:	80 e0       	ldi	r24, 0x00	; 0
   1548a:	80 93 d8 0b 	sts	0x0BD8, r24	; 0x800bd8 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1548e:	d0 e0       	ldi	r29, 0x00	; 0
   15490:	79 cf       	rjmp	.-270    	; 0x15384 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   15492:	21 11       	cpse	r18, r1
   15494:	e5 cf       	rjmp	.-54     	; 0x15460 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   15496:	e0 53       	subi	r30, 0x30	; 48
   15498:	f4 4f       	sbci	r31, 0xF4	; 244
   1549a:	80 81       	ld	r24, Z
   1549c:	91 2f       	mov	r25, r17
   1549e:	90 95       	com	r25
   154a0:	89 23       	and	r24, r25
   154a2:	e2 cf       	rjmp	.-60     	; 0x15468 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   154a4:	d0 2f       	mov	r29, r16
   154a6:	f7 cf       	rjmp	.-18     	; 0x15496 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   154a8:	d3 e0       	ldi	r29, 0x03	; 3
   154aa:	6c cf       	rjmp	.-296    	; 0x15384 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   154ac:	d4 e0       	ldi	r29, 0x04	; 4
   154ae:	6a cf       	rjmp	.-300    	; 0x15384 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.95]+0x18>

000154b0 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   154b0:	1f 93       	push	r17
   154b2:	cf 93       	push	r28
   154b4:	df 93       	push	r29
   154b6:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   154b8:	88 e6       	ldi	r24, 0x68	; 104
   154ba:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   154be:	60 e0       	ldi	r22, 0x00	; 0
   154c0:	82 e8       	ldi	r24, 0x82	; 130
   154c2:	9e e0       	ldi	r25, 0x0E	; 14
   154c4:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   154c8:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   154ca:	1a e0       	ldi	r17, 0x0A	; 10
   154cc:	82 2f       	mov	r24, r18
   154ce:	61 2f       	mov	r22, r17
   154d0:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   154d4:	68 2f       	mov	r22, r24
   154d6:	66 0f       	add	r22, r22
   154d8:	68 0f       	add	r22, r24
   154da:	66 0f       	add	r22, r22
   154dc:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   154de:	82 e8       	ldi	r24, 0x82	; 130
   154e0:	9e e0       	ldi	r25, 0x0E	; 14
   154e2:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   154e6:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   154e8:	82 2f       	mov	r24, r18
   154ea:	61 2f       	mov	r22, r17
   154ec:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   154f0:	68 2f       	mov	r22, r24
   154f2:	66 0f       	add	r22, r22
   154f4:	68 0f       	add	r22, r24
   154f6:	66 0f       	add	r22, r22
   154f8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   154fa:	82 e8       	ldi	r24, 0x82	; 130
   154fc:	9e e0       	ldi	r25, 0x0E	; 14
   154fe:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   15502:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   15504:	82 2f       	mov	r24, r18
   15506:	61 2f       	mov	r22, r17
   15508:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   1550c:	68 2f       	mov	r22, r24
   1550e:	66 0f       	add	r22, r22
   15510:	68 0f       	add	r22, r24
   15512:	66 0f       	add	r22, r22
   15514:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   15516:	82 e8       	ldi	r24, 0x82	; 130
   15518:	9e e0       	ldi	r25, 0x0E	; 14
   1551a:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   1551e:	60 e0       	ldi	r22, 0x00	; 0
   15520:	82 e8       	ldi	r24, 0x82	; 130
   15522:	9e e0       	ldi	r25, 0x0E	; 14
   15524:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   15528:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1552a:	82 2f       	mov	r24, r18
   1552c:	61 2f       	mov	r22, r17
   1552e:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   15532:	68 2f       	mov	r22, r24
   15534:	66 0f       	add	r22, r22
   15536:	68 0f       	add	r22, r24
   15538:	66 0f       	add	r22, r22
   1553a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   1553c:	82 e8       	ldi	r24, 0x82	; 130
   1553e:	9e e0       	ldi	r25, 0x0E	; 14
   15540:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   15544:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   15546:	82 2f       	mov	r24, r18
   15548:	61 2f       	mov	r22, r17
   1554a:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   1554e:	68 2f       	mov	r22, r24
   15550:	66 0f       	add	r22, r22
   15552:	68 0f       	add	r22, r24
   15554:	66 0f       	add	r22, r22
   15556:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   15558:	82 e8       	ldi	r24, 0x82	; 130
   1555a:	9e e0       	ldi	r25, 0x0E	; 14
   1555c:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
   15560:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   15562:	82 2f       	mov	r24, r18
   15564:	61 2f       	mov	r22, r17
   15566:	0e 94 58 cf 	call	0x19eb0	; 0x19eb0 <__udivmodqi4>
   1556a:	68 2f       	mov	r22, r24
   1556c:	66 0f       	add	r22, r22
   1556e:	68 0f       	add	r22, r24
   15570:	66 0f       	add	r22, r22
   15572:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   15574:	82 e8       	ldi	r24, 0x82	; 130
   15576:	9e e0       	ldi	r25, 0x0E	; 14
   15578:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   1557c:	82 e8       	ldi	r24, 0x82	; 130
   1557e:	9e e0       	ldi	r25, 0x0E	; 14
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   15580:	df 91       	pop	r29
   15582:	cf 91       	pop	r28
   15584:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   15586:	0c 94 42 a8 	jmp	0x15084	; 0x15084 <TwoWire::endTransmission()>

0001558a <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   1558a:	cf 93       	push	r28
   1558c:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   1558e:	fc 01       	movw	r30, r24
   15590:	a0 81       	ld	r26, Z
   15592:	b1 81       	ldd	r27, Z+1	; 0x01
   15594:	10 97       	sbiw	r26, 0x00	; 0
   15596:	21 f4       	brne	.+8      	; 0x155a0 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   15598:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   1559a:	df 91       	pop	r29
   1559c:	cf 91       	pop	r28
   1559e:	08 95       	ret
   155a0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   155a2:	ed 91       	ld	r30, X+
   155a4:	fc 91       	ld	r31, X
   155a6:	11 97       	sbiw	r26, 0x01	; 1
   155a8:	06 88       	ldd	r0, Z+22	; 0x16
   155aa:	f7 89       	ldd	r31, Z+23	; 0x17
   155ac:	e0 2d       	mov	r30, r0
   155ae:	cd 01       	movw	r24, r26
   155b0:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   155b2:	81 11       	cpse	r24, r1
   155b4:	1e c0       	rjmp	.+60     	; 0x155f2 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   155b6:	fe 01       	movw	r30, r28
   155b8:	e5 5e       	subi	r30, 0xE5	; 229
   155ba:	fd 4f       	sbci	r31, 0xFD	; 253
   155bc:	80 81       	ld	r24, Z
   155be:	91 81       	ldd	r25, Z+1	; 0x01
   155c0:	89 2b       	or	r24, r25
   155c2:	51 f7       	brne	.-44     	; 0x15598 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   155c4:	8d ef       	ldi	r24, 0xFD	; 253
   155c6:	9f ef       	ldi	r25, 0xFF	; 255
   155c8:	91 83       	std	Z+1, r25	; 0x01
   155ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   155cc:	88 81       	ld	r24, Y
   155ce:	99 81       	ldd	r25, Y+1	; 0x01
   155d0:	dc 01       	movw	r26, r24
   155d2:	ed 91       	ld	r30, X+
   155d4:	fc 91       	ld	r31, X
   155d6:	06 80       	ldd	r0, Z+6	; 0x06
   155d8:	f7 81       	ldd	r31, Z+7	; 0x07
   155da:	e0 2d       	mov	r30, r0
   155dc:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   155de:	88 81       	ld	r24, Y
   155e0:	99 81       	ldd	r25, Y+1	; 0x01
   155e2:	dc 01       	movw	r26, r24
   155e4:	ed 91       	ld	r30, X+
   155e6:	fc 91       	ld	r31, X
   155e8:	04 88       	ldd	r0, Z+20	; 0x14
   155ea:	f5 89       	ldd	r31, Z+21	; 0x15
   155ec:	e0 2d       	mov	r30, r0
   155ee:	19 95       	eicall
   155f0:	d3 cf       	rjmp	.-90     	; 0x15598 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   155f2:	81 e0       	ldi	r24, 0x01	; 1
   155f4:	d2 cf       	rjmp	.-92     	; 0x1559a <PubSubClient::connected()+0x10>

000155f6 <PubSubClient::loop() [clone .constprop.104]>:
_ZN12PubSubClient4loopEv.constprop.104():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   155f6:	3f 92       	push	r3
   155f8:	4f 92       	push	r4
   155fa:	5f 92       	push	r5
   155fc:	6f 92       	push	r6
   155fe:	7f 92       	push	r7
   15600:	8f 92       	push	r8
   15602:	9f 92       	push	r9
   15604:	af 92       	push	r10
   15606:	bf 92       	push	r11
   15608:	cf 92       	push	r12
   1560a:	df 92       	push	r13
   1560c:	ef 92       	push	r14
   1560e:	ff 92       	push	r15
   15610:	0f 93       	push	r16
   15612:	1f 93       	push	r17
   15614:	cf 93       	push	r28
   15616:	df 93       	push	r29
   15618:	1f 92       	push	r1
   1561a:	cd b7       	in	r28, 0x3d	; 61
   1561c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1561e:	4d b6       	in	r4, 0x3d	; 61
   15620:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   15622:	8b e9       	ldi	r24, 0x9B	; 155
   15624:	9e e0       	ldi	r25, 0x0E	; 14
   15626:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   1562a:	98 2e       	mov	r9, r24
   1562c:	88 23       	and	r24, r24
   1562e:	09 f4       	brne	.+2      	; 0x15632 <PubSubClient::loop() [clone .constprop.104]+0x3c>
   15630:	45 c0       	rjmp	.+138    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   15632:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   15636:	6b 01       	movw	r12, r22
   15638:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   1563a:	80 91 a3 10 	lds	r24, 0x10A3	; 0x8010a3 <mqtt_client+0x208>
   1563e:	90 91 a4 10 	lds	r25, 0x10A4	; 0x8010a4 <mqtt_client+0x209>
   15642:	a0 91 a5 10 	lds	r26, 0x10A5	; 0x8010a5 <mqtt_client+0x20a>
   15646:	b0 91 a6 10 	lds	r27, 0x10A6	; 0x8010a6 <mqtt_client+0x20b>
   1564a:	a7 01       	movw	r20, r14
   1564c:	96 01       	movw	r18, r12
   1564e:	28 1b       	sub	r18, r24
   15650:	39 0b       	sbc	r19, r25
   15652:	4a 0b       	sbc	r20, r26
   15654:	5b 0b       	sbc	r21, r27
   15656:	da 01       	movw	r26, r20
   15658:	c9 01       	movw	r24, r18
   1565a:	89 39       	cpi	r24, 0x99	; 153
   1565c:	9a 43       	sbci	r25, 0x3A	; 58
   1565e:	a1 05       	cpc	r26, r1
   15660:	b1 05       	cpc	r27, r1
   15662:	b0 f4       	brcc	.+44     	; 0x15690 <PubSubClient::loop() [clone .constprop.104]+0x9a>
   15664:	80 91 9f 10 	lds	r24, 0x109F	; 0x80109f <mqtt_client+0x204>
   15668:	90 91 a0 10 	lds	r25, 0x10A0	; 0x8010a0 <mqtt_client+0x205>
   1566c:	a0 91 a1 10 	lds	r26, 0x10A1	; 0x8010a1 <mqtt_client+0x206>
   15670:	b0 91 a2 10 	lds	r27, 0x10A2	; 0x8010a2 <mqtt_client+0x207>
   15674:	a7 01       	movw	r20, r14
   15676:	96 01       	movw	r18, r12
   15678:	28 1b       	sub	r18, r24
   1567a:	39 0b       	sbc	r19, r25
   1567c:	4a 0b       	sbc	r20, r26
   1567e:	5b 0b       	sbc	r21, r27
   15680:	da 01       	movw	r26, r20
   15682:	c9 01       	movw	r24, r18
   15684:	89 39       	cpi	r24, 0x99	; 153
   15686:	9a 43       	sbci	r25, 0x3A	; 58
   15688:	a1 05       	cpc	r26, r1
   1568a:	b1 05       	cpc	r27, r1
   1568c:	08 f4       	brcc	.+2      	; 0x15690 <PubSubClient::loop() [clone .constprop.104]+0x9a>
   1568e:	52 c0       	rjmp	.+164    	; 0x15734 <PubSubClient::loop() [clone .constprop.104]+0x13e>
   15690:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   15694:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   15698:	20 91 a7 10 	lds	r18, 0x10A7	; 0x8010a7 <mqtt_client+0x20c>
   1569c:	22 23       	and	r18, r18
   1569e:	39 f1       	breq	.+78     	; 0x156ee <PubSubClient::loop() [clone .constprop.104]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   156a0:	2c ef       	ldi	r18, 0xFC	; 252
   156a2:	3f ef       	ldi	r19, 0xFF	; 255
   156a4:	30 93 b7 10 	sts	0x10B7, r19	; 0x8010b7 <mqtt_client+0x21c>
   156a8:	20 93 b6 10 	sts	0x10B6, r18	; 0x8010b6 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   156ac:	dc 01       	movw	r26, r24
   156ae:	ed 91       	ld	r30, X+
   156b0:	fc 91       	ld	r31, X
   156b2:	04 88       	ldd	r0, Z+20	; 0x14
   156b4:	f5 89       	ldd	r31, Z+21	; 0x15
   156b6:	e0 2d       	mov	r30, r0
   156b8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   156ba:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   156bc:	89 2d       	mov	r24, r9
   156be:	0f b6       	in	r0, 0x3f	; 63
   156c0:	f8 94       	cli
   156c2:	5e be       	out	0x3e, r5	; 62
   156c4:	0f be       	out	0x3f, r0	; 63
   156c6:	4d be       	out	0x3d, r4	; 61
   156c8:	0f 90       	pop	r0
   156ca:	df 91       	pop	r29
   156cc:	cf 91       	pop	r28
   156ce:	1f 91       	pop	r17
   156d0:	0f 91       	pop	r16
   156d2:	ff 90       	pop	r15
   156d4:	ef 90       	pop	r14
   156d6:	df 90       	pop	r13
   156d8:	cf 90       	pop	r12
   156da:	bf 90       	pop	r11
   156dc:	af 90       	pop	r10
   156de:	9f 90       	pop	r9
   156e0:	8f 90       	pop	r8
   156e2:	7f 90       	pop	r7
   156e4:	6f 90       	pop	r6
   156e6:	5f 90       	pop	r5
   156e8:	4f 90       	pop	r4
   156ea:	3f 90       	pop	r3
   156ec:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   156ee:	20 ec       	ldi	r18, 0xC0	; 192
   156f0:	20 93 9d 0e 	sts	0x0E9D, r18	; 0x800e9d <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   156f4:	10 92 9e 0e 	sts	0x0E9E, r1	; 0x800e9e <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   156f8:	dc 01       	movw	r26, r24
   156fa:	ed 91       	ld	r30, X+
   156fc:	fc 91       	ld	r31, X
   156fe:	02 80       	ldd	r0, Z+2	; 0x02
   15700:	f3 81       	ldd	r31, Z+3	; 0x03
   15702:	e0 2d       	mov	r30, r0
   15704:	42 e0       	ldi	r20, 0x02	; 2
   15706:	50 e0       	ldi	r21, 0x00	; 0
   15708:	6d e9       	ldi	r22, 0x9D	; 157
   1570a:	7e e0       	ldi	r23, 0x0E	; 14
   1570c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1570e:	c0 92 9f 10 	sts	0x109F, r12	; 0x80109f <mqtt_client+0x204>
   15712:	d0 92 a0 10 	sts	0x10A0, r13	; 0x8010a0 <mqtt_client+0x205>
   15716:	e0 92 a1 10 	sts	0x10A1, r14	; 0x8010a1 <mqtt_client+0x206>
   1571a:	f0 92 a2 10 	sts	0x10A2, r15	; 0x8010a2 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1571e:	c0 92 a3 10 	sts	0x10A3, r12	; 0x8010a3 <mqtt_client+0x208>
   15722:	d0 92 a4 10 	sts	0x10A4, r13	; 0x8010a4 <mqtt_client+0x209>
   15726:	e0 92 a5 10 	sts	0x10A5, r14	; 0x8010a5 <mqtt_client+0x20a>
   1572a:	f0 92 a6 10 	sts	0x10A6, r15	; 0x8010a6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1572e:	81 e0       	ldi	r24, 0x01	; 1
   15730:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   15734:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   15738:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   1573c:	dc 01       	movw	r26, r24
   1573e:	ed 91       	ld	r30, X+
   15740:	fc 91       	ld	r31, X
   15742:	00 84       	ldd	r0, Z+8	; 0x08
   15744:	f1 85       	ldd	r31, Z+9	; 0x09
   15746:	e0 2d       	mov	r30, r0
   15748:	19 95       	eicall
   1574a:	89 2b       	or	r24, r25
   1574c:	09 f4       	brne	.+2      	; 0x15750 <PubSubClient::loop() [clone .constprop.104]+0x15a>
   1574e:	b6 cf       	rjmp	.-148    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   15750:	ce 01       	movw	r24, r28
   15752:	01 96       	adiw	r24, 0x01	; 1
   15754:	0e 94 8a a4 	call	0x14914	; 0x14914 <PubSubClient::readPacket(unsigned char*) [clone .constprop.140]>
   15758:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   1575a:	89 2b       	or	r24, r25
   1575c:	09 f4       	brne	.+2      	; 0x15760 <PubSubClient::loop() [clone .constprop.104]+0x16a>
   1575e:	ae cf       	rjmp	.-164    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   15760:	c0 92 a3 10 	sts	0x10A3, r12	; 0x8010a3 <mqtt_client+0x208>
   15764:	d0 92 a4 10 	sts	0x10A4, r13	; 0x8010a4 <mqtt_client+0x209>
   15768:	e0 92 a5 10 	sts	0x10A5, r14	; 0x8010a5 <mqtt_client+0x20a>
   1576c:	f0 92 a6 10 	sts	0x10A6, r15	; 0x8010a6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   15770:	80 90 9d 0e 	lds	r8, 0x0E9D	; 0x800e9d <mqtt_client+0x2>
   15774:	88 2d       	mov	r24, r8
   15776:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   15778:	80 33       	cpi	r24, 0x30	; 48
   1577a:	09 f0       	breq	.+2      	; 0x1577e <PubSubClient::loop() [clone .constprop.104]+0x188>
   1577c:	83 c0       	rjmp	.+262    	; 0x15884 <PubSubClient::loop() [clone .constprop.104]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   1577e:	a0 90 a8 10 	lds	r10, 0x10A8	; 0x8010a8 <mqtt_client+0x20d>
   15782:	b0 90 a9 10 	lds	r11, 0x10A9	; 0x8010a9 <mqtt_client+0x20e>
   15786:	a1 14       	cp	r10, r1
   15788:	b1 04       	cpc	r11, r1
   1578a:	09 f4       	brne	.+2      	; 0x1578e <PubSubClient::loop() [clone .constprop.104]+0x198>
   1578c:	97 cf       	rjmp	.-210    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   1578e:	6d b6       	in	r6, 0x3d	; 61
   15790:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   15792:	69 81       	ldd	r22, Y+1	; 0x01
   15794:	70 e0       	ldi	r23, 0x00	; 0
   15796:	fb 01       	movw	r30, r22
   15798:	e5 56       	subi	r30, 0x65	; 101
   1579a:	f1 4f       	sbci	r31, 0xF1	; 241
   1579c:	23 81       	ldd	r18, Z+3	; 0x03
   1579e:	30 e0       	ldi	r19, 0x00	; 0
   157a0:	32 2f       	mov	r19, r18
   157a2:	22 27       	eor	r18, r18
   157a4:	84 81       	ldd	r24, Z+4	; 0x04
   157a6:	28 0f       	add	r18, r24
   157a8:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   157aa:	c9 01       	movw	r24, r18
   157ac:	01 96       	adiw	r24, 0x01	; 1
   157ae:	ed b7       	in	r30, 0x3d	; 61
   157b0:	fe b7       	in	r31, 0x3e	; 62
   157b2:	e8 1b       	sub	r30, r24
   157b4:	f9 0b       	sbc	r31, r25
   157b6:	0f b6       	in	r0, 0x3f	; 63
   157b8:	f8 94       	cli
   157ba:	fe bf       	out	0x3e, r31	; 62
   157bc:	0f be       	out	0x3f, r0	; 63
   157be:	ed bf       	out	0x3d, r30	; 61
   157c0:	8d b7       	in	r24, 0x3d	; 61
   157c2:	9e b7       	in	r25, 0x3e	; 62
   157c4:	01 96       	adiw	r24, 0x01	; 1
   157c6:	db 01       	movw	r26, r22
   157c8:	a0 56       	subi	r26, 0x60	; 96
   157ca:	b1 4f       	sbci	r27, 0xF1	; 241
   157cc:	fc 01       	movw	r30, r24
   157ce:	8c 01       	movw	r16, r24
   157d0:	02 0f       	add	r16, r18
   157d2:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   157d4:	e0 17       	cp	r30, r16
   157d6:	f1 07       	cpc	r31, r17
   157d8:	19 f0       	breq	.+6      	; 0x157e0 <PubSubClient::loop() [clone .constprop.104]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   157da:	3d 90       	ld	r3, X+
   157dc:	31 92       	st	Z+, r3
   157de:	fa cf       	rjmp	.-12     	; 0x157d4 <PubSubClient::loop() [clone .constprop.104]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   157e0:	10 82       	st	Z, r1
   157e2:	da 01       	movw	r26, r20
   157e4:	a6 1b       	sub	r26, r22
   157e6:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   157e8:	f8 2d       	mov	r31, r8
   157ea:	f6 70       	andi	r31, 0x06	; 6
   157ec:	8f 2e       	mov	r8, r31
   157ee:	42 e0       	ldi	r20, 0x02	; 2
   157f0:	f4 13       	cpse	r31, r20
   157f2:	3c c0       	rjmp	.+120    	; 0x1586c <PubSubClient::loop() [clone .constprop.104]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   157f4:	62 0f       	add	r22, r18
   157f6:	73 1f       	adc	r23, r19
   157f8:	fb 01       	movw	r30, r22
   157fa:	e5 56       	subi	r30, 0x65	; 101
   157fc:	f1 4f       	sbci	r31, 0xF1	; 241
   157fe:	45 81       	ldd	r20, Z+5	; 0x05
   15800:	50 e0       	ldi	r21, 0x00	; 0
   15802:	54 2f       	mov	r21, r20
   15804:	44 27       	eor	r20, r20
   15806:	06 81       	ldd	r16, Z+6	; 0x06
   15808:	04 0f       	add	r16, r20
   1580a:	15 2f       	mov	r17, r21
   1580c:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1580e:	ad 01       	movw	r20, r26
   15810:	42 1b       	sub	r20, r18
   15812:	53 0b       	sbc	r21, r19
   15814:	45 50       	subi	r20, 0x05	; 5
   15816:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   15818:	6e 55       	subi	r22, 0x5E	; 94
   1581a:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1581c:	f5 01       	movw	r30, r10
   1581e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   15820:	80 e4       	ldi	r24, 0x40	; 64
   15822:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   15826:	80 92 9e 0e 	sts	0x0E9E, r8	; 0x800e9e <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   1582a:	10 93 9f 0e 	sts	0x0E9F, r17	; 0x800e9f <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1582e:	00 93 a0 0e 	sts	0x0EA0, r16	; 0x800ea0 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   15832:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   15836:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   1583a:	dc 01       	movw	r26, r24
   1583c:	ed 91       	ld	r30, X+
   1583e:	fc 91       	ld	r31, X
   15840:	02 80       	ldd	r0, Z+2	; 0x02
   15842:	f3 81       	ldd	r31, Z+3	; 0x03
   15844:	e0 2d       	mov	r30, r0
   15846:	44 e0       	ldi	r20, 0x04	; 4
   15848:	50 e0       	ldi	r21, 0x00	; 0
   1584a:	6d e9       	ldi	r22, 0x9D	; 157
   1584c:	7e e0       	ldi	r23, 0x0E	; 14
   1584e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   15850:	c0 92 9f 10 	sts	0x109F, r12	; 0x80109f <mqtt_client+0x204>
   15854:	d0 92 a0 10 	sts	0x10A0, r13	; 0x8010a0 <mqtt_client+0x205>
   15858:	e0 92 a1 10 	sts	0x10A1, r14	; 0x8010a1 <mqtt_client+0x206>
   1585c:	f0 92 a2 10 	sts	0x10A2, r15	; 0x8010a2 <mqtt_client+0x207>
   15860:	0f b6       	in	r0, 0x3f	; 63
   15862:	f8 94       	cli
   15864:	7e be       	out	0x3e, r7	; 62
   15866:	0f be       	out	0x3f, r0	; 63
   15868:	6d be       	out	0x3d, r6	; 61
   1586a:	28 cf       	rjmp	.-432    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   1586c:	ad 01       	movw	r20, r26
   1586e:	42 1b       	sub	r20, r18
   15870:	53 0b       	sbc	r21, r19
   15872:	43 50       	subi	r20, 0x03	; 3
   15874:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   15876:	62 0f       	add	r22, r18
   15878:	73 1f       	adc	r23, r19
   1587a:	60 56       	subi	r22, 0x60	; 96
   1587c:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   1587e:	f5 01       	movw	r30, r10
   15880:	19 95       	eicall
   15882:	ee cf       	rjmp	.-36     	; 0x15860 <PubSubClient::loop() [clone .constprop.104]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   15884:	80 3c       	cpi	r24, 0xC0	; 192
   15886:	a9 f4       	brne	.+42     	; 0x158b2 <PubSubClient::loop() [clone .constprop.104]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   15888:	80 ed       	ldi	r24, 0xD0	; 208
   1588a:	80 93 9d 0e 	sts	0x0E9D, r24	; 0x800e9d <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   1588e:	10 92 9e 0e 	sts	0x0E9E, r1	; 0x800e9e <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   15892:	80 91 9b 0e 	lds	r24, 0x0E9B	; 0x800e9b <mqtt_client>
   15896:	90 91 9c 0e 	lds	r25, 0x0E9C	; 0x800e9c <mqtt_client+0x1>
   1589a:	dc 01       	movw	r26, r24
   1589c:	ed 91       	ld	r30, X+
   1589e:	fc 91       	ld	r31, X
   158a0:	02 80       	ldd	r0, Z+2	; 0x02
   158a2:	f3 81       	ldd	r31, Z+3	; 0x03
   158a4:	e0 2d       	mov	r30, r0
   158a6:	42 e0       	ldi	r20, 0x02	; 2
   158a8:	50 e0       	ldi	r21, 0x00	; 0
   158aa:	6d e9       	ldi	r22, 0x9D	; 157
   158ac:	7e e0       	ldi	r23, 0x0E	; 14
   158ae:	19 95       	eicall
   158b0:	05 cf       	rjmp	.-502    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   158b2:	80 3d       	cpi	r24, 0xD0	; 208
   158b4:	09 f0       	breq	.+2      	; 0x158b8 <PubSubClient::loop() [clone .constprop.104]+0x2c2>
   158b6:	02 cf       	rjmp	.-508    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   158b8:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <mqtt_client+0x20c>
   158bc:	ff ce       	rjmp	.-514    	; 0x156bc <PubSubClient::loop() [clone .constprop.104]+0xc6>

000158be <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   158be:	bf 92       	push	r11
   158c0:	cf 92       	push	r12
   158c2:	df 92       	push	r13
   158c4:	ef 92       	push	r14
   158c6:	ff 92       	push	r15
   158c8:	0f 93       	push	r16
   158ca:	1f 93       	push	r17
   158cc:	cf 93       	push	r28
   158ce:	df 93       	push	r29
   158d0:	00 d0       	rcall	.+0      	; 0x158d2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   158d2:	1f 92       	push	r1
   158d4:	cd b7       	in	r28, 0x3d	; 61
   158d6:	de b7       	in	r29, 0x3e	; 62
   158d8:	7c 01       	movw	r14, r24
   158da:	b6 2e       	mov	r11, r22
   158dc:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   158de:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   158e0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   158e2:	be 01       	movw	r22, r28
   158e4:	6f 5f       	subi	r22, 0xFF	; 255
   158e6:	7f 4f       	sbci	r23, 0xFF	; 255
   158e8:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   158ea:	28 2f       	mov	r18, r24
   158ec:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   158ee:	88 0f       	add	r24, r24
   158f0:	89 2f       	mov	r24, r25
   158f2:	88 1f       	adc	r24, r24
   158f4:	99 0b       	sbc	r25, r25
   158f6:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   158f8:	00 97       	sbiw	r24, 0x00	; 0
   158fa:	09 f0       	breq	.+2      	; 0x158fe <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   158fc:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   158fe:	f6 01       	movw	r30, r12
   15900:	e3 0f       	add	r30, r19
   15902:	f1 1d       	adc	r31, r1
   15904:	20 83       	st	Z, r18
   15906:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   15908:	00 97       	sbiw	r24, 0x00	; 0
   1590a:	79 f7       	brne	.-34     	; 0x158ea <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   1590c:	e3 2f       	mov	r30, r19
   1590e:	f0 e0       	ldi	r31, 0x00	; 0
   15910:	ba 01       	movw	r22, r20
   15912:	6e 1b       	sub	r22, r30
   15914:	7f 0b       	sbc	r23, r31
   15916:	6c 5f       	subi	r22, 0xFC	; 252
   15918:	7f 4f       	sbci	r23, 0xFF	; 255
   1591a:	db 01       	movw	r26, r22
   1591c:	bc 92       	st	X, r11
   1591e:	4e 1b       	sub	r20, r30
   15920:	5f 0b       	sbc	r21, r31
   15922:	4b 5f       	subi	r20, 0xFB	; 251
   15924:	5f 4f       	sbci	r21, 0xFF	; 255
   15926:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   15928:	9c 01       	movw	r18, r24
   1592a:	2c 19       	sub	r18, r12
   1592c:	3d 09       	sbc	r19, r13
   1592e:	2e 17       	cp	r18, r30
   15930:	3f 07       	cpc	r19, r31
   15932:	3c f4       	brge	.+14     	; 0x15942 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   15934:	dc 01       	movw	r26, r24
   15936:	2d 91       	ld	r18, X+
   15938:	cd 01       	movw	r24, r26
   1593a:	da 01       	movw	r26, r20
   1593c:	2d 93       	st	X+, r18
   1593e:	ad 01       	movw	r20, r26
   15940:	f3 cf       	rjmp	.-26     	; 0x15928 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   15942:	d7 01       	movw	r26, r14
   15944:	8d 91       	ld	r24, X+
   15946:	9c 91       	ld	r25, X
   15948:	0f 5f       	subi	r16, 0xFF	; 255
   1594a:	1f 4f       	sbci	r17, 0xFF	; 255
   1594c:	0e 0f       	add	r16, r30
   1594e:	1f 1f       	adc	r17, r31
   15950:	dc 01       	movw	r26, r24
   15952:	ed 91       	ld	r30, X+
   15954:	fc 91       	ld	r31, X
   15956:	02 80       	ldd	r0, Z+2	; 0x02
   15958:	f3 81       	ldd	r31, Z+3	; 0x03
   1595a:	e0 2d       	mov	r30, r0
   1595c:	a8 01       	movw	r20, r16
   1595e:	19 95       	eicall
   15960:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   15962:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   15966:	f7 01       	movw	r30, r14
   15968:	ec 5f       	subi	r30, 0xFC	; 252
   1596a:	fd 4f       	sbci	r31, 0xFD	; 253
   1596c:	60 83       	st	Z, r22
   1596e:	71 83       	std	Z+1, r23	; 0x01
   15970:	82 83       	std	Z+2, r24	; 0x02
   15972:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   15974:	81 e0       	ldi	r24, 0x01	; 1
   15976:	0c 15       	cp	r16, r12
   15978:	1d 05       	cpc	r17, r13
   1597a:	09 f0       	breq	.+2      	; 0x1597e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   1597c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   1597e:	0f 90       	pop	r0
   15980:	0f 90       	pop	r0
   15982:	0f 90       	pop	r0
   15984:	0f 90       	pop	r0
   15986:	df 91       	pop	r29
   15988:	cf 91       	pop	r28
   1598a:	1f 91       	pop	r17
   1598c:	0f 91       	pop	r16
   1598e:	ff 90       	pop	r15
   15990:	ef 90       	pop	r14
   15992:	df 90       	pop	r13
   15994:	cf 90       	pop	r12
   15996:	bf 90       	pop	r11
   15998:	08 95       	ret

0001599a <PubSubClient::subscribe(char const*) [clone .constprop.147]>:
_ZN12PubSubClient9subscribeEPKc.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   1599a:	cf 93       	push	r28
   1599c:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   1599e:	fc 01       	movw	r30, r24
   159a0:	01 90       	ld	r0, Z+
   159a2:	00 20       	and	r0, r0
   159a4:	e9 f7       	brne	.-6      	; 0x159a0 <PubSubClient::subscribe(char const*) [clone .constprop.147]+0x6>
   159a6:	9f 01       	movw	r18, r30
   159a8:	28 1b       	sub	r18, r24
   159aa:	39 0b       	sbc	r19, r25
   159ac:	28 5f       	subi	r18, 0xF8	; 248
   159ae:	3f 4f       	sbci	r19, 0xFF	; 255
   159b0:	21 30       	cpi	r18, 0x01	; 1
   159b2:	32 40       	sbci	r19, 0x02	; 2
   159b4:	98 f5       	brcc	.+102    	; 0x15a1c <PubSubClient::subscribe(char const*) [clone .constprop.147]+0x82>
   159b6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   159b8:	8b e9       	ldi	r24, 0x9B	; 155
   159ba:	9e e0       	ldi	r25, 0x0E	; 14
   159bc:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   159c0:	88 23       	and	r24, r24
   159c2:	61 f1       	breq	.+88     	; 0x15a1c <PubSubClient::subscribe(char const*) [clone .constprop.147]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   159c4:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <mqtt_client+0x202>
   159c8:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <mqtt_client+0x203>
   159cc:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   159ce:	19 f1       	breq	.+70     	; 0x15a16 <PubSubClient::subscribe(char const*) [clone .constprop.147]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   159d0:	90 93 9e 10 	sts	0x109E, r25	; 0x80109e <mqtt_client+0x203>
   159d4:	80 93 9d 10 	sts	0x109D, r24	; 0x80109d <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   159d8:	80 91 9d 10 	lds	r24, 0x109D	; 0x80109d <mqtt_client+0x202>
   159dc:	90 91 9e 10 	lds	r25, 0x109E	; 0x80109e <mqtt_client+0x203>
   159e0:	90 93 a2 0e 	sts	0x0EA2, r25	; 0x800ea2 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   159e4:	80 93 a3 0e 	sts	0x0EA3, r24	; 0x800ea3 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   159e8:	47 e0       	ldi	r20, 0x07	; 7
   159ea:	50 e0       	ldi	r21, 0x00	; 0
   159ec:	6d e9       	ldi	r22, 0x9D	; 157
   159ee:	7e e0       	ldi	r23, 0x0E	; 14
   159f0:	ce 01       	movw	r24, r28
   159f2:	0e 94 6e 9c 	call	0x138dc	; 0x138dc <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   159f6:	fc 01       	movw	r30, r24
   159f8:	e5 56       	subi	r30, 0x65	; 101
   159fa:	f1 4f       	sbci	r31, 0xF1	; 241
   159fc:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   159fe:	9c 01       	movw	r18, r24
   15a00:	24 50       	subi	r18, 0x04	; 4
   15a02:	31 09       	sbc	r19, r1
   15a04:	4d e9       	ldi	r20, 0x9D	; 157
   15a06:	5e e0       	ldi	r21, 0x0E	; 14
   15a08:	62 e8       	ldi	r22, 0x82	; 130
   15a0a:	8b e9       	ldi	r24, 0x9B	; 155
   15a0c:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   15a0e:	df 91       	pop	r29
   15a10:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   15a12:	0c 94 5f ac 	jmp	0x158be	; 0x158be <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   15a16:	81 e0       	ldi	r24, 0x01	; 1
   15a18:	90 e0       	ldi	r25, 0x00	; 0
   15a1a:	da cf       	rjmp	.-76     	; 0x159d0 <PubSubClient::subscribe(char const*) [clone .constprop.147]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.147():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   15a1c:	80 e0       	ldi	r24, 0x00	; 0
   15a1e:	df 91       	pop	r29
   15a20:	cf 91       	pop	r28
   15a22:	08 95       	ret

00015a24 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   15a24:	af 92       	push	r10
   15a26:	bf 92       	push	r11
   15a28:	cf 92       	push	r12
   15a2a:	df 92       	push	r13
   15a2c:	ef 92       	push	r14
   15a2e:	ff 92       	push	r15
   15a30:	0f 93       	push	r16
   15a32:	1f 93       	push	r17
   15a34:	cf 93       	push	r28
   15a36:	df 93       	push	r29
   15a38:	7c 01       	movw	r14, r24
   15a3a:	5b 01       	movw	r10, r22
   15a3c:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   15a3e:	ea 01       	movw	r28, r20
   15a40:	09 90       	ld	r0, Y+
   15a42:	00 20       	and	r0, r0
   15a44:	e9 f7       	brne	.-6      	; 0x15a40 <PubSubClient::publish(char const*, char const*)+0x1c>
   15a46:	21 97       	sbiw	r28, 0x01	; 1
   15a48:	c4 1b       	sub	r28, r20
   15a4a:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   15a4c:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   15a50:	88 23       	and	r24, r24
   15a52:	c9 f1       	breq	.+114    	; 0x15ac6 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   15a54:	f5 01       	movw	r30, r10
   15a56:	01 90       	ld	r0, Z+
   15a58:	00 20       	and	r0, r0
   15a5a:	e9 f7       	brne	.-6      	; 0x15a56 <PubSubClient::publish(char const*, char const*)+0x32>
   15a5c:	31 97       	sbiw	r30, 0x01	; 1
   15a5e:	ea 19       	sub	r30, r10
   15a60:	fb 09       	sbc	r31, r11
   15a62:	ce 01       	movw	r24, r28
   15a64:	07 96       	adiw	r24, 0x07	; 7
   15a66:	e8 0f       	add	r30, r24
   15a68:	f9 1f       	adc	r31, r25
   15a6a:	e1 30       	cpi	r30, 0x01	; 1
   15a6c:	f2 40       	sbci	r31, 0x02	; 2
   15a6e:	58 f5       	brcc	.+86     	; 0x15ac6 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   15a70:	67 01       	movw	r12, r14
   15a72:	82 e0       	ldi	r24, 0x02	; 2
   15a74:	c8 0e       	add	r12, r24
   15a76:	d1 1c       	adc	r13, r1
   15a78:	45 e0       	ldi	r20, 0x05	; 5
   15a7a:	50 e0       	ldi	r21, 0x00	; 0
   15a7c:	b6 01       	movw	r22, r12
   15a7e:	c5 01       	movw	r24, r10
   15a80:	0e 94 6e 9c 	call	0x138dc	; 0x138dc <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.150]>
   15a84:	f8 01       	movw	r30, r16
   15a86:	dc 01       	movw	r26, r24
   15a88:	12 96       	adiw	r26, 0x02	; 2
   15a8a:	ae 0d       	add	r26, r14
   15a8c:	bf 1d       	adc	r27, r15
   15a8e:	a8 01       	movw	r20, r16
   15a90:	4c 0f       	add	r20, r28
   15a92:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   15a94:	e4 17       	cp	r30, r20
   15a96:	f5 07       	cpc	r31, r21
   15a98:	19 f0       	breq	.+6      	; 0x15aa0 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   15a9a:	21 91       	ld	r18, Z+
   15a9c:	2d 93       	st	X+, r18
   15a9e:	fa cf       	rjmp	.-12     	; 0x15a94 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   15aa0:	25 97       	sbiw	r28, 0x05	; 5
   15aa2:	9e 01       	movw	r18, r28
   15aa4:	28 0f       	add	r18, r24
   15aa6:	39 1f       	adc	r19, r25
   15aa8:	a6 01       	movw	r20, r12
   15aaa:	60 e3       	ldi	r22, 0x30	; 48
   15aac:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   15aae:	df 91       	pop	r29
   15ab0:	cf 91       	pop	r28
   15ab2:	1f 91       	pop	r17
   15ab4:	0f 91       	pop	r16
   15ab6:	ff 90       	pop	r15
   15ab8:	ef 90       	pop	r14
   15aba:	df 90       	pop	r13
   15abc:	cf 90       	pop	r12
   15abe:	bf 90       	pop	r11
   15ac0:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   15ac2:	0c 94 5f ac 	jmp	0x158be	; 0x158be <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   15ac6:	80 e0       	ldi	r24, 0x00	; 0
   15ac8:	df 91       	pop	r29
   15aca:	cf 91       	pop	r28
   15acc:	1f 91       	pop	r17
   15ace:	0f 91       	pop	r16
   15ad0:	ff 90       	pop	r15
   15ad2:	ef 90       	pop	r14
   15ad4:	df 90       	pop	r13
   15ad6:	cf 90       	pop	r12
   15ad8:	bf 90       	pop	r11
   15ada:	af 90       	pop	r10
   15adc:	08 95       	ret

00015ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.133():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(const char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   15ade:	af 92       	push	r10
   15ae0:	bf 92       	push	r11
   15ae2:	df 92       	push	r13
   15ae4:	ef 92       	push	r14
   15ae6:	ff 92       	push	r15
   15ae8:	0f 93       	push	r16
   15aea:	1f 93       	push	r17
   15aec:	cf 93       	push	r28
   15aee:	df 93       	push	r29
   15af0:	cd b7       	in	r28, 0x3d	; 61
   15af2:	de b7       	in	r29, 0x3e	; 62
   15af4:	c6 55       	subi	r28, 0x56	; 86
   15af6:	d1 09       	sbc	r29, r1
   15af8:	0f b6       	in	r0, 0x3f	; 63
   15afa:	f8 94       	cli
   15afc:	de bf       	out	0x3e, r29	; 62
   15afe:	0f be       	out	0x3f, r0	; 63
   15b00:	cd bf       	out	0x3d, r28	; 61
   15b02:	5c 01       	movw	r10, r24
   15b04:	d6 2e       	mov	r13, r22
   15b06:	7a 01       	movw	r14, r20
   15b08:	89 01       	movw	r16, r18
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   15b0a:	8b e9       	ldi	r24, 0x9B	; 155
   15b0c:	9e e0       	ldi	r25, 0x0E	; 14
   15b0e:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   15b12:	88 23       	and	r24, r24
   15b14:	09 f4       	brne	.+2      	; 0x15b18 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]+0x3a>
   15b16:	52 c0       	rjmp	.+164    	; 0x15bbc <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]+0xde>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   15b18:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mqtt_send_message>
   15b1c:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mqtt_send_message+0x1>
   15b20:	01 96       	adiw	r24, 0x01	; 1
   15b22:	90 93 de 0b 	sts	0x0BDE, r25	; 0x800bde <mqtt_send_message+0x1>
   15b26:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <mqtt_send_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   15b2a:	ce 01       	movw	r24, r28
   15b2c:	83 5b       	subi	r24, 0xB3	; 179
   15b2e:	9f 4f       	sbci	r25, 0xFF	; 255
   15b30:	0e 94 6f 72 	call	0xe4de	; 0xe4de <device_get_name(char*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   15b34:	60 91 db 0b 	lds	r22, 0x0BDB	; 0x800bdb <header_out>
   15b38:	70 91 dc 0b 	lds	r23, 0x0BDC	; 0x800bdc <header_out+0x1>
   15b3c:	ce 01       	movw	r24, r28
   15b3e:	01 96       	adiw	r24, 0x01	; 1
   15b40:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   15b44:	be 01       	movw	r22, r28
   15b46:	63 5b       	subi	r22, 0xB3	; 179
   15b48:	7f 4f       	sbci	r23, 0xFF	; 255
   15b4a:	ce 01       	movw	r24, r28
   15b4c:	01 96       	adiw	r24, 0x01	; 1
   15b4e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   15b52:	64 ef       	ldi	r22, 0xF4	; 244
   15b54:	73 e0       	ldi	r23, 0x03	; 3
   15b56:	ce 01       	movw	r24, r28
   15b58:	01 96       	adiw	r24, 0x01	; 1
   15b5a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   15b5e:	b5 01       	movw	r22, r10
   15b60:	ce 01       	movw	r24, r28
   15b62:	01 96       	adiw	r24, 0x01	; 1
   15b64:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   15b68:	64 ef       	ldi	r22, 0xF4	; 244
   15b6a:	73 e0       	ldi	r23, 0x03	; 3
   15b6c:	ce 01       	movw	r24, r28
   15b6e:	01 96       	adiw	r24, 0x01	; 1
   15b70:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15b74:	4a e0       	ldi	r20, 0x0A	; 10
   15b76:	be 01       	movw	r22, r28
   15b78:	6f 5b       	subi	r22, 0xBF	; 191
   15b7a:	7f 4f       	sbci	r23, 0xFF	; 255
   15b7c:	8d 2d       	mov	r24, r13
   15b7e:	90 e0       	ldi	r25, 0x00	; 0
   15b80:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.133():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   15b84:	be 01       	movw	r22, r28
   15b86:	6f 5b       	subi	r22, 0xBF	; 191
   15b88:	7f 4f       	sbci	r23, 0xFF	; 255
   15b8a:	ce 01       	movw	r24, r28
   15b8c:	01 96       	adiw	r24, 0x01	; 1
   15b8e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   15b92:	64 ef       	ldi	r22, 0xF4	; 244
   15b94:	73 e0       	ldi	r23, 0x03	; 3
   15b96:	ce 01       	movw	r24, r28
   15b98:	01 96       	adiw	r24, 0x01	; 1
   15b9a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   15b9e:	b7 01       	movw	r22, r14
   15ba0:	ce 01       	movw	r24, r28
   15ba2:	01 96       	adiw	r24, 0x01	; 1
   15ba4:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   15ba8:	a8 01       	movw	r20, r16
   15baa:	be 01       	movw	r22, r28
   15bac:	6f 5f       	subi	r22, 0xFF	; 255
   15bae:	7f 4f       	sbci	r23, 0xFF	; 255
   15bb0:	8b e9       	ldi	r24, 0x9B	; 155
   15bb2:	9e e0       	ldi	r25, 0x0E	; 14
   15bb4:	0e 94 12 ad 	call	0x15a24	; 0x15a24 <PubSubClient::publish(char const*, char const*)>
   15bb8:	81 11       	cpse	r24, r1
   15bba:	09 c0       	rjmp	.+18     	; 0x15bce <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]+0xf0>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   15bbc:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <mqtt_error>
   15bc0:	90 91 e0 0b 	lds	r25, 0x0BE0	; 0x800be0 <mqtt_error+0x1>
   15bc4:	01 96       	adiw	r24, 0x01	; 1
   15bc6:	90 93 e0 0b 	sts	0x0BE0, r25	; 0x800be0 <mqtt_error+0x1>
   15bca:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <mqtt_error>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:187
}
   15bce:	ca 5a       	subi	r28, 0xAA	; 170
   15bd0:	df 4f       	sbci	r29, 0xFF	; 255
   15bd2:	0f b6       	in	r0, 0x3f	; 63
   15bd4:	f8 94       	cli
   15bd6:	de bf       	out	0x3e, r29	; 62
   15bd8:	0f be       	out	0x3f, r0	; 63
   15bda:	cd bf       	out	0x3d, r28	; 61
   15bdc:	df 91       	pop	r29
   15bde:	cf 91       	pop	r28
   15be0:	1f 91       	pop	r17
   15be2:	0f 91       	pop	r16
   15be4:	ff 90       	pop	r15
   15be6:	ef 90       	pop	r14
   15be8:	df 90       	pop	r13
   15bea:	bf 90       	pop	r11
   15bec:	af 90       	pop	r10
   15bee:	08 95       	ret

00015bf0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.131():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:189
///
void send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, uint8_t idx, char *topic, char *payload)
   15bf0:	cf 92       	push	r12
   15bf2:	df 92       	push	r13
   15bf4:	ef 92       	push	r14
   15bf6:	ff 92       	push	r15
   15bf8:	0f 93       	push	r16
   15bfa:	1f 93       	push	r17
   15bfc:	cf 93       	push	r28
   15bfe:	df 93       	push	r29
   15c00:	cd b7       	in	r28, 0x3d	; 61
   15c02:	de b7       	in	r29, 0x3e	; 62
   15c04:	c6 55       	subi	r28, 0x56	; 86
   15c06:	d1 09       	sbc	r29, r1
   15c08:	0f b6       	in	r0, 0x3f	; 63
   15c0a:	f8 94       	cli
   15c0c:	de bf       	out	0x3e, r29	; 62
   15c0e:	0f be       	out	0x3f, r0	; 63
   15c10:	cd bf       	out	0x3d, r28	; 61
   15c12:	c8 2e       	mov	r12, r24
   15c14:	d6 2e       	mov	r13, r22
   15c16:	7a 01       	movw	r14, r20
   15c18:	89 01       	movw	r16, r18
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:194
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   15c1a:	8b e9       	ldi	r24, 0x9B	; 155
   15c1c:	9e e0       	ldi	r25, 0x0E	; 14
   15c1e:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   15c22:	88 23       	and	r24, r24
   15c24:	09 f4       	brne	.+2      	; 0x15c28 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]+0x38>
   15c26:	68 c0       	rjmp	.+208    	; 0x15cf8 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]+0x108>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:196
  {
    mqtt_send_message++;
   15c28:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mqtt_send_message>
   15c2c:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mqtt_send_message+0x1>
   15c30:	01 96       	adiw	r24, 0x01	; 1
   15c32:	90 93 de 0b 	sts	0x0BDE, r25	; 0x800bde <mqtt_send_message+0x1>
   15c36:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <mqtt_send_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:197
    device_get_name(hostname);
   15c3a:	ce 01       	movw	r24, r28
   15c3c:	83 5b       	subi	r24, 0xB3	; 179
   15c3e:	9f 4f       	sbci	r25, 0xFF	; 255
   15c40:	0e 94 6f 72 	call	0xe4de	; 0xe4de <device_get_name(char*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:198
    strcpy_P(str_topic, header_out);
   15c44:	60 91 db 0b 	lds	r22, 0x0BDB	; 0x800bdb <header_out>
   15c48:	70 91 dc 0b 	lds	r23, 0x0BDC	; 0x800bdc <header_out+0x1>
   15c4c:	ce 01       	movw	r24, r28
   15c4e:	01 96       	adiw	r24, 0x01	; 1
   15c50:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:199
    strcat(str_topic, hostname);
   15c54:	be 01       	movw	r22, r28
   15c56:	63 5b       	subi	r22, 0xB3	; 179
   15c58:	7f 4f       	sbci	r23, 0xFF	; 255
   15c5a:	ce 01       	movw	r24, r28
   15c5c:	01 96       	adiw	r24, 0x01	; 1
   15c5e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:200
    strcat(str_topic, "/");
   15c62:	64 ef       	ldi	r22, 0xF4	; 244
   15c64:	73 e0       	ldi	r23, 0x03	; 3
   15c66:	ce 01       	movw	r24, r28
   15c68:	01 96       	adiw	r24, 0x01	; 1
   15c6a:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:201
    strcat(str_topic, prefix);
   15c6e:	62 e0       	ldi	r22, 0x02	; 2
   15c70:	77 e0       	ldi	r23, 0x07	; 7
   15c72:	ce 01       	movw	r24, r28
   15c74:	01 96       	adiw	r24, 0x01	; 1
   15c76:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:202
    strcat(str_topic, "/");
   15c7a:	64 ef       	ldi	r22, 0xF4	; 244
   15c7c:	73 e0       	ldi	r23, 0x03	; 3
   15c7e:	ce 01       	movw	r24, r28
   15c80:	01 96       	adiw	r24, 0x01	; 1
   15c82:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15c86:	4a e0       	ldi	r20, 0x0A	; 10
   15c88:	be 01       	movw	r22, r28
   15c8a:	6f 5b       	subi	r22, 0xBF	; 191
   15c8c:	7f 4f       	sbci	r23, 0xFF	; 255
   15c8e:	8c 2d       	mov	r24, r12
   15c90:	90 e0       	ldi	r25, 0x00	; 0
   15c92:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.131():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:204
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   15c96:	be 01       	movw	r22, r28
   15c98:	6f 5b       	subi	r22, 0xBF	; 191
   15c9a:	7f 4f       	sbci	r23, 0xFF	; 255
   15c9c:	ce 01       	movw	r24, r28
   15c9e:	01 96       	adiw	r24, 0x01	; 1
   15ca0:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:205
    strcat(str_topic, "/");
   15ca4:	64 ef       	ldi	r22, 0xF4	; 244
   15ca6:	73 e0       	ldi	r23, 0x03	; 3
   15ca8:	ce 01       	movw	r24, r28
   15caa:	01 96       	adiw	r24, 0x01	; 1
   15cac:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15cb0:	4a e0       	ldi	r20, 0x0A	; 10
   15cb2:	be 01       	movw	r22, r28
   15cb4:	6f 5b       	subi	r22, 0xBF	; 191
   15cb6:	7f 4f       	sbci	r23, 0xFF	; 255
   15cb8:	8d 2d       	mov	r24, r13
   15cba:	90 e0       	ldi	r25, 0x00	; 0
   15cbc:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.131():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:207
    itoa(idx, tmp1, 10);
    strcat(str_topic, tmp1);
   15cc0:	be 01       	movw	r22, r28
   15cc2:	6f 5b       	subi	r22, 0xBF	; 191
   15cc4:	7f 4f       	sbci	r23, 0xFF	; 255
   15cc6:	ce 01       	movw	r24, r28
   15cc8:	01 96       	adiw	r24, 0x01	; 1
   15cca:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:208
    strcat(str_topic, "/");
   15cce:	64 ef       	ldi	r22, 0xF4	; 244
   15cd0:	73 e0       	ldi	r23, 0x03	; 3
   15cd2:	ce 01       	movw	r24, r28
   15cd4:	01 96       	adiw	r24, 0x01	; 1
   15cd6:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:209
    strcat(str_topic, topic);
   15cda:	b7 01       	movw	r22, r14
   15cdc:	ce 01       	movw	r24, r28
   15cde:	01 96       	adiw	r24, 0x01	; 1
   15ce0:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:210
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   15ce4:	a8 01       	movw	r20, r16
   15ce6:	be 01       	movw	r22, r28
   15ce8:	6f 5f       	subi	r22, 0xFF	; 255
   15cea:	7f 4f       	sbci	r23, 0xFF	; 255
   15cec:	8b e9       	ldi	r24, 0x9B	; 155
   15cee:	9e e0       	ldi	r25, 0x0E	; 14
   15cf0:	0e 94 12 ad 	call	0x15a24	; 0x15a24 <PubSubClient::publish(char const*, char const*)>
   15cf4:	81 11       	cpse	r24, r1
   15cf6:	09 c0       	rjmp	.+18     	; 0x15d0a <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]+0x11a>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:213
  }
  else
    mqtt_error++;
   15cf8:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <mqtt_error>
   15cfc:	90 91 e0 0b 	lds	r25, 0x0BE0	; 0x800be0 <mqtt_error+0x1>
   15d00:	01 96       	adiw	r24, 0x01	; 1
   15d02:	90 93 e0 0b 	sts	0x0BE0, r25	; 0x800be0 <mqtt_error+0x1>
   15d06:	80 93 df 0b 	sts	0x0BDF, r24	; 0x800bdf <mqtt_error>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:214
}
   15d0a:	ca 5a       	subi	r28, 0xAA	; 170
   15d0c:	df 4f       	sbci	r29, 0xFF	; 255
   15d0e:	0f b6       	in	r0, 0x3f	; 63
   15d10:	f8 94       	cli
   15d12:	de bf       	out	0x3e, r29	; 62
   15d14:	0f be       	out	0x3f, r0	; 63
   15d16:	cd bf       	out	0x3d, r28	; 61
   15d18:	df 91       	pop	r29
   15d1a:	cf 91       	pop	r28
   15d1c:	1f 91       	pop	r17
   15d1e:	0f 91       	pop	r16
   15d20:	ff 90       	pop	r15
   15d22:	ef 90       	pop	r14
   15d24:	df 90       	pop	r13
   15d26:	cf 90       	pop	r12
   15d28:	08 95       	ret

00015d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.228():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   15d2a:	0c 94 9d cd 	jmp	0x19b3a	; 0x19b3a <eeprom_write_byte>

00015d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.232():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   15d2e:	0c 94 95 cd 	jmp	0x19b2a	; 0x19b2a <eeprom_read_byte>

00015d32 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]>:
_Z28thermostat_ring_update_biteshhh.constprop.190():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   15d32:	1f 93       	push	r17
   15d34:	cf 93       	push	r28
   15d36:	df 93       	push	r29
   15d38:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   15d3a:	91 e2       	ldi	r25, 0x21	; 33
   15d3c:	89 9f       	mul	r24, r25
   15d3e:	e0 01       	movw	r28, r0
   15d40:	11 24       	eor	r1, r1
   15d42:	c8 5a       	subi	r28, 0xA8	; 168
   15d44:	de 4f       	sbci	r29, 0xFE	; 254
   15d46:	ce 01       	movw	r24, r28
   15d48:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   15d4c:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.190():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   15d4e:	11 11       	cpse	r17, r1
   15d50:	07 c0       	rjmp	.+14     	; 0x15d60 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]+0x2e>
   15d52:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   15d54:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.190():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   15d56:	df 91       	pop	r29
   15d58:	cf 91       	pop	r28
   15d5a:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   15d5c:	0c 94 95 ae 	jmp	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
_Z28thermostat_ring_update_biteshhh.constprop.190():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   15d60:	61 60       	ori	r22, 0x01	; 1
   15d62:	f8 cf       	rjmp	.-16     	; 0x15d54 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.190]+0x22>

00015d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:118



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   15d64:	4f 92       	push	r4
   15d66:	5f 92       	push	r5
   15d68:	6f 92       	push	r6
   15d6a:	7f 92       	push	r7
   15d6c:	8f 92       	push	r8
   15d6e:	9f 92       	push	r9
   15d70:	af 92       	push	r10
   15d72:	bf 92       	push	r11
   15d74:	cf 92       	push	r12
   15d76:	df 92       	push	r13
   15d78:	ef 92       	push	r14
   15d7a:	ff 92       	push	r15
   15d7c:	0f 93       	push	r16
   15d7e:	1f 93       	push	r17
   15d80:	cf 93       	push	r28
   15d82:	df 93       	push	r29
   15d84:	00 d0       	rcall	.+0      	; 0x15d86 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   15d86:	00 d0       	rcall	.+0      	; 0x15d88 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   15d88:	1f 92       	push	r1
   15d8a:	1f 92       	push	r1
   15d8c:	cd b7       	in	r28, 0x3d	; 61
   15d8e:	de b7       	in	r29, 0x3e	; 62
   15d90:	6c 01       	movw	r12, r24
   15d92:	46 2e       	mov	r4, r22
   15d94:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
  char tmp1[8];
  str[0] = 0;
   15d96:	fc 01       	movw	r30, r24
   15d98:	10 82       	st	Z, r1
   15d9a:	3a 01       	movw	r6, r20
   15d9c:	f1 2c       	mov	r15, r1
   15d9e:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   15da0:	a0 2e       	mov	r10, r16
   15da2:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   15da4:	8e 01       	movw	r16, r28
   15da6:	0f 5f       	subi	r16, 0xFF	; 255
   15da8:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   15daa:	82 2f       	mov	r24, r18
   15dac:	81 50       	subi	r24, 0x01	; 1
   15dae:	99 0b       	sbc	r25, r25
   15db0:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   15db2:	f3 01       	movw	r30, r6
   15db4:	81 91       	ld	r24, Z+
   15db6:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   15db8:	a5 01       	movw	r20, r10
   15dba:	b8 01       	movw	r22, r16
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	0e 94 26 c4 	call	0x1884c	; 0x1884c <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    if (strlen(tmp1) < 2)
   15dc2:	f8 01       	movw	r30, r16
   15dc4:	01 90       	ld	r0, Z+
   15dc6:	00 20       	and	r0, r0
   15dc8:	e9 f7       	brne	.-6      	; 0x15dc4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   15dca:	31 97       	sbiw	r30, 0x01	; 1
   15dcc:	e0 1b       	sub	r30, r16
   15dce:	f1 0b       	sbc	r31, r17
   15dd0:	32 97       	sbiw	r30, 0x02	; 2
   15dd2:	28 f4       	brcc	.+10     	; 0x15dde <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
      strcat(str, "0");
   15dd4:	60 e1       	ldi	r22, 0x10	; 16
   15dd6:	77 e0       	ldi	r23, 0x07	; 7
   15dd8:	c6 01       	movw	r24, r12
   15dda:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
    strcat(str, tmp1); 
   15dde:	b8 01       	movw	r22, r16
   15de0:	c6 01       	movw	r24, r12
   15de2:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
    if (a < maxBytes - 1)
   15de6:	e8 14       	cp	r14, r8
   15de8:	f9 04       	cpc	r15, r9
   15dea:	34 f4       	brge	.+12     	; 0x15df8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:129
    {
      tmp1[0] = sep;
   15dec:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[1] = 0;
   15dee:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:131
      strcat(str, tmp1);
   15df0:	b8 01       	movw	r22, r16
   15df2:	c6 01       	movw	r24, r12
   15df4:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
   15df8:	ff ef       	ldi	r31, 0xFF	; 255
   15dfa:	ef 1a       	sub	r14, r31
   15dfc:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   15dfe:	e5 14       	cp	r14, r5
   15e00:	c0 f2       	brcs	.-80     	; 0x15db2 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:134
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   15e02:	28 96       	adiw	r28, 0x08	; 8
   15e04:	0f b6       	in	r0, 0x3f	; 63
   15e06:	f8 94       	cli
   15e08:	de bf       	out	0x3e, r29	; 62
   15e0a:	0f be       	out	0x3f, r0	; 63
   15e0c:	cd bf       	out	0x3d, r28	; 61
   15e0e:	df 91       	pop	r29
   15e10:	cf 91       	pop	r28
   15e12:	1f 91       	pop	r17
   15e14:	0f 91       	pop	r16
   15e16:	ff 90       	pop	r15
   15e18:	ef 90       	pop	r14
   15e1a:	df 90       	pop	r13
   15e1c:	cf 90       	pop	r12
   15e1e:	bf 90       	pop	r11
   15e20:	af 90       	pop	r10
   15e22:	9f 90       	pop	r9
   15e24:	8f 90       	pop	r8
   15e26:	7f 90       	pop	r7
   15e28:	6f 90       	pop	r6
   15e2a:	5f 90       	pop	r5
   15e2c:	4f 90       	pop	r4
   15e2e:	08 95       	ret

00015e30 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307h.constprop.125():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:399
  }
}


//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
   15e30:	4f 92       	push	r4
   15e32:	5f 92       	push	r5
   15e34:	6f 92       	push	r6
   15e36:	7f 92       	push	r7
   15e38:	8f 92       	push	r8
   15e3a:	9f 92       	push	r9
   15e3c:	af 92       	push	r10
   15e3e:	bf 92       	push	r11
   15e40:	cf 92       	push	r12
   15e42:	df 92       	push	r13
   15e44:	ef 92       	push	r14
   15e46:	ff 92       	push	r15
   15e48:	0f 93       	push	r16
   15e4a:	1f 93       	push	r17
   15e4c:	cf 93       	push	r28
   15e4e:	df 93       	push	r29
   15e50:	cd b7       	in	r28, 0x3d	; 61
   15e52:	de b7       	in	r29, 0x3e	; 62
   15e54:	6b 97       	sbiw	r28, 0x1b	; 27
   15e56:	0f b6       	in	r0, 0x3f	; 63
   15e58:	f8 94       	cli
   15e5a:	de bf       	out	0x3e, r29	; 62
   15e5c:	0f be       	out	0x3f, r0	; 63
   15e5e:	cd bf       	out	0x3d, r28	; 61
   15e60:	7c 01       	movw	r14, r24
   15e62:	16 2f       	mov	r17, r22
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:403
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   15e64:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:404
  createString(tmp1, '.', device.ntp_server, 4, 10);
   15e66:	0a e0       	ldi	r16, 0x0A	; 10
   15e68:	24 e0       	ldi	r18, 0x04	; 4
   15e6a:	46 ef       	ldi	r20, 0xF6	; 246
   15e6c:	5c e0       	ldi	r21, 0x0C	; 12
   15e6e:	6e e2       	ldi	r22, 0x2E	; 46
   15e70:	ce 01       	movw	r24, r28
   15e72:	01 96       	adiw	r24, 0x01	; 1
   15e74:	6c 01       	movw	r12, r24
   15e76:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:405
  timeClient->begin();
   15e7a:	c7 01       	movw	r24, r14
   15e7c:	0e 94 3c 97 	call	0x12e78	; 0x12e78 <NTPClient::begin()>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:406
  timeClient->setTimeOffset(3600 * offset);
   15e80:	20 e1       	ldi	r18, 0x10	; 16
   15e82:	3e e0       	ldi	r19, 0x0E	; 14
   15e84:	12 9f       	mul	r17, r18
   15e86:	c0 01       	movw	r24, r0
   15e88:	13 9f       	mul	r17, r19
   15e8a:	90 0d       	add	r25, r0
   15e8c:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   15e8e:	09 2e       	mov	r0, r25
   15e90:	00 0c       	add	r0, r0
   15e92:	aa 0b       	sbc	r26, r26
   15e94:	bb 0b       	sbc	r27, r27
   15e96:	f7 01       	movw	r30, r14
   15e98:	87 83       	std	Z+7, r24	; 0x07
   15e9a:	90 87       	std	Z+8, r25	; 0x08
   15e9c:	a1 87       	std	Z+9, r26	; 0x09
   15e9e:	b2 87       	std	Z+10, r27	; 0x0a
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   15ea0:	d4 82       	std	Z+4, r13	; 0x04
   15ea2:	c3 82       	std	Z+3, r12	; 0x03
_Z10ntp_updateP9NTPClientP10RTC_DS1307h.constprop.125():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:408
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   15ea4:	c7 01       	movw	r24, r14
   15ea6:	0e 94 53 a6 	call	0x14ca6	; 0x14ca6 <NTPClient::update()>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:402

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
   15eaa:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:408
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   15eac:	88 23       	and	r24, r24
   15eae:	09 f4       	brne	.+2      	; 0x15eb2 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]+0x82>
   15eb0:	70 c0       	rjmp	.+224    	; 0x15f92 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]+0x162>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
   15eb2:	c7 01       	movw	r24, r14
   15eb4:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   15eb8:	2c e3       	ldi	r18, 0x3C	; 60
   15eba:	42 2e       	mov	r4, r18
   15ebc:	51 2c       	mov	r5, r1
   15ebe:	61 2c       	mov	r6, r1
   15ec0:	71 2c       	mov	r7, r1
   15ec2:	a3 01       	movw	r20, r6
   15ec4:	92 01       	movw	r18, r4
   15ec6:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   15eca:	d6 2e       	mov	r13, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
   15ecc:	c7 01       	movw	r24, r14
   15ece:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   15ed2:	30 e1       	ldi	r19, 0x10	; 16
   15ed4:	83 2e       	mov	r8, r19
   15ed6:	3e e0       	ldi	r19, 0x0E	; 14
   15ed8:	93 2e       	mov	r9, r19
   15eda:	a1 2c       	mov	r10, r1
   15edc:	b1 2c       	mov	r11, r1
   15ede:	a5 01       	movw	r20, r10
   15ee0:	94 01       	movw	r18, r8
   15ee2:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   15ee6:	a3 01       	movw	r20, r6
   15ee8:	92 01       	movw	r18, r4
   15eea:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   15eee:	c2 2e       	mov	r12, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
   15ef0:	c7 01       	movw	r24, r14
   15ef2:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   15ef6:	20 e8       	ldi	r18, 0x80	; 128
   15ef8:	31 e5       	ldi	r19, 0x51	; 81
   15efa:	41 e0       	ldi	r20, 0x01	; 1
   15efc:	50 e0       	ldi	r21, 0x00	; 0
   15efe:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   15f02:	a5 01       	movw	r20, r10
   15f04:	94 01       	movw	r18, r8
   15f06:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   15f0a:	b2 2e       	mov	r11, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
   15f0c:	c7 01       	movw	r24, r14
   15f0e:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   15f12:	6d 8b       	std	Y+21, r22	; 0x15
   15f14:	7e 8b       	std	Y+22, r23	; 0x16
   15f16:	8f 8b       	std	Y+23, r24	; 0x17
   15f18:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
   15f1a:	ce 01       	movw	r24, r28
   15f1c:	45 96       	adiw	r24, 0x15	; 21
   15f1e:	0e 94 f3 b3 	call	0x167e6	; 0x167e6 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
   15f22:	dc 01       	movw	r26, r24
   15f24:	13 96       	adiw	r26, 0x03	; 3
   15f26:	ac 90       	ld	r10, X
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
   15f28:	c7 01       	movw	r24, r14
   15f2a:	0e 94 6d a5 	call	0x14ada	; 0x14ada <NTPClient::getEpochTime() const>
   15f2e:	6d 8b       	std	Y+21, r22	; 0x15
   15f30:	7e 8b       	std	Y+22, r23	; 0x16
   15f32:	8f 8b       	std	Y+23, r24	; 0x17
   15f34:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
   15f36:	ce 01       	movw	r24, r28
   15f38:	45 96       	adiw	r24, 0x15	; 21
   15f3a:	0e 94 f3 b3 	call	0x167e6	; 0x167e6 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
   15f3e:	fc 01       	movw	r30, r24
   15f40:	05 81       	ldd	r16, Z+5	; 0x05
   15f42:	00 2e       	mov	r0, r16
   15f44:	00 0c       	add	r0, r0
   15f46:	11 0b       	sbc	r17, r17
   15f48:	0f 5f       	subi	r16, 0xFF	; 255
   15f4a:	1f 4f       	sbci	r17, 0xFF	; 255
_Z10ntp_updateP9NTPClientP10RTC_DS1307h.constprop.125():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:410
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
   15f4c:	c7 01       	movw	r24, r14
   15f4e:	0e 94 a1 a5 	call	0x14b42	; 0x14b42 <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   15f52:	80 3d       	cpi	r24, 0xD0	; 208
   15f54:	f7 e0       	ldi	r31, 0x07	; 7
   15f56:	9f 07       	cpc	r25, r31
   15f58:	10 f0       	brcs	.+4      	; 0x15f5e <ntp_update(NTPClient*, RTC_DS1307*, unsigned char) [clone .constprop.125]+0x12e>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   15f5a:	80 5d       	subi	r24, 0xD0	; 208
   15f5c:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
   15f5e:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   15f60:	0e 8b       	std	Y+22, r16	; 0x16
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   15f62:	af 8a       	std	Y+23, r10	; 0x17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   15f64:	b8 8e       	std	Y+24, r11	; 0x18
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   15f66:	c9 8e       	std	Y+25, r12	; 0x19
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   15f68:	da 8e       	std	Y+26, r13	; 0x1a
_Z10ntp_updateP9NTPClientP10RTC_DS1307h.constprop.125():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:410
   15f6a:	ce 01       	movw	r24, r28
   15f6c:	45 96       	adiw	r24, 0x15	; 21
   15f6e:	0e 94 58 aa 	call	0x154b0	; 0x154b0 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:412
    ret = 1;
    printf("y%d\n", timeClient->getYear());
   15f72:	c7 01       	movw	r24, r14
   15f74:	0e 94 a1 a5 	call	0x14b42	; 0x14b42 <NTPClient::getYear() const>
   15f78:	9f 93       	push	r25
   15f7a:	8f 93       	push	r24
   15f7c:	82 e1       	ldi	r24, 0x12	; 18
   15f7e:	97 e0       	ldi	r25, 0x07	; 7
   15f80:	9f 93       	push	r25
   15f82:	8f 93       	push	r24
   15f84:	0e 94 9e d0 	call	0x1a13c	; 0x1a13c <printf>
   15f88:	0f 90       	pop	r0
   15f8a:	0f 90       	pop	r0
   15f8c:	0f 90       	pop	r0
   15f8e:	0f 90       	pop	r0
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:411
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
   15f90:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   15f92:	d7 01       	movw	r26, r14
   15f94:	8d 91       	ld	r24, X+
   15f96:	9c 91       	ld	r25, X
   15f98:	dc 01       	movw	r26, r24
   15f9a:	ed 91       	ld	r30, X+
   15f9c:	fc 91       	ld	r31, X
   15f9e:	02 88       	ldd	r0, Z+18	; 0x12
   15fa0:	f3 89       	ldd	r31, Z+19	; 0x13
   15fa2:	e0 2d       	mov	r30, r0
   15fa4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   15fa6:	f7 01       	movw	r30, r14
   15fa8:	12 82       	std	Z+2, r1	; 0x02
_Z10ntp_updateP9NTPClientP10RTC_DS1307h.constprop.125():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:416
    printf("y%d\n", timeClient->getYear());
  }
  timeClient->end();
  return ret;
}
   15faa:	81 2f       	mov	r24, r17
   15fac:	6b 96       	adiw	r28, 0x1b	; 27
   15fae:	0f b6       	in	r0, 0x3f	; 63
   15fb0:	f8 94       	cli
   15fb2:	de bf       	out	0x3e, r29	; 62
   15fb4:	0f be       	out	0x3f, r0	; 63
   15fb6:	cd bf       	out	0x3d, r28	; 61
   15fb8:	df 91       	pop	r29
   15fba:	cf 91       	pop	r28
   15fbc:	1f 91       	pop	r17
   15fbe:	0f 91       	pop	r16
   15fc0:	ff 90       	pop	r15
   15fc2:	ef 90       	pop	r14
   15fc4:	df 90       	pop	r13
   15fc6:	cf 90       	pop	r12
   15fc8:	bf 90       	pop	r11
   15fca:	af 90       	pop	r10
   15fcc:	9f 90       	pop	r9
   15fce:	8f 90       	pop	r8
   15fd0:	7f 90       	pop	r7
   15fd2:	6f 90       	pop	r6
   15fd4:	5f 90       	pop	r5
   15fd6:	4f 90       	pop	r4
   15fd8:	08 95       	ret

00015fda <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   15fda:	cf 92       	push	r12
   15fdc:	df 92       	push	r13
   15fde:	ef 92       	push	r14
   15fe0:	ff 92       	push	r15
   15fe2:	0f 93       	push	r16
   15fe4:	1f 93       	push	r17
   15fe6:	cf 93       	push	r28
   15fe8:	df 93       	push	r29
   15fea:	00 d0       	rcall	.+0      	; 0x15fec <EEPROMwriteFloat(unsigned int, float)+0x12>
   15fec:	1f 92       	push	r1
   15fee:	cd b7       	in	r28, 0x3d	; 61
   15ff0:	de b7       	in	r29, 0x3e	; 62
   15ff2:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   15ff4:	49 83       	std	Y+1, r20	; 0x01
   15ff6:	5a 83       	std	Y+2, r21	; 0x02
   15ff8:	6b 83       	std	Y+3, r22	; 0x03
   15ffa:	7c 83       	std	Y+4, r23	; 0x04
   15ffc:	ce 01       	movw	r24, r28
   15ffe:	01 96       	adiw	r24, 0x01	; 1
   16000:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   16002:	10 e0       	ldi	r17, 0x00	; 0
   16004:	00 e0       	ldi	r16, 0x00	; 0
   16006:	f7 01       	movw	r30, r14
   16008:	61 91       	ld	r22, Z+
   1600a:	7f 01       	movw	r14, r30
   1600c:	c8 01       	movw	r24, r16
   1600e:	8c 0d       	add	r24, r12
   16010:	9d 1d       	adc	r25, r13
   16012:	0e 94 95 ae 	call	0x15d2a	; 0x15d2a <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.225] [clone .lto_priv.243]>
   16016:	0f 5f       	subi	r16, 0xFF	; 255
   16018:	1f 4f       	sbci	r17, 0xFF	; 255
   1601a:	04 30       	cpi	r16, 0x04	; 4
   1601c:	11 05       	cpc	r17, r1
   1601e:	99 f7       	brne	.-26     	; 0x16006 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   16020:	0f 90       	pop	r0
   16022:	0f 90       	pop	r0
   16024:	0f 90       	pop	r0
   16026:	0f 90       	pop	r0
   16028:	df 91       	pop	r29
   1602a:	cf 91       	pop	r28
   1602c:	1f 91       	pop	r17
   1602e:	0f 91       	pop	r16
   16030:	ff 90       	pop	r15
   16032:	ef 90       	pop	r14
   16034:	df 90       	pop	r13
   16036:	cf 90       	pop	r12
   16038:	08 95       	ret

0001603a <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   1603a:	cf 92       	push	r12
   1603c:	df 92       	push	r13
   1603e:	ef 92       	push	r14
   16040:	ff 92       	push	r15
   16042:	0f 93       	push	r16
   16044:	1f 93       	push	r17
   16046:	cf 93       	push	r28
   16048:	df 93       	push	r29
   1604a:	00 d0       	rcall	.+0      	; 0x1604c <EEPROMreadFloat(unsigned int)+0x12>
   1604c:	1f 92       	push	r1
   1604e:	cd b7       	in	r28, 0x3d	; 61
   16050:	de b7       	in	r29, 0x3e	; 62
   16052:	7e 01       	movw	r14, r28
   16054:	25 e0       	ldi	r18, 0x05	; 5
   16056:	e2 0e       	add	r14, r18
   16058:	f1 1c       	adc	r15, r1
   1605a:	8e 01       	movw	r16, r28
   1605c:	0f 5f       	subi	r16, 0xFF	; 255
   1605e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   16060:	6c 01       	movw	r12, r24
   16062:	c0 1a       	sub	r12, r16
   16064:	d1 0a       	sbc	r13, r17
   16066:	c6 01       	movw	r24, r12
   16068:	80 0f       	add	r24, r16
   1606a:	91 1f       	adc	r25, r17
   1606c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   16070:	f8 01       	movw	r30, r16
   16072:	81 93       	st	Z+, r24
   16074:	8f 01       	movw	r16, r30
   16076:	ee 15       	cp	r30, r14
   16078:	ff 05       	cpc	r31, r15
   1607a:	a9 f7       	brne	.-22     	; 0x16066 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   1607c:	69 81       	ldd	r22, Y+1	; 0x01
   1607e:	7a 81       	ldd	r23, Y+2	; 0x02
   16080:	8b 81       	ldd	r24, Y+3	; 0x03
   16082:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   16084:	0f 90       	pop	r0
   16086:	0f 90       	pop	r0
   16088:	0f 90       	pop	r0
   1608a:	0f 90       	pop	r0
   1608c:	df 91       	pop	r29
   1608e:	cf 91       	pop	r28
   16090:	1f 91       	pop	r17
   16092:	0f 91       	pop	r16
   16094:	ff 90       	pop	r15
   16096:	ef 90       	pop	r14
   16098:	df 90       	pop	r13
   1609a:	cf 90       	pop	r12
   1609c:	08 95       	ret

0001609e <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   1609e:	cf 93       	push	r28
   160a0:	df 93       	push	r29
   160a2:	d8 2f       	mov	r29, r24
   160a4:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   160a6:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <wiznet_SPI_settings>
   160aa:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <wiznet_SPI_settings+0x1>
   160ae:	0e 94 f8 97 	call	0x12ff0	; 0x12ff0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   160b2:	0e 94 bb a2 	call	0x14576	; 0x14576 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   160b6:	80 e0       	ldi	r24, 0x00	; 0
   160b8:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   160bc:	8d 2f       	mov	r24, r29
   160be:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   160c2:	8c 2f       	mov	r24, r28
   160c4:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   160c8:	80 e0       	ldi	r24, 0x00	; 0
   160ca:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
   160ce:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   160d0:	0e 94 b6 a2 	call	0x1456c	; 0x1456c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   160d4:	8c 2f       	mov	r24, r28
   160d6:	df 91       	pop	r29
   160d8:	cf 91       	pop	r28
   160da:	08 95       	ret

000160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   160dc:	df 92       	push	r13
   160de:	ef 92       	push	r14
   160e0:	ff 92       	push	r15
   160e2:	0f 93       	push	r16
   160e4:	1f 93       	push	r17
   160e6:	cf 93       	push	r28
   160e8:	df 93       	push	r29
   160ea:	d8 2f       	mov	r29, r24
   160ec:	d9 2e       	mov	r13, r25
   160ee:	c6 2f       	mov	r28, r22
   160f0:	7a 01       	movw	r14, r20
   160f2:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   160f4:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <wiznet_SPI_settings>
   160f8:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <wiznet_SPI_settings+0x1>
   160fc:	0e 94 f8 97 	call	0x12ff0	; 0x12ff0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   16100:	0e 94 bb a2 	call	0x14576	; 0x14576 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   16104:	8d 2d       	mov	r24, r13
   16106:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   1610a:	8d 2f       	mov	r24, r29
   1610c:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   16110:	8c 2f       	mov	r24, r28
   16112:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
   16116:	e7 01       	movw	r28, r14
   16118:	e0 0e       	add	r14, r16
   1611a:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   1611c:	ce 15       	cp	r28, r14
   1611e:	df 05       	cpc	r29, r15
   16120:	21 f0       	breq	.+8      	; 0x1612a <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   16122:	89 91       	ld	r24, Y+
   16124:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
   16128:	f9 cf       	rjmp	.-14     	; 0x1611c <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   1612a:	0e 94 b6 a2 	call	0x1456c	; 0x1456c <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   1612e:	c8 01       	movw	r24, r16
   16130:	df 91       	pop	r29
   16132:	cf 91       	pop	r28
   16134:	1f 91       	pop	r17
   16136:	0f 91       	pop	r16
   16138:	ff 90       	pop	r15
   1613a:	ef 90       	pop	r14
   1613c:	df 90       	pop	r13
   1613e:	08 95       	ret

00016140 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.98]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.98():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   16140:	8f 92       	push	r8
   16142:	9f 92       	push	r9
   16144:	af 92       	push	r10
   16146:	bf 92       	push	r11
   16148:	cf 92       	push	r12
   1614a:	df 92       	push	r13
   1614c:	ef 92       	push	r14
   1614e:	ff 92       	push	r15
   16150:	0f 93       	push	r16
   16152:	1f 93       	push	r17
   16154:	cf 93       	push	r28
   16156:	5c 01       	movw	r10, r24
   16158:	6b 01       	movw	r12, r22
   1615a:	7a 01       	movw	r14, r20
   1615c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   1615e:	c0 91 9f 0c 	lds	r28, 0x0C9F	; 0x800c9f <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   16162:	c0 93 6b 11 	sts	0x116B, r28	; 0x80116b <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   16166:	68 ee       	ldi	r22, 0xE8	; 232
   16168:	73 e0       	ldi	r23, 0x03	; 3
   1616a:	80 e0       	ldi	r24, 0x00	; 0
   1616c:	90 e0       	ldi	r25, 0x00	; 0
   1616e:	0e 94 1d a3 	call	0x1463a	; 0x1463a <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   16172:	61 e0       	ldi	r22, 0x01	; 1
   16174:	8c 2f       	mov	r24, r28
   16176:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   1617a:	0e 94 58 4a 	call	0x94b0	; 0x94b0 <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1617e:	60 e0       	ldi	r22, 0x00	; 0
   16180:	90 e0       	ldi	r25, 0x00	; 0
   16182:	80 e0       	ldi	r24, 0x00	; 0
   16184:	0e 94 4f b0 	call	0x1609e	; 0x1609e <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   16188:	48 2f       	mov	r20, r24
   1618a:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1618c:	64 e0       	ldi	r22, 0x04	; 4
   1618e:	90 e0       	ldi	r25, 0x00	; 0
   16190:	80 e0       	ldi	r24, 0x00	; 0
   16192:	0e 94 c0 a2 	call	0x14580	; 0x14580 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   16196:	cc e0       	ldi	r28, 0x0C	; 12
   16198:	88 e0       	ldi	r24, 0x08	; 8
   1619a:	88 2e       	mov	r8, r24
   1619c:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1619e:	42 e0       	ldi	r20, 0x02	; 2
   161a0:	6c 2f       	mov	r22, r28
   161a2:	8e e1       	ldi	r24, 0x1E	; 30
   161a4:	90 e0       	ldi	r25, 0x00	; 0
   161a6:	0e 94 c0 a2 	call	0x14580	; 0x14580 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   161aa:	42 e0       	ldi	r20, 0x02	; 2
   161ac:	6c 2f       	mov	r22, r28
   161ae:	8f e1       	ldi	r24, 0x1F	; 31
   161b0:	90 e0       	ldi	r25, 0x00	; 0
   161b2:	0e 94 c0 a2 	call	0x14580	; 0x14580 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   161b6:	81 e0       	ldi	r24, 0x01	; 1
   161b8:	88 1a       	sub	r8, r24
   161ba:	91 08       	sbc	r9, r1
   161bc:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   161be:	81 14       	cp	r8, r1
   161c0:	91 04       	cpc	r9, r1
   161c2:	69 f7       	brne	.-38     	; 0x1619e <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.98]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   161c4:	26 e0       	ldi	r18, 0x06	; 6
   161c6:	30 e0       	ldi	r19, 0x00	; 0
   161c8:	48 ea       	ldi	r20, 0xA8	; 168
   161ca:	5c e0       	ldi	r21, 0x0C	; 12
   161cc:	64 e0       	ldi	r22, 0x04	; 4
   161ce:	89 e0       	ldi	r24, 0x09	; 9
   161d0:	90 e0       	ldi	r25, 0x00	; 0
   161d2:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   161d6:	a5 01       	movw	r20, r10
   161d8:	4e 5f       	subi	r20, 0xFE	; 254
   161da:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   161dc:	24 e0       	ldi	r18, 0x04	; 4
   161de:	30 e0       	ldi	r19, 0x00	; 0
   161e0:	64 e0       	ldi	r22, 0x04	; 4
   161e2:	8f e0       	ldi	r24, 0x0F	; 15
   161e4:	90 e0       	ldi	r25, 0x00	; 0
   161e6:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   161ea:	a7 01       	movw	r20, r14
   161ec:	4e 5f       	subi	r20, 0xFE	; 254
   161ee:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   161f0:	24 e0       	ldi	r18, 0x04	; 4
   161f2:	30 e0       	ldi	r19, 0x00	; 0
   161f4:	64 e0       	ldi	r22, 0x04	; 4
   161f6:	81 e0       	ldi	r24, 0x01	; 1
   161f8:	90 e0       	ldi	r25, 0x00	; 0
   161fa:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   161fe:	a8 01       	movw	r20, r16
   16200:	4e 5f       	subi	r20, 0xFE	; 254
   16202:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   16204:	24 e0       	ldi	r18, 0x04	; 4
   16206:	30 e0       	ldi	r19, 0x00	; 0
   16208:	64 e0       	ldi	r22, 0x04	; 4
   1620a:	85 e0       	ldi	r24, 0x05	; 5
   1620c:	90 e0       	ldi	r25, 0x00	; 0
   1620e:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   16212:	f6 01       	movw	r30, r12
   16214:	82 81       	ldd	r24, Z+2	; 0x02
   16216:	93 81       	ldd	r25, Z+3	; 0x03
   16218:	a4 81       	ldd	r26, Z+4	; 0x04
   1621a:	b5 81       	ldd	r27, Z+5	; 0x05
   1621c:	80 93 95 0c 	sts	0x0C95, r24	; 0x800c95 <Ethernet+0x2>
   16220:	90 93 96 0c 	sts	0x0C96, r25	; 0x800c96 <Ethernet+0x3>
   16224:	a0 93 97 0c 	sts	0x0C97, r26	; 0x800c97 <Ethernet+0x4>
   16228:	b0 93 98 0c 	sts	0x0C98, r27	; 0x800c98 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.98():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   1622c:	cf 91       	pop	r28
   1622e:	1f 91       	pop	r17
   16230:	0f 91       	pop	r16
   16232:	ff 90       	pop	r15
   16234:	ef 90       	pop	r14
   16236:	df 90       	pop	r13
   16238:	cf 90       	pop	r12
   1623a:	bf 90       	pop	r11
   1623c:	af 90       	pop	r10
   1623e:	9f 90       	pop	r9
   16240:	8f 90       	pop	r8
   16242:	08 95       	ret

00016244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   16244:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   16246:	82 95       	swap	r24
   16248:	88 0f       	add	r24, r24
   1624a:	80 7e       	andi	r24, 0xE0	; 224
   1624c:	6c e0       	ldi	r22, 0x0C	; 12
   1624e:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   16250:	c9 01       	movw	r24, r18
   16252:	0c 94 c0 a2 	jmp	0x14580	; 0x14580 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00016256 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   16256:	bf 92       	push	r11
   16258:	cf 92       	push	r12
   1625a:	df 92       	push	r13
   1625c:	ef 92       	push	r14
   1625e:	ff 92       	push	r15
   16260:	0f 93       	push	r16
   16262:	1f 93       	push	r17
   16264:	cf 93       	push	r28
   16266:	df 93       	push	r29
   16268:	b8 2e       	mov	r11, r24
   1626a:	6b 01       	movw	r12, r22
   1626c:	7a 01       	movw	r14, r20
   1626e:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   16270:	64 e2       	ldi	r22, 0x24	; 36
   16272:	70 e0       	ldi	r23, 0x00	; 0
   16274:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   16278:	c8 2f       	mov	r28, r24
   1627a:	65 e2       	ldi	r22, 0x25	; 37
   1627c:	70 e0       	ldi	r23, 0x00	; 0
   1627e:	8b 2d       	mov	r24, r11
   16280:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   16284:	d0 e0       	ldi	r29, 0x00	; 0
   16286:	dc 2f       	mov	r29, r28
   16288:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   1628a:	8c 0d       	add	r24, r12
   1628c:	9d 2d       	mov	r25, r13
   1628e:	91 1d       	adc	r25, r1
   16290:	c8 0f       	add	r28, r24
   16292:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   16294:	6b 2d       	mov	r22, r11
   16296:	62 95       	swap	r22
   16298:	66 0f       	add	r22, r22
   1629a:	60 7e       	andi	r22, 0xE0	; 224
   1629c:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   1629e:	98 01       	movw	r18, r16
   162a0:	a7 01       	movw	r20, r14
   162a2:	ce 01       	movw	r24, r28
   162a4:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   162a8:	c0 0f       	add	r28, r16
   162aa:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   162ac:	4d 2f       	mov	r20, r29
   162ae:	64 e2       	ldi	r22, 0x24	; 36
   162b0:	70 e0       	ldi	r23, 0x00	; 0
   162b2:	8b 2d       	mov	r24, r11
   162b4:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   162b8:	4c 2f       	mov	r20, r28
   162ba:	65 e2       	ldi	r22, 0x25	; 37
   162bc:	70 e0       	ldi	r23, 0x00	; 0
   162be:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   162c0:	df 91       	pop	r29
   162c2:	cf 91       	pop	r28
   162c4:	1f 91       	pop	r17
   162c6:	0f 91       	pop	r16
   162c8:	ff 90       	pop	r15
   162ca:	ef 90       	pop	r14
   162cc:	df 90       	pop	r13
   162ce:	cf 90       	pop	r12
   162d0:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   162d2:	0c 94 22 b1 	jmp	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000162d6 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   162d6:	af 92       	push	r10
   162d8:	bf 92       	push	r11
   162da:	cf 92       	push	r12
   162dc:	df 92       	push	r13
   162de:	ff 92       	push	r15
   162e0:	0f 93       	push	r16
   162e2:	1f 93       	push	r17
   162e4:	cf 93       	push	r28
   162e6:	df 93       	push	r29
   162e8:	8c 01       	movw	r16, r24
   162ea:	5b 01       	movw	r10, r22
   162ec:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   162ee:	fc 01       	movw	r30, r24
   162f0:	c7 88       	ldd	r12, Z+23	; 0x17
   162f2:	d0 8c       	ldd	r13, Z+24	; 0x18
   162f4:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   162f6:	8f 2d       	mov	r24, r15
   162f8:	0e 94 85 a0 	call	0x1410a	; 0x1410a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   162fc:	8c 17       	cp	r24, r28
   162fe:	9d 07       	cpc	r25, r29
   16300:	20 f4       	brcc	.+8      	; 0x1630a <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   16302:	8f 2d       	mov	r24, r15
   16304:	0e 94 85 a0 	call	0x1410a	; 0x1410a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   16308:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   1630a:	9e 01       	movw	r18, r28
   1630c:	a5 01       	movw	r20, r10
   1630e:	b6 01       	movw	r22, r12
   16310:	8f 2d       	mov	r24, r15
   16312:	0e 94 2b b1 	call	0x16256	; 0x16256 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   16316:	f8 01       	movw	r30, r16
   16318:	87 89       	ldd	r24, Z+23	; 0x17
   1631a:	90 8d       	ldd	r25, Z+24	; 0x18
   1631c:	8c 0f       	add	r24, r28
   1631e:	9d 1f       	adc	r25, r29
   16320:	90 8f       	std	Z+24, r25	; 0x18
   16322:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   16324:	ce 01       	movw	r24, r28
   16326:	df 91       	pop	r29
   16328:	cf 91       	pop	r28
   1632a:	1f 91       	pop	r17
   1632c:	0f 91       	pop	r16
   1632e:	ff 90       	pop	r15
   16330:	df 90       	pop	r13
   16332:	cf 90       	pop	r12
   16334:	bf 90       	pop	r11
   16336:	af 90       	pop	r10
   16338:	08 95       	ret

0001633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   1633a:	cf 93       	push	r28
   1633c:	c8 2f       	mov	r28, r24
   1633e:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   16340:	61 e0       	ldi	r22, 0x01	; 1
   16342:	70 e0       	ldi	r23, 0x00	; 0
   16344:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   16348:	61 e0       	ldi	r22, 0x01	; 1
   1634a:	70 e0       	ldi	r23, 0x00	; 0
   1634c:	8c 2f       	mov	r24, r28
   1634e:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   16352:	81 11       	cpse	r24, r1
   16354:	f9 cf       	rjmp	.-14     	; 0x16348 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   16356:	cf 91       	pop	r28
   16358:	08 95       	ret

0001635a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   1635a:	af 92       	push	r10
   1635c:	bf 92       	push	r11
   1635e:	cf 92       	push	r12
   16360:	df 92       	push	r13
   16362:	ef 92       	push	r14
   16364:	ff 92       	push	r15
   16366:	0f 93       	push	r16
   16368:	1f 93       	push	r17
   1636a:	cf 93       	push	r28
   1636c:	df 93       	push	r29
   1636e:	f8 2e       	mov	r15, r24
   16370:	5b 01       	movw	r10, r22
   16372:	6a 01       	movw	r12, r20
   16374:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   16376:	68 e2       	ldi	r22, 0x28	; 40
   16378:	70 e0       	ldi	r23, 0x00	; 0
   1637a:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   1637e:	08 2f       	mov	r16, r24
   16380:	10 e0       	ldi	r17, 0x00	; 0
   16382:	10 2f       	mov	r17, r16
   16384:	00 27       	eor	r16, r16
   16386:	69 e2       	ldi	r22, 0x29	; 41
   16388:	70 e0       	ldi	r23, 0x00	; 0
   1638a:	8f 2d       	mov	r24, r15
   1638c:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
   16390:	e8 01       	movw	r28, r16
   16392:	c8 0f       	add	r28, r24
   16394:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   16396:	80 91 c5 11 	lds	r24, 0x11C5	; 0x8011c5 <wiznet_SPI_settings>
   1639a:	90 91 c6 11 	lds	r25, 0x11C6	; 0x8011c6 <wiznet_SPI_settings+0x1>
   1639e:	0e 94 f8 97 	call	0x12ff0	; 0x12ff0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   163a2:	0e 94 bb a2 	call	0x14576	; 0x14576 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   163a6:	8d 2f       	mov	r24, r29
   163a8:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   163ac:	8c 2f       	mov	r24, r28
   163ae:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   163b2:	8f 2d       	mov	r24, r15
   163b4:	82 95       	swap	r24
   163b6:	88 0f       	add	r24, r24
   163b8:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   163ba:	88 5e       	subi	r24, 0xE8	; 232
   163bc:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
   163c0:	85 01       	movw	r16, r10
   163c2:	ac 0c       	add	r10, r12
   163c4:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   163c6:	80 e0       	ldi	r24, 0x00	; 0
   163c8:	0e 94 f1 97 	call	0x12fe2	; 0x12fe2 <SPIClass::transfer(unsigned char)>
   163cc:	f8 01       	movw	r30, r16
   163ce:	81 93       	st	Z+, r24
   163d0:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   163d2:	ea 15       	cp	r30, r10
   163d4:	fb 05       	cpc	r31, r11
   163d6:	b9 f7       	brne	.-18     	; 0x163c6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   163d8:	0e 94 b6 a2 	call	0x1456c	; 0x1456c <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   163dc:	e1 10       	cpse	r14, r1
   163de:	18 c0       	rjmp	.+48     	; 0x16410 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   163e0:	cc 0d       	add	r28, r12
   163e2:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   163e4:	4d 2f       	mov	r20, r29
   163e6:	68 e2       	ldi	r22, 0x28	; 40
   163e8:	70 e0       	ldi	r23, 0x00	; 0
   163ea:	8f 2d       	mov	r24, r15
   163ec:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   163f0:	4c 2f       	mov	r20, r28
   163f2:	69 e2       	ldi	r22, 0x29	; 41
   163f4:	70 e0       	ldi	r23, 0x00	; 0
   163f6:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   163f8:	df 91       	pop	r29
   163fa:	cf 91       	pop	r28
   163fc:	1f 91       	pop	r17
   163fe:	0f 91       	pop	r16
   16400:	ff 90       	pop	r15
   16402:	ef 90       	pop	r14
   16404:	df 90       	pop	r13
   16406:	cf 90       	pop	r12
   16408:	bf 90       	pop	r11
   1640a:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1640c:	0c 94 22 b1 	jmp	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   16410:	df 91       	pop	r29
   16412:	cf 91       	pop	r28
   16414:	1f 91       	pop	r17
   16416:	0f 91       	pop	r16
   16418:	ff 90       	pop	r15
   1641a:	ef 90       	pop	r14
   1641c:	df 90       	pop	r13
   1641e:	cf 90       	pop	r12
   16420:	bf 90       	pop	r11
   16422:	af 90       	pop	r10
   16424:	08 95       	ret

00016426 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   16426:	cf 92       	push	r12
   16428:	df 92       	push	r13
   1642a:	ef 92       	push	r14
   1642c:	ff 92       	push	r15
   1642e:	1f 93       	push	r17
   16430:	cf 93       	push	r28
   16432:	df 93       	push	r29
   16434:	18 2f       	mov	r17, r24
   16436:	6b 01       	movw	r12, r22
   16438:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   1643a:	0e 94 a1 a0 	call	0x14142	; 0x14142 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   1643e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   16440:	00 97       	sbiw	r24, 0x00	; 0
   16442:	d9 f4       	brne	.+54     	; 0x1647a <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   16444:	63 e0       	ldi	r22, 0x03	; 3
   16446:	70 e0       	ldi	r23, 0x00	; 0
   16448:	81 2f       	mov	r24, r17
   1644a:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   1644e:	84 31       	cpi	r24, 0x14	; 20
   16450:	59 f0       	breq	.+22     	; 0x16468 <recv(unsigned char, unsigned char*, int)+0x42>
   16452:	88 23       	and	r24, r24
   16454:	49 f0       	breq	.+18     	; 0x16468 <recv(unsigned char, unsigned char*, int)+0x42>
   16456:	c1 e0       	ldi	r28, 0x01	; 1
   16458:	d0 e0       	ldi	r29, 0x00	; 0
   1645a:	8c 31       	cpi	r24, 0x1C	; 28
   1645c:	11 f4       	brne	.+4      	; 0x16462 <recv(unsigned char, unsigned char*, int)+0x3c>
   1645e:	d0 e0       	ldi	r29, 0x00	; 0
   16460:	c0 e0       	ldi	r28, 0x00	; 0
   16462:	d1 95       	neg	r29
   16464:	c1 95       	neg	r28
   16466:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   16468:	ce 01       	movw	r24, r28
   1646a:	df 91       	pop	r29
   1646c:	cf 91       	pop	r28
   1646e:	1f 91       	pop	r17
   16470:	ff 90       	pop	r15
   16472:	ef 90       	pop	r14
   16474:	df 90       	pop	r13
   16476:	cf 90       	pop	r12
   16478:	08 95       	ret
   1647a:	e8 16       	cp	r14, r24
   1647c:	f9 06       	cpc	r15, r25
   1647e:	0c f4       	brge	.+2      	; 0x16482 <recv(unsigned char, unsigned char*, int)+0x5c>
   16480:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   16482:	1c 16       	cp	r1, r28
   16484:	1d 06       	cpc	r1, r29
   16486:	84 f7       	brge	.-32     	; 0x16468 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   16488:	20 e0       	ldi	r18, 0x00	; 0
   1648a:	ae 01       	movw	r20, r28
   1648c:	b6 01       	movw	r22, r12
   1648e:	81 2f       	mov	r24, r17
   16490:	0e 94 ad b1 	call	0x1635a	; 0x1635a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   16494:	60 e4       	ldi	r22, 0x40	; 64
   16496:	70 e0       	ldi	r23, 0x00	; 0
   16498:	81 2f       	mov	r24, r17
   1649a:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   1649e:	e4 cf       	rjmp	.-56     	; 0x16468 <recv(unsigned char, unsigned char*, int)+0x42>

000164a0 <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   164a0:	cf 93       	push	r28
   164a2:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   164a4:	fc 01       	movw	r30, r24
   164a6:	21 8d       	ldd	r18, Z+25	; 0x19
   164a8:	32 8d       	ldd	r19, Z+26	; 0x1a
   164aa:	21 15       	cp	r18, r1
   164ac:	31 05       	cpc	r19, r1
   164ae:	29 f4       	brne	.+10     	; 0x164ba <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   164b0:	8f ef       	ldi	r24, 0xFF	; 255
   164b2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   164b4:	df 91       	pop	r29
   164b6:	cf 91       	pop	r28
   164b8:	08 95       	ret
   164ba:	ec 01       	movw	r28, r24
   164bc:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   164be:	42 17       	cp	r20, r18
   164c0:	53 07       	cpc	r21, r19
   164c2:	08 f0       	brcs	.+2      	; 0x164c6 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   164c4:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   164c6:	0e 94 13 b2 	call	0x16426	; 0x16426 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   164ca:	18 16       	cp	r1, r24
   164cc:	19 06       	cpc	r1, r25
   164ce:	84 f7       	brge	.-32     	; 0x164b0 <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   164d0:	29 8d       	ldd	r18, Y+25	; 0x19
   164d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
   164d4:	28 1b       	sub	r18, r24
   164d6:	39 0b       	sbc	r19, r25
   164d8:	3a 8f       	std	Y+26, r19	; 0x1a
   164da:	29 8f       	std	Y+25, r18	; 0x19
   164dc:	eb cf       	rjmp	.-42     	; 0x164b4 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

000164de <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   164de:	0f 93       	push	r16
   164e0:	1f 93       	push	r17
   164e2:	cf 93       	push	r28
   164e4:	df 93       	push	r29
   164e6:	1f 92       	push	r1
   164e8:	cd b7       	in	r28, 0x3d	; 61
   164ea:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   164ec:	fc 01       	movw	r30, r24
   164ee:	21 8d       	ldd	r18, Z+25	; 0x19
   164f0:	32 8d       	ldd	r19, Z+26	; 0x1a
   164f2:	23 2b       	or	r18, r19
   164f4:	41 f4       	brne	.+16     	; 0x16506 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   164f6:	8f ef       	ldi	r24, 0xFF	; 255
   164f8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   164fa:	0f 90       	pop	r0
   164fc:	df 91       	pop	r29
   164fe:	cf 91       	pop	r28
   16500:	1f 91       	pop	r17
   16502:	0f 91       	pop	r16
   16504:	08 95       	ret
   16506:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   16508:	41 e0       	ldi	r20, 0x01	; 1
   1650a:	50 e0       	ldi	r21, 0x00	; 0
   1650c:	be 01       	movw	r22, r28
   1650e:	6f 5f       	subi	r22, 0xFF	; 255
   16510:	7f 4f       	sbci	r23, 0xFF	; 255
   16512:	fc 01       	movw	r30, r24
   16514:	84 85       	ldd	r24, Z+12	; 0x0c
   16516:	0e 94 13 b2 	call	0x16426	; 0x16426 <recv(unsigned char, unsigned char*, int)>
   1651a:	18 16       	cp	r1, r24
   1651c:	19 06       	cpc	r1, r25
   1651e:	5c f7       	brge	.-42     	; 0x164f6 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   16520:	f8 01       	movw	r30, r16
   16522:	81 8d       	ldd	r24, Z+25	; 0x19
   16524:	92 8d       	ldd	r25, Z+26	; 0x1a
   16526:	01 97       	sbiw	r24, 0x01	; 1
   16528:	92 8f       	std	Z+26, r25	; 0x1a
   1652a:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   1652c:	89 81       	ldd	r24, Y+1	; 0x01
   1652e:	90 e0       	ldi	r25, 0x00	; 0
   16530:	e4 cf       	rjmp	.-56     	; 0x164fa <EthernetUDP::read()+0x1c>

00016532 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   16532:	0f 93       	push	r16
   16534:	1f 93       	push	r17
   16536:	cf 93       	push	r28
   16538:	df 93       	push	r29
   1653a:	00 d0       	rcall	.+0      	; 0x1653c <EthernetUDP::parsePacket()+0xa>
   1653c:	00 d0       	rcall	.+0      	; 0x1653e <EthernetUDP::parsePacket()+0xc>
   1653e:	1f 92       	push	r1
   16540:	1f 92       	push	r1
   16542:	cd b7       	in	r28, 0x3d	; 61
   16544:	de b7       	in	r29, 0x3e	; 62
   16546:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   16548:	dc 01       	movw	r26, r24
   1654a:	ed 91       	ld	r30, X+
   1654c:	fc 91       	ld	r31, X
   1654e:	06 80       	ldd	r0, Z+6	; 0x06
   16550:	f7 81       	ldd	r31, Z+7	; 0x07
   16552:	e0 2d       	mov	r30, r0
   16554:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   16556:	f8 01       	movw	r30, r16
   16558:	84 85       	ldd	r24, Z+12	; 0x0c
   1655a:	0e 94 a1 a0 	call	0x14142	; 0x14142 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   1655e:	89 2b       	or	r24, r25
   16560:	b1 f1       	breq	.+108    	; 0x165ce <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   16562:	48 e0       	ldi	r20, 0x08	; 8
   16564:	50 e0       	ldi	r21, 0x00	; 0
   16566:	be 01       	movw	r22, r28
   16568:	6f 5f       	subi	r22, 0xFF	; 255
   1656a:	7f 4f       	sbci	r23, 0xFF	; 255
   1656c:	d8 01       	movw	r26, r16
   1656e:	1c 96       	adiw	r26, 0x0c	; 12
   16570:	8c 91       	ld	r24, X
   16572:	0e 94 13 b2 	call	0x16426	; 0x16426 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   16576:	18 16       	cp	r1, r24
   16578:	19 06       	cpc	r1, r25
   1657a:	f4 f4       	brge	.+60     	; 0x165b8 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   1657c:	d8 01       	movw	r26, r16
   1657e:	51 96       	adiw	r26, 0x11	; 17
   16580:	84 e0       	ldi	r24, 0x04	; 4
   16582:	fe 01       	movw	r30, r28
   16584:	31 96       	adiw	r30, 0x01	; 1
   16586:	01 90       	ld	r0, Z+
   16588:	0d 92       	st	X+, r0
   1658a:	8a 95       	dec	r24
   1658c:	e1 f7       	brne	.-8      	; 0x16586 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   1658e:	8d 81       	ldd	r24, Y+5	; 0x05
   16590:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   16592:	98 2f       	mov	r25, r24
   16594:	88 27       	eor	r24, r24
   16596:	2e 81       	ldd	r18, Y+6	; 0x06
   16598:	82 0f       	add	r24, r18
   1659a:	91 1d       	adc	r25, r1
   1659c:	f8 01       	movw	r30, r16
   1659e:	96 8b       	std	Z+22, r25	; 0x16
   165a0:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   165a2:	8f 81       	ldd	r24, Y+7	; 0x07
   165a4:	28 2f       	mov	r18, r24
   165a6:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   165a8:	32 2f       	mov	r19, r18
   165aa:	22 27       	eor	r18, r18
   165ac:	88 85       	ldd	r24, Y+8	; 0x08
   165ae:	82 0f       	add	r24, r18
   165b0:	93 2f       	mov	r25, r19
   165b2:	91 1d       	adc	r25, r1
   165b4:	92 8f       	std	Z+26, r25	; 0x1a
   165b6:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   165b8:	28 96       	adiw	r28, 0x08	; 8
   165ba:	0f b6       	in	r0, 0x3f	; 63
   165bc:	f8 94       	cli
   165be:	de bf       	out	0x3e, r29	; 62
   165c0:	0f be       	out	0x3f, r0	; 63
   165c2:	cd bf       	out	0x3d, r28	; 61
   165c4:	df 91       	pop	r29
   165c6:	cf 91       	pop	r28
   165c8:	1f 91       	pop	r17
   165ca:	0f 91       	pop	r16
   165cc:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   165ce:	90 e0       	ldi	r25, 0x00	; 0
   165d0:	80 e0       	ldi	r24, 0x00	; 0
   165d2:	f2 cf       	rjmp	.-28     	; 0x165b8 <EthernetUDP::parsePacket()+0x86>

000165d4 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   165d4:	cf 93       	push	r28
   165d6:	df 93       	push	r29
   165d8:	1f 92       	push	r1
   165da:	cd b7       	in	r28, 0x3d	; 61
   165dc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   165de:	fc 01       	movw	r30, r24
   165e0:	21 8d       	ldd	r18, Z+25	; 0x19
   165e2:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   165e4:	8f ef       	ldi	r24, 0xFF	; 255
   165e6:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   165e8:	23 2b       	or	r18, r19
   165ea:	59 f0       	breq	.+22     	; 0x16602 <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   165ec:	21 e0       	ldi	r18, 0x01	; 1
   165ee:	41 e0       	ldi	r20, 0x01	; 1
   165f0:	50 e0       	ldi	r21, 0x00	; 0
   165f2:	be 01       	movw	r22, r28
   165f4:	6f 5f       	subi	r22, 0xFF	; 255
   165f6:	7f 4f       	sbci	r23, 0xFF	; 255
   165f8:	84 85       	ldd	r24, Z+12	; 0x0c
   165fa:	0e 94 ad b1 	call	0x1635a	; 0x1635a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   165fe:	89 81       	ldd	r24, Y+1	; 0x01
   16600:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   16602:	0f 90       	pop	r0
   16604:	df 91       	pop	r29
   16606:	cf 91       	pop	r28
   16608:	08 95       	ret

0001660a <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   1660a:	cf 93       	push	r28
   1660c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   1660e:	60 e1       	ldi	r22, 0x10	; 16
   16610:	70 e0       	ldi	r23, 0x00	; 0
   16612:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   16616:	4f ef       	ldi	r20, 0xFF	; 255
   16618:	62 e0       	ldi	r22, 0x02	; 2
   1661a:	70 e0       	ldi	r23, 0x00	; 0
   1661c:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   1661e:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   16620:	0c 94 22 b1 	jmp	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00016624 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   16624:	0f 93       	push	r16
   16626:	1f 93       	push	r17
   16628:	cf 93       	push	r28
   1662a:	df 93       	push	r29
   1662c:	c8 2f       	mov	r28, r24
   1662e:	d6 2f       	mov	r29, r22
   16630:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   16632:	0e 94 05 b3 	call	0x1660a	; 0x1660a <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   16636:	4d 2f       	mov	r20, r29
   16638:	70 e0       	ldi	r23, 0x00	; 0
   1663a:	60 e0       	ldi	r22, 0x00	; 0
   1663c:	8c 2f       	mov	r24, r28
   1663e:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   16642:	01 15       	cp	r16, r1
   16644:	11 05       	cpc	r17, r1
   16646:	b9 f0       	breq	.+46     	; 0x16676 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   16648:	41 2f       	mov	r20, r17
   1664a:	64 e0       	ldi	r22, 0x04	; 4
   1664c:	70 e0       	ldi	r23, 0x00	; 0
   1664e:	8c 2f       	mov	r24, r28
   16650:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   16654:	40 2f       	mov	r20, r16
   16656:	65 e0       	ldi	r22, 0x05	; 5
   16658:	70 e0       	ldi	r23, 0x00	; 0
   1665a:	8c 2f       	mov	r24, r28
   1665c:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   16660:	61 e0       	ldi	r22, 0x01	; 1
   16662:	70 e0       	ldi	r23, 0x00	; 0
   16664:	8c 2f       	mov	r24, r28
   16666:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   1666a:	81 e0       	ldi	r24, 0x01	; 1
   1666c:	df 91       	pop	r29
   1666e:	cf 91       	pop	r28
   16670:	1f 91       	pop	r17
   16672:	0f 91       	pop	r16
   16674:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   16676:	00 91 65 11 	lds	r16, 0x1165	; 0x801165 <local_port>
   1667a:	10 91 66 11 	lds	r17, 0x1166	; 0x801166 <local_port+0x1>
   1667e:	0f 5f       	subi	r16, 0xFF	; 255
   16680:	1f 4f       	sbci	r17, 0xFF	; 255
   16682:	10 93 66 11 	sts	0x1166, r17	; 0x801166 <local_port+0x1>
   16686:	00 93 65 11 	sts	0x1165, r16	; 0x801165 <local_port>
   1668a:	de cf       	rjmp	.-68     	; 0x16648 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

0001668c <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   1668c:	ef 92       	push	r14
   1668e:	ff 92       	push	r15
   16690:	1f 93       	push	r17
   16692:	cf 93       	push	r28
   16694:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   16696:	fc 01       	movw	r30, r24
   16698:	24 85       	ldd	r18, Z+12	; 0x0c
   1669a:	28 30       	cpi	r18, 0x08	; 8
   1669c:	39 f0       	breq	.+14     	; 0x166ac <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   1669e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   166a0:	df 91       	pop	r29
   166a2:	cf 91       	pop	r28
   166a4:	1f 91       	pop	r17
   166a6:	ff 90       	pop	r15
   166a8:	ef 90       	pop	r14
   166aa:	08 95       	ret
   166ac:	7b 01       	movw	r14, r22
   166ae:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   166b0:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   166b2:	63 e0       	ldi	r22, 0x03	; 3
   166b4:	70 e0       	ldi	r23, 0x00	; 0
   166b6:	81 2f       	mov	r24, r17
   166b8:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   166bc:	81 11       	cpse	r24, r1
   166be:	0e c0       	rjmp	.+28     	; 0x166dc <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   166c0:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   166c2:	8c 85       	ldd	r24, Y+12	; 0x0c
   166c4:	88 30       	cpi	r24, 0x08	; 8
   166c6:	59 f3       	breq	.-42     	; 0x1669e <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   166c8:	fe 86       	std	Y+14, r15	; 0x0e
   166ca:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   166cc:	1a 8e       	std	Y+26, r1	; 0x1a
   166ce:	19 8e       	std	Y+25, r1	; 0x19
socket():
   166d0:	a7 01       	movw	r20, r14
   166d2:	62 e0       	ldi	r22, 0x02	; 2
   166d4:	0e 94 12 b3 	call	0x16624	; 0x16624 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   166d8:	81 e0       	ldi	r24, 0x01	; 1
   166da:	e2 cf       	rjmp	.-60     	; 0x166a0 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   166dc:	88 31       	cpi	r24, 0x18	; 24
   166de:	81 f3       	breq	.-32     	; 0x166c0 <EthernetUDP::begin(unsigned int)+0x34>
   166e0:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   166e2:	18 30       	cpi	r17, 0x08	; 8
   166e4:	31 f7       	brne	.-52     	; 0x166b2 <EthernetUDP::begin(unsigned int)+0x26>
   166e6:	ed cf       	rjmp	.-38     	; 0x166c2 <EthernetUDP::begin(unsigned int)+0x36>

000166e8 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   166e8:	cf 93       	push	r28
   166ea:	df 93       	push	r29
   166ec:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   166ee:	8c 85       	ldd	r24, Y+12	; 0x0c
   166f0:	88 30       	cpi	r24, 0x08	; 8
   166f2:	21 f0       	breq	.+8      	; 0x166fc <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   166f4:	0e 94 05 b3 	call	0x1660a	; 0x1660a <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   166f8:	88 e0       	ldi	r24, 0x08	; 8
   166fa:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   166fc:	df 91       	pop	r29
   166fe:	cf 91       	pop	r28
   16700:	08 95       	ret

00016702 <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   16702:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   16704:	fc 01       	movw	r30, r24
   16706:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   16708:	60 e2       	ldi	r22, 0x20	; 32
   1670a:	70 e0       	ldi	r23, 0x00	; 0
   1670c:	8c 2f       	mov	r24, r28
   1670e:	0e 94 9d b1 	call	0x1633a	; 0x1633a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   16712:	62 e0       	ldi	r22, 0x02	; 2
   16714:	70 e0       	ldi	r23, 0x00	; 0
   16716:	8c 2f       	mov	r24, r28
   16718:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   1671c:	84 fd       	sbrc	r24, 4
   1671e:	11 c0       	rjmp	.+34     	; 0x16742 <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   16720:	62 e0       	ldi	r22, 0x02	; 2
   16722:	70 e0       	ldi	r23, 0x00	; 0
   16724:	8c 2f       	mov	r24, r28
   16726:	0e 94 56 46 	call	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   1672a:	83 ff       	sbrs	r24, 3
   1672c:	f2 cf       	rjmp	.-28     	; 0x16712 <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   1672e:	48 e1       	ldi	r20, 0x18	; 24
   16730:	62 e0       	ldi	r22, 0x02	; 2
   16732:	70 e0       	ldi	r23, 0x00	; 0
   16734:	8c 2f       	mov	r24, r28
   16736:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   1673a:	90 e0       	ldi	r25, 0x00	; 0
   1673c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   1673e:	cf 91       	pop	r28
   16740:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   16742:	40 e1       	ldi	r20, 0x10	; 16
   16744:	62 e0       	ldi	r22, 0x02	; 2
   16746:	70 e0       	ldi	r23, 0x00	; 0
   16748:	8c 2f       	mov	r24, r28
   1674a:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   1674e:	81 e0       	ldi	r24, 0x01	; 1
   16750:	90 e0       	ldi	r25, 0x00	; 0
   16752:	f5 cf       	rjmp	.-22     	; 0x1673e <EthernetUDP::endPacket()+0x3c>

00016754 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   16754:	1f 93       	push	r17
   16756:	cf 93       	push	r28
   16758:	df 93       	push	r29
   1675a:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   1675c:	dc 01       	movw	r26, r24
   1675e:	58 96       	adiw	r26, 0x18	; 24
   16760:	1c 92       	st	X, r1
   16762:	1e 92       	st	-X, r1
   16764:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   16766:	22 81       	ldd	r18, Z+2	; 0x02
   16768:	21 11       	cpse	r18, r1
   1676a:	09 c0       	rjmp	.+18     	; 0x1677e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   1676c:	23 81       	ldd	r18, Z+3	; 0x03
   1676e:	21 11       	cpse	r18, r1
   16770:	06 c0       	rjmp	.+12     	; 0x1677e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   16772:	24 81       	ldd	r18, Z+4	; 0x04
   16774:	21 11       	cpse	r18, r1
   16776:	03 c0       	rjmp	.+6      	; 0x1677e <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   16778:	25 81       	ldd	r18, Z+5	; 0x05
   1677a:	22 23       	and	r18, r18
   1677c:	39 f1       	breq	.+78     	; 0x167cc <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1677e:	41 15       	cp	r20, r1
   16780:	51 05       	cpc	r21, r1
   16782:	21 f1       	breq	.+72     	; 0x167cc <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   16784:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   16786:	dc 01       	movw	r26, r24
   16788:	1c 96       	adiw	r26, 0x0c	; 12
   1678a:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1678c:	af 01       	movw	r20, r30
   1678e:	4e 5f       	subi	r20, 0xFE	; 254
   16790:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   16792:	61 2f       	mov	r22, r17
   16794:	62 95       	swap	r22
   16796:	66 0f       	add	r22, r22
   16798:	60 7e       	andi	r22, 0xE0	; 224
   1679a:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   1679c:	24 e0       	ldi	r18, 0x04	; 4
   1679e:	30 e0       	ldi	r19, 0x00	; 0
   167a0:	8c e0       	ldi	r24, 0x0C	; 12
   167a2:	90 e0       	ldi	r25, 0x00	; 0
   167a4:	0e 94 6e b0 	call	0x160dc	; 0x160dc <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   167a8:	4d 2f       	mov	r20, r29
   167aa:	60 e1       	ldi	r22, 0x10	; 16
   167ac:	70 e0       	ldi	r23, 0x00	; 0
   167ae:	81 2f       	mov	r24, r17
   167b0:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   167b4:	4c 2f       	mov	r20, r28
   167b6:	61 e1       	ldi	r22, 0x11	; 17
   167b8:	70 e0       	ldi	r23, 0x00	; 0
   167ba:	81 2f       	mov	r24, r17
   167bc:	0e 94 22 b1 	call	0x16244	; 0x16244 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   167c0:	81 e0       	ldi	r24, 0x01	; 1
   167c2:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   167c4:	df 91       	pop	r29
   167c6:	cf 91       	pop	r28
   167c8:	1f 91       	pop	r17
   167ca:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   167cc:	90 e0       	ldi	r25, 0x00	; 0
   167ce:	80 e0       	ldi	r24, 0x00	; 0
   167d0:	f9 cf       	rjmp	.-14     	; 0x167c4 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

000167d2 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   167d2:	fc 01       	movw	r30, r24
   167d4:	84 85       	ldd	r24, Z+12	; 0x0c
   167d6:	88 30       	cpi	r24, 0x08	; 8
   167d8:	21 f0       	breq	.+8      	; 0x167e2 <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   167da:	63 e0       	ldi	r22, 0x03	; 3
   167dc:	70 e0       	ldi	r23, 0x00	; 0
   167de:	0c 94 56 46 	jmp	0x8cac	; 0x8cac <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   167e2:	80 e0       	ldi	r24, 0x00	; 0
   167e4:	08 95       	ret

000167e6 <localtime>:
localtime():
   167e6:	64 eb       	ldi	r22, 0xB4	; 180
   167e8:	73 e1       	ldi	r23, 0x13	; 19
   167ea:	0e 94 fa b3 	call	0x167f4	; 0x167f4 <localtime_r>
   167ee:	84 eb       	ldi	r24, 0xB4	; 180
   167f0:	93 e1       	ldi	r25, 0x13	; 19
   167f2:	08 95       	ret

000167f4 <localtime_r>:
localtime_r():
   167f4:	cf 92       	push	r12
   167f6:	df 92       	push	r13
   167f8:	ef 92       	push	r14
   167fa:	ff 92       	push	r15
   167fc:	0f 93       	push	r16
   167fe:	1f 93       	push	r17
   16800:	cf 93       	push	r28
   16802:	df 93       	push	r29
   16804:	00 d0       	rcall	.+0      	; 0x16806 <localtime_r+0x12>
   16806:	1f 92       	push	r1
   16808:	cd b7       	in	r28, 0x3d	; 61
   1680a:	de b7       	in	r29, 0x3e	; 62
   1680c:	6c 01       	movw	r12, r24
   1680e:	7b 01       	movw	r14, r22
   16810:	e0 91 ca 13 	lds	r30, 0x13CA	; 0x8013ca <__dst_ptr>
   16814:	f0 91 cb 13 	lds	r31, 0x13CB	; 0x8013cb <__dst_ptr+0x1>
   16818:	0f ef       	ldi	r16, 0xFF	; 255
   1681a:	1f ef       	ldi	r17, 0xFF	; 255
   1681c:	30 97       	sbiw	r30, 0x00	; 0
   1681e:	21 f0       	breq	.+8      	; 0x16828 <localtime_r+0x34>
   16820:	60 ec       	ldi	r22, 0xC0	; 192
   16822:	73 e1       	ldi	r23, 0x13	; 19
   16824:	19 95       	eicall
   16826:	8c 01       	movw	r16, r24
   16828:	f6 01       	movw	r30, r12
   1682a:	80 81       	ld	r24, Z
   1682c:	91 81       	ldd	r25, Z+1	; 0x01
   1682e:	a2 81       	ldd	r26, Z+2	; 0x02
   16830:	b3 81       	ldd	r27, Z+3	; 0x03
   16832:	40 91 c0 13 	lds	r20, 0x13C0	; 0x8013c0 <__utc_offset>
   16836:	50 91 c1 13 	lds	r21, 0x13C1	; 0x8013c1 <__utc_offset+0x1>
   1683a:	60 91 c2 13 	lds	r22, 0x13C2	; 0x8013c2 <__utc_offset+0x2>
   1683e:	70 91 c3 13 	lds	r23, 0x13C3	; 0x8013c3 <__utc_offset+0x3>
   16842:	84 0f       	add	r24, r20
   16844:	95 1f       	adc	r25, r21
   16846:	a6 1f       	adc	r26, r22
   16848:	b7 1f       	adc	r27, r23
   1684a:	10 16       	cp	r1, r16
   1684c:	11 06       	cpc	r1, r17
   1684e:	cc f0       	brlt	.+50     	; 0x16882 <localtime_r+0x8e>
   16850:	89 83       	std	Y+1, r24	; 0x01
   16852:	9a 83       	std	Y+2, r25	; 0x02
   16854:	ab 83       	std	Y+3, r26	; 0x03
   16856:	bc 83       	std	Y+4, r27	; 0x04
   16858:	b7 01       	movw	r22, r14
   1685a:	ce 01       	movw	r24, r28
   1685c:	01 96       	adiw	r24, 0x01	; 1
   1685e:	0e 94 4b b4 	call	0x16896	; 0x16896 <gmtime_r>
   16862:	f7 01       	movw	r30, r14
   16864:	13 87       	std	Z+11, r17	; 0x0b
   16866:	02 87       	std	Z+10, r16	; 0x0a
   16868:	0f 90       	pop	r0
   1686a:	0f 90       	pop	r0
   1686c:	0f 90       	pop	r0
   1686e:	0f 90       	pop	r0
   16870:	df 91       	pop	r29
   16872:	cf 91       	pop	r28
   16874:	1f 91       	pop	r17
   16876:	0f 91       	pop	r16
   16878:	ff 90       	pop	r15
   1687a:	ef 90       	pop	r14
   1687c:	df 90       	pop	r13
   1687e:	cf 90       	pop	r12
   16880:	08 95       	ret
   16882:	a8 01       	movw	r20, r16
   16884:	01 2e       	mov	r0, r17
   16886:	00 0c       	add	r0, r0
   16888:	66 0b       	sbc	r22, r22
   1688a:	77 0b       	sbc	r23, r23
   1688c:	84 0f       	add	r24, r20
   1688e:	95 1f       	adc	r25, r21
   16890:	a6 1f       	adc	r26, r22
   16892:	b7 1f       	adc	r27, r23
   16894:	dd cf       	rjmp	.-70     	; 0x16850 <localtime_r+0x5c>

00016896 <gmtime_r>:
gmtime_r():
   16896:	cf 92       	push	r12
   16898:	df 92       	push	r13
   1689a:	ef 92       	push	r14
   1689c:	ff 92       	push	r15
   1689e:	0f 93       	push	r16
   168a0:	1f 93       	push	r17
   168a2:	cf 93       	push	r28
   168a4:	df 93       	push	r29
   168a6:	00 d0       	rcall	.+0      	; 0x168a8 <gmtime_r+0x12>
   168a8:	00 d0       	rcall	.+0      	; 0x168aa <gmtime_r+0x14>
   168aa:	1f 92       	push	r1
   168ac:	1f 92       	push	r1
   168ae:	cd b7       	in	r28, 0x3d	; 61
   168b0:	de b7       	in	r29, 0x3e	; 62
   168b2:	8b 01       	movw	r16, r22
   168b4:	fc 01       	movw	r30, r24
   168b6:	60 81       	ld	r22, Z
   168b8:	71 81       	ldd	r23, Z+1	; 0x01
   168ba:	82 81       	ldd	r24, Z+2	; 0x02
   168bc:	93 81       	ldd	r25, Z+3	; 0x03
   168be:	20 e8       	ldi	r18, 0x80	; 128
   168c0:	31 e5       	ldi	r19, 0x51	; 81
   168c2:	41 e0       	ldi	r20, 0x01	; 1
   168c4:	50 e0       	ldi	r21, 0x00	; 0
   168c6:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   168ca:	69 01       	movw	r12, r18
   168cc:	7a 01       	movw	r14, r20
   168ce:	2c e3       	ldi	r18, 0x3C	; 60
   168d0:	30 e0       	ldi	r19, 0x00	; 0
   168d2:	40 e0       	ldi	r20, 0x00	; 0
   168d4:	50 e0       	ldi	r21, 0x00	; 0
   168d6:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
   168da:	29 83       	std	Y+1, r18	; 0x01
   168dc:	3a 83       	std	Y+2, r19	; 0x02
   168de:	4b 83       	std	Y+3, r20	; 0x03
   168e0:	5c 83       	std	Y+4, r21	; 0x04
   168e2:	89 81       	ldd	r24, Y+1	; 0x01
   168e4:	9a 81       	ldd	r25, Y+2	; 0x02
   168e6:	ab 81       	ldd	r26, Y+3	; 0x03
   168e8:	bc 81       	ldd	r27, Y+4	; 0x04
   168ea:	f8 01       	movw	r30, r16
   168ec:	60 83       	st	Z, r22
   168ee:	6c e3       	ldi	r22, 0x3C	; 60
   168f0:	70 e0       	ldi	r23, 0x00	; 0
   168f2:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   168f6:	dc 01       	movw	r26, r24
   168f8:	f8 01       	movw	r30, r16
   168fa:	a1 83       	std	Z+1, r26	; 0x01
   168fc:	62 83       	std	Z+2, r22	; 0x02
   168fe:	c6 01       	movw	r24, r12
   16900:	06 96       	adiw	r24, 0x06	; 6
   16902:	67 e0       	ldi	r22, 0x07	; 7
   16904:	70 e0       	ldi	r23, 0x00	; 0
   16906:	0e 94 bb cd 	call	0x19b76	; 0x19b76 <__udivmodhi4>
   1690a:	84 83       	std	Z+4, r24	; 0x04
   1690c:	2d ea       	ldi	r18, 0xAD	; 173
   1690e:	3e e8       	ldi	r19, 0x8E	; 142
   16910:	40 e0       	ldi	r20, 0x00	; 0
   16912:	50 e0       	ldi	r21, 0x00	; 0
   16914:	c7 01       	movw	r24, r14
   16916:	b6 01       	movw	r22, r12
   16918:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
   1691c:	29 83       	std	Y+1, r18	; 0x01
   1691e:	3a 83       	std	Y+2, r19	; 0x02
   16920:	6d 83       	std	Y+5, r22	; 0x05
   16922:	7e 83       	std	Y+6, r23	; 0x06
   16924:	8f 83       	std	Y+7, r24	; 0x07
   16926:	98 87       	std	Y+8, r25	; 0x08
   16928:	89 81       	ldd	r24, Y+1	; 0x01
   1692a:	9a 81       	ldd	r25, Y+2	; 0x02
   1692c:	24 e6       	ldi	r18, 0x64	; 100
   1692e:	28 9f       	mul	r18, r24
   16930:	60 01       	movw	r12, r0
   16932:	29 9f       	mul	r18, r25
   16934:	d0 0c       	add	r13, r0
   16936:	11 24       	eor	r1, r1
   16938:	6d 81       	ldd	r22, Y+5	; 0x05
   1693a:	7e 81       	ldd	r23, Y+6	; 0x06
   1693c:	8f 81       	ldd	r24, Y+7	; 0x07
   1693e:	98 85       	ldd	r25, Y+8	; 0x08
   16940:	25 eb       	ldi	r18, 0xB5	; 181
   16942:	35 e0       	ldi	r19, 0x05	; 5
   16944:	40 e0       	ldi	r20, 0x00	; 0
   16946:	50 e0       	ldi	r21, 0x00	; 0
   16948:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
   1694c:	29 83       	std	Y+1, r18	; 0x01
   1694e:	3a 83       	std	Y+2, r19	; 0x02
   16950:	6d 83       	std	Y+5, r22	; 0x05
   16952:	7e 83       	std	Y+6, r23	; 0x06
   16954:	e9 80       	ldd	r14, Y+1	; 0x01
   16956:	fa 80       	ldd	r15, Y+2	; 0x02
   16958:	ee 0c       	add	r14, r14
   1695a:	ff 1c       	adc	r15, r15
   1695c:	ee 0c       	add	r14, r14
   1695e:	ff 1c       	adc	r15, r15
   16960:	ec 0c       	add	r14, r12
   16962:	fd 1c       	adc	r15, r13
   16964:	8d 81       	ldd	r24, Y+5	; 0x05
   16966:	9e 81       	ldd	r25, Y+6	; 0x06
   16968:	f5 e6       	ldi	r31, 0x65	; 101
   1696a:	ef 16       	cp	r14, r31
   1696c:	f1 04       	cpc	r15, r1
   1696e:	08 f4       	brcc	.+2      	; 0x16972 <gmtime_r+0xdc>
   16970:	3f c0       	rjmp	.+126    	; 0x169f0 <gmtime_r+0x15a>
   16972:	01 96       	adiw	r24, 0x01	; 1
   16974:	21 e0       	ldi	r18, 0x01	; 1
   16976:	30 e0       	ldi	r19, 0x00	; 0
   16978:	a9 01       	movw	r20, r18
   1697a:	44 59       	subi	r20, 0x94	; 148
   1697c:	5e 4f       	sbci	r21, 0xFE	; 254
   1697e:	48 17       	cp	r20, r24
   16980:	59 07       	cpc	r21, r25
   16982:	60 f4       	brcc	.+24     	; 0x1699c <gmtime_r+0x106>
   16984:	6d e6       	ldi	r22, 0x6D	; 109
   16986:	71 e0       	ldi	r23, 0x01	; 1
   16988:	82 1b       	sub	r24, r18
   1698a:	93 0b       	sbc	r25, r19
   1698c:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   16990:	dc 01       	movw	r26, r24
   16992:	e6 0e       	add	r14, r22
   16994:	f7 1e       	adc	r15, r23
   16996:	cd 01       	movw	r24, r26
   16998:	30 e0       	ldi	r19, 0x00	; 0
   1699a:	20 e0       	ldi	r18, 0x00	; 0
   1699c:	44 e6       	ldi	r20, 0x64	; 100
   1699e:	e4 0e       	add	r14, r20
   169a0:	f1 1c       	adc	r15, r1
   169a2:	f8 01       	movw	r30, r16
   169a4:	f7 82       	std	Z+7, r15	; 0x07
   169a6:	e6 82       	std	Z+6, r14	; 0x06
   169a8:	91 87       	std	Z+9, r25	; 0x09
   169aa:	80 87       	std	Z+8, r24	; 0x08
   169ac:	25 5c       	subi	r18, 0xC5	; 197
   169ae:	3f 4f       	sbci	r19, 0xFF	; 255
   169b0:	82 17       	cp	r24, r18
   169b2:	93 07       	cpc	r25, r19
   169b4:	38 f5       	brcc	.+78     	; 0x16a04 <gmtime_r+0x16e>
   169b6:	6f e1       	ldi	r22, 0x1F	; 31
   169b8:	70 e0       	ldi	r23, 0x00	; 0
   169ba:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   169be:	dc 01       	movw	r26, r24
   169c0:	f8 01       	movw	r30, r16
   169c2:	65 83       	std	Z+5, r22	; 0x05
   169c4:	a3 83       	std	Z+3, r26	; 0x03
   169c6:	f8 01       	movw	r30, r16
   169c8:	13 86       	std	Z+11, r1	; 0x0b
   169ca:	12 86       	std	Z+10, r1	; 0x0a
   169cc:	83 81       	ldd	r24, Z+3	; 0x03
   169ce:	8f 5f       	subi	r24, 0xFF	; 255
   169d0:	83 83       	std	Z+3, r24	; 0x03
   169d2:	28 96       	adiw	r28, 0x08	; 8
   169d4:	0f b6       	in	r0, 0x3f	; 63
   169d6:	f8 94       	cli
   169d8:	de bf       	out	0x3e, r29	; 62
   169da:	0f be       	out	0x3f, r0	; 63
   169dc:	cd bf       	out	0x3d, r28	; 61
   169de:	df 91       	pop	r29
   169e0:	cf 91       	pop	r28
   169e2:	1f 91       	pop	r17
   169e4:	0f 91       	pop	r16
   169e6:	ff 90       	pop	r15
   169e8:	ef 90       	pop	r14
   169ea:	df 90       	pop	r13
   169ec:	cf 90       	pop	r12
   169ee:	08 95       	ret
   169f0:	51 e0       	ldi	r21, 0x01	; 1
   169f2:	40 e0       	ldi	r20, 0x00	; 0
   169f4:	24 e6       	ldi	r18, 0x64	; 100
   169f6:	e2 16       	cp	r14, r18
   169f8:	f1 04       	cpc	r15, r1
   169fa:	09 f4       	brne	.+2      	; 0x169fe <gmtime_r+0x168>
   169fc:	50 e0       	ldi	r21, 0x00	; 0
   169fe:	25 2f       	mov	r18, r21
   16a00:	34 2f       	mov	r19, r20
   16a02:	ba cf       	rjmp	.-140    	; 0x16978 <gmtime_r+0xe2>
   16a04:	69 e9       	ldi	r22, 0x99	; 153
   16a06:	70 e0       	ldi	r23, 0x00	; 0
   16a08:	82 1b       	sub	r24, r18
   16a0a:	93 0b       	sbc	r25, r19
   16a0c:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   16a10:	dc 01       	movw	r26, r24
   16a12:	26 2f       	mov	r18, r22
   16a14:	22 0f       	add	r18, r18
   16a16:	22 0f       	add	r18, r18
   16a18:	f2 2e       	mov	r15, r18
   16a1a:	f6 0e       	add	r15, r22
   16a1c:	6d e3       	ldi	r22, 0x3D	; 61
   16a1e:	70 e0       	ldi	r23, 0x00	; 0
   16a20:	cd 01       	movw	r24, r26
   16a22:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   16a26:	dc 01       	movw	r26, r24
   16a28:	e6 2e       	mov	r14, r22
   16a2a:	ee 0c       	add	r14, r14
   16a2c:	6f e1       	ldi	r22, 0x1F	; 31
   16a2e:	70 e0       	ldi	r23, 0x00	; 0
   16a30:	cd 01       	movw	r24, r26
   16a32:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   16a36:	dc 01       	movw	r26, r24
   16a38:	22 e0       	ldi	r18, 0x02	; 2
   16a3a:	26 0f       	add	r18, r22
   16a3c:	2f 0d       	add	r18, r15
   16a3e:	2e 0d       	add	r18, r14
   16a40:	f8 01       	movw	r30, r16
   16a42:	25 83       	std	Z+5, r18	; 0x05
   16a44:	bf cf       	rjmp	.-130    	; 0x169c4 <gmtime_r+0x12e>

00016a46 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   16a46:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   16a48:	80 81       	ld	r24, Z
   16a4a:	91 81       	ldd	r25, Z+1	; 0x01
   16a4c:	87 30       	cpi	r24, 0x07	; 7
   16a4e:	91 05       	cpc	r25, r1
   16a50:	38 f4       	brcc	.+14     	; 0x16a60 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   16a52:	85 30       	cpi	r24, 0x05	; 5
   16a54:	91 05       	cpc	r25, r1
   16a56:	88 f4       	brcc	.+34     	; 0x16a7a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   16a58:	03 97       	sbiw	r24, 0x03	; 3
   16a5a:	a0 f4       	brcc	.+40     	; 0x16a84 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   16a5c:	80 e0       	ldi	r24, 0x00	; 0
   16a5e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   16a60:	87 30       	cpi	r24, 0x07	; 7
   16a62:	91 05       	cpc	r25, r1
   16a64:	61 f0       	breq	.+24     	; 0x16a7e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   16a66:	0a 97       	sbiw	r24, 0x0a	; 10
   16a68:	c9 f7       	brne	.-14     	; 0x16a5c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   16a6a:	62 81       	ldd	r22, Z+2	; 0x02
   16a6c:	73 81       	ldd	r23, Z+3	; 0x03
   16a6e:	84 81       	ldd	r24, Z+4	; 0x04
   16a70:	95 81       	ldd	r25, Z+5	; 0x05
   16a72:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <__fixunssfsi>
   16a76:	86 2f       	mov	r24, r22
   16a78:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   16a7a:	82 81       	ldd	r24, Z+2	; 0x02
   16a7c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   16a7e:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   16a80:	81 95       	neg	r24
   16a82:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   16a84:	02 80       	ldd	r0, Z+2	; 0x02
   16a86:	f3 81       	ldd	r31, Z+3	; 0x03
   16a88:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   16a8a:	30 97       	sbiw	r30, 0x00	; 0
   16a8c:	39 f3       	breq	.-50     	; 0x16a5c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   16a8e:	80 81       	ld	r24, Z
   16a90:	84 37       	cpi	r24, 0x74	; 116
   16a92:	c9 f0       	breq	.+50     	; 0x16ac6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   16a94:	8b 32       	cpi	r24, 0x2B	; 43
   16a96:	89 f0       	breq	.+34     	; 0x16aba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   16a98:	8d 32       	cpi	r24, 0x2D	; 45
   16a9a:	81 f4       	brne	.+32     	; 0x16abc <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   16a9c:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   16a9e:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   16aa0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   16aa2:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   16aa4:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   16aa6:	30 ed       	ldi	r19, 0xD0	; 208
   16aa8:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   16aaa:	3a 30       	cpi	r19, 0x0A	; 10
   16aac:	48 f4       	brcc	.+18     	; 0x16ac0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   16aae:	82 9f       	mul	r24, r18
   16ab0:	60 0d       	add	r22, r0
   16ab2:	11 24       	eor	r1, r1
   16ab4:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   16ab6:	80 53       	subi	r24, 0x30	; 48
   16ab8:	f5 cf       	rjmp	.-22     	; 0x16aa4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   16aba:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   16abc:	90 e0       	ldi	r25, 0x00	; 0
   16abe:	f0 cf       	rjmp	.-32     	; 0x16aa0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   16ac0:	91 11       	cpse	r25, r1
   16ac2:	de cf       	rjmp	.-68     	; 0x16a80 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   16ac4:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   16ac6:	81 e0       	ldi	r24, 0x01	; 1
   16ac8:	fd cf       	rjmp	.-6      	; 0x16ac4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

00016aca <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7123():
   16aca:	0f 93       	push	r16
   16acc:	1f 93       	push	r17
   16ace:	cf 93       	push	r28
   16ad0:	df 93       	push	r29
   16ad2:	10 92 f9 0b 	sts	0x0BF9, r1	; 0x800bf9 <Serial+0x3>
   16ad6:	10 92 f8 0b 	sts	0x0BF8, r1	; 0x800bf8 <Serial+0x2>
   16ada:	88 ee       	ldi	r24, 0xE8	; 232
   16adc:	93 e0       	ldi	r25, 0x03	; 3
   16ade:	a0 e0       	ldi	r26, 0x00	; 0
   16ae0:	b0 e0       	ldi	r27, 0x00	; 0
   16ae2:	80 93 fa 0b 	sts	0x0BFA, r24	; 0x800bfa <Serial+0x4>
   16ae6:	90 93 fb 0b 	sts	0x0BFB, r25	; 0x800bfb <Serial+0x5>
   16aea:	a0 93 fc 0b 	sts	0x0BFC, r26	; 0x800bfc <Serial+0x6>
   16aee:	b0 93 fd 0b 	sts	0x0BFD, r27	; 0x800bfd <Serial+0x7>
   16af2:	2a e5       	ldi	r18, 0x5A	; 90
   16af4:	32 e0       	ldi	r19, 0x02	; 2
   16af6:	30 93 f7 0b 	sts	0x0BF7, r19	; 0x800bf7 <Serial+0x1>
   16afa:	20 93 f6 0b 	sts	0x0BF6, r18	; 0x800bf6 <Serial>
   16afe:	25 ec       	ldi	r18, 0xC5	; 197
   16b00:	30 e0       	ldi	r19, 0x00	; 0
   16b02:	30 93 03 0c 	sts	0x0C03, r19	; 0x800c03 <Serial+0xd>
   16b06:	20 93 02 0c 	sts	0x0C02, r18	; 0x800c02 <Serial+0xc>
   16b0a:	24 ec       	ldi	r18, 0xC4	; 196
   16b0c:	30 e0       	ldi	r19, 0x00	; 0
   16b0e:	30 93 05 0c 	sts	0x0C05, r19	; 0x800c05 <Serial+0xf>
   16b12:	20 93 04 0c 	sts	0x0C04, r18	; 0x800c04 <Serial+0xe>
   16b16:	20 ec       	ldi	r18, 0xC0	; 192
   16b18:	30 e0       	ldi	r19, 0x00	; 0
   16b1a:	30 93 07 0c 	sts	0x0C07, r19	; 0x800c07 <Serial+0x11>
   16b1e:	20 93 06 0c 	sts	0x0C06, r18	; 0x800c06 <Serial+0x10>
   16b22:	21 ec       	ldi	r18, 0xC1	; 193
   16b24:	30 e0       	ldi	r19, 0x00	; 0
   16b26:	30 93 09 0c 	sts	0x0C09, r19	; 0x800c09 <Serial+0x13>
   16b2a:	20 93 08 0c 	sts	0x0C08, r18	; 0x800c08 <Serial+0x12>
   16b2e:	22 ec       	ldi	r18, 0xC2	; 194
   16b30:	30 e0       	ldi	r19, 0x00	; 0
   16b32:	30 93 0b 0c 	sts	0x0C0B, r19	; 0x800c0b <Serial+0x15>
   16b36:	20 93 0a 0c 	sts	0x0C0A, r18	; 0x800c0a <Serial+0x14>
   16b3a:	26 ec       	ldi	r18, 0xC6	; 198
   16b3c:	30 e0       	ldi	r19, 0x00	; 0
   16b3e:	30 93 0d 0c 	sts	0x0C0D, r19	; 0x800c0d <Serial+0x17>
   16b42:	20 93 0c 0c 	sts	0x0C0C, r18	; 0x800c0c <Serial+0x16>
   16b46:	10 92 0f 0c 	sts	0x0C0F, r1	; 0x800c0f <Serial+0x19>
   16b4a:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <Serial+0x1a>
   16b4e:	10 92 11 0c 	sts	0x0C11, r1	; 0x800c11 <Serial+0x1b>
   16b52:	10 92 12 0c 	sts	0x0C12, r1	; 0x800c12 <Serial+0x1c>
   16b56:	c2 ee       	ldi	r28, 0xE2	; 226
   16b58:	d2 e0       	ldi	r29, 0x02	; 2
   16b5a:	d0 93 ba 11 	sts	0x11BA, r29	; 0x8011ba <_ZL11INADDR_NONE.lto_priv.208+0x1>
   16b5e:	c0 93 b9 11 	sts	0x11B9, r28	; 0x8011b9 <_ZL11INADDR_NONE.lto_priv.208>
   16b62:	10 92 bb 11 	sts	0x11BB, r1	; 0x8011bb <_ZL11INADDR_NONE.lto_priv.208+0x2>
   16b66:	10 92 bc 11 	sts	0x11BC, r1	; 0x8011bc <_ZL11INADDR_NONE.lto_priv.208+0x3>
   16b6a:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <_ZL11INADDR_NONE.lto_priv.208+0x4>
   16b6e:	10 92 be 11 	sts	0x11BE, r1	; 0x8011be <_ZL11INADDR_NONE.lto_priv.208+0x5>
   16b72:	10 92 85 0e 	sts	0x0E85, r1	; 0x800e85 <Wire+0x3>
   16b76:	10 92 84 0e 	sts	0x0E84, r1	; 0x800e84 <Wire+0x2>
   16b7a:	80 93 86 0e 	sts	0x0E86, r24	; 0x800e86 <Wire+0x4>
   16b7e:	90 93 87 0e 	sts	0x0E87, r25	; 0x800e87 <Wire+0x5>
   16b82:	a0 93 88 0e 	sts	0x0E88, r26	; 0x800e88 <Wire+0x6>
   16b86:	b0 93 89 0e 	sts	0x0E89, r27	; 0x800e89 <Wire+0x7>
   16b8a:	8c e6       	ldi	r24, 0x6C	; 108
   16b8c:	92 e0       	ldi	r25, 0x02	; 2
   16b8e:	90 93 83 0e 	sts	0x0E83, r25	; 0x800e83 <Wire+0x1>
   16b92:	80 93 82 0e 	sts	0x0E82, r24	; 0x800e82 <Wire>
   16b96:	d0 93 c0 11 	sts	0x11C0, r29	; 0x8011c0 <_ZL11INADDR_NONE.lto_priv.207+0x1>
   16b9a:	c0 93 bf 11 	sts	0x11BF, r28	; 0x8011bf <_ZL11INADDR_NONE.lto_priv.207>
   16b9e:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <_ZL11INADDR_NONE.lto_priv.207+0x2>
   16ba2:	10 92 c2 11 	sts	0x11C2, r1	; 0x8011c2 <_ZL11INADDR_NONE.lto_priv.207+0x3>
   16ba6:	10 92 c3 11 	sts	0x11C3, r1	; 0x8011c3 <_ZL11INADDR_NONE.lto_priv.207+0x4>
   16baa:	10 92 c4 11 	sts	0x11C4, r1	; 0x8011c4 <_ZL11INADDR_NONE.lto_priv.207+0x5>
   16bae:	80 e5       	ldi	r24, 0x50	; 80
   16bb0:	80 93 c5 11 	sts	0x11C5, r24	; 0x8011c5 <wiznet_SPI_settings>
   16bb4:	81 e0       	ldi	r24, 0x01	; 1
   16bb6:	80 93 c6 11 	sts	0x11C6, r24	; 0x8011c6 <wiznet_SPI_settings+0x1>
   16bba:	d0 93 c8 11 	sts	0x11C8, r29	; 0x8011c8 <_ZL11INADDR_NONE.lto_priv.206+0x1>
   16bbe:	c0 93 c7 11 	sts	0x11C7, r28	; 0x8011c7 <_ZL11INADDR_NONE.lto_priv.206>
   16bc2:	10 92 c9 11 	sts	0x11C9, r1	; 0x8011c9 <_ZL11INADDR_NONE.lto_priv.206+0x2>
   16bc6:	10 92 ca 11 	sts	0x11CA, r1	; 0x8011ca <_ZL11INADDR_NONE.lto_priv.206+0x3>
   16bca:	10 92 cb 11 	sts	0x11CB, r1	; 0x8011cb <_ZL11INADDR_NONE.lto_priv.206+0x4>
   16bce:	10 92 cc 11 	sts	0x11CC, r1	; 0x8011cc <_ZL11INADDR_NONE.lto_priv.206+0x5>
   16bd2:	d0 93 ce 11 	sts	0x11CE, r29	; 0x8011ce <_ZL11INADDR_NONE.lto_priv.205+0x1>
   16bd6:	c0 93 cd 11 	sts	0x11CD, r28	; 0x8011cd <_ZL11INADDR_NONE.lto_priv.205>
   16bda:	10 92 cf 11 	sts	0x11CF, r1	; 0x8011cf <_ZL11INADDR_NONE.lto_priv.205+0x2>
   16bde:	10 92 d0 11 	sts	0x11D0, r1	; 0x8011d0 <_ZL11INADDR_NONE.lto_priv.205+0x3>
   16be2:	10 92 d1 11 	sts	0x11D1, r1	; 0x8011d1 <_ZL11INADDR_NONE.lto_priv.205+0x4>
   16be6:	10 92 d2 11 	sts	0x11D2, r1	; 0x8011d2 <_ZL11INADDR_NONE.lto_priv.205+0x5>
   16bea:	d0 93 d4 11 	sts	0x11D4, r29	; 0x8011d4 <_ZL11INADDR_NONE.lto_priv.204+0x1>
   16bee:	c0 93 d3 11 	sts	0x11D3, r28	; 0x8011d3 <_ZL11INADDR_NONE.lto_priv.204>
   16bf2:	10 92 d5 11 	sts	0x11D5, r1	; 0x8011d5 <_ZL11INADDR_NONE.lto_priv.204+0x2>
   16bf6:	10 92 d6 11 	sts	0x11D6, r1	; 0x8011d6 <_ZL11INADDR_NONE.lto_priv.204+0x3>
   16bfa:	10 92 d7 11 	sts	0x11D7, r1	; 0x8011d7 <_ZL11INADDR_NONE.lto_priv.204+0x4>
   16bfe:	10 92 d8 11 	sts	0x11D8, r1	; 0x8011d8 <_ZL11INADDR_NONE.lto_priv.204+0x5>
   16c02:	d0 93 da 11 	sts	0x11DA, r29	; 0x8011da <_ZL11INADDR_NONE.lto_priv.203+0x1>
   16c06:	c0 93 d9 11 	sts	0x11D9, r28	; 0x8011d9 <_ZL11INADDR_NONE.lto_priv.203>
   16c0a:	10 92 db 11 	sts	0x11DB, r1	; 0x8011db <_ZL11INADDR_NONE.lto_priv.203+0x2>
   16c0e:	10 92 dc 11 	sts	0x11DC, r1	; 0x8011dc <_ZL11INADDR_NONE.lto_priv.203+0x3>
   16c12:	10 92 dd 11 	sts	0x11DD, r1	; 0x8011dd <_ZL11INADDR_NONE.lto_priv.203+0x4>
   16c16:	10 92 de 11 	sts	0x11DE, r1	; 0x8011de <_ZL11INADDR_NONE.lto_priv.203+0x5>
   16c1a:	d0 93 e0 11 	sts	0x11E0, r29	; 0x8011e0 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   16c1e:	c0 93 df 11 	sts	0x11DF, r28	; 0x8011df <_ZL11INADDR_NONE.lto_priv.202>
   16c22:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   16c26:	10 92 e2 11 	sts	0x11E2, r1	; 0x8011e2 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   16c2a:	10 92 e3 11 	sts	0x11E3, r1	; 0x8011e3 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   16c2e:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   16c32:	d0 93 94 0c 	sts	0x0C94, r29	; 0x800c94 <Ethernet+0x1>
   16c36:	c0 93 93 0c 	sts	0x0C93, r28	; 0x800c93 <Ethernet>
   16c3a:	10 92 95 0c 	sts	0x0C95, r1	; 0x800c95 <Ethernet+0x2>
   16c3e:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <Ethernet+0x3>
   16c42:	10 92 97 0c 	sts	0x0C97, r1	; 0x800c97 <Ethernet+0x4>
   16c46:	10 92 98 0c 	sts	0x0C98, r1	; 0x800c98 <Ethernet+0x5>
   16c4a:	10 92 9e 0c 	sts	0x0C9E, r1	; 0x800c9e <Ethernet+0xb>
   16c4e:	10 92 9d 0c 	sts	0x0C9D, r1	; 0x800c9d <Ethernet+0xa>
   16c52:	8a e0       	ldi	r24, 0x0A	; 10
   16c54:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <Ethernet+0xc>
   16c58:	d0 93 a1 0c 	sts	0x0CA1, r29	; 0x800ca1 <_ZL11INADDR_NONE.lto_priv.201+0x1>
   16c5c:	c0 93 a0 0c 	sts	0x0CA0, r28	; 0x800ca0 <_ZL11INADDR_NONE.lto_priv.201>
   16c60:	10 92 a2 0c 	sts	0x0CA2, r1	; 0x800ca2 <_ZL11INADDR_NONE.lto_priv.201+0x2>
   16c64:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <_ZL11INADDR_NONE.lto_priv.201+0x3>
   16c68:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <_ZL11INADDR_NONE.lto_priv.201+0x4>
   16c6c:	10 92 a5 0c 	sts	0x0CA5, r1	; 0x800ca5 <_ZL11INADDR_NONE.lto_priv.201+0x5>
   16c70:	d0 93 e6 11 	sts	0x11E6, r29	; 0x8011e6 <_ZL11INADDR_NONE.lto_priv.200+0x1>
   16c74:	c0 93 e5 11 	sts	0x11E5, r28	; 0x8011e5 <_ZL11INADDR_NONE.lto_priv.200>
   16c78:	10 92 e7 11 	sts	0x11E7, r1	; 0x8011e7 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   16c7c:	10 92 e8 11 	sts	0x11E8, r1	; 0x8011e8 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   16c80:	10 92 e9 11 	sts	0x11E9, r1	; 0x8011e9 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   16c84:	10 92 ea 11 	sts	0x11EA, r1	; 0x8011ea <_ZL11INADDR_NONE.lto_priv.200+0x5>
   16c88:	8a e0       	ldi	r24, 0x0A	; 10
   16c8a:	90 e0       	ldi	r25, 0x00	; 0
   16c8c:	0e 94 40 c8 	call	0x19080	; 0x19080 <malloc>
   16c90:	90 93 a7 0c 	sts	0x0CA7, r25	; 0x800ca7 <array_pids+0x1>
   16c94:	80 93 a6 0c 	sts	0x0CA6, r24	; 0x800ca6 <array_pids>
   16c98:	d0 93 ec 11 	sts	0x11EC, r29	; 0x8011ec <_ZL11INADDR_NONE.lto_priv.199+0x1>
   16c9c:	c0 93 eb 11 	sts	0x11EB, r28	; 0x8011eb <_ZL11INADDR_NONE.lto_priv.199>
   16ca0:	10 92 ed 11 	sts	0x11ED, r1	; 0x8011ed <_ZL11INADDR_NONE.lto_priv.199+0x2>
   16ca4:	10 92 ee 11 	sts	0x11EE, r1	; 0x8011ee <_ZL11INADDR_NONE.lto_priv.199+0x3>
   16ca8:	10 92 ef 11 	sts	0x11EF, r1	; 0x8011ef <_ZL11INADDR_NONE.lto_priv.199+0x4>
   16cac:	10 92 f0 11 	sts	0x11F0, r1	; 0x8011f0 <_ZL11INADDR_NONE.lto_priv.199+0x5>
   16cb0:	d0 93 f2 11 	sts	0x11F2, r29	; 0x8011f2 <_ZL11INADDR_NONE.lto_priv.198+0x1>
   16cb4:	c0 93 f1 11 	sts	0x11F1, r28	; 0x8011f1 <_ZL11INADDR_NONE.lto_priv.198>
   16cb8:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <_ZL11INADDR_NONE.lto_priv.198+0x2>
   16cbc:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <_ZL11INADDR_NONE.lto_priv.198+0x3>
   16cc0:	10 92 f5 11 	sts	0x11F5, r1	; 0x8011f5 <_ZL11INADDR_NONE.lto_priv.198+0x4>
   16cc4:	10 92 f6 11 	sts	0x11F6, r1	; 0x8011f6 <_ZL11INADDR_NONE.lto_priv.198+0x5>
   16cc8:	8b e5       	ldi	r24, 0x5B	; 91
   16cca:	97 e0       	ldi	r25, 0x07	; 7
   16ccc:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <device+0x25>
   16cd0:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <device+0x24>
   16cd4:	d0 93 a7 13 	sts	0x13A7, r29	; 0x8013a7 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   16cd8:	c0 93 a6 13 	sts	0x13A6, r28	; 0x8013a6 <_ZL11INADDR_NONE.lto_priv.197>
   16cdc:	10 92 a8 13 	sts	0x13A8, r1	; 0x8013a8 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   16ce0:	10 92 a9 13 	sts	0x13A9, r1	; 0x8013a9 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   16ce4:	10 92 aa 13 	sts	0x13AA, r1	; 0x8013aa <_ZL11INADDR_NONE.lto_priv.197+0x4>
   16ce8:	10 92 ab 13 	sts	0x13AB, r1	; 0x8013ab <_ZL11INADDR_NONE.lto_priv.197+0x5>
   16cec:	88 e1       	ldi	r24, 0x18	; 24
   16cee:	80 93 de 10 	sts	0x10DE, r24	; 0x8010de <swSPI+0x4>
   16cf2:	8a e1       	ldi	r24, 0x1A	; 26
   16cf4:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <swSPI+0x3>
   16cf8:	89 e1       	ldi	r24, 0x19	; 25
   16cfa:	80 93 df 10 	sts	0x10DF, r24	; 0x8010df <swSPI+0x5>
   16cfe:	82 e0       	ldi	r24, 0x02	; 2
   16d00:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <swSPI+0x2>
   16d04:	10 92 da 10 	sts	0x10DA, r1	; 0x8010da <swSPI>
   16d08:	10 92 db 10 	sts	0x10DB, r1	; 0x8010db <swSPI+0x1>
   16d0c:	10 92 e0 10 	sts	0x10E0, r1	; 0x8010e0 <swSPI+0x6>
   16d10:	60 e0       	ldi	r22, 0x00	; 0
   16d12:	89 e1       	ldi	r24, 0x19	; 25
   16d14:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
   16d18:	80 e1       	ldi	r24, 0x10	; 16
   16d1a:	80 93 d8 10 	sts	0x10D8, r24	; 0x8010d8 <now+0x5>
   16d1e:	8c e1       	ldi	r24, 0x1C	; 28
   16d20:	80 93 d7 10 	sts	0x10D7, r24	; 0x8010d7 <now+0x4>
   16d24:	86 e0       	ldi	r24, 0x06	; 6
   16d26:	80 93 d6 10 	sts	0x10D6, r24	; 0x8010d6 <now+0x3>
   16d2a:	40 e0       	ldi	r20, 0x00	; 0
   16d2c:	81 e6       	ldi	r24, 0x61	; 97
   16d2e:	97 e9       	ldi	r25, 0x97	; 151
   16d30:	e3 e9       	ldi	r30, 0x93	; 147
   16d32:	fe ef       	ldi	r31, 0xFE	; 254
   16d34:	54 2f       	mov	r21, r20
   16d36:	53 70       	andi	r21, 0x03	; 3
   16d38:	21 e0       	ldi	r18, 0x01	; 1
   16d3a:	09 f0       	breq	.+2      	; 0x16d3e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x274>
   16d3c:	20 e0       	ldi	r18, 0x00	; 0
   16d3e:	61 e0       	ldi	r22, 0x01	; 1
   16d40:	64 0f       	add	r22, r20
   16d42:	30 e0       	ldi	r19, 0x00	; 0
   16d44:	d9 01       	movw	r26, r18
   16d46:	a3 59       	subi	r26, 0x93	; 147
   16d48:	be 4f       	sbci	r27, 0xFE	; 254
   16d4a:	8a 17       	cp	r24, r26
   16d4c:	9b 07       	cpc	r25, r27
   16d4e:	38 f0       	brcs	.+14     	; 0x16d5e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x294>
   16d50:	af 01       	movw	r20, r30
   16d52:	42 1b       	sub	r20, r18
   16d54:	53 0b       	sbc	r21, r19
   16d56:	84 0f       	add	r24, r20
   16d58:	95 1f       	adc	r25, r21
   16d5a:	46 2f       	mov	r20, r22
   16d5c:	eb cf       	rjmp	.-42     	; 0x16d34 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x26a>
   16d5e:	40 93 d3 10 	sts	0x10D3, r20	; 0x8010d3 <now>
   16d62:	21 e0       	ldi	r18, 0x01	; 1
   16d64:	62 2f       	mov	r22, r18
   16d66:	61 50       	subi	r22, 0x01	; 1
   16d68:	77 0b       	sbc	r23, r23
   16d6a:	fb 01       	movw	r30, r22
   16d6c:	e5 54       	subi	r30, 0x45	; 69
   16d6e:	fe 49       	sbci	r31, 0x9E	; 158
   16d70:	e4 91       	lpm	r30, Z
   16d72:	51 11       	cpse	r21, r1
   16d74:	03 c0       	rjmp	.+6      	; 0x16d7c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x2b2>
   16d76:	22 30       	cpi	r18, 0x02	; 2
   16d78:	09 f4       	brne	.+2      	; 0x16d7c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x2b2>
   16d7a:	ef 5f       	subi	r30, 0xFF	; 255
   16d7c:	f0 e0       	ldi	r31, 0x00	; 0
   16d7e:	31 e0       	ldi	r19, 0x01	; 1
   16d80:	32 0f       	add	r19, r18
   16d82:	8e 17       	cp	r24, r30
   16d84:	9f 07       	cpc	r25, r31
   16d86:	20 f0       	brcs	.+8      	; 0x16d90 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x2c6>
   16d88:	8e 1b       	sub	r24, r30
   16d8a:	9f 0b       	sbc	r25, r31
   16d8c:	23 2f       	mov	r18, r19
   16d8e:	ea cf       	rjmp	.-44     	; 0x16d64 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x29a>
   16d90:	20 93 d4 10 	sts	0x10D4, r18	; 0x8010d4 <now+0x1>
   16d94:	8f 5f       	subi	r24, 0xFF	; 255
   16d96:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <now+0x2>
   16d9a:	10 92 9c 13 	sts	0x139C, r1	; 0x80139c <ethClient+0x3>
   16d9e:	10 92 9b 13 	sts	0x139B, r1	; 0x80139b <ethClient+0x2>
   16da2:	48 ee       	ldi	r20, 0xE8	; 232
   16da4:	53 e0       	ldi	r21, 0x03	; 3
   16da6:	60 e0       	ldi	r22, 0x00	; 0
   16da8:	70 e0       	ldi	r23, 0x00	; 0
   16daa:	40 93 9d 13 	sts	0x139D, r20	; 0x80139d <ethClient+0x4>
   16dae:	50 93 9e 13 	sts	0x139E, r21	; 0x80139e <ethClient+0x5>
   16db2:	60 93 9f 13 	sts	0x139F, r22	; 0x80139f <ethClient+0x6>
   16db6:	70 93 a0 13 	sts	0x13A0, r23	; 0x8013a0 <ethClient+0x7>
   16dba:	80 ec       	ldi	r24, 0xC0	; 192
   16dbc:	92 e0       	ldi	r25, 0x02	; 2
   16dbe:	90 93 9a 13 	sts	0x139A, r25	; 0x80139a <ethClient+0x1>
   16dc2:	80 93 99 13 	sts	0x1399, r24	; 0x801399 <ethClient>
   16dc6:	88 e0       	ldi	r24, 0x08	; 8
   16dc8:	80 93 a5 13 	sts	0x13A5, r24	; 0x8013a5 <ethClient+0xc>
   16dcc:	10 92 bb 10 	sts	0x10BB, r1	; 0x8010bb <udpClient+0x3>
   16dd0:	10 92 ba 10 	sts	0x10BA, r1	; 0x8010ba <udpClient+0x2>
   16dd4:	40 93 bc 10 	sts	0x10BC, r20	; 0x8010bc <udpClient+0x4>
   16dd8:	50 93 bd 10 	sts	0x10BD, r21	; 0x8010bd <udpClient+0x5>
   16ddc:	60 93 be 10 	sts	0x10BE, r22	; 0x8010be <udpClient+0x6>
   16de0:	70 93 bf 10 	sts	0x10BF, r23	; 0x8010bf <udpClient+0x7>
   16de4:	28 e9       	ldi	r18, 0x98	; 152
   16de6:	32 e0       	ldi	r19, 0x02	; 2
   16de8:	30 93 b9 10 	sts	0x10B9, r19	; 0x8010b9 <udpClient+0x1>
   16dec:	20 93 b8 10 	sts	0x10B8, r18	; 0x8010b8 <udpClient>
   16df0:	80 93 c4 10 	sts	0x10C4, r24	; 0x8010c4 <udpClient+0xc>
   16df4:	82 ee       	ldi	r24, 0xE2	; 226
   16df6:	92 e0       	ldi	r25, 0x02	; 2
   16df8:	90 93 c8 10 	sts	0x10C8, r25	; 0x8010c8 <udpClient+0x10>
   16dfc:	80 93 c7 10 	sts	0x10C7, r24	; 0x8010c7 <udpClient+0xf>
   16e00:	10 92 c9 10 	sts	0x10C9, r1	; 0x8010c9 <udpClient+0x11>
   16e04:	10 92 ca 10 	sts	0x10CA, r1	; 0x8010ca <udpClient+0x12>
   16e08:	10 92 cb 10 	sts	0x10CB, r1	; 0x8010cb <udpClient+0x13>
   16e0c:	10 92 cc 10 	sts	0x10CC, r1	; 0x8010cc <udpClient+0x14>
   16e10:	90 93 ab 10 	sts	0x10AB, r25	; 0x8010ab <mqtt_client+0x210>
   16e14:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <mqtt_client+0x20f>
   16e18:	10 92 ac 10 	sts	0x10AC, r1	; 0x8010ac <mqtt_client+0x211>
   16e1c:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <mqtt_client+0x212>
   16e20:	10 92 ae 10 	sts	0x10AE, r1	; 0x8010ae <mqtt_client+0x213>
   16e24:	10 92 af 10 	sts	0x10AF, r1	; 0x8010af <mqtt_client+0x214>
   16e28:	0f ef       	ldi	r16, 0xFF	; 255
   16e2a:	1f ef       	ldi	r17, 0xFF	; 255
   16e2c:	10 93 b7 10 	sts	0x10B7, r17	; 0x8010b7 <mqtt_client+0x21c>
   16e30:	00 93 b6 10 	sts	0x10B6, r16	; 0x8010b6 <mqtt_client+0x21b>
   16e34:	89 e9       	ldi	r24, 0x99	; 153
   16e36:	93 e1       	ldi	r25, 0x13	; 19
   16e38:	90 93 9c 0e 	sts	0x0E9C, r25	; 0x800e9c <mqtt_client+0x1>
   16e3c:	80 93 9b 0e 	sts	0x0E9B, r24	; 0x800e9b <mqtt_client>
   16e40:	10 92 b5 10 	sts	0x10B5, r1	; 0x8010b5 <mqtt_client+0x21a>
   16e44:	10 92 b4 10 	sts	0x10B4, r1	; 0x8010b4 <mqtt_client+0x219>
   16e48:	81 e8       	ldi	r24, 0x81	; 129
   16e4a:	93 e1       	ldi	r25, 0x13	; 19
   16e4c:	23 e0       	ldi	r18, 0x03	; 3
   16e4e:	30 e0       	ldi	r19, 0x00	; 0
   16e50:	30 93 82 13 	sts	0x1382, r19	; 0x801382 <radio+0x1>
   16e54:	20 93 81 13 	sts	0x1381, r18	; 0x801381 <radio>
   16e58:	22 e0       	ldi	r18, 0x02	; 2
   16e5a:	30 e0       	ldi	r19, 0x00	; 0
   16e5c:	30 93 84 13 	sts	0x1384, r19	; 0x801384 <radio+0x3>
   16e60:	20 93 83 13 	sts	0x1383, r18	; 0x801383 <radio+0x2>
   16e64:	10 92 87 13 	sts	0x1387, r1	; 0x801387 <radio+0x6>
   16e68:	20 e2       	ldi	r18, 0x20	; 32
   16e6a:	20 93 88 13 	sts	0x1388, r18	; 0x801388 <radio+0x7>
   16e6e:	10 92 89 13 	sts	0x1389, r1	; 0x801389 <radio+0x8>
   16e72:	25 e0       	ldi	r18, 0x05	; 5
   16e74:	20 93 8f 13 	sts	0x138F, r18	; 0x80138f <radio+0xe>
   16e78:	45 e0       	ldi	r20, 0x05	; 5
   16e7a:	50 e0       	ldi	r21, 0x00	; 0
   16e7c:	60 e0       	ldi	r22, 0x00	; 0
   16e7e:	70 e0       	ldi	r23, 0x00	; 0
   16e80:	40 93 95 13 	sts	0x1395, r20	; 0x801395 <radio+0x14>
   16e84:	50 93 96 13 	sts	0x1396, r21	; 0x801396 <radio+0x15>
   16e88:	60 93 97 13 	sts	0x1397, r22	; 0x801397 <radio+0x16>
   16e8c:	70 93 98 13 	sts	0x1398, r23	; 0x801398 <radio+0x17>
   16e90:	10 92 8a 13 	sts	0x138A, r1	; 0x80138a <radio+0x9>
   16e94:	90 93 3f 12 	sts	0x123F, r25	; 0x80123f <network+0x30>
   16e98:	80 93 3e 12 	sts	0x123E, r24	; 0x80123e <network+0x2f>
   16e9c:	24 e4       	ldi	r18, 0x44	; 68
   16e9e:	32 e1       	ldi	r19, 0x12	; 18
   16ea0:	30 93 df 12 	sts	0x12DF, r19	; 0x8012df <network+0xd0>
   16ea4:	20 93 de 12 	sts	0x12DE, r18	; 0x8012de <network+0xcf>
   16ea8:	2c ee       	ldi	r18, 0xEC	; 236
   16eaa:	32 e1       	ldi	r19, 0x12	; 18
   16eac:	30 93 eb 12 	sts	0x12EB, r19	; 0x8012eb <network+0xdc>
   16eb0:	20 93 ea 12 	sts	0x12EA, r18	; 0x8012ea <network+0xdb>
   16eb4:	20 ee       	ldi	r18, 0xE0	; 224
   16eb6:	32 e1       	ldi	r19, 0x12	; 18
   16eb8:	30 93 37 12 	sts	0x1237, r19	; 0x801237 <network+0x28>
   16ebc:	20 93 36 12 	sts	0x1236, r18	; 0x801236 <network+0x27>
   16ec0:	10 92 3a 12 	sts	0x123A, r1	; 0x80123a <network+0x2b>
   16ec4:	10 92 3b 12 	sts	0x123B, r1	; 0x80123b <network+0x2c>
   16ec8:	10 92 3c 12 	sts	0x123C, r1	; 0x80123c <network+0x2d>
   16ecc:	10 92 3d 12 	sts	0x123D, r1	; 0x80123d <network+0x2e>
   16ed0:	10 92 39 12 	sts	0x1239, r1	; 0x801239 <network+0x2a>
   16ed4:	10 92 38 12 	sts	0x1238, r1	; 0x801238 <network+0x29>
   16ed8:	10 92 0f 12 	sts	0x120F, r1	; 0x80120f <network>
   16edc:	90 93 fe 11 	sts	0x11FE, r25	; 0x8011fe <mesh+0x7>
   16ee0:	80 93 fd 11 	sts	0x11FD, r24	; 0x8011fd <mesh+0x6>
   16ee4:	8f e0       	ldi	r24, 0x0F	; 15
   16ee6:	92 e1       	ldi	r25, 0x12	; 18
   16ee8:	90 93 00 12 	sts	0x1200, r25	; 0x801200 <mesh+0x9>
   16eec:	80 93 ff 11 	sts	0x11FF, r24	; 0x8011ff <mesh+0x8>
   16ef0:	82 e8       	ldi	r24, 0x82	; 130
   16ef2:	9e e0       	ldi	r25, 0x0E	; 14
   16ef4:	90 93 8f 0e 	sts	0x0E8F, r25	; 0x800e8f <lm75_temp+0x1>
   16ef8:	80 93 8e 0e 	sts	0x0E8E, r24	; 0x800e8e <lm75_temp>
   16efc:	88 e4       	ldi	r24, 0x48	; 72
   16efe:	80 93 90 0e 	sts	0x0E90, r24	; 0x800e90 <lm75_temp+0x2>
   16f02:	8a e0       	ldi	r24, 0x0A	; 10
   16f04:	92 e0       	ldi	r25, 0x02	; 2
   16f06:	90 93 9a 0e 	sts	0x0E9A, r25	; 0x800e9a <lm75_temp+0xc>
   16f0a:	80 93 99 0e 	sts	0x0E99, r24	; 0x800e99 <lm75_temp+0xb>
   16f0e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   16f12:	90 93 91 0e 	sts	0x0E91, r25	; 0x800e91 <lm75_temp+0x3>
   16f16:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   16f1a:	89 1b       	sub	r24, r25
   16f1c:	99 0b       	sbc	r25, r25
   16f1e:	c1 e0       	ldi	r28, 0x01	; 1
   16f20:	d0 e0       	ldi	r29, 0x00	; 0
   16f22:	9e 01       	movw	r18, r28
   16f24:	02 c0       	rjmp	.+4      	; 0x16f2a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x460>
   16f26:	22 0f       	add	r18, r18
   16f28:	33 1f       	adc	r19, r19
   16f2a:	8a 95       	dec	r24
   16f2c:	e2 f7       	brpl	.-8      	; 0x16f26 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x45c>
   16f2e:	c9 01       	movw	r24, r18
   16f30:	91 95       	neg	r25
   16f32:	81 95       	neg	r24
   16f34:	91 09       	sbc	r25, r1
   16f36:	90 93 93 0e 	sts	0x0E93, r25	; 0x800e93 <lm75_temp+0x5>
   16f3a:	80 93 92 0e 	sts	0x0E92, r24	; 0x800e92 <lm75_temp+0x4>
   16f3e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   16f42:	80 93 94 0e 	sts	0x0E94, r24	; 0x800e94 <lm75_temp+0x6>
   16f46:	be 01       	movw	r22, r28
   16f48:	02 c0       	rjmp	.+4      	; 0x16f4e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x484>
   16f4a:	66 0f       	add	r22, r22
   16f4c:	77 1f       	adc	r23, r23
   16f4e:	8a 95       	dec	r24
   16f50:	e2 f7       	brpl	.-8      	; 0x16f4a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7123+0x480>
   16f52:	07 2e       	mov	r0, r23
   16f54:	00 0c       	add	r0, r0
   16f56:	88 0b       	sbc	r24, r24
   16f58:	99 0b       	sbc	r25, r25
   16f5a:	0e 94 78 cc 	call	0x198f0	; 0x198f0 <__floatsisf>
   16f5e:	9b 01       	movw	r18, r22
   16f60:	ac 01       	movw	r20, r24
   16f62:	60 e0       	ldi	r22, 0x00	; 0
   16f64:	70 e0       	ldi	r23, 0x00	; 0
   16f66:	80 e8       	ldi	r24, 0x80	; 128
   16f68:	9f e3       	ldi	r25, 0x3F	; 63
   16f6a:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
   16f6e:	60 93 95 0e 	sts	0x0E95, r22	; 0x800e95 <lm75_temp+0x7>
   16f72:	70 93 96 0e 	sts	0x0E96, r23	; 0x800e96 <lm75_temp+0x8>
   16f76:	80 93 97 0e 	sts	0x0E97, r24	; 0x800e97 <lm75_temp+0x9>
   16f7a:	90 93 98 0e 	sts	0x0E98, r25	; 0x800e98 <lm75_temp+0xa>
   16f7e:	80 e0       	ldi	r24, 0x00	; 0
   16f80:	98 ef       	ldi	r25, 0xF8	; 248
   16f82:	90 93 4c 0e 	sts	0x0E4C, r25	; 0x800e4c <my_lcd+0x9>
   16f86:	80 93 4b 0e 	sts	0x0E4B, r24	; 0x800e4b <my_lcd+0x8>
   16f8a:	20 ee       	ldi	r18, 0xE0	; 224
   16f8c:	37 e0       	ldi	r19, 0x07	; 7
   16f8e:	30 93 4a 0e 	sts	0x0E4A, r19	; 0x800e4a <my_lcd+0x7>
   16f92:	20 93 49 0e 	sts	0x0E49, r18	; 0x800e49 <my_lcd+0x6>
   16f96:	90 93 4e 0e 	sts	0x0E4E, r25	; 0x800e4e <my_lcd+0xb>
   16f9a:	80 93 4d 0e 	sts	0x0E4D, r24	; 0x800e4d <my_lcd+0xa>
   16f9e:	81 e0       	ldi	r24, 0x01	; 1
   16fa0:	80 93 4f 0e 	sts	0x0E4F, r24	; 0x800e4f <my_lcd+0xc>
   16fa4:	10 92 50 0e 	sts	0x0E50, r1	; 0x800e50 <my_lcd+0xd>
   16fa8:	84 e8       	ldi	r24, 0x84	; 132
   16faa:	92 e0       	ldi	r25, 0x02	; 2
   16fac:	90 93 44 0e 	sts	0x0E44, r25	; 0x800e44 <my_lcd+0x1>
   16fb0:	80 93 43 0e 	sts	0x0E43, r24	; 0x800e43 <my_lcd>
   16fb4:	82 e2       	ldi	r24, 0x22	; 34
   16fb6:	80 93 81 0e 	sts	0x0E81, r24	; 0x800e81 <my_lcd+0x3e>
   16fba:	e6 ea       	ldi	r30, 0xA6	; 166
   16fbc:	f1 e6       	ldi	r31, 0x61	; 97
   16fbe:	e4 91       	lpm	r30, Z
   16fc0:	f0 e0       	ldi	r31, 0x00	; 0
   16fc2:	ee 0f       	add	r30, r30
   16fc4:	ff 1f       	adc	r31, r31
   16fc6:	eb 58       	subi	r30, 0x8B	; 139
   16fc8:	fe 49       	sbci	r31, 0x9E	; 158
   16fca:	a5 91       	lpm	r26, Z+
   16fcc:	b4 91       	lpm	r27, Z
   16fce:	b0 93 72 0e 	sts	0x0E72, r27	; 0x800e72 <my_lcd+0x2f>
   16fd2:	a0 93 71 0e 	sts	0x0E71, r26	; 0x800e71 <my_lcd+0x2e>
   16fd6:	e8 ea       	ldi	r30, 0xA8	; 168
   16fd8:	f1 e6       	ldi	r31, 0x61	; 97
   16fda:	e4 91       	lpm	r30, Z
   16fdc:	f0 e0       	ldi	r31, 0x00	; 0
   16fde:	ee 0f       	add	r30, r30
   16fe0:	ff 1f       	adc	r31, r31
   16fe2:	eb 58       	subi	r30, 0x8B	; 139
   16fe4:	fe 49       	sbci	r31, 0x9E	; 158
   16fe6:	85 91       	lpm	r24, Z+
   16fe8:	94 91       	lpm	r25, Z
   16fea:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <my_lcd+0x31>
   16fee:	80 93 73 0e 	sts	0x0E73, r24	; 0x800e73 <my_lcd+0x30>
   16ff2:	e9 ea       	ldi	r30, 0xA9	; 169
   16ff4:	f1 e6       	ldi	r31, 0x61	; 97
   16ff6:	e4 91       	lpm	r30, Z
   16ff8:	f0 e0       	ldi	r31, 0x00	; 0
   16ffa:	ee 0f       	add	r30, r30
   16ffc:	ff 1f       	adc	r31, r31
   16ffe:	eb 58       	subi	r30, 0x8B	; 139
   17000:	fe 49       	sbci	r31, 0x9E	; 158
   17002:	85 91       	lpm	r24, Z+
   17004:	94 91       	lpm	r25, Z
   17006:	90 93 76 0e 	sts	0x0E76, r25	; 0x800e76 <my_lcd+0x33>
   1700a:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <my_lcd+0x32>
   1700e:	e5 ea       	ldi	r30, 0xA5	; 165
   17010:	f1 e6       	ldi	r31, 0x61	; 97
   17012:	e4 91       	lpm	r30, Z
   17014:	f0 e0       	ldi	r31, 0x00	; 0
   17016:	ee 0f       	add	r30, r30
   17018:	ff 1f       	adc	r31, r31
   1701a:	eb 58       	subi	r30, 0x8B	; 139
   1701c:	fe 49       	sbci	r31, 0x9E	; 158
   1701e:	85 91       	lpm	r24, Z+
   17020:	94 91       	lpm	r25, Z
   17022:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <my_lcd+0x35>
   17026:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <my_lcd+0x34>
   1702a:	e0 e6       	ldi	r30, 0x60	; 96
   1702c:	f1 e6       	ldi	r31, 0x61	; 97
   1702e:	84 91       	lpm	r24, Z
   17030:	80 93 79 0e 	sts	0x0E79, r24	; 0x800e79 <my_lcd+0x36>
   17034:	e2 e6       	ldi	r30, 0x62	; 98
   17036:	f1 e6       	ldi	r31, 0x61	; 97
   17038:	24 91       	lpm	r18, Z
   1703a:	20 93 7a 0e 	sts	0x0E7A, r18	; 0x800e7a <my_lcd+0x37>
   1703e:	e3 e6       	ldi	r30, 0x63	; 99
   17040:	f1 e6       	ldi	r31, 0x61	; 97
   17042:	94 91       	lpm	r25, Z
   17044:	90 93 7b 0e 	sts	0x0E7B, r25	; 0x800e7b <my_lcd+0x38>
   17048:	ef e5       	ldi	r30, 0x5F	; 95
   1704a:	f1 e6       	ldi	r31, 0x61	; 97
   1704c:	e4 91       	lpm	r30, Z
   1704e:	e0 93 7c 0e 	sts	0x0E7C, r30	; 0x800e7c <my_lcd+0x39>
   17052:	38 2f       	mov	r19, r24
   17054:	30 95       	com	r19
   17056:	30 93 7d 0e 	sts	0x0E7D, r19	; 0x800e7d <my_lcd+0x3a>
   1705a:	20 95       	com	r18
   1705c:	20 93 7e 0e 	sts	0x0E7E, r18	; 0x800e7e <my_lcd+0x3b>
   17060:	90 95       	com	r25
   17062:	90 93 7f 0e 	sts	0x0E7F, r25	; 0x800e7f <my_lcd+0x3c>
   17066:	e0 95       	com	r30
   17068:	e0 93 80 0e 	sts	0x0E80, r30	; 0x800e80 <my_lcd+0x3d>
   1706c:	ec 91       	ld	r30, X
   1706e:	e8 2b       	or	r30, r24
   17070:	ec 93       	st	X, r30
   17072:	e0 91 73 0e 	lds	r30, 0x0E73	; 0x800e73 <my_lcd+0x30>
   17076:	f0 91 74 0e 	lds	r31, 0x0E74	; 0x800e74 <my_lcd+0x31>
   1707a:	80 81       	ld	r24, Z
   1707c:	90 91 7a 0e 	lds	r25, 0x0E7A	; 0x800e7a <my_lcd+0x37>
   17080:	89 2b       	or	r24, r25
   17082:	80 83       	st	Z, r24
   17084:	e0 91 75 0e 	lds	r30, 0x0E75	; 0x800e75 <my_lcd+0x32>
   17088:	f0 91 76 0e 	lds	r31, 0x0E76	; 0x800e76 <my_lcd+0x33>
   1708c:	80 81       	ld	r24, Z
   1708e:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <my_lcd+0x38>
   17092:	89 2b       	or	r24, r25
   17094:	80 83       	st	Z, r24
   17096:	e0 91 77 0e 	lds	r30, 0x0E77	; 0x800e77 <my_lcd+0x34>
   1709a:	f0 91 78 0e 	lds	r31, 0x0E78	; 0x800e78 <my_lcd+0x35>
   1709e:	80 81       	ld	r24, Z
   170a0:	90 91 7c 0e 	lds	r25, 0x0E7C	; 0x800e7c <my_lcd+0x39>
   170a4:	89 2b       	or	r24, r25
   170a6:	80 83       	st	Z, r24
   170a8:	61 e0       	ldi	r22, 0x01	; 1
   170aa:	81 e2       	ldi	r24, 0x21	; 33
   170ac:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   170b0:	61 e0       	ldi	r22, 0x01	; 1
   170b2:	83 e2       	ldi	r24, 0x23	; 35
   170b4:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   170b8:	61 e0       	ldi	r22, 0x01	; 1
   170ba:	84 e2       	ldi	r24, 0x24	; 36
   170bc:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   170c0:	61 e0       	ldi	r22, 0x01	; 1
   170c2:	80 e2       	ldi	r24, 0x20	; 32
   170c4:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   170c8:	61 e0       	ldi	r22, 0x01	; 1
   170ca:	82 e2       	ldi	r24, 0x22	; 34
   170cc:	0e 94 84 a1 	call	0x14308	; 0x14308 <digitalWrite>
   170d0:	61 e0       	ldi	r22, 0x01	; 1
   170d2:	82 e2       	ldi	r24, 0x22	; 34
   170d4:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   170d8:	10 92 5a 0e 	sts	0x0E5A, r1	; 0x800e5a <my_lcd+0x17>
   170dc:	10 92 59 0e 	sts	0x0E59, r1	; 0x800e59 <my_lcd+0x16>
   170e0:	86 e9       	ldi	r24, 0x96	; 150
   170e2:	97 e7       	ldi	r25, 0x77	; 119
   170e4:	90 93 5e 0e 	sts	0x0E5E, r25	; 0x800e5e <my_lcd+0x1b>
   170e8:	80 93 5d 0e 	sts	0x0E5D, r24	; 0x800e5d <my_lcd+0x1a>
   170ec:	20 e4       	ldi	r18, 0x40	; 64
   170ee:	31 e0       	ldi	r19, 0x01	; 1
   170f0:	30 93 52 0e 	sts	0x0E52, r19	; 0x800e52 <my_lcd+0xf>
   170f4:	20 93 51 0e 	sts	0x0E51, r18	; 0x800e51 <my_lcd+0xe>
   170f8:	80 ee       	ldi	r24, 0xE0	; 224
   170fa:	91 e0       	ldi	r25, 0x01	; 1
   170fc:	90 93 54 0e 	sts	0x0E54, r25	; 0x800e54 <my_lcd+0x11>
   17100:	80 93 53 0e 	sts	0x0E53, r24	; 0x800e53 <my_lcd+0x10>
   17104:	41 b1       	in	r20, 0x01	; 1
   17106:	4f ef       	ldi	r20, 0xFF	; 255
   17108:	41 b9       	out	0x01, r20	; 1
   1710a:	30 93 56 0e 	sts	0x0E56, r19	; 0x800e56 <my_lcd+0x13>
   1710e:	20 93 55 0e 	sts	0x0E55, r18	; 0x800e55 <my_lcd+0x12>
   17112:	90 93 58 0e 	sts	0x0E58, r25	; 0x800e58 <my_lcd+0x15>
   17116:	80 93 57 0e 	sts	0x0E57, r24	; 0x800e57 <my_lcd+0x14>
   1711a:	e1 ea       	ldi	r30, 0xA1	; 161
   1711c:	f1 e6       	ldi	r31, 0x61	; 97
   1711e:	e4 91       	lpm	r30, Z
   17120:	f0 e0       	ldi	r31, 0x00	; 0
   17122:	ee 0f       	add	r30, r30
   17124:	ff 1f       	adc	r31, r31
   17126:	eb 58       	subi	r30, 0x8B	; 139
   17128:	fe 49       	sbci	r31, 0x9E	; 158
   1712a:	85 91       	lpm	r24, Z+
   1712c:	94 91       	lpm	r25, Z
   1712e:	90 93 35 0e 	sts	0x0E35, r25	; 0x800e35 <my_touch+0x10>
   17132:	80 93 34 0e 	sts	0x0E34, r24	; 0x800e34 <my_touch+0xf>
   17136:	e0 ea       	ldi	r30, 0xA0	; 160
   17138:	f1 e6       	ldi	r31, 0x61	; 97
   1713a:	e4 91       	lpm	r30, Z
   1713c:	f0 e0       	ldi	r31, 0x00	; 0
   1713e:	ee 0f       	add	r30, r30
   17140:	ff 1f       	adc	r31, r31
   17142:	eb 58       	subi	r30, 0x8B	; 139
   17144:	fe 49       	sbci	r31, 0x9E	; 158
   17146:	85 91       	lpm	r24, Z+
   17148:	94 91       	lpm	r25, Z
   1714a:	90 93 37 0e 	sts	0x0E37, r25	; 0x800e37 <my_touch+0x12>
   1714e:	80 93 36 0e 	sts	0x0E36, r24	; 0x800e36 <my_touch+0x11>
   17152:	e2 ea       	ldi	r30, 0xA2	; 162
   17154:	f1 e6       	ldi	r31, 0x61	; 97
   17156:	e4 91       	lpm	r30, Z
   17158:	f0 e0       	ldi	r31, 0x00	; 0
   1715a:	ee 0f       	add	r30, r30
   1715c:	ff 1f       	adc	r31, r31
   1715e:	e1 5d       	subi	r30, 0xD1	; 209
   17160:	fe 49       	sbci	r31, 0x9E	; 158
   17162:	85 91       	lpm	r24, Z+
   17164:	94 91       	lpm	r25, Z
   17166:	90 93 39 0e 	sts	0x0E39, r25	; 0x800e39 <my_touch+0x14>
   1716a:	80 93 38 0e 	sts	0x0E38, r24	; 0x800e38 <my_touch+0x13>
   1716e:	e3 ea       	ldi	r30, 0xA3	; 163
   17170:	f1 e6       	ldi	r31, 0x61	; 97
   17172:	e4 91       	lpm	r30, Z
   17174:	f0 e0       	ldi	r31, 0x00	; 0
   17176:	ee 0f       	add	r30, r30
   17178:	ff 1f       	adc	r31, r31
   1717a:	eb 58       	subi	r30, 0x8B	; 139
   1717c:	fe 49       	sbci	r31, 0x9E	; 158
   1717e:	85 91       	lpm	r24, Z+
   17180:	94 91       	lpm	r25, Z
   17182:	90 93 3b 0e 	sts	0x0E3B, r25	; 0x800e3b <my_touch+0x16>
   17186:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <my_touch+0x15>
   1718a:	ec e8       	ldi	r30, 0x8C	; 140
   1718c:	f1 e6       	ldi	r31, 0x61	; 97
   1718e:	e4 91       	lpm	r30, Z
   17190:	f0 e0       	ldi	r31, 0x00	; 0
   17192:	ee 0f       	add	r30, r30
   17194:	ff 1f       	adc	r31, r31
   17196:	e1 5d       	subi	r30, 0xD1	; 209
   17198:	fe 49       	sbci	r31, 0x9E	; 158
   1719a:	85 91       	lpm	r24, Z+
   1719c:	94 91       	lpm	r25, Z
   1719e:	90 93 3d 0e 	sts	0x0E3D, r25	; 0x800e3d <my_touch+0x18>
   171a2:	80 93 3c 0e 	sts	0x0E3C, r24	; 0x800e3c <my_touch+0x17>
   171a6:	eb e5       	ldi	r30, 0x5B	; 91
   171a8:	f1 e6       	ldi	r31, 0x61	; 97
   171aa:	e4 91       	lpm	r30, Z
   171ac:	e0 93 3e 0e 	sts	0x0E3E, r30	; 0x800e3e <my_touch+0x19>
   171b0:	ea e5       	ldi	r30, 0x5A	; 90
   171b2:	f1 e6       	ldi	r31, 0x61	; 97
   171b4:	e4 91       	lpm	r30, Z
   171b6:	e0 93 3f 0e 	sts	0x0E3F, r30	; 0x800e3f <my_touch+0x1a>
   171ba:	ec e5       	ldi	r30, 0x5C	; 92
   171bc:	f1 e6       	ldi	r31, 0x61	; 97
   171be:	e4 91       	lpm	r30, Z
   171c0:	e0 93 40 0e 	sts	0x0E40, r30	; 0x800e40 <my_touch+0x1b>
   171c4:	ed e5       	ldi	r30, 0x5D	; 93
   171c6:	f1 e6       	ldi	r31, 0x61	; 97
   171c8:	e4 91       	lpm	r30, Z
   171ca:	e0 93 41 0e 	sts	0x0E41, r30	; 0x800e41 <my_touch+0x1c>
   171ce:	e6 e4       	ldi	r30, 0x46	; 70
   171d0:	f1 e6       	ldi	r31, 0x61	; 97
   171d2:	e4 91       	lpm	r30, Z
   171d4:	e0 93 42 0e 	sts	0x0E42, r30	; 0x800e42 <my_touch+0x1d>
   171d8:	61 e0       	ldi	r22, 0x01	; 1
   171da:	8c e1       	ldi	r24, 0x1C	; 28
   171dc:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   171e0:	61 e0       	ldi	r22, 0x01	; 1
   171e2:	8b e1       	ldi	r24, 0x1B	; 27
   171e4:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   171e8:	60 e0       	ldi	r22, 0x00	; 0
   171ea:	8d e1       	ldi	r24, 0x1D	; 29
   171ec:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   171f0:	61 e0       	ldi	r22, 0x01	; 1
   171f2:	8e e1       	ldi	r24, 0x1E	; 30
   171f4:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   171f8:	60 e0       	ldi	r22, 0x00	; 0
   171fa:	87 e0       	ldi	r24, 0x07	; 7
   171fc:	0e 94 e1 a2 	call	0x145c2	; 0x145c2 <pinMode>
   17200:	10 92 31 0e 	sts	0x0E31, r1	; 0x800e31 <my_touch+0xc>
   17204:	10 92 32 0e 	sts	0x0E32, r1	; 0x800e32 <my_touch+0xd>
   17208:	10 92 33 0e 	sts	0x0E33, r1	; 0x800e33 <my_touch+0xe>
   1720c:	10 92 2e 0e 	sts	0x0E2E, r1	; 0x800e2e <my_touch+0x9>
   17210:	10 92 2d 0e 	sts	0x0E2D, r1	; 0x800e2d <my_touch+0x8>
   17214:	10 92 30 0e 	sts	0x0E30, r1	; 0x800e30 <my_touch+0xb>
   17218:	10 92 2f 0e 	sts	0x0E2F, r1	; 0x800e2f <my_touch+0xa>
   1721c:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <my_touch+0x1>
   17220:	10 92 25 0e 	sts	0x0E25, r1	; 0x800e25 <my_touch>
   17224:	10 92 28 0e 	sts	0x0E28, r1	; 0x800e28 <my_touch+0x3>
   17228:	10 92 27 0e 	sts	0x0E27, r1	; 0x800e27 <my_touch+0x2>
   1722c:	10 93 2a 0e 	sts	0x0E2A, r17	; 0x800e2a <my_touch+0x5>
   17230:	00 93 29 0e 	sts	0x0E29, r16	; 0x800e29 <my_touch+0x4>
   17234:	10 93 2c 0e 	sts	0x0E2C, r17	; 0x800e2c <my_touch+0x7>
   17238:	00 93 2b 0e 	sts	0x0E2B, r16	; 0x800e2b <my_touch+0x6>
   1723c:	8a e0       	ldi	r24, 0x0A	; 10
   1723e:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <doc>
   17242:	8f e1       	ldi	r24, 0x1F	; 31
   17244:	9d e0       	ldi	r25, 0x0D	; 13
   17246:	90 93 1a 0d 	sts	0x0D1A, r25	; 0x800d1a <doc+0x4>
   1724a:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <doc+0x3>
   1724e:	20 e0       	ldi	r18, 0x00	; 0
   17250:	31 e0       	ldi	r19, 0x01	; 1
   17252:	30 93 1c 0d 	sts	0x0D1C, r19	; 0x800d1c <doc+0x6>
   17256:	20 93 1b 0d 	sts	0x0D1B, r18	; 0x800d1b <doc+0x5>
   1725a:	10 92 1e 0d 	sts	0x0D1E, r1	; 0x800d1e <doc+0x8>
   1725e:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <doc+0x7>
   17262:	8e e7       	ldi	r24, 0x7E	; 126
   17264:	92 e0       	ldi	r25, 0x02	; 2
   17266:	90 93 18 0d 	sts	0x0D18, r25	; 0x800d18 <doc+0x2>
   1726a:	80 93 17 0d 	sts	0x0D17, r24	; 0x800d17 <doc+0x1>
   1726e:	10 92 20 0e 	sts	0x0E20, r1	; 0x800e20 <doc+0x10a>
   17272:	10 92 1f 0e 	sts	0x0E1F, r1	; 0x800e1f <doc+0x109>
   17276:	80 e0       	ldi	r24, 0x00	; 0
   17278:	90 e0       	ldi	r25, 0x00	; 0
   1727a:	a2 e0       	ldi	r26, 0x02	; 2
   1727c:	b0 e0       	ldi	r27, 0x00	; 0
   1727e:	80 93 0d 0d 	sts	0x0D0D, r24	; 0x800d0d <SRAM+0x4>
   17282:	90 93 0e 0d 	sts	0x0D0E, r25	; 0x800d0e <SRAM+0x5>
   17286:	a0 93 0f 0d 	sts	0x0D0F, r26	; 0x800d0f <SRAM+0x6>
   1728a:	b0 93 10 0d 	sts	0x0D10, r27	; 0x800d10 <SRAM+0x7>
   1728e:	d0 93 0c 0d 	sts	0x0D0C, r29	; 0x800d0c <SRAM+0x3>
   17292:	c0 93 0b 0d 	sts	0x0D0B, r28	; 0x800d0b <SRAM+0x2>
   17296:	8a ed       	ldi	r24, 0xDA	; 218
   17298:	90 e1       	ldi	r25, 0x10	; 16
   1729a:	90 93 0a 0d 	sts	0x0D0A, r25	; 0x800d0a <SRAM+0x1>
   1729e:	80 93 09 0d 	sts	0x0D09, r24	; 0x800d09 <SRAM>
   172a2:	46 e1       	ldi	r20, 0x16	; 22
   172a4:	40 93 11 0d 	sts	0x0D11, r20	; 0x800d11 <SRAM+0x8>
   172a8:	40 e0       	ldi	r20, 0x00	; 0
   172aa:	50 e0       	ldi	r21, 0x00	; 0
   172ac:	64 e0       	ldi	r22, 0x04	; 4
   172ae:	70 e0       	ldi	r23, 0x00	; 0
   172b0:	40 93 fe 0c 	sts	0x0CFE, r20	; 0x800cfe <SROM+0x4>
   172b4:	50 93 ff 0c 	sts	0x0CFF, r21	; 0x800cff <SROM+0x5>
   172b8:	60 93 00 0d 	sts	0x0D00, r22	; 0x800d00 <SROM+0x6>
   172bc:	70 93 01 0d 	sts	0x0D01, r23	; 0x800d01 <SROM+0x7>
   172c0:	30 93 03 0d 	sts	0x0D03, r19	; 0x800d03 <SROM+0x9>
   172c4:	20 93 02 0d 	sts	0x0D02, r18	; 0x800d02 <SROM+0x8>
   172c8:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <SROM+0x3>
   172cc:	10 92 fc 0c 	sts	0x0CFC, r1	; 0x800cfc <SROM+0x2>
   172d0:	90 93 fb 0c 	sts	0x0CFB, r25	; 0x800cfb <SROM+0x1>
   172d4:	80 93 fa 0c 	sts	0x0CFA, r24	; 0x800cfa <SROM>
   172d8:	87 e1       	ldi	r24, 0x17	; 23
   172da:	80 93 04 0d 	sts	0x0D04, r24	; 0x800d04 <SROM+0xa>
   172de:	df 91       	pop	r29
   172e0:	cf 91       	pop	r28
   172e2:	1f 91       	pop	r17
   172e4:	0f 91       	pop	r16
   172e6:	08 95       	ret

000172e8 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   172e8:	cf 93       	push	r28
   172ea:	df 93       	push	r29
   172ec:	cd b7       	in	r28, 0x3d	; 61
   172ee:	de b7       	in	r29, 0x3e	; 62
   172f0:	c9 58       	subi	r28, 0x89	; 137
   172f2:	d1 09       	sbc	r29, r1
   172f4:	0f b6       	in	r0, 0x3f	; 63
   172f6:	f8 94       	cli
   172f8:	de bf       	out	0x3e, r29	; 62
   172fa:	0f be       	out	0x3f, r0	; 63
   172fc:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   172fe:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   17300:	84 b5       	in	r24, 0x24	; 36
   17302:	83 60       	ori	r24, 0x03	; 3
   17304:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   17306:	85 b5       	in	r24, 0x25	; 37
   17308:	83 60       	ori	r24, 0x03	; 3
   1730a:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1730c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   17310:	81 60       	ori	r24, 0x01	; 1
   17312:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   17316:	82 e0       	ldi	r24, 0x02	; 2
   17318:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1731c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   17320:	81 60       	ori	r24, 0x01	; 1
   17322:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   17326:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1732a:	81 60       	ori	r24, 0x01	; 1
   1732c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   17330:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   17334:	84 60       	ori	r24, 0x04	; 4
   17336:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1733a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1733e:	81 60       	ori	r24, 0x01	; 1
   17340:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   17344:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   17348:	83 60       	ori	r24, 0x03	; 3
   1734a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1734e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   17352:	81 60       	ori	r24, 0x01	; 1
   17354:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   17358:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   1735c:	83 60       	ori	r24, 0x03	; 3
   1735e:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   17362:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   17366:	81 60       	ori	r24, 0x01	; 1
   17368:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1736c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   17370:	83 60       	ori	r24, 0x03	; 3
   17372:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   17376:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1737a:	81 60       	ori	r24, 0x01	; 1
   1737c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   17380:	87 e8       	ldi	r24, 0x87	; 135
   17382:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   17386:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1738a:	0e 94 7a 87 	call	0x10ef4	; 0x10ef4 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   1738e:	21 e4       	ldi	r18, 0x41	; 65
   17390:	30 e0       	ldi	r19, 0x00	; 0
   17392:	2c 0f       	add	r18, r28
   17394:	3d 1f       	adc	r19, r29
   17396:	24 5f       	subi	r18, 0xF4	; 244
   17398:	3f 4f       	sbci	r19, 0xFF	; 255
   1739a:	c8 57       	subi	r28, 0x78	; 120
   1739c:	df 4f       	sbci	r29, 0xFF	; 255
   1739e:	39 83       	std	Y+1, r19	; 0x01
   173a0:	28 83       	st	Y, r18
   173a2:	c8 58       	subi	r28, 0x88	; 136
   173a4:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4640
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   173a6:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   173aa:	1b 01       	movw	r2, r22
   173ac:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4641
  if (mqtt_reconnect() == 0)
   173ae:	0e 94 2a 86 	call	0x10c54	; 0x10c54 <mqtt_reconnect()>
   173b2:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <selftest_data>
   173b6:	81 11       	cpse	r24, r1
   173b8:	88 c0       	rjmp	.+272    	; 0x174ca <main+0x1e2>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3918
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   173ba:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   173bc:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   173c0:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <PubSubClient::loop() [clone .constprop.104]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4649


  if (draw_menu(false) == true)
   173c4:	80 e0       	ldi	r24, 0x00	; 0
   173c6:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <draw_menu(bool)>
   173ca:	88 23       	and	r24, r24
   173cc:	19 f0       	breq	.+6      	; 0x173d4 <main+0xec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4650
    draw_menu(true);
   173ce:	81 e0       	ldi	r24, 0x01	; 1
   173d0:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4654

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   173d4:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   173d8:	00 91 61 11 	lds	r16, 0x1161	; 0x801161 <milis_10s>
   173dc:	10 91 62 11 	lds	r17, 0x1162	; 0x801162 <milis_10s+0x1>
   173e0:	20 91 63 11 	lds	r18, 0x1163	; 0x801163 <milis_10s+0x2>
   173e4:	30 91 64 11 	lds	r19, 0x1164	; 0x801164 <milis_10s+0x3>
   173e8:	60 1b       	sub	r22, r16
   173ea:	71 0b       	sbc	r23, r17
   173ec:	82 0b       	sbc	r24, r18
   173ee:	93 0b       	sbc	r25, r19
   173f0:	61 31       	cpi	r22, 0x11	; 17
   173f2:	77 42       	sbci	r23, 0x27	; 39
   173f4:	81 05       	cpc	r24, r1
   173f6:	91 05       	cpc	r25, r1
   173f8:	08 f4       	brcc	.+2      	; 0x173fc <main+0x114>
   173fa:	b7 c5       	rjmp	.+2926   	; 0x17f6a <main+0xc82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4656
  {
    milis_10s = millis();
   173fc:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   17400:	60 93 61 11 	sts	0x1161, r22	; 0x801161 <milis_10s>
   17404:	70 93 62 11 	sts	0x1162, r23	; 0x801162 <milis_10s+0x1>
   17408:	80 93 63 11 	sts	0x1163, r24	; 0x801163 <milis_10s+0x2>
   1740c:	90 93 64 11 	sts	0x1164, r25	; 0x801164 <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659


    menu_redraw10s = 1;
   17410:	81 e0       	ldi	r24, 0x01	; 1
   17412:	80 93 4e 0b 	sts	0x0B4E, r24	; 0x800b4e <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   17416:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   1741a:	4a e0       	ldi	r20, 0x0A	; 10
   1741c:	be 01       	movw	r22, r28
   1741e:	6f 5f       	subi	r22, 0xFF	; 255
   17420:	7f 4f       	sbci	r23, 0xFF	; 255
   17422:	90 e0       	ldi	r25, 0x00	; 0
   17424:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   17428:	ae 01       	movw	r20, r28
   1742a:	4f 5f       	subi	r20, 0xFF	; 255
   1742c:	5f 4f       	sbci	r21, 0xFF	; 255
   1742e:	67 e1       	ldi	r22, 0x17	; 23
   17430:	77 e0       	ldi	r23, 0x07	; 7
   17432:	8b e9       	ldi	r24, 0x9B	; 155
   17434:	9e e0       	ldi	r25, 0x0E	; 14
   17436:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1743a:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3556
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1743c:	3b e0       	ldi	r19, 0x0B	; 11
   1743e:	d3 2e       	mov	r13, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   17440:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <Global_HWwirenum>
   17444:	18 17       	cp	r17, r24
   17446:	08 f0       	brcs	.+2      	; 0x1744a <main+0x162>
   17448:	42 c0       	rjmp	.+132    	; 0x174ce <main+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3556
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1744a:	1d 9d       	mul	r17, r13
   1744c:	c0 01       	movw	r24, r0
   1744e:	11 24       	eor	r1, r1
   17450:	ac 01       	movw	r20, r24
   17452:	4d 5c       	subi	r20, 0xCD	; 205
   17454:	55 4f       	sbci	r21, 0xF5	; 245
   17456:	7a 01       	movw	r14, r20
   17458:	00 e1       	ldi	r16, 0x10	; 16
   1745a:	28 e0       	ldi	r18, 0x08	; 8
   1745c:	6a e3       	ldi	r22, 0x3A	; 58
   1745e:	ce 01       	movw	r24, r28
   17460:	01 96       	adiw	r24, 0x01	; 1
   17462:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3557
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   17466:	9e 01       	movw	r18, r28
   17468:	2f 5f       	subi	r18, 0xFF	; 255
   1746a:	3f 4f       	sbci	r19, 0xFF	; 255
   1746c:	43 e2       	ldi	r20, 0x23	; 35
   1746e:	57 e0       	ldi	r21, 0x07	; 7
   17470:	61 2f       	mov	r22, r17
   17472:	87 e2       	ldi	r24, 0x27	; 39
   17474:	97 e0       	ldi	r25, 0x07	; 7
   17476:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3559
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   1747a:	f7 01       	movw	r30, r14
   1747c:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1747e:	4a e0       	ldi	r20, 0x0A	; 10
   17480:	be 01       	movw	r22, r28
   17482:	6f 5f       	subi	r22, 0xFF	; 255
   17484:	7f 4f       	sbci	r23, 0xFF	; 255
   17486:	90 e0       	ldi	r25, 0x00	; 0
   17488:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   1748c:	9e 01       	movw	r18, r28
   1748e:	2f 5f       	subi	r18, 0xFF	; 255
   17490:	3f 4f       	sbci	r19, 0xFF	; 255
   17492:	4d e2       	ldi	r20, 0x2D	; 45
   17494:	57 e0       	ldi	r21, 0x07	; 7
   17496:	61 2f       	mov	r22, r17
   17498:	87 e2       	ldi	r24, 0x27	; 39
   1749a:	97 e0       	ldi	r25, 0x07	; 7
   1749c:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3562
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   174a0:	f7 01       	movw	r30, r14
   174a2:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   174a4:	4a e0       	ldi	r20, 0x0A	; 10
   174a6:	be 01       	movw	r22, r28
   174a8:	6f 5f       	subi	r22, 0xFF	; 255
   174aa:	7f 4f       	sbci	r23, 0xFF	; 255
   174ac:	90 e0       	ldi	r25, 0x00	; 0
   174ae:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   174b2:	9e 01       	movw	r18, r28
   174b4:	2f 5f       	subi	r18, 0xFF	; 255
   174b6:	3f 4f       	sbci	r19, 0xFF	; 255
   174b8:	46 e3       	ldi	r20, 0x36	; 54
   174ba:	57 e0       	ldi	r21, 0x07	; 7
   174bc:	61 2f       	mov	r22, r17
   174be:	87 e2       	ldi	r24, 0x27	; 39
   174c0:	97 e0       	ldi	r25, 0x07	; 7
   174c2:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   174c6:	1f 5f       	subi	r17, 0xFF	; 255
   174c8:	bb cf       	rjmp	.-138    	; 0x17440 <main+0x158>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   174ca:	90 62       	ori	r25, 0x20	; 32
   174cc:	77 cf       	rjmp	.-274    	; 0x173bc <main+0xd4>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:319
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   174ce:	8b e9       	ldi	r24, 0x9B	; 155
   174d0:	9e e0       	ldi	r25, 0x0E	; 14
   174d2:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   174d6:	88 23       	and	r24, r24
   174d8:	09 f4       	brne	.+2      	; 0x174dc <main+0x1f4>
   174da:	ac c0       	rjmp	.+344    	; 0x17634 <main+0x34c>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:321
  {
    strcpy_P(str_topic, status_mqtt_send);
   174dc:	63 e2       	ldi	r22, 0x23	; 35
   174de:	7c e5       	ldi	r23, 0x5C	; 92
   174e0:	ce 01       	movw	r24, r28
   174e2:	8f 5b       	subi	r24, 0xBF	; 191
   174e4:	9f 4f       	sbci	r25, 0xFF	; 255
   174e6:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   174ea:	4a e0       	ldi	r20, 0x0A	; 10
   174ec:	be 01       	movw	r22, r28
   174ee:	6f 5f       	subi	r22, 0xFF	; 255
   174f0:	7f 4f       	sbci	r23, 0xFF	; 255
   174f2:	80 91 dd 0b 	lds	r24, 0x0BDD	; 0x800bdd <mqtt_send_message>
   174f6:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <mqtt_send_message+0x1>
   174fa:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:323
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   174fe:	10 92 de 0b 	sts	0x0BDE, r1	; 0x800bde <mqtt_send_message+0x1>
   17502:	10 92 dd 0b 	sts	0x0BDD, r1	; 0x800bdd <mqtt_send_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:324
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   17506:	ae 01       	movw	r20, r28
   17508:	4f 5f       	subi	r20, 0xFF	; 255
   1750a:	5f 4f       	sbci	r21, 0xFF	; 255
   1750c:	be 01       	movw	r22, r28
   1750e:	6f 5b       	subi	r22, 0xBF	; 191
   17510:	7f 4f       	sbci	r23, 0xFF	; 255
   17512:	8b e9       	ldi	r24, 0x9B	; 155
   17514:	9e e0       	ldi	r25, 0x0E	; 14
   17516:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:326
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1751a:	61 e1       	ldi	r22, 0x11	; 17
   1751c:	7c e5       	ldi	r23, 0x5C	; 92
   1751e:	ce 01       	movw	r24, r28
   17520:	8f 5b       	subi	r24, 0xBF	; 191
   17522:	9f 4f       	sbci	r25, 0xFF	; 255
   17524:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17528:	4a e0       	ldi	r20, 0x0A	; 10
   1752a:	be 01       	movw	r22, r28
   1752c:	6f 5f       	subi	r22, 0xFF	; 255
   1752e:	7f 4f       	sbci	r23, 0xFF	; 255
   17530:	80 91 df 0b 	lds	r24, 0x0BDF	; 0x800bdf <mqtt_error>
   17534:	90 91 e0 0b 	lds	r25, 0x0BE0	; 0x800be0 <mqtt_error+0x1>
   17538:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:328
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1753c:	ae 01       	movw	r20, r28
   1753e:	4f 5f       	subi	r20, 0xFF	; 255
   17540:	5f 4f       	sbci	r21, 0xFF	; 255
   17542:	be 01       	movw	r22, r28
   17544:	6f 5b       	subi	r22, 0xBF	; 191
   17546:	7f 4f       	sbci	r23, 0xFF	; 255
   17548:	8b e9       	ldi	r24, 0x9B	; 155
   1754a:	9e e0       	ldi	r25, 0x0E	; 14
   1754c:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:330
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   17550:	6d ef       	ldi	r22, 0xFD	; 253
   17552:	7b e5       	ldi	r23, 0x5B	; 91
   17554:	ce 01       	movw	r24, r28
   17556:	8f 5b       	subi	r24, 0xBF	; 191
   17558:	9f 4f       	sbci	r25, 0xFF	; 255
   1755a:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1755e:	4a e0       	ldi	r20, 0x0A	; 10
   17560:	be 01       	movw	r22, r28
   17562:	6f 5f       	subi	r22, 0xFF	; 255
   17564:	7f 4f       	sbci	r23, 0xFF	; 255
   17566:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <mqtt_receive_message>
   1756a:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <mqtt_receive_message+0x1>
   1756e:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:332
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   17572:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <mqtt_receive_message+0x1>
   17576:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <mqtt_receive_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:333
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1757a:	ae 01       	movw	r20, r28
   1757c:	4f 5f       	subi	r20, 0xFF	; 255
   1757e:	5f 4f       	sbci	r21, 0xFF	; 255
   17580:	be 01       	movw	r22, r28
   17582:	6f 5b       	subi	r22, 0xBF	; 191
   17584:	7f 4f       	sbci	r23, 0xFF	; 255
   17586:	8b e9       	ldi	r24, 0x9B	; 155
   17588:	9e e0       	ldi	r25, 0x0E	; 14
   1758a:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:335
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1758e:	69 ee       	ldi	r22, 0xE9	; 233
   17590:	7b e5       	ldi	r23, 0x5B	; 91
   17592:	ce 01       	movw	r24, r28
   17594:	8f 5b       	subi	r24, 0xBF	; 191
   17596:	9f 4f       	sbci	r25, 0xFF	; 255
   17598:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1759c:	4a e0       	ldi	r20, 0x0A	; 10
   1759e:	be 01       	movw	r22, r28
   175a0:	6f 5f       	subi	r22, 0xFF	; 255
   175a2:	7f 4f       	sbci	r23, 0xFF	; 255
   175a4:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <mqtt_process_message>
   175a8:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <mqtt_process_message+0x1>
   175ac:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:337
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   175b0:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <mqtt_process_message+0x1>
   175b4:	10 92 76 0a 	sts	0x0A76, r1	; 0x800a76 <mqtt_process_message>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:338
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   175b8:	ae 01       	movw	r20, r28
   175ba:	4f 5f       	subi	r20, 0xFF	; 255
   175bc:	5f 4f       	sbci	r21, 0xFF	; 255
   175be:	be 01       	movw	r22, r28
   175c0:	6f 5b       	subi	r22, 0xBF	; 191
   175c2:	7f 4f       	sbci	r23, 0xFF	; 255
   175c4:	8b e9       	ldi	r24, 0x9B	; 155
   175c6:	9e e0       	ldi	r25, 0x0E	; 14
   175c8:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:340

    payload[0] = 0;
   175cc:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:341
    createString(payload, '.', device.myIP, 4, 10);
   175ce:	0a e0       	ldi	r16, 0x0A	; 10
   175d0:	24 e0       	ldi	r18, 0x04	; 4
   175d2:	4e ea       	ldi	r20, 0xAE	; 174
   175d4:	5c e0       	ldi	r21, 0x0C	; 12
   175d6:	6e e2       	ldi	r22, 0x2E	; 46
   175d8:	ce 01       	movw	r24, r28
   175da:	01 96       	adiw	r24, 0x01	; 1
   175dc:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:342
    strcpy_P(str_topic, network_ip);
   175e0:	6e ed       	ldi	r22, 0xDE	; 222
   175e2:	7b e5       	ldi	r23, 0x5B	; 91
   175e4:	ce 01       	movw	r24, r28
   175e6:	8f 5b       	subi	r24, 0xBF	; 191
   175e8:	9f 4f       	sbci	r25, 0xFF	; 255
   175ea:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:343
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   175ee:	ae 01       	movw	r20, r28
   175f0:	4f 5f       	subi	r20, 0xFF	; 255
   175f2:	5f 4f       	sbci	r21, 0xFF	; 255
   175f4:	be 01       	movw	r22, r28
   175f6:	6f 5b       	subi	r22, 0xBF	; 191
   175f8:	7f 4f       	sbci	r23, 0xFF	; 255
   175fa:	8b e9       	ldi	r24, 0x9B	; 155
   175fc:	9e e0       	ldi	r25, 0x0E	; 14
   175fe:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:345

    strcpy_P(str_topic, status_know_devices);
   17602:	6a ec       	ldi	r22, 0xCA	; 202
   17604:	7b e5       	ldi	r23, 0x5B	; 91
   17606:	ce 01       	movw	r24, r28
   17608:	8f 5b       	subi	r24, 0xBF	; 191
   1760a:	9f 4f       	sbci	r25, 0xFF	; 255
   1760c:	0e 94 f4 c3 	call	0x187e8	; 0x187e8 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17610:	4a e0       	ldi	r20, 0x0A	; 10
   17612:	be 01       	movw	r22, r28
   17614:	6f 5f       	subi	r22, 0xFF	; 255
   17616:	7f 4f       	sbci	r23, 0xFF	; 255
   17618:	90 e0       	ldi	r25, 0x00	; 0
   1761a:	80 e0       	ldi	r24, 0x00	; 0
   1761c:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:347
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   17620:	ae 01       	movw	r20, r28
   17622:	4f 5f       	subi	r20, 0xFF	; 255
   17624:	5f 4f       	sbci	r21, 0xFF	; 255
   17626:	be 01       	movw	r22, r28
   17628:	6f 5b       	subi	r22, 0xBF	; 191
   1762a:	7f 4f       	sbci	r23, 0xFF	; 255
   1762c:	8b e9       	ldi	r24, 0x9B	; 155
   1762e:	9e e0       	ldi	r25, 0x0E	; 14
   17630:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_252452/sketch/saric_mqtt_network.cpp:349
  }
  mqtt_error = 0;
   17634:	10 92 e0 0b 	sts	0x0BE0, r1	; 0x800be0 <mqtt_error+0x1>
   17638:	10 92 df 0b 	sts	0x0BDF, r1	; 0x800bdf <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1763c:	8b e9       	ldi	r24, 0x9B	; 155
   1763e:	9e e0       	ldi	r25, 0x0E	; 14
   17640:	0e 94 c5 aa 	call	0x1558a	; 0x1558a <PubSubClient::connected()>
   17644:	88 23       	and	r24, r24
   17646:	09 f4       	brne	.+2      	; 0x1764a <main+0x362>
   17648:	6c c1       	rjmp	.+728    	; 0x17922 <main+0x63a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3574
  {
    strcpy(str_topic, "status/uptime");
   1764a:	6e e3       	ldi	r22, 0x3E	; 62
   1764c:	77 e0       	ldi	r23, 0x07	; 7
   1764e:	ce 01       	movw	r24, r28
   17650:	8f 5b       	subi	r24, 0xBF	; 191
   17652:	9f 4f       	sbci	r25, 0xFF	; 255
   17654:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17658:	4a e0       	ldi	r20, 0x0A	; 10
   1765a:	be 01       	movw	r22, r28
   1765c:	6f 5f       	subi	r22, 0xFF	; 255
   1765e:	7f 4f       	sbci	r23, 0xFF	; 255
   17660:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <uptime>
   17664:	90 91 4b 0b 	lds	r25, 0x0B4B	; 0x800b4b <uptime+0x1>
   17668:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3576
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1766c:	ae 01       	movw	r20, r28
   1766e:	4f 5f       	subi	r20, 0xFF	; 255
   17670:	5f 4f       	sbci	r21, 0xFF	; 255
   17672:	be 01       	movw	r22, r28
   17674:	6f 5b       	subi	r22, 0xBF	; 191
   17676:	7f 4f       	sbci	r23, 0xFF	; 255
   17678:	8b e9       	ldi	r24, 0x9B	; 155
   1767a:	9e e0       	ldi	r25, 0x0E	; 14
   1767c:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3578
    ///
    strcpy(str_topic, "status/brigthness");
   17680:	6c e4       	ldi	r22, 0x4C	; 76
   17682:	77 e0       	ldi	r23, 0x07	; 7
   17684:	ce 01       	movw	r24, r28
   17686:	8f 5b       	subi	r24, 0xBF	; 191
   17688:	9f 4f       	sbci	r25, 0xFF	; 255
   1768a:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1768e:	4a e0       	ldi	r20, 0x0A	; 10
   17690:	be 01       	movw	r22, r28
   17692:	6f 5f       	subi	r22, 0xFF	; 255
   17694:	7f 4f       	sbci	r23, 0xFF	; 255
   17696:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <light_curr>
   1769a:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <light_curr+0x1>
   1769e:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   176a2:	ae 01       	movw	r20, r28
   176a4:	4f 5f       	subi	r20, 0xFF	; 255
   176a6:	5f 4f       	sbci	r21, 0xFF	; 255
   176a8:	be 01       	movw	r22, r28
   176aa:	6f 5b       	subi	r22, 0xBF	; 191
   176ac:	7f 4f       	sbci	r23, 0xFF	; 255
   176ae:	8b e9       	ldi	r24, 0x9B	; 155
   176b0:	9e e0       	ldi	r25, 0x0E	; 14
   176b2:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   176b6:	6e e5       	ldi	r22, 0x5E	; 94
   176b8:	77 e0       	ldi	r23, 0x07	; 7
   176ba:	ce 01       	movw	r24, r28
   176bc:	8f 5b       	subi	r24, 0xBF	; 191
   176be:	9f 4f       	sbci	r25, 0xFF	; 255
   176c0:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   176c4:	4a e0       	ldi	r20, 0x0A	; 10
   176c6:	be 01       	movw	r22, r28
   176c8:	6f 5f       	subi	r22, 0xFF	; 255
   176ca:	7f 4f       	sbci	r23, 0xFF	; 255
   176cc:	90 e0       	ldi	r25, 0x00	; 0
   176ce:	80 e0       	ldi	r24, 0x00	; 0
   176d0:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   176d4:	ae 01       	movw	r20, r28
   176d6:	4f 5f       	subi	r20, 0xFF	; 255
   176d8:	5f 4f       	sbci	r21, 0xFF	; 255
   176da:	be 01       	movw	r22, r28
   176dc:	6f 5b       	subi	r22, 0xBF	; 191
   176de:	7f 4f       	sbci	r23, 0xFF	; 255
   176e0:	8b e9       	ldi	r24, 0x9B	; 155
   176e2:	9e e0       	ldi	r25, 0x0E	; 14
   176e4:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3590
    ///
    strcpy(str_topic, "status/load_min");
   176e8:	65 e7       	ldi	r22, 0x75	; 117
   176ea:	77 e0       	ldi	r23, 0x07	; 7
   176ec:	ce 01       	movw	r24, r28
   176ee:	8f 5b       	subi	r24, 0xBF	; 191
   176f0:	9f 4f       	sbci	r25, 0xFF	; 255
   176f2:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   176f6:	4a e0       	ldi	r20, 0x0A	; 10
   176f8:	be 01       	movw	r22, r28
   176fa:	6f 5f       	subi	r22, 0xFF	; 255
   176fc:	7f 4f       	sbci	r23, 0xFF	; 255
   176fe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   17702:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   17706:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1770a:	ae 01       	movw	r20, r28
   1770c:	4f 5f       	subi	r20, 0xFF	; 255
   1770e:	5f 4f       	sbci	r21, 0xFF	; 255
   17710:	be 01       	movw	r22, r28
   17712:	6f 5b       	subi	r22, 0xBF	; 191
   17714:	7f 4f       	sbci	r23, 0xFF	; 255
   17716:	8b e9       	ldi	r24, 0x9B	; 155
   17718:	9e e0       	ldi	r25, 0x0E	; 14
   1771a:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
    ///
    strcpy(str_topic, "status/load_max");
   1771e:	65 e8       	ldi	r22, 0x85	; 133
   17720:	77 e0       	ldi	r23, 0x07	; 7
   17722:	ce 01       	movw	r24, r28
   17724:	8f 5b       	subi	r24, 0xBF	; 191
   17726:	9f 4f       	sbci	r25, 0xFF	; 255
   17728:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1772c:	4a e0       	ldi	r20, 0x0A	; 10
   1772e:	be 01       	movw	r22, r28
   17730:	6f 5f       	subi	r22, 0xFF	; 255
   17732:	7f 4f       	sbci	r23, 0xFF	; 255
   17734:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <load_max>
   17738:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <load_max+0x1>
   1773c:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   17740:	ae 01       	movw	r20, r28
   17742:	4f 5f       	subi	r20, 0xFF	; 255
   17744:	5f 4f       	sbci	r21, 0xFF	; 255
   17746:	be 01       	movw	r22, r28
   17748:	6f 5b       	subi	r22, 0xBF	; 191
   1774a:	7f 4f       	sbci	r23, 0xFF	; 255
   1774c:	8b e9       	ldi	r24, 0x9B	; 155
   1774e:	9e e0       	ldi	r25, 0x0E	; 14
   17750:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
    ///
    load_max = 0;
   17754:	10 92 51 11 	sts	0x1151, r1	; 0x801151 <load_max>
   17758:	10 92 52 11 	sts	0x1152, r1	; 0x801152 <load_max+0x1>
   1775c:	10 92 53 11 	sts	0x1153, r1	; 0x801153 <load_max+0x2>
   17760:	10 92 54 11 	sts	0x1154, r1	; 0x801154 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3599
    load_min = 0xffffffff;
   17764:	8f ef       	ldi	r24, 0xFF	; 255
   17766:	9f ef       	ldi	r25, 0xFF	; 255
   17768:	dc 01       	movw	r26, r24
   1776a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   1776e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   17772:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   17776:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
    ///
    strcpy(str_topic, "status/default_ring");
   1777a:	65 e9       	ldi	r22, 0x95	; 149
   1777c:	77 e0       	ldi	r23, 0x07	; 7
   1777e:	ce 01       	movw	r24, r28
   17780:	8f 5b       	subi	r24, 0xBF	; 191
   17782:	9f 4f       	sbci	r25, 0xFF	; 255
   17784:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
    itoa(default_ring, payload, 10);
   17788:	80 91 82 0a 	lds	r24, 0x0A82	; 0x800a82 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1778c:	4a e0       	ldi	r20, 0x0A	; 10
   1778e:	be 01       	movw	r22, r28
   17790:	6f 5f       	subi	r22, 0xFF	; 255
   17792:	7f 4f       	sbci	r23, 0xFF	; 255
   17794:	90 e0       	ldi	r25, 0x00	; 0
   17796:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1779a:	ae 01       	movw	r20, r28
   1779c:	4f 5f       	subi	r20, 0xFF	; 255
   1779e:	5f 4f       	sbci	r21, 0xFF	; 255
   177a0:	be 01       	movw	r22, r28
   177a2:	6f 5b       	subi	r22, 0xBF	; 191
   177a4:	7f 4f       	sbci	r23, 0xFF	; 255
   177a6:	8b e9       	ldi	r24, 0x9B	; 155
   177a8:	9e e0       	ldi	r25, 0x0E	; 14
   177aa:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3605
    ///
    strcpy(str_topic, "status/selftest");
   177ae:	69 ea       	ldi	r22, 0xA9	; 169
   177b0:	77 e0       	ldi	r23, 0x07	; 7
   177b2:	ce 01       	movw	r24, r28
   177b4:	8f 5b       	subi	r24, 0xBF	; 191
   177b6:	9f 4f       	sbci	r25, 0xFF	; 255
   177b8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
    itoa(selftest_data, payload, 10);
   177bc:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   177c0:	4a e0       	ldi	r20, 0x0A	; 10
   177c2:	be 01       	movw	r22, r28
   177c4:	6f 5f       	subi	r22, 0xFF	; 255
   177c6:	7f 4f       	sbci	r23, 0xFF	; 255
   177c8:	90 e0       	ldi	r25, 0x00	; 0
   177ca:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3607
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   177ce:	ae 01       	movw	r20, r28
   177d0:	4f 5f       	subi	r20, 0xFF	; 255
   177d2:	5f 4f       	sbci	r21, 0xFF	; 255
   177d4:	be 01       	movw	r22, r28
   177d6:	6f 5b       	subi	r22, 0xBF	; 191
   177d8:	7f 4f       	sbci	r23, 0xFF	; 255
   177da:	8b e9       	ldi	r24, 0x9B	; 155
   177dc:	9e e0       	ldi	r25, 0x0E	; 14
   177de:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609

    strcpy(str_topic, "status/rtds/count");
   177e2:	69 eb       	ldi	r22, 0xB9	; 185
   177e4:	77 e0       	ldi	r23, 0x07	; 7
   177e6:	ce 01       	movw	r24, r28
   177e8:	8f 5b       	subi	r24, 0xBF	; 191
   177ea:	9f 4f       	sbci	r25, 0xFF	; 255
   177ec:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
    itoa(use_rtds, payload, 10);
   177f0:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   177f4:	4a e0       	ldi	r20, 0x0A	; 10
   177f6:	be 01       	movw	r22, r28
   177f8:	6f 5f       	subi	r22, 0xFF	; 255
   177fa:	7f 4f       	sbci	r23, 0xFF	; 255
   177fc:	90 e0       	ldi	r25, 0x00	; 0
   177fe:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3611
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   17802:	ae 01       	movw	r20, r28
   17804:	4f 5f       	subi	r20, 0xFF	; 255
   17806:	5f 4f       	sbci	r21, 0xFF	; 255
   17808:	be 01       	movw	r22, r28
   1780a:	6f 5b       	subi	r22, 0xBF	; 191
   1780c:	7f 4f       	sbci	r23, 0xFF	; 255
   1780e:	8b e9       	ldi	r24, 0x9B	; 155
   17810:	9e e0       	ldi	r25, 0x0E	; 14
   17812:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   17816:	81 e0       	ldi	r24, 0x01	; 1
   17818:	90 e0       	ldi	r25, 0x00	; 0
   1781a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1781e:	4a e0       	ldi	r20, 0x0A	; 10
   17820:	be 01       	movw	r22, r28
   17822:	6f 5f       	subi	r22, 0xFF	; 255
   17824:	7f 4f       	sbci	r23, 0xFF	; 255
   17826:	90 e0       	ldi	r25, 0x00	; 0
   17828:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1782c:	ae 01       	movw	r20, r28
   1782e:	4f 5f       	subi	r20, 0xFF	; 255
   17830:	5f 4f       	sbci	r21, 0xFF	; 255
   17832:	6b ec       	ldi	r22, 0xCB	; 203
   17834:	77 e0       	ldi	r23, 0x07	; 7
   17836:	8b e9       	ldi	r24, 0x9B	; 155
   17838:	9e e0       	ldi	r25, 0x0E	; 14
   1783a:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1783e:	80 91 80 0a 	lds	r24, 0x0A80	; 0x800a80 <tritri>
   17842:	90 91 81 0a 	lds	r25, 0x0A81	; 0x800a81 <tritri+0x1>
   17846:	25 e0       	ldi	r18, 0x05	; 5
   17848:	28 9f       	mul	r18, r24
   1784a:	b0 01       	movw	r22, r0
   1784c:	29 9f       	mul	r18, r25
   1784e:	70 0d       	add	r23, r0
   17850:	11 24       	eor	r1, r1
   17852:	90 e0       	ldi	r25, 0x00	; 0
   17854:	80 e0       	ldi	r24, 0x00	; 0
   17856:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   1785a:	20 e0       	ldi	r18, 0x00	; 0
   1785c:	30 e0       	ldi	r19, 0x00	; 0
   1785e:	4a e7       	ldi	r20, 0x7A	; 122
   17860:	54 e4       	ldi	r21, 0x44	; 68
   17862:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   17866:	8e 01       	movw	r16, r28
   17868:	0f 5f       	subi	r16, 0xFF	; 255
   1786a:	1f 4f       	sbci	r17, 0xFF	; 255
   1786c:	22 e0       	ldi	r18, 0x02	; 2
   1786e:	44 e0       	ldi	r20, 0x04	; 4
   17870:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3621
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   17874:	a8 01       	movw	r20, r16
   17876:	6b ed       	ldi	r22, 0xDB	; 219
   17878:	77 e0       	ldi	r23, 0x07	; 7
   1787a:	8b e9       	ldi	r24, 0x9B	; 155
   1787c:	9e e0       	ldi	r25, 0x0E	; 14
   1787e:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   17882:	60 91 7e 0a 	lds	r22, 0x0A7E	; 0x800a7e <petnula>
   17886:	70 91 7f 0a 	lds	r23, 0x0A7F	; 0x800a7f <petnula+0x1>
   1788a:	23 e0       	ldi	r18, 0x03	; 3
   1788c:	66 0f       	add	r22, r22
   1788e:	77 1f       	adc	r23, r23
   17890:	2a 95       	dec	r18
   17892:	e1 f7       	brne	.-8      	; 0x1788c <main+0x5a4>
   17894:	90 e0       	ldi	r25, 0x00	; 0
   17896:	80 e0       	ldi	r24, 0x00	; 0
   17898:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   1789c:	20 e0       	ldi	r18, 0x00	; 0
   1789e:	30 e0       	ldi	r19, 0x00	; 0
   178a0:	4a e7       	ldi	r20, 0x7A	; 122
   178a2:	54 e4       	ldi	r21, 0x44	; 68
   178a4:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3623
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   178a8:	22 e0       	ldi	r18, 0x02	; 2
   178aa:	44 e0       	ldi	r20, 0x04	; 4
   178ac:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   178b0:	a8 01       	movw	r20, r16
   178b2:	6e ee       	ldi	r22, 0xEE	; 238
   178b4:	77 e0       	ldi	r23, 0x07	; 7
   178b6:	8b e9       	ldi	r24, 0x9B	; 155
   178b8:	9e e0       	ldi	r25, 0x0E	; 14
   178ba:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   178be:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <dvanact>
   178c2:	90 91 7d 0a 	lds	r25, 0x0A7D	; 0x800a7d <dvanact+0x1>
   178c6:	29 e3       	ldi	r18, 0x39	; 57
   178c8:	28 9f       	mul	r18, r24
   178ca:	b0 01       	movw	r22, r0
   178cc:	29 9f       	mul	r18, r25
   178ce:	70 0d       	add	r23, r0
   178d0:	11 24       	eor	r1, r1
   178d2:	90 e0       	ldi	r25, 0x00	; 0
   178d4:	80 e0       	ldi	r24, 0x00	; 0
   178d6:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   178da:	20 e0       	ldi	r18, 0x00	; 0
   178dc:	30 e0       	ldi	r19, 0x00	; 0
   178de:	4a e7       	ldi	r20, 0x7A	; 122
   178e0:	54 e4       	ldi	r21, 0x44	; 68
   178e2:	0e 94 ab ce 	call	0x19d56	; 0x19d56 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   178e6:	22 e0       	ldi	r18, 0x02	; 2
   178e8:	44 e0       	ldi	r20, 0x04	; 4
   178ea:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   178ee:	a8 01       	movw	r20, r16
   178f0:	61 e0       	ldi	r22, 0x01	; 1
   178f2:	78 e0       	ldi	r23, 0x08	; 8
   178f4:	8b e9       	ldi	r24, 0x9B	; 155
   178f6:	9e e0       	ldi	r25, 0x0E	; 14
   178f8:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3968
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   178fc:	60 91 7a 0a 	lds	r22, 0x0A7A	; 0x800a7a <proud>
   17900:	70 91 7b 0a 	lds	r23, 0x0A7B	; 0x800a7b <proud+0x1>
   17904:	90 e0       	ldi	r25, 0x00	; 0
   17906:	80 e0       	ldi	r24, 0x00	; 0
   17908:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1790c:	22 e0       	ldi	r18, 0x02	; 2
   1790e:	44 e0       	ldi	r20, 0x04	; 4
   17910:	0e 94 9d c2 	call	0x1853a	; 0x1853a <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3630
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   17914:	a8 01       	movw	r20, r16
   17916:	64 e1       	ldi	r22, 0x14	; 20
   17918:	78 e0       	ldi	r23, 0x08	; 8
   1791a:	8b e9       	ldi	r24, 0x9B	; 155
   1791c:	9e e0       	ldi	r25, 0x0E	; 14
   1791e:	0e 94 88 72 	call	0xe510	; 0xe510 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   17922:	9c e5       	ldi	r25, 0x5C	; 92
   17924:	e9 2e       	mov	r14, r25
   17926:	ff 24       	eor	r15, r15
   17928:	f3 94       	inc	r15
   1792a:	10 e0       	ldi	r17, 0x00	; 0
   1792c:	00 e0       	ldi	r16, 0x00	; 0
   1792e:	d0 2e       	mov	r13, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   17930:	80 2f       	mov	r24, r16
   17932:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
   17936:	8f 3f       	cpi	r24, 0xFF	; 255
   17938:	09 f4       	brne	.+2      	; 0x1793c <main+0x654>
   1793a:	f1 c0       	rjmp	.+482    	; 0x17b1e <main+0x836>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
    {
      thermostat_ring_get_name(idx, payload);
   1793c:	be 01       	movw	r22, r28
   1793e:	6f 5f       	subi	r22, 0xFF	; 255
   17940:	7f 4f       	sbci	r23, 0xFF	; 255
   17942:	80 2f       	mov	r24, r16
   17944:	0e 94 7b 6b 	call	0xd6f6	; 0xd6f6 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   17948:	9e 01       	movw	r18, r28
   1794a:	2f 5f       	subi	r18, 0xFF	; 255
   1794c:	3f 4f       	sbci	r19, 0xFF	; 255
   1794e:	4d ec       	ldi	r20, 0xCD	; 205
   17950:	53 e0       	ldi	r21, 0x03	; 3
   17952:	60 2f       	mov	r22, r16
   17954:	84 ea       	ldi	r24, 0xA4	; 164
   17956:	97 e0       	ldi	r25, 0x07	; 7
   17958:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
      itoa(thermostat_ring_get_active(idx), payload, 10);
   1795c:	80 2f       	mov	r24, r16
   1795e:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17962:	4a e0       	ldi	r20, 0x0A	; 10
   17964:	be 01       	movw	r22, r28
   17966:	6f 5f       	subi	r22, 0xFF	; 255
   17968:	7f 4f       	sbci	r23, 0xFF	; 255
   1796a:	90 e0       	ldi	r25, 0x00	; 0
   1796c:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   17970:	9e 01       	movw	r18, r28
   17972:	2f 5f       	subi	r18, 0xFF	; 255
   17974:	3f 4f       	sbci	r19, 0xFF	; 255
   17976:	47 ed       	ldi	r20, 0xD7	; 215
   17978:	53 e0       	ldi	r21, 0x03	; 3
   1797a:	60 2f       	mov	r22, r16
   1797c:	84 ea       	ldi	r24, 0xA4	; 164
   1797e:	97 e0       	ldi	r25, 0x07	; 7
   17980:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_ring_get_program_id():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   17984:	c7 01       	movw	r24, r14
   17986:	01 97       	sbiw	r24, 0x01	; 1
   17988:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1798c:	4a e0       	ldi	r20, 0x0A	; 10
   1798e:	be 01       	movw	r22, r28
   17990:	6f 5f       	subi	r22, 0xFF	; 255
   17992:	7f 4f       	sbci	r23, 0xFF	; 255
   17994:	90 e0       	ldi	r25, 0x00	; 0
   17996:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   1799a:	9e 01       	movw	r18, r28
   1799c:	2f 5f       	subi	r18, 0xFF	; 255
   1799e:	3f 4f       	sbci	r19, 0xFF	; 255
   179a0:	45 e5       	ldi	r20, 0x55	; 85
   179a2:	56 e0       	ldi	r21, 0x06	; 6
   179a4:	60 2f       	mov	r22, r16
   179a6:	84 ea       	ldi	r24, 0xA4	; 164
   179a8:	97 e0       	ldi	r25, 0x07	; 7
   179aa:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   179ae:	80 2f       	mov	r24, r16
   179b0:	0e 94 a1 6a 	call	0xd542	; 0xd542 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   179b4:	4a e0       	ldi	r20, 0x0A	; 10
   179b6:	be 01       	movw	r22, r28
   179b8:	6f 5f       	subi	r22, 0xFF	; 255
   179ba:	7f 4f       	sbci	r23, 0xFF	; 255
   179bc:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   179c0:	9e 01       	movw	r18, r28
   179c2:	2f 5f       	subi	r18, 0xFF	; 255
   179c4:	3f 4f       	sbci	r19, 0xFF	; 255
   179c6:	4b e4       	ldi	r20, 0x4B	; 75
   179c8:	56 e0       	ldi	r21, 0x06	; 6
   179ca:	60 2f       	mov	r22, r16
   179cc:	84 ea       	ldi	r24, 0xA4	; 164
   179ce:	97 e0       	ldi	r25, 0x07	; 7
   179d0:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   179d4:	80 2f       	mov	r24, r16
   179d6:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   179da:	4a e0       	ldi	r20, 0x0A	; 10
   179dc:	be 01       	movw	r22, r28
   179de:	6f 5f       	subi	r22, 0xFF	; 255
   179e0:	7f 4f       	sbci	r23, 0xFF	; 255
   179e2:	90 e0       	ldi	r25, 0x00	; 0
   179e4:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   179e8:	9e 01       	movw	r18, r28
   179ea:	2f 5f       	subi	r18, 0xFF	; 255
   179ec:	3f 4f       	sbci	r19, 0xFF	; 255
   179ee:	4e e6       	ldi	r20, 0x6E	; 110
   179f0:	56 e0       	ldi	r21, 0x06	; 6
   179f2:	60 2f       	mov	r22, r16
   179f4:	84 ea       	ldi	r24, 0xA4	; 164
   179f6:	97 e0       	ldi	r25, 0x07	; 7
   179f8:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3662
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   179fc:	80 2f       	mov	r24, r16
   179fe:	0e 94 19 6a 	call	0xd432	; 0xd432 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   17a02:	6b e2       	ldi	r22, 0x2B	; 43
   17a04:	78 e0       	ldi	r23, 0x08	; 8
   17a06:	88 23       	and	r24, r24
   17a08:	a1 f0       	breq	.+40     	; 0x17a32 <main+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   17a0a:	61 e5       	ldi	r22, 0x51	; 81
   17a0c:	75 e0       	ldi	r23, 0x05	; 5
   17a0e:	81 30       	cpi	r24, 0x01	; 1
   17a10:	81 f0       	breq	.+32     	; 0x17a32 <main+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   17a12:	66 e5       	ldi	r22, 0x56	; 86
   17a14:	75 e0       	ldi	r23, 0x05	; 5
   17a16:	83 30       	cpi	r24, 0x03	; 3
   17a18:	61 f0       	breq	.+24     	; 0x17a32 <main+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   17a1a:	6d e5       	ldi	r22, 0x5D	; 93
   17a1c:	75 e0       	ldi	r23, 0x05	; 5
   17a1e:	82 30       	cpi	r24, 0x02	; 2
   17a20:	41 f0       	breq	.+16     	; 0x17a32 <main+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   17a22:	62 e6       	ldi	r22, 0x62	; 98
   17a24:	75 e0       	ldi	r23, 0x05	; 5
   17a26:	84 30       	cpi	r24, 0x04	; 4
   17a28:	21 f0       	breq	.+8      	; 0x17a32 <main+0x74a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   17a2a:	86 30       	cpi	r24, 0x06	; 6
   17a2c:	31 f4       	brne	.+12     	; 0x17a3a <main+0x752>
   17a2e:	67 e6       	ldi	r22, 0x67	; 103
   17a30:	75 e0       	ldi	r23, 0x05	; 5
   17a32:	ce 01       	movw	r24, r28
   17a34:	01 96       	adiw	r24, 0x01	; 1
   17a36:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   17a3a:	9e 01       	movw	r18, r28
   17a3c:	2f 5f       	subi	r18, 0xFF	; 255
   17a3e:	3f 4f       	sbci	r19, 0xFF	; 255
   17a40:	49 e6       	ldi	r20, 0x69	; 105
   17a42:	56 e0       	ldi	r21, 0x06	; 6
   17a44:	6d 2d       	mov	r22, r13
   17a46:	84 ea       	ldi	r24, 0xA4	; 164
   17a48:	97 e0       	ldi	r25, 0x07	; 7
   17a4a:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_ring_get_state():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   17a4e:	f8 01       	movw	r30, r16
   17a50:	ed 57       	subi	r30, 0x7D	; 125
   17a52:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      itoa(thermostat_ring_get_state(idx), payload, 10);
   17a54:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17a56:	4a e0       	ldi	r20, 0x0A	; 10
   17a58:	be 01       	movw	r22, r28
   17a5a:	6f 5f       	subi	r22, 0xFF	; 255
   17a5c:	7f 4f       	sbci	r23, 0xFF	; 255
   17a5e:	90 e0       	ldi	r25, 0x00	; 0
   17a60:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   17a64:	9e 01       	movw	r18, r28
   17a66:	2f 5f       	subi	r18, 0xFF	; 255
   17a68:	3f 4f       	sbci	r19, 0xFF	; 255
   17a6a:	4f e2       	ldi	r20, 0x2F	; 47
   17a6c:	58 e0       	ldi	r21, 0x08	; 8
   17a6e:	6d 2d       	mov	r22, r13
   17a70:	84 ea       	ldi	r24, 0xA4	; 164
   17a72:	97 e0       	ldi	r25, 0x07	; 7
   17a74:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   17a78:	c7 01       	movw	r24, r14
   17a7a:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17a7e:	4a e0       	ldi	r20, 0x0A	; 10
   17a80:	be 01       	movw	r22, r28
   17a82:	6f 5f       	subi	r22, 0xFF	; 255
   17a84:	7f 4f       	sbci	r23, 0xFF	; 255
   17a86:	90 e0       	ldi	r25, 0x00	; 0
   17a88:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   17a8c:	9e 01       	movw	r18, r28
   17a8e:	2f 5f       	subi	r18, 0xFF	; 255
   17a90:	3f 4f       	sbci	r19, 0xFF	; 255
   17a92:	43 e7       	ldi	r20, 0x73	; 115
   17a94:	56 e0       	ldi	r21, 0x06	; 6
   17a96:	6d 2d       	mov	r22, r13
   17a98:	84 ea       	ldi	r24, 0xA4	; 164
   17a9a:	97 e0       	ldi	r25, 0x07	; 7
   17a9c:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_ring_get_output():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   17aa0:	c7 01       	movw	r24, r14
   17aa2:	03 96       	adiw	r24, 0x03	; 3
   17aa4:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17aa8:	4a e0       	ldi	r20, 0x0A	; 10
   17aaa:	be 01       	movw	r22, r28
   17aac:	6f 5f       	subi	r22, 0xFF	; 255
   17aae:	7f 4f       	sbci	r23, 0xFF	; 255
   17ab0:	90 e0       	ldi	r25, 0x00	; 0
   17ab2:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   17ab6:	9e 01       	movw	r18, r28
   17ab8:	2f 5f       	subi	r18, 0xFF	; 255
   17aba:	3f 4f       	sbci	r19, 0xFF	; 255
   17abc:	49 e7       	ldi	r20, 0x79	; 121
   17abe:	56 e0       	ldi	r21, 0x06	; 6
   17ac0:	6d 2d       	mov	r22, r13
   17ac2:	84 ea       	ldi	r24, 0xA4	; 164
   17ac4:	97 e0       	ldi	r25, 0x07	; 7
   17ac6:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
thermostat_ring_get_status_data():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   17aca:	c7 01       	movw	r24, r14
   17acc:	04 97       	sbiw	r24, 0x04	; 4
   17ace:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17ad2:	4a e0       	ldi	r20, 0x0A	; 10
   17ad4:	be 01       	movw	r22, r28
   17ad6:	6f 5f       	subi	r22, 0xFF	; 255
   17ad8:	7f 4f       	sbci	r23, 0xFF	; 255
   17ada:	90 e0       	ldi	r25, 0x00	; 0
   17adc:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   17ae0:	9e 01       	movw	r18, r28
   17ae2:	2f 5f       	subi	r18, 0xFF	; 255
   17ae4:	3f 4f       	sbci	r19, 0xFF	; 255
   17ae6:	46 e3       	ldi	r20, 0x36	; 54
   17ae8:	58 e0       	ldi	r21, 0x08	; 8
   17aea:	6d 2d       	mov	r22, r13
   17aec:	84 ea       	ldi	r24, 0xA4	; 164
   17aee:	97 e0       	ldi	r25, 0x07	; 7
   17af0:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674

      itoa(last_output_update[idx], payload, 10);
   17af4:	f8 01       	movw	r30, r16
   17af6:	e8 57       	subi	r30, 0x78	; 120
   17af8:	f5 4f       	sbci	r31, 0xF5	; 245
   17afa:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17afc:	4a e0       	ldi	r20, 0x0A	; 10
   17afe:	be 01       	movw	r22, r28
   17b00:	6f 5f       	subi	r22, 0xFF	; 255
   17b02:	7f 4f       	sbci	r23, 0xFF	; 255
   17b04:	90 e0       	ldi	r25, 0x00	; 0
   17b06:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   17b0a:	9e 01       	movw	r18, r28
   17b0c:	2f 5f       	subi	r18, 0xFF	; 255
   17b0e:	3f 4f       	sbci	r19, 0xFF	; 255
   17b10:	43 e4       	ldi	r20, 0x43	; 67
   17b12:	58 e0       	ldi	r21, 0x08	; 8
   17b14:	6d 2d       	mov	r22, r13
   17b16:	84 ea       	ldi	r24, 0xA4	; 164
   17b18:	97 e0       	ldi	r25, 0x07	; 7
   17b1a:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
   17b1e:	0f 5f       	subi	r16, 0xFF	; 255
   17b20:	1f 4f       	sbci	r17, 0xFF	; 255
   17b22:	f1 e2       	ldi	r31, 0x21	; 33
   17b24:	ef 0e       	add	r14, r31
   17b26:	f1 1c       	adc	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   17b28:	21 e0       	ldi	r18, 0x01	; 1
   17b2a:	e2 16       	cp	r14, r18
   17b2c:	22 e0       	ldi	r18, 0x02	; 2
   17b2e:	f2 06       	cpc	r15, r18
   17b30:	09 f0       	breq	.+2      	; 0x17b34 <main+0x84c>
   17b32:	fd ce       	rjmp	.-518    	; 0x1792e <main+0x646>
   17b34:	bd e8       	ldi	r27, 0x8D	; 141
   17b36:	eb 2e       	mov	r14, r27
   17b38:	ba e0       	ldi	r27, 0x0A	; 10
   17b3a:	fb 2e       	mov	r15, r27
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   17b3c:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   17b3e:	0a e0       	ldi	r16, 0x0A	; 10
   17b40:	c0 2e       	mov	r12, r16
   17b42:	d1 2c       	mov	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   17b44:	81 e4       	ldi	r24, 0x41	; 65
   17b46:	a8 2e       	mov	r10, r24
   17b48:	b1 2c       	mov	r11, r1
   17b4a:	ac 0e       	add	r10, r28
   17b4c:	bd 1e       	adc	r11, r29
   17b4e:	3f ef       	ldi	r19, 0xFF	; 255
   17b50:	a3 1a       	sub	r10, r19
   17b52:	b3 0a       	sbc	r11, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   17b54:	be 01       	movw	r22, r28
   17b56:	6f 5b       	subi	r22, 0xBF	; 191
   17b58:	7f 4f       	sbci	r23, 0xFF	; 255
   17b5a:	81 2f       	mov	r24, r17
   17b5c:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   17b60:	81 30       	cpi	r24, 0x01	; 1
   17b62:	09 f0       	breq	.+2      	; 0x17b66 <main+0x87e>
   17b64:	c9 c0       	rjmp	.+402    	; 0x17cf8 <main+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   17b66:	22 96       	adiw	r28, 0x02	; 2
   17b68:	8f ad       	ldd	r24, Y+63	; 0x3f
   17b6a:	22 97       	sbiw	r28, 0x02	; 2
   17b6c:	81 30       	cpi	r24, 0x01	; 1
   17b6e:	09 f0       	breq	.+2      	; 0x17b72 <main+0x88a>
   17b70:	c3 c0       	rjmp	.+390    	; 0x17cf8 <main+0xa10>
   17b72:	f7 01       	movw	r30, r14
   17b74:	83 8d       	ldd	r24, Z+27	; 0x1b
   17b76:	81 30       	cpi	r24, 0x01	; 1
   17b78:	09 f0       	breq	.+2      	; 0x17b7c <main+0x894>
   17b7a:	be c0       	rjmp	.+380    	; 0x17cf8 <main+0xa10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
        {
          tt = status_tds18s20[id].temp / 10;
   17b7c:	85 81       	ldd	r24, Z+5	; 0x05
   17b7e:	96 81       	ldd	r25, Z+6	; 0x06
   17b80:	b6 01       	movw	r22, r12
   17b82:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   17b86:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17b88:	4a e0       	ldi	r20, 0x0A	; 10
   17b8a:	be 01       	movw	r22, r28
   17b8c:	6f 5f       	subi	r22, 0xFF	; 255
   17b8e:	7f 4f       	sbci	r23, 0xFF	; 255
   17b90:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   17b94:	9e 01       	movw	r18, r28
   17b96:	2f 5f       	subi	r18, 0xFF	; 255
   17b98:	3f 4f       	sbci	r19, 0xFF	; 255
   17b9a:	4e ed       	ldi	r20, 0xDE	; 222
   17b9c:	53 e0       	ldi	r21, 0x03	; 3
   17b9e:	61 2f       	mov	r22, r17
   17ba0:	83 ed       	ldi	r24, 0xD3	; 211
   17ba2:	93 e0       	ldi	r25, 0x03	; 3
   17ba4:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
   17ba8:	30 e0       	ldi	r19, 0x00	; 0
   17baa:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
          avg = 0;
   17bac:	60 e0       	ldi	r22, 0x00	; 0
   17bae:	70 e0       	ldi	r23, 0x00	; 0
   17bb0:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   17bb2:	f9 01       	movw	r30, r18
   17bb4:	ee 0f       	add	r30, r30
   17bb6:	ff 1f       	adc	r31, r31
   17bb8:	ee 0d       	add	r30, r14
   17bba:	ff 1d       	adc	r31, r15
   17bbc:	67 80       	ldd	r6, Z+7	; 0x07
   17bbe:	70 84       	ldd	r7, Z+8	; 0x08
   17bc0:	07 2c       	mov	r0, r7
   17bc2:	00 0c       	add	r0, r0
   17bc4:	88 08       	sbc	r8, r8
   17bc6:	99 08       	sbc	r9, r9
   17bc8:	66 0d       	add	r22, r6
   17bca:	77 1d       	adc	r23, r7
   17bcc:	88 1d       	adc	r24, r8
   17bce:	99 1d       	adc	r25, r9
   17bd0:	2f 5f       	subi	r18, 0xFF	; 255
   17bd2:	3f 4f       	sbci	r19, 0xFF	; 255
   17bd4:	2a 30       	cpi	r18, 0x0A	; 10
   17bd6:	31 05       	cpc	r19, r1
   17bd8:	61 f7       	brne	.-40     	; 0x17bb2 <main+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3704
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   17bda:	24 e6       	ldi	r18, 0x64	; 100
   17bdc:	30 e0       	ldi	r19, 0x00	; 0
   17bde:	40 e0       	ldi	r20, 0x00	; 0
   17be0:	50 e0       	ldi	r21, 0x00	; 0
   17be2:	0e 94 05 ce 	call	0x19c0a	; 0x19c0a <__divmodsi4>
   17be6:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17be8:	4a e0       	ldi	r20, 0x0A	; 10
   17bea:	be 01       	movw	r22, r28
   17bec:	6f 5f       	subi	r22, 0xFF	; 255
   17bee:	7f 4f       	sbci	r23, 0xFF	; 255
   17bf0:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3706
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   17bf4:	9e 01       	movw	r18, r28
   17bf6:	2f 5f       	subi	r18, 0xFF	; 255
   17bf8:	3f 4f       	sbci	r19, 0xFF	; 255
   17bfa:	41 e5       	ldi	r20, 0x51	; 81
   17bfc:	58 e0       	ldi	r21, 0x08	; 8
   17bfe:	61 2f       	mov	r22, r17
   17c00:	83 ed       	ldi	r24, 0xD3	; 211
   17c02:	93 e0       	ldi	r25, 0x03	; 3
   17c04:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708

          strcpy(payload, tds.name);
   17c08:	c8 57       	subi	r28, 0x78	; 120
   17c0a:	df 4f       	sbci	r29, 0xFF	; 255
   17c0c:	68 81       	ld	r22, Y
   17c0e:	79 81       	ldd	r23, Y+1	; 0x01
   17c10:	c8 58       	subi	r28, 0x88	; 136
   17c12:	d0 40       	sbci	r29, 0x00	; 0
   17c14:	ce 01       	movw	r24, r28
   17c16:	01 96       	adiw	r24, 0x01	; 1
   17c18:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   17c1c:	9e 01       	movw	r18, r28
   17c1e:	2f 5f       	subi	r18, 0xFF	; 255
   17c20:	3f 4f       	sbci	r19, 0xFF	; 255
   17c22:	4d ec       	ldi	r20, 0xCD	; 205
   17c24:	53 e0       	ldi	r21, 0x03	; 3
   17c26:	61 2f       	mov	r22, r17
   17c28:	83 ed       	ldi	r24, 0xD3	; 211
   17c2a:	93 e0       	ldi	r25, 0x03	; 3
   17c2c:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17c30:	4a e0       	ldi	r20, 0x0A	; 10
   17c32:	be 01       	movw	r22, r28
   17c34:	6f 5f       	subi	r22, 0xFF	; 255
   17c36:	7f 4f       	sbci	r23, 0xFF	; 255
   17c38:	2d 96       	adiw	r28, 0x0d	; 13
   17c3a:	8e ad       	ldd	r24, Y+62	; 0x3e
   17c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
   17c3e:	2d 97       	sbiw	r28, 0x0d	; 13
   17c40:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   17c44:	9e 01       	movw	r18, r28
   17c46:	2f 5f       	subi	r18, 0xFF	; 255
   17c48:	3f 4f       	sbci	r19, 0xFF	; 255
   17c4a:	44 ed       	ldi	r20, 0xD4	; 212
   17c4c:	57 e0       	ldi	r21, 0x07	; 7
   17c4e:	61 2f       	mov	r22, r17
   17c50:	83 ed       	ldi	r24, 0xD3	; 211
   17c52:	93 e0       	ldi	r25, 0x03	; 3
   17c54:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
          tt = status_tds18s20[id].online;
   17c58:	f7 01       	movw	r30, r14
   17c5a:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17c5c:	4a e0       	ldi	r20, 0x0A	; 10
   17c5e:	be 01       	movw	r22, r28
   17c60:	6f 5f       	subi	r22, 0xFF	; 255
   17c62:	7f 4f       	sbci	r23, 0xFF	; 255
   17c64:	90 e0       	ldi	r25, 0x00	; 0
   17c66:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   17c6a:	9e 01       	movw	r18, r28
   17c6c:	2f 5f       	subi	r18, 0xFF	; 255
   17c6e:	3f 4f       	sbci	r19, 0xFF	; 255
   17c70:	4a e5       	ldi	r20, 0x5A	; 90
   17c72:	58 e0       	ldi	r21, 0x08	; 8
   17c74:	61 2f       	mov	r22, r17
   17c76:	83 ed       	ldi	r24, 0xD3	; 211
   17c78:	93 e0       	ldi	r25, 0x03	; 3
   17c7a:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
          payload[0] = 0;
   17c7e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3717
          createString(payload, ':', tds.rom, 8, 16);
   17c80:	00 e1       	ldi	r16, 0x10	; 16
   17c82:	28 e0       	ldi	r18, 0x08	; 8
   17c84:	a5 01       	movw	r20, r10
   17c86:	6a e3       	ldi	r22, 0x3A	; 58
   17c88:	ce 01       	movw	r24, r28
   17c8a:	01 96       	adiw	r24, 0x01	; 1
   17c8c:	0e 94 b2 ae 	call	0x15d64	; 0x15d64 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   17c90:	9e 01       	movw	r18, r28
   17c92:	2f 5f       	subi	r18, 0xFF	; 255
   17c94:	3f 4f       	sbci	r19, 0xFF	; 255
   17c96:	43 e2       	ldi	r20, 0x23	; 35
   17c98:	57 e0       	ldi	r21, 0x07	; 7
   17c9a:	61 2f       	mov	r22, r17
   17c9c:	83 ed       	ldi	r24, 0xD3	; 211
   17c9e:	93 e0       	ldi	r25, 0x03	; 3
   17ca0:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
          tt = tds.period;
   17ca4:	66 96       	adiw	r28, 0x16	; 22
   17ca6:	8f ad       	ldd	r24, Y+63	; 0x3f
   17ca8:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17caa:	4a e0       	ldi	r20, 0x0A	; 10
   17cac:	be 01       	movw	r22, r28
   17cae:	6f 5f       	subi	r22, 0xFF	; 255
   17cb0:	7f 4f       	sbci	r23, 0xFF	; 255
   17cb2:	90 e0       	ldi	r25, 0x00	; 0
   17cb4:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   17cb8:	9e 01       	movw	r18, r28
   17cba:	2f 5f       	subi	r18, 0xFF	; 255
   17cbc:	3f 4f       	sbci	r19, 0xFF	; 255
   17cbe:	44 e4       	ldi	r20, 0x44	; 68
   17cc0:	56 e0       	ldi	r21, 0x06	; 6
   17cc2:	61 2f       	mov	r22, r17
   17cc4:	83 ed       	ldi	r24, 0xD3	; 211
   17cc6:	93 e0       	ldi	r25, 0x03	; 3
   17cc8:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3723

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   17ccc:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <uptime>
   17cd0:	f7 01       	movw	r30, r14
   17cd2:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17cd4:	4a e0       	ldi	r20, 0x0A	; 10
   17cd6:	be 01       	movw	r22, r28
   17cd8:	6f 5f       	subi	r22, 0xFF	; 255
   17cda:	7f 4f       	sbci	r23, 0xFF	; 255
   17cdc:	89 1b       	sub	r24, r25
   17cde:	99 0b       	sbc	r25, r25
   17ce0:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   17ce4:	9e 01       	movw	r18, r28
   17ce6:	2f 5f       	subi	r18, 0xFF	; 255
   17ce8:	3f 4f       	sbci	r19, 0xFF	; 255
   17cea:	41 e6       	ldi	r20, 0x61	; 97
   17cec:	58 e0       	ldi	r21, 0x08	; 8
   17cee:	61 2f       	mov	r22, r17
   17cf0:	83 ed       	ldi	r24, 0xD3	; 211
   17cf2:	93 e0       	ldi	r25, 0x03	; 3
   17cf4:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   17cf8:	1f 5f       	subi	r17, 0xFF	; 255
   17cfa:	fe e1       	ldi	r31, 0x1E	; 30
   17cfc:	ef 0e       	add	r14, r31
   17cfe:	f1 1c       	adc	r15, r1
   17d00:	16 30       	cpi	r17, 0x06	; 6
   17d02:	09 f0       	breq	.+2      	; 0x17d06 <main+0xa1e>
   17d04:	27 cf       	rjmp	.-434    	; 0x17b54 <main+0x86c>
   17d06:	71 ef       	ldi	r23, 0xF1	; 241
   17d08:	67 2e       	mov	r6, r23
   17d0a:	77 24       	eor	r7, r7
   17d0c:	73 94       	inc	r7
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   17d0e:	b1 2c       	mov	r11, r1
thermostat_program_get_active():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   17d10:	c3 01       	movw	r24, r6
   17d12:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   17d16:	18 2f       	mov	r17, r24
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
  {
    act = thermostat_program_get_active(idx);
    if ( act != PROG_FREE)
   17d18:	8f 3f       	cpi	r24, 0xFF	; 255
   17d1a:	09 f4       	brne	.+2      	; 0x17d1e <main+0xa36>
   17d1c:	0b c1       	rjmp	.+534    	; 0x17f34 <main+0xc4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
    {
      thermostat_program_get_name(idx, payload);
   17d1e:	be 01       	movw	r22, r28
   17d20:	6f 5f       	subi	r22, 0xFF	; 255
   17d22:	7f 4f       	sbci	r23, 0xFF	; 255
   17d24:	8b 2d       	mov	r24, r11
   17d26:	0e 94 f5 69 	call	0xd3ea	; 0xd3ea <thermostat_program_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
   17d2a:	9e 01       	movw	r18, r28
   17d2c:	2f 5f       	subi	r18, 0xFF	; 255
   17d2e:	3f 4f       	sbci	r19, 0xFF	; 255
   17d30:	4d ec       	ldi	r20, 0xCD	; 205
   17d32:	53 e0       	ldi	r21, 0x03	; 3
   17d34:	6b 2d       	mov	r22, r11
   17d36:	8a e6       	ldi	r24, 0x6A	; 106
   17d38:	98 e0       	ldi	r25, 0x08	; 8
   17d3a:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17d3e:	4a e0       	ldi	r20, 0x0A	; 10
   17d40:	be 01       	movw	r22, r28
   17d42:	6f 5f       	subi	r22, 0xFF	; 255
   17d44:	7f 4f       	sbci	r23, 0xFF	; 255
   17d46:	81 2f       	mov	r24, r17
   17d48:	90 e0       	ldi	r25, 0x00	; 0
   17d4a:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
   17d4e:	9e 01       	movw	r18, r28
   17d50:	2f 5f       	subi	r18, 0xFF	; 255
   17d52:	3f 4f       	sbci	r19, 0xFF	; 255
   17d54:	47 ed       	ldi	r20, 0xD7	; 215
   17d56:	53 e0       	ldi	r21, 0x03	; 3
   17d58:	6b 2d       	mov	r22, r11
   17d5a:	8a e6       	ldi	r24, 0x6A	; 106
   17d5c:	98 e0       	ldi	r25, 0x08	; 8
   17d5e:	0e 94 6f ad 	call	0x15ade	; 0x15ade <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.133]>
   17d62:	43 01       	movw	r8, r6
   17d64:	21 ef       	ldi	r18, 0xF1	; 241
   17d66:	82 1a       	sub	r8, r18
   17d68:	21 e0       	ldi	r18, 0x01	; 1
   17d6a:	92 0a       	sbc	r9, r18
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   17d6c:	a1 2c       	mov	r10, r1
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
      {
        thermostat_program_get_time(idx, progid, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   17d6e:	ae 01       	movw	r20, r28
   17d70:	4f 57       	subi	r20, 0x7F	; 127
   17d72:	5f 4f       	sbci	r21, 0xFF	; 255
   17d74:	6a 01       	movw	r12, r20
   17d76:	ce 01       	movw	r24, r28
   17d78:	8e 57       	subi	r24, 0x7E	; 126
   17d7a:	9f 4f       	sbci	r25, 0xFF	; 255
   17d7c:	7c 01       	movw	r14, r24
   17d7e:	8e 01       	movw	r16, r28
   17d80:	0d 57       	subi	r16, 0x7D	; 125
   17d82:	1f 4f       	sbci	r17, 0xFF	; 255
   17d84:	9e 01       	movw	r18, r28
   17d86:	2c 57       	subi	r18, 0x7C	; 124
   17d88:	3f 4f       	sbci	r19, 0xFF	; 255
   17d8a:	4c 5f       	subi	r20, 0xFC	; 252
   17d8c:	5f 4f       	sbci	r21, 0xFF	; 255
   17d8e:	6a 2d       	mov	r22, r10
   17d90:	8b 2d       	mov	r24, r11
   17d92:	0e 94 a2 69 	call	0xd344	; 0xd344 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
        if (active == 1)
   17d96:	cf 57       	subi	r28, 0x7F	; 127
   17d98:	df 4f       	sbci	r29, 0xFF	; 255
   17d9a:	88 81       	ld	r24, Y
   17d9c:	c1 58       	subi	r28, 0x81	; 129
   17d9e:	d0 40       	sbci	r29, 0x00	; 0
   17da0:	81 30       	cpi	r24, 0x01	; 1
   17da2:	09 f0       	breq	.+2      	; 0x17da6 <main+0xabe>
   17da4:	c0 c0       	rjmp	.+384    	; 0x17f26 <main+0xc3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
        {
          itoa(start_hour, tmp1, 10);
   17da6:	cb 57       	subi	r28, 0x7B	; 123
   17da8:	df 4f       	sbci	r29, 0xFF	; 255
   17daa:	88 81       	ld	r24, Y
   17dac:	c5 58       	subi	r28, 0x85	; 133
   17dae:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17db0:	4a e0       	ldi	r20, 0x0A	; 10
   17db2:	be 01       	movw	r22, r28
   17db4:	6f 5b       	subi	r22, 0xBF	; 191
   17db6:	7f 4f       	sbci	r23, 0xFF	; 255
   17db8:	90 e0       	ldi	r25, 0x00	; 0
   17dba:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
          strcpy(payload, tmp1);
   17dbe:	be 01       	movw	r22, r28
   17dc0:	6f 5b       	subi	r22, 0xBF	; 191
   17dc2:	7f 4f       	sbci	r23, 0xFF	; 255
   17dc4:	ce 01       	movw	r24, r28
   17dc6:	01 96       	adiw	r24, 0x01	; 1
   17dc8:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
          strcat(payload, ",");
   17dcc:	62 e0       	ldi	r22, 0x02	; 2
   17dce:	75 e0       	ldi	r23, 0x05	; 5
   17dd0:	ce 01       	movw	r24, r28
   17dd2:	01 96       	adiw	r24, 0x01	; 1
   17dd4:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
          itoa(start_min, tmp1, 10);
   17dd8:	cc 57       	subi	r28, 0x7C	; 124
   17dda:	df 4f       	sbci	r29, 0xFF	; 255
   17ddc:	88 81       	ld	r24, Y
   17dde:	c4 58       	subi	r28, 0x84	; 132
   17de0:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17de2:	4a e0       	ldi	r20, 0x0A	; 10
   17de4:	be 01       	movw	r22, r28
   17de6:	6f 5b       	subi	r22, 0xBF	; 191
   17de8:	7f 4f       	sbci	r23, 0xFF	; 255
   17dea:	90 e0       	ldi	r25, 0x00	; 0
   17dec:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
          strcat(payload, tmp1);
   17df0:	be 01       	movw	r22, r28
   17df2:	6f 5b       	subi	r22, 0xBF	; 191
   17df4:	7f 4f       	sbci	r23, 0xFF	; 255
   17df6:	ce 01       	movw	r24, r28
   17df8:	01 96       	adiw	r24, 0x01	; 1
   17dfa:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
          strcat(payload, ",");
   17dfe:	62 e0       	ldi	r22, 0x02	; 2
   17e00:	75 e0       	ldi	r23, 0x05	; 5
   17e02:	ce 01       	movw	r24, r28
   17e04:	01 96       	adiw	r24, 0x01	; 1
   17e06:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
          itoa(stop_hour, tmp1, 10);
   17e0a:	cd 57       	subi	r28, 0x7D	; 125
   17e0c:	df 4f       	sbci	r29, 0xFF	; 255
   17e0e:	88 81       	ld	r24, Y
   17e10:	c3 58       	subi	r28, 0x83	; 131
   17e12:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17e14:	4a e0       	ldi	r20, 0x0A	; 10
   17e16:	be 01       	movw	r22, r28
   17e18:	6f 5b       	subi	r22, 0xBF	; 191
   17e1a:	7f 4f       	sbci	r23, 0xFF	; 255
   17e1c:	90 e0       	ldi	r25, 0x00	; 0
   17e1e:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
          strcat(payload, tmp1);
   17e22:	be 01       	movw	r22, r28
   17e24:	6f 5b       	subi	r22, 0xBF	; 191
   17e26:	7f 4f       	sbci	r23, 0xFF	; 255
   17e28:	ce 01       	movw	r24, r28
   17e2a:	01 96       	adiw	r24, 0x01	; 1
   17e2c:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3764
          strcat(payload, ",");
   17e30:	62 e0       	ldi	r22, 0x02	; 2
   17e32:	75 e0       	ldi	r23, 0x05	; 5
   17e34:	ce 01       	movw	r24, r28
   17e36:	01 96       	adiw	r24, 0x01	; 1
   17e38:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
          itoa(stop_min, tmp1, 10);
   17e3c:	ce 57       	subi	r28, 0x7E	; 126
   17e3e:	df 4f       	sbci	r29, 0xFF	; 255
   17e40:	88 81       	ld	r24, Y
   17e42:	c2 58       	subi	r28, 0x82	; 130
   17e44:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17e46:	4a e0       	ldi	r20, 0x0A	; 10
   17e48:	be 01       	movw	r22, r28
   17e4a:	6f 5b       	subi	r22, 0xBF	; 191
   17e4c:	7f 4f       	sbci	r23, 0xFF	; 255
   17e4e:	90 e0       	ldi	r25, 0x00	; 0
   17e50:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
          strcat(payload, tmp1);
   17e54:	be 01       	movw	r22, r28
   17e56:	6f 5b       	subi	r22, 0xBF	; 191
   17e58:	7f 4f       	sbci	r23, 0xFF	; 255
   17e5a:	ce 01       	movw	r24, r28
   17e5c:	01 96       	adiw	r24, 0x01	; 1
   17e5e:	0e 94 5b d0 	call	0x1a0b6	; 0x1a0b6 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "time", payload);
   17e62:	9e 01       	movw	r18, r28
   17e64:	2f 5f       	subi	r18, 0xFF	; 255
   17e66:	3f 4f       	sbci	r19, 0xFF	; 255
   17e68:	49 e9       	ldi	r20, 0x99	; 153
   17e6a:	56 e0       	ldi	r21, 0x06	; 6
   17e6c:	6a 2d       	mov	r22, r10
   17e6e:	8b 2d       	mov	r24, r11
   17e70:	0e 94 f8 ad 	call	0x15bf0	; 0x15bf0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3768
          itoa(active, tmp1, 10);
   17e74:	cf 57       	subi	r28, 0x7F	; 127
   17e76:	df 4f       	sbci	r29, 0xFF	; 255
   17e78:	88 81       	ld	r24, Y
   17e7a:	c1 58       	subi	r28, 0x81	; 129
   17e7c:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17e7e:	4a e0       	ldi	r20, 0x0A	; 10
   17e80:	be 01       	movw	r22, r28
   17e82:	6f 5b       	subi	r22, 0xBF	; 191
   17e84:	7f 4f       	sbci	r23, 0xFF	; 255
   17e86:	90 e0       	ldi	r25, 0x00	; 0
   17e88:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
          strcpy(payload, tmp1);
   17e8c:	be 01       	movw	r22, r28
   17e8e:	6f 5b       	subi	r22, 0xBF	; 191
   17e90:	7f 4f       	sbci	r23, 0xFF	; 255
   17e92:	ce 01       	movw	r24, r28
   17e94:	01 96       	adiw	r24, 0x01	; 1
   17e96:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "active", payload);
   17e9a:	9e 01       	movw	r18, r28
   17e9c:	2f 5f       	subi	r18, 0xFF	; 255
   17e9e:	3f 4f       	sbci	r19, 0xFF	; 255
   17ea0:	47 ed       	ldi	r20, 0xD7	; 215
   17ea2:	53 e0       	ldi	r21, 0x03	; 3
   17ea4:	6a 2d       	mov	r22, r10
   17ea6:	8b 2d       	mov	r24, r11
   17ea8:	0e 94 f8 ad 	call	0x15bf0	; 0x15bf0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_program_get_threshold():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:325

//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
   17eac:	c4 01       	movw	r24, r8
   17eae:	8a 50       	subi	r24, 0x0A	; 10
   17eb0:	9e 4f       	sbci	r25, 0xFE	; 254
   17eb2:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   17eb6:	18 2f       	mov	r17, r24
   17eb8:	c4 01       	movw	r24, r8
   17eba:	8b 50       	subi	r24, 0x0B	; 11
   17ebc:	9e 4f       	sbci	r25, 0xFE	; 254
   17ebe:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   17ec2:	21 2f       	mov	r18, r17
   17ec4:	30 e0       	ldi	r19, 0x00	; 0
   17ec6:	32 2f       	mov	r19, r18
   17ec8:	22 27       	eor	r18, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17eca:	4a e0       	ldi	r20, 0x0A	; 10
   17ecc:	be 01       	movw	r22, r28
   17ece:	6f 5b       	subi	r22, 0xBF	; 191
   17ed0:	7f 4f       	sbci	r23, 0xFF	; 255
   17ed2:	82 0f       	add	r24, r18
   17ed4:	93 2f       	mov	r25, r19
   17ed6:	91 1d       	adc	r25, r1
   17ed8:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
          itoa(thermostat_program_get_threshold(idx, progid), tmp1, 10);
          strcpy(payload, tmp1);
   17edc:	be 01       	movw	r22, r28
   17ede:	6f 5b       	subi	r22, 0xBF	; 191
   17ee0:	7f 4f       	sbci	r23, 0xFF	; 255
   17ee2:	ce 01       	movw	r24, r28
   17ee4:	01 96       	adiw	r24, 0x01	; 1
   17ee6:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "threshold", payload);
   17eea:	9e 01       	movw	r18, r28
   17eec:	2f 5f       	subi	r18, 0xFF	; 255
   17eee:	3f 4f       	sbci	r19, 0xFF	; 255
   17ef0:	4b e4       	ldi	r20, 0x4B	; 75
   17ef2:	56 e0       	ldi	r21, 0x06	; 6
   17ef4:	6a 2d       	mov	r22, r10
   17ef6:	8b 2d       	mov	r24, r11
   17ef8:	0e 94 f8 ad 	call	0x15bf0	; 0x15bf0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_program_get_week():
/tmp/arduino_build_252452/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   17efc:	c4 01       	movw	r24, r8
   17efe:	8e 50       	subi	r24, 0x0E	; 14
   17f00:	9e 4f       	sbci	r25, 0xFE	; 254
   17f02:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17f06:	4a e0       	ldi	r20, 0x0A	; 10
   17f08:	be 01       	movw	r22, r28
   17f0a:	6f 5f       	subi	r22, 0xFF	; 255
   17f0c:	7f 4f       	sbci	r23, 0xFF	; 255
   17f0e:	90 e0       	ldi	r25, 0x00	; 0
   17f10:	0e 94 31 c4 	call	0x18862	; 0x18862 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
          itoa(thermostat_program_get_week(idx, progid), payload, 10);
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "week", payload);
   17f14:	9e 01       	movw	r18, r28
   17f16:	2f 5f       	subi	r18, 0xFF	; 255
   17f18:	3f 4f       	sbci	r19, 0xFF	; 255
   17f1a:	4f e6       	ldi	r20, 0x6F	; 111
   17f1c:	58 e0       	ldi	r21, 0x08	; 8
   17f1e:	6a 2d       	mov	r22, r10
   17f20:	8b 2d       	mov	r24, r11
   17f22:	0e 94 f8 ad 	call	0x15bf0	; 0x15bf0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   17f26:	a3 94       	inc	r10
   17f28:	96 e0       	ldi	r25, 0x06	; 6
   17f2a:	89 0e       	add	r8, r25
   17f2c:	91 1c       	adc	r9, r1
   17f2e:	eb e0       	ldi	r30, 0x0B	; 11
   17f30:	ae 12       	cpse	r10, r30
   17f32:	1d cf       	rjmp	.-454    	; 0x17d6e <main+0xa86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   17f34:	b3 94       	inc	r11
   17f36:	fd e4       	ldi	r31, 0x4D	; 77
   17f38:	6f 0e       	add	r6, r31
   17f3a:	71 1c       	adc	r7, r1
   17f3c:	28 e0       	ldi	r18, 0x08	; 8
   17f3e:	b2 12       	cpse	r11, r18
   17f40:	e7 ce       	rjmp	.-562    	; 0x17d10 <main+0xa28>
   17f42:	58 ec       	ldi	r21, 0xC8	; 200
   17f44:	e5 2e       	mov	r14, r21
   17f46:	f1 2c       	mov	r15, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4671
    send_mqtt_ring();
    send_mqtt_tds();

    send_mqtt_program();
    ///thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   17f48:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
   17f4a:	c7 01       	movw	r24, r14
   17f4c:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4672
      if (tds_used(idx) == 1)
   17f50:	81 30       	cpi	r24, 0x01	; 1
   17f52:	19 f4       	brne	.+6      	; 0x17f5a <main+0xc72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4673
        mqtt_send_pid_variable(idx);
   17f54:	81 2f       	mov	r24, r17
   17f56:	0e 94 41 51 	call	0xa282	; 0xa282 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4671
    send_mqtt_ring();
    send_mqtt_tds();

    send_mqtt_program();
    ///thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   17f5a:	1f 5f       	subi	r17, 0xFF	; 255
   17f5c:	36 e1       	ldi	r19, 0x16	; 22
   17f5e:	e3 0e       	add	r14, r19
   17f60:	f1 1c       	adc	r15, r1
   17f62:	15 30       	cpi	r17, 0x05	; 5
   17f64:	91 f7       	brne	.-28     	; 0x17f4a <main+0xc62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4674
      if (tds_used(idx) == 1)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   17f66:	0e 94 1f 77 	call	0xee3e	; 0xee3e <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   17f6a:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   17f6e:	00 91 5d 11 	lds	r16, 0x115D	; 0x80115d <milis_1s>
   17f72:	10 91 5e 11 	lds	r17, 0x115E	; 0x80115e <milis_1s+0x1>
   17f76:	20 91 5f 11 	lds	r18, 0x115F	; 0x80115f <milis_1s+0x2>
   17f7a:	30 91 60 11 	lds	r19, 0x1160	; 0x801160 <milis_1s+0x3>
   17f7e:	60 1b       	sub	r22, r16
   17f80:	71 0b       	sbc	r23, r17
   17f82:	82 0b       	sbc	r24, r18
   17f84:	93 0b       	sbc	r25, r19
   17f86:	69 3e       	cpi	r22, 0xE9	; 233
   17f88:	73 40       	sbci	r23, 0x03	; 3
   17f8a:	81 05       	cpc	r24, r1
   17f8c:	91 05       	cpc	r25, r1
   17f8e:	08 f4       	brcc	.+2      	; 0x17f92 <main+0xcaa>
   17f90:	63 c1       	rjmp	.+710    	; 0x18258 <main+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4685
  {
    milis_1s = millis();
   17f92:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   17f96:	60 93 5d 11 	sts	0x115D, r22	; 0x80115d <milis_1s>
   17f9a:	70 93 5e 11 	sts	0x115E, r23	; 0x80115e <milis_1s+0x1>
   17f9e:	80 93 5f 11 	sts	0x115F, r24	; 0x80115f <milis_1s+0x2>
   17fa2:	90 93 60 11 	sts	0x1160, r25	; 0x801160 <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4686
    uptime++;
   17fa6:	80 90 4a 0b 	lds	r8, 0x0B4A	; 0x800b4a <uptime>
   17faa:	90 90 4b 0b 	lds	r9, 0x0B4B	; 0x800b4b <uptime+0x1>
   17fae:	a0 90 4c 0b 	lds	r10, 0x0B4C	; 0x800b4c <uptime+0x2>
   17fb2:	b0 90 4d 0b 	lds	r11, 0x0B4D	; 0x800b4d <uptime+0x3>
   17fb6:	5f ef       	ldi	r21, 0xFF	; 255
   17fb8:	85 1a       	sub	r8, r21
   17fba:	95 0a       	sbc	r9, r21
   17fbc:	a5 0a       	sbc	r10, r21
   17fbe:	b5 0a       	sbc	r11, r21
   17fc0:	80 92 4a 0b 	sts	0x0B4A, r8	; 0x800b4a <uptime>
   17fc4:	90 92 4b 0b 	sts	0x0B4B, r9	; 0x800b4b <uptime+0x1>
   17fc8:	a0 92 4c 0b 	sts	0x0B4C, r10	; 0x800b4c <uptime+0x2>
   17fcc:	b0 92 4d 0b 	sts	0x0B4D, r11	; 0x800b4d <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4687
    mereni_hwwire(uptime);
   17fd0:	74 01       	movw	r14, r8
   17fd2:	0d e8       	ldi	r16, 0x8D	; 141
   17fd4:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   17fd6:	61 2c       	mov	r6, r1
mereni_hwwire():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   17fd8:	ff 24       	eor	r15, r15
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   17fda:	be 01       	movw	r22, r28
   17fdc:	6f 5f       	subi	r22, 0xFF	; 255
   17fde:	7f 4f       	sbci	r23, 0xFF	; 255
   17fe0:	86 2d       	mov	r24, r6
   17fe2:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   17fe6:	d9 80       	ldd	r13, Y+1	; 0x01
   17fe8:	81 e0       	ldi	r24, 0x01	; 1
   17fea:	d8 12       	cpse	r13, r24
   17fec:	fe c0       	rjmp	.+508    	; 0x181ea <main+0xf02>
   17fee:	f8 01       	movw	r30, r16
   17ff0:	84 8d       	ldd	r24, Z+28	; 0x1c
   17ff2:	97 01       	movw	r18, r14
   17ff4:	28 1b       	sub	r18, r24
   17ff6:	31 09       	sbc	r19, r1
   17ff8:	c9 01       	movw	r24, r18
   17ffa:	2d 89       	ldd	r18, Y+21	; 0x15
   17ffc:	28 17       	cp	r18, r24
   17ffe:	19 06       	cpc	r1, r25
   18000:	08 f0       	brcs	.+2      	; 0x18004 <main+0xd1c>
   18002:	f3 c0       	rjmp	.+486    	; 0x181ea <main+0xf02>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   18004:	85 8d       	ldd	r24, Z+29	; 0x1d
   18006:	81 11       	cpse	r24, r1
   18008:	0f c0       	rjmp	.+30     	; 0x18028 <main+0xd40>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   1800a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1800c:	0e 94 80 a9 	call	0x15300	; 0x15300 <ds2482owReset(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   18010:	be 01       	movw	r22, r28
   18012:	6e 5f       	subi	r22, 0xFE	; 254
   18014:	7f 4f       	sbci	r23, 0xFF	; 255
   18016:	8a 85       	ldd	r24, Y+10	; 0x0a
   18018:	0e 94 61 a9 	call	0x152c2	; 0x152c2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   1801c:	64 e4       	ldi	r22, 0x44	; 68
   1801e:	8a 85       	ldd	r24, Y+10	; 0x0a
   18020:	0e 94 28 a9 	call	0x15250	; 0x15250 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   18024:	f8 01       	movw	r30, r16
   18026:	d5 8e       	std	Z+29, r13	; 0x1d
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   18028:	f8 01       	movw	r30, r16
   1802a:	f5 8d       	ldd	r31, Z+29	; 0x1d
   1802c:	c9 57       	subi	r28, 0x79	; 121
   1802e:	df 4f       	sbci	r29, 0xFF	; 255
   18030:	f8 83       	st	Y, r31
   18032:	c7 58       	subi	r28, 0x87	; 135
   18034:	d0 40       	sbci	r29, 0x00	; 0
   18036:	f1 30       	cpi	r31, 0x01	; 1
   18038:	09 f0       	breq	.+2      	; 0x1803c <main+0xd54>
   1803a:	d7 c0       	rjmp	.+430    	; 0x181ea <main+0xf02>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   1803c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1803e:	0e 94 80 a9 	call	0x15300	; 0x15300 <ds2482owReset(unsigned char)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   18042:	be 01       	movw	r22, r28
   18044:	6e 5f       	subi	r22, 0xFE	; 254
   18046:	7f 4f       	sbci	r23, 0xFF	; 255
   18048:	8a 85       	ldd	r24, Y+10	; 0x0a
   1804a:	0e 94 61 a9 	call	0x152c2	; 0x152c2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   1804e:	be 01       	movw	r22, r28
   18050:	6f 57       	subi	r22, 0x7F	; 127
   18052:	7f 4f       	sbci	r23, 0xFF	; 255
   18054:	8a 85       	ldd	r24, Y+10	; 0x0a
   18056:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:287
        if (t != 0)
   1805a:	cf 57       	subi	r28, 0x7F	; 127
   1805c:	df 4f       	sbci	r29, 0xFF	; 255
   1805e:	88 81       	ld	r24, Y
   18060:	c1 58       	subi	r28, 0x81	; 129
   18062:	d0 40       	sbci	r29, 0x00	; 0
   18064:	88 23       	and	r24, r24
   18066:	09 f4       	brne	.+2      	; 0x1806a <main+0xd82>
   18068:	c0 c0       	rjmp	.+384    	; 0x181ea <main+0xf02>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   1806a:	f8 01       	movw	r30, r16
   1806c:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   1806e:	8a 85       	ldd	r24, Y+10	; 0x0a
   18070:	0e 94 80 a9 	call	0x15300	; 0x15300 <ds2482owReset(unsigned char)>
   18074:	78 2e       	mov	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   18076:	be 01       	movw	r22, r28
   18078:	6e 5f       	subi	r22, 0xFE	; 254
   1807a:	7f 4f       	sbci	r23, 0xFF	; 255
   1807c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1807e:	0e 94 61 a9 	call	0x152c2	; 0x152c2 <owMatchRom(unsigned char, unsigned char*)>
   18082:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   18084:	6e eb       	ldi	r22, 0xBE	; 190
   18086:	8a 85       	ldd	r24, Y+10	; 0x0a
   18088:	0e 94 28 a9 	call	0x15250	; 0x15250 <ds2482owWriteByte(unsigned char, unsigned char)>
   1808c:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   1808e:	be 01       	movw	r22, r28
   18090:	6f 5b       	subi	r22, 0xBF	; 191
   18092:	7f 4f       	sbci	r23, 0xFF	; 255
   18094:	8a 85       	ldd	r24, Y+10	; 0x0a
   18096:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   1809a:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   1809c:	22 96       	adiw	r28, 0x02	; 2
   1809e:	ff ad       	ldd	r31, Y+63	; 0x3f
   180a0:	22 97       	sbiw	r28, 0x02	; 2
   180a2:	ca 57       	subi	r28, 0x7A	; 122
   180a4:	df 4f       	sbci	r29, 0xFF	; 255
   180a6:	f8 83       	st	Y, r31
   180a8:	c6 58       	subi	r28, 0x86	; 134
   180aa:	d0 40       	sbci	r29, 0x00	; 0
   180ac:	2f 2f       	mov	r18, r31
   180ae:	f8 01       	movw	r30, r16
   180b0:	20 83       	st	Z, r18
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   180b2:	be 01       	movw	r22, r28
   180b4:	6f 5b       	subi	r22, 0xBF	; 191
   180b6:	7f 4f       	sbci	r23, 0xFF	; 255
   180b8:	8a 85       	ldd	r24, Y+10	; 0x0a
   180ba:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   180be:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   180c0:	22 96       	adiw	r28, 0x02	; 2
   180c2:	cf ac       	ldd	r12, Y+63	; 0x3f
   180c4:	22 97       	sbiw	r28, 0x02	; 2
   180c6:	f8 01       	movw	r30, r16
   180c8:	c1 82       	std	Z+1, r12	; 0x01
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   180ca:	be 01       	movw	r22, r28
   180cc:	6f 5b       	subi	r22, 0xBF	; 191
   180ce:	7f 4f       	sbci	r23, 0xFF	; 255
   180d0:	8a 85       	ldd	r24, Y+10	; 0x0a
   180d2:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   180d6:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   180d8:	be 01       	movw	r22, r28
   180da:	6f 5b       	subi	r22, 0xBF	; 191
   180dc:	7f 4f       	sbci	r23, 0xFF	; 255
   180de:	8a 85       	ldd	r24, Y+10	; 0x0a
   180e0:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   180e4:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   180e6:	be 01       	movw	r22, r28
   180e8:	6f 5b       	subi	r22, 0xBF	; 191
   180ea:	7f 4f       	sbci	r23, 0xFF	; 255
   180ec:	8a 85       	ldd	r24, Y+10	; 0x0a
   180ee:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   180f2:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   180f4:	be 01       	movw	r22, r28
   180f6:	6f 5b       	subi	r22, 0xBF	; 191
   180f8:	7f 4f       	sbci	r23, 0xFF	; 255
   180fa:	8a 85       	ldd	r24, Y+10	; 0x0a
   180fc:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   18100:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   18102:	be 01       	movw	r22, r28
   18104:	6f 5b       	subi	r22, 0xBF	; 191
   18106:	7f 4f       	sbci	r23, 0xFF	; 255
   18108:	8a 85       	ldd	r24, Y+10	; 0x0a
   1810a:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   1810e:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   18110:	22 96       	adiw	r28, 0x02	; 2
   18112:	8f ad       	ldd	r24, Y+63	; 0x3f
   18114:	22 97       	sbiw	r28, 0x02	; 2
   18116:	f8 01       	movw	r30, r16
   18118:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1811a:	be 01       	movw	r22, r28
   1811c:	6f 5b       	subi	r22, 0xBF	; 191
   1811e:	7f 4f       	sbci	r23, 0xFF	; 255
   18120:	8a 85       	ldd	r24, Y+10	; 0x0a
   18122:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
   18126:	78 0e       	add	r7, r24
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   18128:	22 96       	adiw	r28, 0x02	; 2
   1812a:	df ac       	ldd	r13, Y+63	; 0x3f
   1812c:	22 97       	sbiw	r28, 0x02	; 2
   1812e:	f8 01       	movw	r30, r16
   18130:	d3 82       	std	Z+3, r13	; 0x03
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   18132:	be 01       	movw	r22, r28
   18134:	6f 5b       	subi	r22, 0xBF	; 191
   18136:	7f 4f       	sbci	r23, 0xFF	; 255
   18138:	8a 85       	ldd	r24, Y+10	; 0x0a
   1813a:	0e 94 cc a8 	call	0x15198	; 0x15198 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   1813e:	22 96       	adiw	r28, 0x02	; 2
   18140:	9f ad       	ldd	r25, Y+63	; 0x3f
   18142:	22 97       	sbiw	r28, 0x02	; 2
   18144:	f8 01       	movw	r30, r16
   18146:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   18148:	87 0d       	add	r24, r7
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   1814a:	09 f0       	breq	.+2      	; 0x1814e <main+0xe66>
   1814c:	ea c1       	rjmp	.+980    	; 0x18522 <main+0x123a>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1814e:	6d 2d       	mov	r22, r13
   18150:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   18152:	2c 2d       	mov	r18, r12
   18154:	30 e0       	ldi	r19, 0x00	; 0
   18156:	32 2f       	mov	r19, r18
   18158:	22 27       	eor	r18, r18
   1815a:	33 0f       	add	r19, r19
   1815c:	33 0f       	add	r19, r19
   1815e:	33 0f       	add	r19, r19
   18160:	ca 57       	subi	r28, 0x7A	; 122
   18162:	df 4f       	sbci	r29, 0xFF	; 255
   18164:	48 81       	ld	r20, Y
   18166:	c6 58       	subi	r28, 0x86	; 134
   18168:	d0 40       	sbci	r29, 0x00	; 0
   1816a:	f8 e0       	ldi	r31, 0x08	; 8
   1816c:	4f 9f       	mul	r20, r31
   1816e:	c0 01       	movw	r24, r0
   18170:	11 24       	eor	r1, r1
   18172:	28 2b       	or	r18, r24
   18174:	39 2b       	or	r19, r25
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   18176:	b3 e0       	ldi	r27, 0x03	; 3
   18178:	22 0f       	add	r18, r18
   1817a:	33 1f       	adc	r19, r19
   1817c:	ba 95       	dec	r27
   1817e:	e1 f7       	brne	.-8      	; 0x18178 <main+0xe90>
   18180:	20 78       	andi	r18, 0x80	; 128
   18182:	8b 85       	ldd	r24, Y+11	; 0x0b
   18184:	9c 85       	ldd	r25, Y+12	; 0x0c
   18186:	40 97       	sbiw	r24, 0x10	; 16
   18188:	28 0f       	add	r18, r24
   1818a:	39 1f       	adc	r19, r25
   1818c:	cf 57       	subi	r28, 0x7F	; 127
   1818e:	df 4f       	sbci	r29, 0xFF	; 255
   18190:	e8 81       	ld	r30, Y
   18192:	c1 58       	subi	r28, 0x81	; 129
   18194:	d0 40       	sbci	r29, 0x00	; 0
   18196:	5e e1       	ldi	r21, 0x1E	; 30
   18198:	5e 9f       	mul	r21, r30
   1819a:	f0 01       	movw	r30, r0
   1819c:	11 24       	eor	r1, r1
   1819e:	e3 57       	subi	r30, 0x73	; 115
   181a0:	f5 4f       	sbci	r31, 0xF5	; 245
   181a2:	82 81       	ldd	r24, Z+2	; 0x02
   181a4:	fb 01       	movw	r30, r22
   181a6:	e8 1b       	sub	r30, r24
   181a8:	f1 09       	sbc	r31, r1
   181aa:	cf 01       	movw	r24, r30
   181ac:	96 95       	lsr	r25
   181ae:	98 2f       	mov	r25, r24
   181b0:	88 27       	eor	r24, r24
   181b2:	97 95       	ror	r25
   181b4:	87 95       	ror	r24
   181b6:	0e 94 cf cd 	call	0x19b9e	; 0x19b9e <__divmodhi4>
   181ba:	26 0f       	add	r18, r22
   181bc:	37 1f       	adc	r19, r23
   181be:	f8 01       	movw	r30, r16
   181c0:	36 83       	std	Z+6, r19	; 0x06
   181c2:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   181c4:	c9 57       	subi	r28, 0x79	; 121
   181c6:	df 4f       	sbci	r29, 0xFF	; 255
   181c8:	48 81       	ld	r20, Y
   181ca:	c7 58       	subi	r28, 0x87	; 135
   181cc:	d0 40       	sbci	r29, 0x00	; 0
   181ce:	43 8f       	std	Z+27, r20	; 0x1b
   181d0:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   181d2:	87 89       	ldd	r24, Z+23	; 0x17
   181d4:	90 8d       	ldd	r25, Z+24	; 0x18
   181d6:	92 8f       	std	Z+26, r25	; 0x1a
   181d8:	81 8f       	std	Z+25, r24	; 0x19
   181da:	41 50       	subi	r20, 0x01	; 1
   181dc:	32 97       	sbiw	r30, 0x02	; 2
   181de:	41 11       	cpse	r20, r1
   181e0:	f8 cf       	rjmp	.-16     	; 0x181d2 <main+0xeea>
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   181e2:	f8 01       	movw	r30, r16
   181e4:	30 87       	std	Z+8, r19	; 0x08
   181e6:	27 83       	std	Z+7, r18	; 0x07
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   181e8:	84 8e       	std	Z+28, r8	; 0x1c
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   181ea:	63 94       	inc	r6
   181ec:	02 5e       	subi	r16, 0xE2	; 226
   181ee:	1f 4f       	sbci	r17, 0xFF	; 255
   181f0:	f6 e0       	ldi	r31, 0x06	; 6
   181f2:	6f 12       	cpse	r6, r31
   181f4:	f2 ce       	rjmp	.-540    	; 0x17fda <main+0xcf2>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   181f6:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2857
    if (get_tds18s20(id, &tds) == 1)
   181f8:	be 01       	movw	r22, r28
   181fa:	6f 5f       	subi	r22, 0xFF	; 255
   181fc:	7f 4f       	sbci	r23, 0xFF	; 255
   181fe:	81 2f       	mov	r24, r17
   18200:	0e 94 48 6d 	call	0xda90	; 0xda90 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2856
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   18204:	1f 5f       	subi	r17, 0xFF	; 255
   18206:	16 30       	cpi	r17, 0x06	; 6
   18208:	b9 f7       	brne	.-18     	; 0x181f8 <main+0xf10>
   1820a:	f6 e6       	ldi	r31, 0x66	; 102
   1820c:	cf 2e       	mov	r12, r31
   1820e:	d1 2c       	mov	r13, r1
   18210:	e1 2c       	mov	r14, r1
   18212:	f1 2c       	mov	r15, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   18214:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
  {
    remote_tds_get_active(idx, &active);
   18216:	be 01       	movw	r22, r28
   18218:	6f 5f       	subi	r22, 0xFF	; 255
   1821a:	7f 4f       	sbci	r23, 0xFF	; 255
   1821c:	81 2f       	mov	r24, r17
   1821e:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
    if (active == 1)
   18222:	89 81       	ldd	r24, Y+1	; 0x01
   18224:	81 30       	cpi	r24, 0x01	; 1
   18226:	61 f4       	brne	.+24     	; 0x18240 <main+0xf58>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   18228:	c7 01       	movw	r24, r14
   1822a:	b6 01       	movw	r22, r12
   1822c:	0e 94 ee a1 	call	0x143dc	; 0x143dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.182]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2793
    if (last < 250)
   18230:	8a 3f       	cpi	r24, 0xFA	; 250
   18232:	08 f4       	brcc	.+2      	; 0x18236 <main+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
      last++;
   18234:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   18236:	48 2f       	mov	r20, r24
   18238:	c7 01       	movw	r24, r14
   1823a:	b6 01       	movw	r22, r12
   1823c:	0e 94 b2 a1 	call	0x14364	; 0x14364 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.184]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   18240:	1f 5f       	subi	r17, 0xFF	; 255
   18242:	23 e0       	ldi	r18, 0x03	; 3
   18244:	c2 0e       	add	r12, r18
   18246:	d1 1c       	adc	r13, r1
   18248:	e1 1c       	adc	r14, r1
   1824a:	f1 1c       	adc	r15, r1
   1824c:	34 e8       	ldi	r19, 0x84	; 132
   1824e:	c3 16       	cp	r12, r19
   18250:	d1 04       	cpc	r13, r1
   18252:	e1 04       	cpc	r14, r1
   18254:	f1 04       	cpc	r15, r1
   18256:	f9 f6       	brne	.-66     	; 0x18216 <main+0xf2e>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4693
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   18258:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   1825c:	00 91 59 11 	lds	r16, 0x1159	; 0x801159 <milis_05s>
   18260:	10 91 5a 11 	lds	r17, 0x115A	; 0x80115a <milis_05s+0x1>
   18264:	20 91 5b 11 	lds	r18, 0x115B	; 0x80115b <milis_05s+0x2>
   18268:	30 91 5c 11 	lds	r19, 0x115C	; 0x80115c <milis_05s+0x3>
   1826c:	60 1b       	sub	r22, r16
   1826e:	71 0b       	sbc	r23, r17
   18270:	82 0b       	sbc	r24, r18
   18272:	93 0b       	sbc	r25, r19
   18274:	65 3f       	cpi	r22, 0xF5	; 245
   18276:	71 40       	sbci	r23, 0x01	; 1
   18278:	81 05       	cpc	r24, r1
   1827a:	91 05       	cpc	r25, r1
   1827c:	08 f4       	brcc	.+2      	; 0x18280 <main+0xf98>
   1827e:	bc c0       	rjmp	.+376    	; 0x183f8 <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695
  {
    milis_05s = millis();
   18280:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   18284:	60 93 59 11 	sts	0x1159, r22	; 0x801159 <milis_05s>
   18288:	70 93 5a 11 	sts	0x115A, r23	; 0x80115a <milis_05s+0x1>
   1828c:	80 93 5b 11 	sts	0x115B, r24	; 0x80115b <milis_05s+0x2>
   18290:	90 93 5c 11 	sts	0x115C, r25	; 0x80115c <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
   18294:	88 e6       	ldi	r24, 0x68	; 104
   18296:	0e 94 bf 9b 	call	0x1377e	; 0x1377e <TwoWire::beginTransmission(unsigned char) [clone .constprop.171]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   1829a:	60 e0       	ldi	r22, 0x00	; 0
   1829c:	82 e8       	ldi	r24, 0x82	; 130
   1829e:	9e e0       	ldi	r25, 0x0E	; 14
   182a0:	0e 94 c1 97 	call	0x12f82	; 0x12f82 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   182a4:	82 e8       	ldi	r24, 0x82	; 130
   182a6:	9e e0       	ldi	r25, 0x0E	; 14
   182a8:	0e 94 42 a8 	call	0x15084	; 0x15084 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   182ac:	87 e0       	ldi	r24, 0x07	; 7
   182ae:	90 e0       	ldi	r25, 0x00	; 0
   182b0:	0e 94 f8 99 	call	0x133f0	; 0x133f0 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   182b4:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
   182b8:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   182ba:	28 2f       	mov	r18, r24
   182bc:	30 e0       	ldi	r19, 0x00	; 0
   182be:	94 e0       	ldi	r25, 0x04	; 4
   182c0:	35 95       	asr	r19
   182c2:	27 95       	ror	r18
   182c4:	9a 95       	dec	r25
   182c6:	e1 f7       	brne	.-8      	; 0x182c0 <main+0xfd8>
   182c8:	92 2f       	mov	r25, r18
   182ca:	99 0f       	add	r25, r25
   182cc:	99 0f       	add	r25, r25
   182ce:	12 2f       	mov	r17, r18
   182d0:	19 1b       	sub	r17, r25
   182d2:	11 0f       	add	r17, r17
   182d4:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   182d6:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   182da:	9c 01       	movw	r18, r24
   182dc:	44 e0       	ldi	r20, 0x04	; 4
   182de:	35 95       	asr	r19
   182e0:	27 95       	ror	r18
   182e2:	4a 95       	dec	r20
   182e4:	e1 f7       	brne	.-8      	; 0x182de <main+0xff6>
   182e6:	2f 70       	andi	r18, 0x0F	; 15
   182e8:	33 27       	eor	r19, r19
   182ea:	92 2f       	mov	r25, r18
   182ec:	99 0f       	add	r25, r25
   182ee:	99 0f       	add	r25, r25
   182f0:	02 2f       	mov	r16, r18
   182f2:	09 1b       	sub	r16, r25
   182f4:	00 0f       	add	r16, r16
   182f6:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   182f8:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   182fc:	9c 01       	movw	r18, r24
   182fe:	54 e0       	ldi	r21, 0x04	; 4
   18300:	35 95       	asr	r19
   18302:	27 95       	ror	r18
   18304:	5a 95       	dec	r21
   18306:	e1 f7       	brne	.-8      	; 0x18300 <main+0x1018>
   18308:	2f 70       	andi	r18, 0x0F	; 15
   1830a:	33 27       	eor	r19, r19
   1830c:	92 2f       	mov	r25, r18
   1830e:	99 0f       	add	r25, r25
   18310:	99 0f       	add	r25, r25
   18312:	f2 2e       	mov	r15, r18
   18314:	f9 1a       	sub	r15, r25
   18316:	ff 0c       	add	r15, r15
   18318:	f8 0e       	add	r15, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   1831a:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   1831e:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18322:	9c 01       	movw	r18, r24
   18324:	64 e0       	ldi	r22, 0x04	; 4
   18326:	35 95       	asr	r19
   18328:	27 95       	ror	r18
   1832a:	6a 95       	dec	r22
   1832c:	e1 f7       	brne	.-8      	; 0x18326 <main+0x103e>
   1832e:	2f 70       	andi	r18, 0x0F	; 15
   18330:	33 27       	eor	r19, r19
   18332:	92 2f       	mov	r25, r18
   18334:	99 0f       	add	r25, r25
   18336:	99 0f       	add	r25, r25
   18338:	e2 2e       	mov	r14, r18
   1833a:	e9 1a       	sub	r14, r25
   1833c:	ee 0c       	add	r14, r14
   1833e:	e8 0e       	add	r14, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   18340:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18344:	9c 01       	movw	r18, r24
   18346:	74 e0       	ldi	r23, 0x04	; 4
   18348:	35 95       	asr	r19
   1834a:	27 95       	ror	r18
   1834c:	7a 95       	dec	r23
   1834e:	e1 f7       	brne	.-8      	; 0x18348 <main+0x1060>
   18350:	2f 70       	andi	r18, 0x0F	; 15
   18352:	33 27       	eor	r19, r19
   18354:	92 2f       	mov	r25, r18
   18356:	99 0f       	add	r25, r25
   18358:	99 0f       	add	r25, r25
   1835a:	d2 2e       	mov	r13, r18
   1835c:	d9 1a       	sub	r13, r25
   1835e:	dd 0c       	add	r13, r13
   18360:	d8 0e       	add	r13, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   18362:	0e 94 e8 95 	call	0x12bd0	; 0x12bd0 <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   18366:	9c 01       	movw	r18, r24
   18368:	e4 e0       	ldi	r30, 0x04	; 4
   1836a:	35 95       	asr	r19
   1836c:	27 95       	ror	r18
   1836e:	ea 95       	dec	r30
   18370:	e1 f7       	brne	.-8      	; 0x1836a <main+0x1082>
   18372:	2f 70       	andi	r18, 0x0F	; 15
   18374:	33 27       	eor	r19, r19
   18376:	92 2f       	mov	r25, r18
   18378:	99 0f       	add	r25, r25
   1837a:	99 0f       	add	r25, r25
   1837c:	29 1b       	sub	r18, r25
   1837e:	22 0f       	add	r18, r18
   18380:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   18382:	80 93 d3 10 	sts	0x10D3, r24	; 0x8010d3 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4696
    now = rtc.now();
   18386:	d0 92 d4 10 	sts	0x10D4, r13	; 0x8010d4 <now+0x1>
   1838a:	e0 92 d5 10 	sts	0x10D5, r14	; 0x8010d5 <now+0x2>
   1838e:	f0 92 d6 10 	sts	0x10D6, r15	; 0x8010d6 <now+0x3>
   18392:	00 93 d7 10 	sts	0x10D7, r16	; 0x8010d7 <now+0x4>
   18396:	10 93 d8 10 	sts	0x10D8, r17	; 0x8010d8 <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   1839a:	0e 94 9f a8 	call	0x1513e	; 0x1513e <RTC_DS1307::isrunning() [clone .constprop.127]>
   1839e:	90 91 41 0b 	lds	r25, 0x0B41	; 0x800b41 <selftest_data>
   183a2:	81 11       	cpse	r24, r1
   183a4:	c0 c0       	rjmp	.+384    	; 0x18526 <main+0x123e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
    sbi(selftest_data, SELFTEST_ERR_RTC);
   183a6:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   183a8:	90 93 41 0b 	sts	0x0B41, r25	; 0x800b41 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4698
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   183ac:	81 e0       	ldi	r24, 0x01	; 1
   183ae:	80 93 49 0b 	sts	0x0B49, r24	; 0x800b49 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5310
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   183b2:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5309

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   183b4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5311
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   183b6:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5313
  {
    remote_tds_get_active(idx, &active);
   183b8:	be 01       	movw	r22, r28
   183ba:	6f 5f       	subi	r22, 0xFF	; 255
   183bc:	7f 4f       	sbci	r23, 0xFF	; 255
   183be:	81 2f       	mov	r24, r17
   183c0:	0e 94 69 73 	call	0xe6d2	; 0xe6d2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5314
    if (active == 1) cnt++;
   183c4:	89 81       	ldd	r24, Y+1	; 0x01
   183c6:	81 30       	cpi	r24, 0x01	; 1
   183c8:	09 f4       	brne	.+2      	; 0x183cc <main+0x10e4>
   183ca:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5311
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   183cc:	1f 5f       	subi	r17, 0xFF	; 255
   183ce:	1a 30       	cpi	r17, 0x0A	; 10
   183d0:	99 f7       	brne	.-26     	; 0x183b8 <main+0x10d0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4700
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;

    use_rtds = count_use_rtds();
   183d2:	00 93 48 0b 	sts	0x0B48, r16	; 0x800b48 <use_rtds>
   183d6:	08 ec       	ldi	r16, 0xC8	; 200
   183d8:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   183da:	f1 2c       	mov	r15, r1
count_use_tds():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   183dc:	c8 01       	movw	r24, r16
   183de:	0e 94 97 ae 	call	0x15d2e	; 0x15d2e <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.229] [clone .lto_priv.244]>
   183e2:	81 30       	cpi	r24, 0x01	; 1
   183e4:	09 f4       	brne	.+2      	; 0x183e8 <main+0x1100>
   183e6:	f3 94       	inc	r15
   183e8:	0a 5e       	subi	r16, 0xEA	; 234
   183ea:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   183ec:	0c 34       	cpi	r16, 0x4C	; 76
   183ee:	51 e0       	ldi	r21, 0x01	; 1
   183f0:	15 07       	cpc	r17, r21
   183f2:	a1 f7       	brne	.-24     	; 0x183dc <main+0x10f4>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
    use_tds = count_use_tds();
   183f4:	f0 92 47 0b 	sts	0x0B47, r15	; 0x800b47 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4710




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   183f8:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   183fc:	00 91 55 11 	lds	r16, 0x1155	; 0x801155 <milis_005s>
   18400:	10 91 56 11 	lds	r17, 0x1156	; 0x801156 <milis_005s+0x1>
   18404:	20 91 57 11 	lds	r18, 0x1157	; 0x801157 <milis_005s+0x2>
   18408:	30 91 58 11 	lds	r19, 0x1158	; 0x801158 <milis_005s+0x3>
   1840c:	60 1b       	sub	r22, r16
   1840e:	71 0b       	sbc	r23, r17
   18410:	82 0b       	sbc	r24, r18
   18412:	93 0b       	sbc	r25, r19
   18414:	63 33       	cpi	r22, 0x33	; 51
   18416:	71 05       	cpc	r23, r1
   18418:	81 05       	cpc	r24, r1
   1841a:	91 05       	cpc	r25, r1
   1841c:	90 f1       	brcs	.+100    	; 0x18482 <main+0x119a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4712
  {
    milis_005s = millis();
   1841e:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   18422:	60 93 55 11 	sts	0x1155, r22	; 0x801155 <milis_005s>
   18426:	70 93 56 11 	sts	0x1156, r23	; 0x801156 <milis_005s+0x1>
   1842a:	80 93 57 11 	sts	0x1157, r24	; 0x801157 <milis_005s+0x2>
   1842e:	90 93 58 11 	sts	0x1158, r25	; 0x801158 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4715

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   18432:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <a2d_run_now>
   18436:	81 30       	cpi	r24, 0x01	; 1
   18438:	21 f5       	brne	.+72     	; 0x18482 <main+0x119a>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1843a:	30 91 42 0b 	lds	r19, 0x0B42	; 0x800b42 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1843e:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <a2d_index>
   18442:	90 e0       	ldi	r25, 0x00	; 0
   18444:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   18446:	61 e0       	ldi	r22, 0x01	; 1
   18448:	70 e0       	ldi	r23, 0x00	; 0
   1844a:	ab 01       	movw	r20, r22
   1844c:	08 2e       	mov	r0, r24
   1844e:	01 c0       	rjmp	.+2      	; 0x18452 <main+0x116a>
   18450:	44 0f       	add	r20, r20
   18452:	0a 94       	dec	r0
   18454:	ea f7       	brpl	.-6      	; 0x18450 <main+0x1168>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   18456:	e3 2f       	mov	r30, r19
   18458:	e4 23       	and	r30, r20
   1845a:	09 f4       	brne	.+2      	; 0x1845e <main+0x1176>
   1845c:	66 c0       	rjmp	.+204    	; 0x1852a <main+0x1242>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1845e:	e2 2f       	mov	r30, r18
   18460:	e4 23       	and	r30, r20
   18462:	09 f0       	breq	.+2      	; 0x18466 <main+0x117e>
   18464:	62 c0       	rjmp	.+196    	; 0x1852a <main+0x1242>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   18466:	24 2b       	or	r18, r20
   18468:	20 93 43 0b 	sts	0x0B43, r18	; 0x800b43 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1846c:	0e 94 42 a6 	call	0x14c84	; 0x14c84 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4718
    {
      a2d_start_process();
      a2d_run_now = 0;
   18470:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
      if (a2d_done() == 0) a2d_run_now = 1;
   18474:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <a2d_index>
   18478:	81 11       	cpse	r24, r1
   1847a:	03 c0       	rjmp	.+6      	; 0x18482 <main+0x119a>
   1847c:	81 e0       	ldi	r24, 0x01	; 1
   1847e:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
    }
  }

  load = millis() - load_now;
   18482:	0e 94 45 a4 	call	0x1488a	; 0x1488a <millis>
   18486:	dc 01       	movw	r26, r24
   18488:	cb 01       	movw	r24, r22
   1848a:	82 19       	sub	r24, r2
   1848c:	93 09       	sbc	r25, r3
   1848e:	a4 09       	sbc	r26, r4
   18490:	b5 09       	sbc	r27, r5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4724
  if (load < load_min) load_min = load;
   18492:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   18496:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   1849a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   1849e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   184a2:	80 17       	cp	r24, r16
   184a4:	91 07       	cpc	r25, r17
   184a6:	a2 07       	cpc	r26, r18
   184a8:	b3 07       	cpc	r27, r19
   184aa:	40 f4       	brcc	.+16     	; 0x184bc <main+0x11d4>
   184ac:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   184b0:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   184b4:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   184b8:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
  if (load > load_max) load_max = load;
   184bc:	00 91 51 11 	lds	r16, 0x1151	; 0x801151 <load_max>
   184c0:	10 91 52 11 	lds	r17, 0x1152	; 0x801152 <load_max+0x1>
   184c4:	20 91 53 11 	lds	r18, 0x1153	; 0x801153 <load_max+0x2>
   184c8:	30 91 54 11 	lds	r19, 0x1154	; 0x801154 <load_max+0x3>
   184cc:	08 17       	cp	r16, r24
   184ce:	19 07       	cpc	r17, r25
   184d0:	2a 07       	cpc	r18, r26
   184d2:	3b 07       	cpc	r19, r27
   184d4:	40 f4       	brcc	.+16     	; 0x184e6 <main+0x11fe>
   184d6:	80 93 51 11 	sts	0x1151, r24	; 0x801151 <load_max>
   184da:	90 93 52 11 	sts	0x1152, r25	; 0x801152 <load_max+0x1>
   184de:	a0 93 53 11 	sts	0x1153, r26	; 0x801153 <load_max+0x2>
   184e2:	b0 93 54 11 	sts	0x1154, r27	; 0x801154 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4728

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   184e6:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <light_curr>
   184ea:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <light_curr+0x1>
   184ee:	20 91 4f 11 	lds	r18, 0x114F	; 0x80114f <light_min>
   184f2:	30 91 50 11 	lds	r19, 0x1150	; 0x801150 <light_min+0x1>
   184f6:	82 17       	cp	r24, r18
   184f8:	93 07       	cpc	r25, r19
   184fa:	20 f4       	brcc	.+8      	; 0x18504 <main+0x121c>
   184fc:	90 93 50 11 	sts	0x1150, r25	; 0x801150 <light_min+0x1>
   18500:	80 93 4f 11 	sts	0x114F, r24	; 0x80114f <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4729
  if (light_curr > light_max) light_max = light_curr;
   18504:	20 91 4d 11 	lds	r18, 0x114D	; 0x80114d <light_max>
   18508:	30 91 4e 11 	lds	r19, 0x114E	; 0x80114e <light_max+0x1>
   1850c:	28 17       	cp	r18, r24
   1850e:	39 07       	cpc	r19, r25
   18510:	20 f4       	brcc	.+8      	; 0x1851a <main+0x1232>
   18512:	90 93 4e 11 	sts	0x114E, r25	; 0x80114e <light_max+0x1>
   18516:	80 93 4d 11 	sts	0x114D, r24	; 0x80114d <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1851a:	0e 94 d3 96 	call	0x12da6	; 0x12da6 <serialEventRun()>
   1851e:	0c 94 d3 b9 	jmp	0x173a6	; 0x173a6 <main+0xbe>
mereni_hwwire():
/tmp/arduino_build_252452/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   18522:	13 8e       	std	Z+27, r1	; 0x1b
   18524:	62 ce       	rjmp	.-828    	; 0x181ea <main+0xf02>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   18526:	9e 7f       	andi	r25, 0xFE	; 254
   18528:	3f cf       	rjmp	.-386    	; 0x183a8 <main+0x10c0>
   1852a:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1852c:	88 30       	cpi	r24, 0x08	; 8
   1852e:	91 05       	cpc	r25, r1
   18530:	09 f0       	breq	.+2      	; 0x18534 <main+0x124c>
   18532:	8b cf       	rjmp	.-234    	; 0x1844a <main+0x1162>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   18534:	10 92 43 0b 	sts	0x0B43, r1	; 0x800b43 <a2d_index>
   18538:	9b cf       	rjmp	.-202    	; 0x18470 <main+0x1188>

0001853a <dtostrf>:
dtostrf():
   1853a:	ef 92       	push	r14
   1853c:	0f 93       	push	r16
   1853e:	1f 93       	push	r17
   18540:	cf 93       	push	r28
   18542:	df 93       	push	r29
   18544:	e8 01       	movw	r28, r16
   18546:	34 e0       	ldi	r19, 0x04	; 4
   18548:	47 fd       	sbrc	r20, 7
   1854a:	34 e1       	ldi	r19, 0x14	; 20
   1854c:	04 2e       	mov	r0, r20
   1854e:	00 0c       	add	r0, r0
   18550:	55 0b       	sbc	r21, r21
   18552:	57 ff       	sbrs	r21, 7
   18554:	03 c0       	rjmp	.+6      	; 0x1855c <dtostrf+0x22>
   18556:	51 95       	neg	r21
   18558:	41 95       	neg	r20
   1855a:	51 09       	sbc	r21, r1
   1855c:	e3 2e       	mov	r14, r19
   1855e:	02 2f       	mov	r16, r18
   18560:	24 2f       	mov	r18, r20
   18562:	ae 01       	movw	r20, r28
   18564:	0e 94 c7 c6 	call	0x18d8e	; 0x18d8e <dtoa_prf>
   18568:	ce 01       	movw	r24, r28
   1856a:	df 91       	pop	r29
   1856c:	cf 91       	pop	r28
   1856e:	1f 91       	pop	r17
   18570:	0f 91       	pop	r16
   18572:	ef 90       	pop	r14
   18574:	08 95       	ret

00018576 <strtoul>:
strtoul():
   18576:	3f 92       	push	r3
   18578:	4f 92       	push	r4
   1857a:	5f 92       	push	r5
   1857c:	6f 92       	push	r6
   1857e:	7f 92       	push	r7
   18580:	8f 92       	push	r8
   18582:	9f 92       	push	r9
   18584:	af 92       	push	r10
   18586:	bf 92       	push	r11
   18588:	cf 92       	push	r12
   1858a:	df 92       	push	r13
   1858c:	ef 92       	push	r14
   1858e:	ff 92       	push	r15
   18590:	0f 93       	push	r16
   18592:	1f 93       	push	r17
   18594:	cf 93       	push	r28
   18596:	df 93       	push	r29
   18598:	5c 01       	movw	r10, r24
   1859a:	6b 01       	movw	r12, r22
   1859c:	7a 01       	movw	r14, r20
   1859e:	61 15       	cp	r22, r1
   185a0:	71 05       	cpc	r23, r1
   185a2:	19 f0       	breq	.+6      	; 0x185aa <strtoul+0x34>
   185a4:	fb 01       	movw	r30, r22
   185a6:	91 83       	std	Z+1, r25	; 0x01
   185a8:	80 83       	st	Z, r24
   185aa:	e1 14       	cp	r14, r1
   185ac:	f1 04       	cpc	r15, r1
   185ae:	49 f0       	breq	.+18     	; 0x185c2 <strtoul+0x4c>
   185b0:	c7 01       	movw	r24, r14
   185b2:	02 97       	sbiw	r24, 0x02	; 2
   185b4:	83 97       	sbiw	r24, 0x23	; 35
   185b6:	28 f0       	brcs	.+10     	; 0x185c2 <strtoul+0x4c>
   185b8:	60 e0       	ldi	r22, 0x00	; 0
   185ba:	70 e0       	ldi	r23, 0x00	; 0
   185bc:	cb 01       	movw	r24, r22
   185be:	9b c0       	rjmp	.+310    	; 0x186f6 <strtoul+0x180>
   185c0:	5e 01       	movw	r10, r28
   185c2:	e5 01       	movw	r28, r10
   185c4:	21 96       	adiw	r28, 0x01	; 1
   185c6:	f5 01       	movw	r30, r10
   185c8:	10 81       	ld	r17, Z
   185ca:	81 2f       	mov	r24, r17
   185cc:	90 e0       	ldi	r25, 0x00	; 0
   185ce:	0e 94 e0 c3 	call	0x187c0	; 0x187c0 <isspace>
   185d2:	89 2b       	or	r24, r25
   185d4:	a9 f7       	brne	.-22     	; 0x185c0 <strtoul+0x4a>
   185d6:	1d 32       	cpi	r17, 0x2D	; 45
   185d8:	09 f0       	breq	.+2      	; 0x185dc <strtoul+0x66>
   185da:	5c c0       	rjmp	.+184    	; 0x18694 <strtoul+0x11e>
   185dc:	21 96       	adiw	r28, 0x01	; 1
   185de:	f5 01       	movw	r30, r10
   185e0:	11 81       	ldd	r17, Z+1	; 0x01
   185e2:	01 e0       	ldi	r16, 0x01	; 1
   185e4:	e1 14       	cp	r14, r1
   185e6:	f1 04       	cpc	r15, r1
   185e8:	09 f4       	brne	.+2      	; 0x185ec <strtoul+0x76>
   185ea:	bb c0       	rjmp	.+374    	; 0x18762 <strtoul+0x1ec>
   185ec:	f0 e1       	ldi	r31, 0x10	; 16
   185ee:	ef 16       	cp	r14, r31
   185f0:	f1 04       	cpc	r15, r1
   185f2:	09 f0       	breq	.+2      	; 0x185f6 <strtoul+0x80>
   185f4:	9b c0       	rjmp	.+310    	; 0x1872c <strtoul+0x1b6>
   185f6:	10 33       	cpi	r17, 0x30	; 48
   185f8:	41 f4       	brne	.+16     	; 0x1860a <strtoul+0x94>
   185fa:	88 81       	ld	r24, Y
   185fc:	8f 7d       	andi	r24, 0xDF	; 223
   185fe:	88 35       	cpi	r24, 0x58	; 88
   18600:	09 f0       	breq	.+2      	; 0x18604 <strtoul+0x8e>
   18602:	8f c0       	rjmp	.+286    	; 0x18722 <strtoul+0x1ac>
   18604:	19 81       	ldd	r17, Y+1	; 0x01
   18606:	22 96       	adiw	r28, 0x02	; 2
   18608:	02 60       	ori	r16, 0x02	; 2
   1860a:	e0 e1       	ldi	r30, 0x10	; 16
   1860c:	ee 2e       	mov	r14, r30
   1860e:	f1 2c       	mov	r15, r1
   18610:	88 24       	eor	r8, r8
   18612:	8a 94       	dec	r8
   18614:	98 2c       	mov	r9, r8
   18616:	a8 2c       	mov	r10, r8
   18618:	ff e0       	ldi	r31, 0x0F	; 15
   1861a:	bf 2e       	mov	r11, r31
   1861c:	20 e0       	ldi	r18, 0x00	; 0
   1861e:	60 e0       	ldi	r22, 0x00	; 0
   18620:	70 e0       	ldi	r23, 0x00	; 0
   18622:	cb 01       	movw	r24, r22
   18624:	27 01       	movw	r4, r14
   18626:	0f 2c       	mov	r0, r15
   18628:	00 0c       	add	r0, r0
   1862a:	66 08       	sbc	r6, r6
   1862c:	77 08       	sbc	r7, r7
   1862e:	fe 01       	movw	r30, r28
   18630:	50 ed       	ldi	r21, 0xD0	; 208
   18632:	35 2e       	mov	r3, r21
   18634:	31 0e       	add	r3, r17
   18636:	39 e0       	ldi	r19, 0x09	; 9
   18638:	33 15       	cp	r19, r3
   1863a:	68 f4       	brcc	.+26     	; 0x18656 <strtoul+0xe0>
   1863c:	3f eb       	ldi	r19, 0xBF	; 191
   1863e:	31 0f       	add	r19, r17
   18640:	49 ec       	ldi	r20, 0xC9	; 201
   18642:	34 2e       	mov	r3, r20
   18644:	3a 31       	cpi	r19, 0x1A	; 26
   18646:	30 f0       	brcs	.+12     	; 0x18654 <strtoul+0xde>
   18648:	3f e9       	ldi	r19, 0x9F	; 159
   1864a:	31 0f       	add	r19, r17
   1864c:	3a 31       	cpi	r19, 0x1A	; 26
   1864e:	b0 f5       	brcc	.+108    	; 0x186bc <strtoul+0x146>
   18650:	39 ea       	ldi	r19, 0xA9	; 169
   18652:	33 2e       	mov	r3, r19
   18654:	31 0e       	add	r3, r17
   18656:	3e 14       	cp	r3, r14
   18658:	1f 04       	cpc	r1, r15
   1865a:	84 f5       	brge	.+96     	; 0x186bc <strtoul+0x146>
   1865c:	2f 3f       	cpi	r18, 0xFF	; 255
   1865e:	b9 f0       	breq	.+46     	; 0x1868e <strtoul+0x118>
   18660:	86 16       	cp	r8, r22
   18662:	97 06       	cpc	r9, r23
   18664:	a8 06       	cpc	r10, r24
   18666:	b9 06       	cpc	r11, r25
   18668:	38 f1       	brcs	.+78     	; 0x186b8 <strtoul+0x142>
   1866a:	a3 01       	movw	r20, r6
   1866c:	92 01       	movw	r18, r4
   1866e:	0e 94 ab cd 	call	0x19b56	; 0x19b56 <__mulsi3>
   18672:	23 2d       	mov	r18, r3
   18674:	30 e0       	ldi	r19, 0x00	; 0
   18676:	50 e0       	ldi	r21, 0x00	; 0
   18678:	40 e0       	ldi	r20, 0x00	; 0
   1867a:	62 0f       	add	r22, r18
   1867c:	73 1f       	adc	r23, r19
   1867e:	84 1f       	adc	r24, r20
   18680:	95 1f       	adc	r25, r21
   18682:	62 17       	cp	r22, r18
   18684:	73 07       	cpc	r23, r19
   18686:	84 07       	cpc	r24, r20
   18688:	95 07       	cpc	r25, r21
   1868a:	b0 f0       	brcs	.+44     	; 0x186b8 <strtoul+0x142>
   1868c:	21 e0       	ldi	r18, 0x01	; 1
   1868e:	21 96       	adiw	r28, 0x01	; 1
   18690:	10 81       	ld	r17, Z
   18692:	cd cf       	rjmp	.-102    	; 0x1862e <strtoul+0xb8>
   18694:	1b 32       	cpi	r17, 0x2B	; 43
   18696:	21 f4       	brne	.+8      	; 0x186a0 <strtoul+0x12a>
   18698:	e5 01       	movw	r28, r10
   1869a:	22 96       	adiw	r28, 0x02	; 2
   1869c:	f5 01       	movw	r30, r10
   1869e:	11 81       	ldd	r17, Z+1	; 0x01
   186a0:	00 e0       	ldi	r16, 0x00	; 0
   186a2:	a0 cf       	rjmp	.-192    	; 0x185e4 <strtoul+0x6e>
   186a4:	78 e0       	ldi	r23, 0x08	; 8
   186a6:	e7 2e       	mov	r14, r23
   186a8:	f1 2c       	mov	r15, r1
   186aa:	88 24       	eor	r8, r8
   186ac:	8a 94       	dec	r8
   186ae:	98 2c       	mov	r9, r8
   186b0:	a8 2c       	mov	r10, r8
   186b2:	6f e1       	ldi	r22, 0x1F	; 31
   186b4:	b6 2e       	mov	r11, r22
   186b6:	b2 cf       	rjmp	.-156    	; 0x1861c <strtoul+0xa6>
   186b8:	2f ef       	ldi	r18, 0xFF	; 255
   186ba:	e9 cf       	rjmp	.-46     	; 0x1868e <strtoul+0x118>
   186bc:	c1 14       	cp	r12, r1
   186be:	d1 04       	cpc	r13, r1
   186c0:	31 f0       	breq	.+12     	; 0x186ce <strtoul+0x158>
   186c2:	22 23       	and	r18, r18
   186c4:	51 f1       	breq	.+84     	; 0x1871a <strtoul+0x1a4>
   186c6:	21 97       	sbiw	r28, 0x01	; 1
   186c8:	f6 01       	movw	r30, r12
   186ca:	d1 83       	std	Z+1, r29	; 0x01
   186cc:	c0 83       	st	Z, r28
   186ce:	00 ff       	sbrs	r16, 0
   186d0:	07 c0       	rjmp	.+14     	; 0x186e0 <strtoul+0x16a>
   186d2:	90 95       	com	r25
   186d4:	80 95       	com	r24
   186d6:	70 95       	com	r23
   186d8:	61 95       	neg	r22
   186da:	7f 4f       	sbci	r23, 0xFF	; 255
   186dc:	8f 4f       	sbci	r24, 0xFF	; 255
   186de:	9f 4f       	sbci	r25, 0xFF	; 255
   186e0:	2f 3f       	cpi	r18, 0xFF	; 255
   186e2:	49 f4       	brne	.+18     	; 0x186f6 <strtoul+0x180>
   186e4:	82 e2       	ldi	r24, 0x22	; 34
   186e6:	90 e0       	ldi	r25, 0x00	; 0
   186e8:	90 93 c5 13 	sts	0x13C5, r25	; 0x8013c5 <errno+0x1>
   186ec:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <errno>
   186f0:	6f ef       	ldi	r22, 0xFF	; 255
   186f2:	7f ef       	ldi	r23, 0xFF	; 255
   186f4:	cb 01       	movw	r24, r22
   186f6:	df 91       	pop	r29
   186f8:	cf 91       	pop	r28
   186fa:	1f 91       	pop	r17
   186fc:	0f 91       	pop	r16
   186fe:	ff 90       	pop	r15
   18700:	ef 90       	pop	r14
   18702:	df 90       	pop	r13
   18704:	cf 90       	pop	r12
   18706:	bf 90       	pop	r11
   18708:	af 90       	pop	r10
   1870a:	9f 90       	pop	r9
   1870c:	8f 90       	pop	r8
   1870e:	7f 90       	pop	r7
   18710:	6f 90       	pop	r6
   18712:	5f 90       	pop	r5
   18714:	4f 90       	pop	r4
   18716:	3f 90       	pop	r3
   18718:	08 95       	ret
   1871a:	01 ff       	sbrs	r16, 1
   1871c:	d8 cf       	rjmp	.-80     	; 0x186ce <strtoul+0x158>
   1871e:	22 97       	sbiw	r28, 0x02	; 2
   18720:	d3 cf       	rjmp	.-90     	; 0x186c8 <strtoul+0x152>
   18722:	10 e3       	ldi	r17, 0x30	; 48
   18724:	e1 14       	cp	r14, r1
   18726:	f1 04       	cpc	r15, r1
   18728:	09 f4       	brne	.+2      	; 0x1872c <strtoul+0x1b6>
   1872a:	bc cf       	rjmp	.-136    	; 0x186a4 <strtoul+0x12e>
   1872c:	3a e0       	ldi	r19, 0x0A	; 10
   1872e:	e3 16       	cp	r14, r19
   18730:	f1 04       	cpc	r15, r1
   18732:	e9 f0       	breq	.+58     	; 0x1876e <strtoul+0x1f8>
   18734:	80 e1       	ldi	r24, 0x10	; 16
   18736:	e8 16       	cp	r14, r24
   18738:	f1 04       	cpc	r15, r1
   1873a:	09 f4       	brne	.+2      	; 0x1873e <strtoul+0x1c8>
   1873c:	66 cf       	rjmp	.-308    	; 0x1860a <strtoul+0x94>
   1873e:	e8 e0       	ldi	r30, 0x08	; 8
   18740:	ee 16       	cp	r14, r30
   18742:	f1 04       	cpc	r15, r1
   18744:	09 f4       	brne	.+2      	; 0x18748 <strtoul+0x1d2>
   18746:	b1 cf       	rjmp	.-158    	; 0x186aa <strtoul+0x134>
   18748:	6f ef       	ldi	r22, 0xFF	; 255
   1874a:	7f ef       	ldi	r23, 0xFF	; 255
   1874c:	cb 01       	movw	r24, r22
   1874e:	97 01       	movw	r18, r14
   18750:	0f 2c       	mov	r0, r15
   18752:	00 0c       	add	r0, r0
   18754:	44 0b       	sbc	r20, r20
   18756:	55 0b       	sbc	r21, r21
   18758:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
   1875c:	49 01       	movw	r8, r18
   1875e:	5a 01       	movw	r10, r20
   18760:	5d cf       	rjmp	.-326    	; 0x1861c <strtoul+0xa6>
   18762:	10 33       	cpi	r17, 0x30	; 48
   18764:	09 f4       	brne	.+2      	; 0x18768 <strtoul+0x1f2>
   18766:	49 cf       	rjmp	.-366    	; 0x185fa <strtoul+0x84>
   18768:	9a e0       	ldi	r25, 0x0A	; 10
   1876a:	e9 2e       	mov	r14, r25
   1876c:	f1 2c       	mov	r15, r1
   1876e:	89 e9       	ldi	r24, 0x99	; 153
   18770:	88 2e       	mov	r8, r24
   18772:	98 2c       	mov	r9, r8
   18774:	a8 2c       	mov	r10, r8
   18776:	89 e1       	ldi	r24, 0x19	; 25
   18778:	b8 2e       	mov	r11, r24
   1877a:	50 cf       	rjmp	.-352    	; 0x1861c <strtoul+0xa6>

0001877c <atof>:
atof():
   1877c:	66 27       	eor	r22, r22
   1877e:	77 27       	eor	r23, r23
   18780:	0c 94 65 c9 	jmp	0x192ca	; 0x192ca <strtod>

00018784 <atoi>:
atoi():
   18784:	fc 01       	movw	r30, r24
   18786:	88 27       	eor	r24, r24
   18788:	99 27       	eor	r25, r25
   1878a:	e8 94       	clt
   1878c:	21 91       	ld	r18, Z+
   1878e:	20 32       	cpi	r18, 0x20	; 32
   18790:	e9 f3       	breq	.-6      	; 0x1878c <atoi+0x8>
   18792:	29 30       	cpi	r18, 0x09	; 9
   18794:	10 f0       	brcs	.+4      	; 0x1879a <atoi+0x16>
   18796:	2e 30       	cpi	r18, 0x0E	; 14
   18798:	c8 f3       	brcs	.-14     	; 0x1878c <atoi+0x8>
   1879a:	2b 32       	cpi	r18, 0x2B	; 43
   1879c:	41 f0       	breq	.+16     	; 0x187ae <atoi+0x2a>
   1879e:	2d 32       	cpi	r18, 0x2D	; 45
   187a0:	39 f4       	brne	.+14     	; 0x187b0 <atoi+0x2c>
   187a2:	68 94       	set
   187a4:	04 c0       	rjmp	.+8      	; 0x187ae <atoi+0x2a>
   187a6:	0e 94 3c c4 	call	0x18878	; 0x18878 <__mulhi_const_10>
   187aa:	82 0f       	add	r24, r18
   187ac:	91 1d       	adc	r25, r1
   187ae:	21 91       	ld	r18, Z+
   187b0:	20 53       	subi	r18, 0x30	; 48
   187b2:	2a 30       	cpi	r18, 0x0A	; 10
   187b4:	c0 f3       	brcs	.-16     	; 0x187a6 <atoi+0x22>
   187b6:	1e f4       	brtc	.+6      	; 0x187be <atoi+0x3a>
   187b8:	90 95       	com	r25
   187ba:	81 95       	neg	r24
   187bc:	9f 4f       	sbci	r25, 0xFF	; 255
   187be:	08 95       	ret

000187c0 <isspace>:
isspace():
   187c0:	91 11       	cpse	r25, r1
   187c2:	0c 94 9b cb 	jmp	0x19736	; 0x19736 <__ctype_isfalse>
   187c6:	80 32       	cpi	r24, 0x20	; 32
   187c8:	19 f0       	breq	.+6      	; 0x187d0 <isspace+0x10>
   187ca:	89 50       	subi	r24, 0x09	; 9
   187cc:	85 50       	subi	r24, 0x05	; 5
   187ce:	c8 f7       	brcc	.-14     	; 0x187c2 <isspace+0x2>
   187d0:	08 95       	ret

000187d2 <strcat_P>:
strcat_P():
   187d2:	fb 01       	movw	r30, r22
   187d4:	dc 01       	movw	r26, r24
   187d6:	0d 90       	ld	r0, X+
   187d8:	00 20       	and	r0, r0
   187da:	e9 f7       	brne	.-6      	; 0x187d6 <strcat_P+0x4>
   187dc:	11 97       	sbiw	r26, 0x01	; 1
   187de:	05 90       	lpm	r0, Z+
   187e0:	0d 92       	st	X+, r0
   187e2:	00 20       	and	r0, r0
   187e4:	e1 f7       	brne	.-8      	; 0x187de <strcat_P+0xc>
   187e6:	08 95       	ret

000187e8 <strcpy_P>:
strcpy_P():
   187e8:	fb 01       	movw	r30, r22
   187ea:	dc 01       	movw	r26, r24
   187ec:	05 90       	lpm	r0, Z+
   187ee:	0d 92       	st	X+, r0
   187f0:	00 20       	and	r0, r0
   187f2:	e1 f7       	brne	.-8      	; 0x187ec <strcpy_P+0x4>
   187f4:	08 95       	ret

000187f6 <strtok>:
strtok():
   187f6:	4c ea       	ldi	r20, 0xAC	; 172
   187f8:	53 e1       	ldi	r21, 0x13	; 19
   187fa:	0c 94 ff c3 	jmp	0x187fe	; 0x187fe <strtok_r>

000187fe <strtok_r>:
strtok_r():
   187fe:	fa 01       	movw	r30, r20
   18800:	a1 91       	ld	r26, Z+
   18802:	b0 81       	ld	r27, Z
   18804:	00 97       	sbiw	r24, 0x00	; 0
   18806:	19 f4       	brne	.+6      	; 0x1880e <strtok_r+0x10>
   18808:	10 97       	sbiw	r26, 0x00	; 0
   1880a:	e1 f0       	breq	.+56     	; 0x18844 <strtok_r+0x46>
   1880c:	cd 01       	movw	r24, r26
   1880e:	dc 01       	movw	r26, r24
   18810:	cd 01       	movw	r24, r26
   18812:	0d 90       	ld	r0, X+
   18814:	00 20       	and	r0, r0
   18816:	11 f4       	brne	.+4      	; 0x1881c <strtok_r+0x1e>
   18818:	c0 01       	movw	r24, r0
   1881a:	13 c0       	rjmp	.+38     	; 0x18842 <strtok_r+0x44>
   1881c:	fb 01       	movw	r30, r22
   1881e:	21 91       	ld	r18, Z+
   18820:	22 23       	and	r18, r18
   18822:	19 f0       	breq	.+6      	; 0x1882a <strtok_r+0x2c>
   18824:	20 15       	cp	r18, r0
   18826:	d9 f7       	brne	.-10     	; 0x1881e <strtok_r+0x20>
   18828:	f3 cf       	rjmp	.-26     	; 0x18810 <strtok_r+0x12>
   1882a:	fb 01       	movw	r30, r22
   1882c:	21 91       	ld	r18, Z+
   1882e:	20 15       	cp	r18, r0
   18830:	19 f4       	brne	.+6      	; 0x18838 <strtok_r+0x3a>
   18832:	1e 92       	st	-X, r1
   18834:	11 96       	adiw	r26, 0x01	; 1
   18836:	06 c0       	rjmp	.+12     	; 0x18844 <strtok_r+0x46>
   18838:	22 23       	and	r18, r18
   1883a:	c1 f7       	brne	.-16     	; 0x1882c <strtok_r+0x2e>
   1883c:	0d 90       	ld	r0, X+
   1883e:	00 20       	and	r0, r0
   18840:	a1 f7       	brne	.-24     	; 0x1882a <strtok_r+0x2c>
   18842:	d0 01       	movw	r26, r0
   18844:	fa 01       	movw	r30, r20
   18846:	a1 93       	st	Z+, r26
   18848:	b0 83       	st	Z, r27
   1884a:	08 95       	ret

0001884c <itoa>:
itoa():
   1884c:	45 32       	cpi	r20, 0x25	; 37
   1884e:	51 05       	cpc	r21, r1
   18850:	20 f4       	brcc	.+8      	; 0x1885a <itoa+0xe>
   18852:	42 30       	cpi	r20, 0x02	; 2
   18854:	10 f0       	brcs	.+4      	; 0x1885a <itoa+0xe>
   18856:	0c 94 31 c4 	jmp	0x18862	; 0x18862 <__itoa_ncheck>
   1885a:	fb 01       	movw	r30, r22
   1885c:	10 82       	st	Z, r1
   1885e:	cb 01       	movw	r24, r22
   18860:	08 95       	ret

00018862 <__itoa_ncheck>:
__itoa_ncheck():
   18862:	bb 27       	eor	r27, r27
   18864:	4a 30       	cpi	r20, 0x0A	; 10
   18866:	31 f4       	brne	.+12     	; 0x18874 <__itoa_ncheck+0x12>
   18868:	99 23       	and	r25, r25
   1886a:	22 f4       	brpl	.+8      	; 0x18874 <__itoa_ncheck+0x12>
   1886c:	bd e2       	ldi	r27, 0x2D	; 45
   1886e:	90 95       	com	r25
   18870:	81 95       	neg	r24
   18872:	9f 4f       	sbci	r25, 0xFF	; 255
   18874:	0c 94 45 c4 	jmp	0x1888a	; 0x1888a <__utoa_common>

00018878 <__mulhi_const_10>:
__mulhi_const_10():
   18878:	7a e0       	ldi	r23, 0x0A	; 10
   1887a:	97 9f       	mul	r25, r23
   1887c:	90 2d       	mov	r25, r0
   1887e:	87 9f       	mul	r24, r23
   18880:	80 2d       	mov	r24, r0
   18882:	91 0d       	add	r25, r1
   18884:	11 24       	eor	r1, r1
   18886:	08 95       	ret

00018888 <__utoa_ncheck>:
__utoa_ncheck():
   18888:	bb 27       	eor	r27, r27

0001888a <__utoa_common>:
   1888a:	fb 01       	movw	r30, r22
   1888c:	55 27       	eor	r21, r21
   1888e:	aa 27       	eor	r26, r26
   18890:	88 0f       	add	r24, r24
   18892:	99 1f       	adc	r25, r25
   18894:	aa 1f       	adc	r26, r26
   18896:	a4 17       	cp	r26, r20
   18898:	10 f0       	brcs	.+4      	; 0x1889e <__utoa_common+0x14>
   1889a:	a4 1b       	sub	r26, r20
   1889c:	83 95       	inc	r24
   1889e:	50 51       	subi	r21, 0x10	; 16
   188a0:	b9 f7       	brne	.-18     	; 0x18890 <__utoa_common+0x6>
   188a2:	a0 5d       	subi	r26, 0xD0	; 208
   188a4:	aa 33       	cpi	r26, 0x3A	; 58
   188a6:	08 f0       	brcs	.+2      	; 0x188aa <__utoa_common+0x20>
   188a8:	a9 5d       	subi	r26, 0xD9	; 217
   188aa:	a1 93       	st	Z+, r26
   188ac:	00 97       	sbiw	r24, 0x00	; 0
   188ae:	79 f7       	brne	.-34     	; 0x1888e <__utoa_common+0x4>
   188b0:	b1 11       	cpse	r27, r1
   188b2:	b1 93       	st	Z+, r27
   188b4:	11 92       	st	Z+, r1
   188b6:	cb 01       	movw	r24, r22
   188b8:	0c 94 d3 cb 	jmp	0x197a6	; 0x197a6 <strrev>

000188bc <fdevopen>:
fdevopen():
   188bc:	0f 93       	push	r16
   188be:	1f 93       	push	r17
   188c0:	cf 93       	push	r28
   188c2:	df 93       	push	r29
   188c4:	00 97       	sbiw	r24, 0x00	; 0
   188c6:	59 f4       	brne	.+22     	; 0x188de <fdevopen+0x22>
   188c8:	61 15       	cp	r22, r1
   188ca:	71 05       	cpc	r23, r1
   188cc:	41 f4       	brne	.+16     	; 0x188de <fdevopen+0x22>
   188ce:	f0 e0       	ldi	r31, 0x00	; 0
   188d0:	e0 e0       	ldi	r30, 0x00	; 0
   188d2:	cf 01       	movw	r24, r30
   188d4:	df 91       	pop	r29
   188d6:	cf 91       	pop	r28
   188d8:	1f 91       	pop	r17
   188da:	0f 91       	pop	r16
   188dc:	08 95       	ret
   188de:	8b 01       	movw	r16, r22
   188e0:	ec 01       	movw	r28, r24
   188e2:	6e e0       	ldi	r22, 0x0E	; 14
   188e4:	70 e0       	ldi	r23, 0x00	; 0
   188e6:	81 e0       	ldi	r24, 0x01	; 1
   188e8:	90 e0       	ldi	r25, 0x00	; 0
   188ea:	0e 94 ab c6 	call	0x18d56	; 0x18d56 <calloc>
   188ee:	fc 01       	movw	r30, r24
   188f0:	89 2b       	or	r24, r25
   188f2:	69 f3       	breq	.-38     	; 0x188ce <fdevopen+0x12>
   188f4:	80 e8       	ldi	r24, 0x80	; 128
   188f6:	83 83       	std	Z+3, r24	; 0x03
   188f8:	01 15       	cp	r16, r1
   188fa:	11 05       	cpc	r17, r1
   188fc:	71 f0       	breq	.+28     	; 0x1891a <fdevopen+0x5e>
   188fe:	13 87       	std	Z+11, r17	; 0x0b
   18900:	02 87       	std	Z+10, r16	; 0x0a
   18902:	81 e8       	ldi	r24, 0x81	; 129
   18904:	83 83       	std	Z+3, r24	; 0x03
   18906:	80 91 ae 13 	lds	r24, 0x13AE	; 0x8013ae <__iob>
   1890a:	90 91 af 13 	lds	r25, 0x13AF	; 0x8013af <__iob+0x1>
   1890e:	89 2b       	or	r24, r25
   18910:	21 f4       	brne	.+8      	; 0x1891a <fdevopen+0x5e>
   18912:	f0 93 af 13 	sts	0x13AF, r31	; 0x8013af <__iob+0x1>
   18916:	e0 93 ae 13 	sts	0x13AE, r30	; 0x8013ae <__iob>
   1891a:	20 97       	sbiw	r28, 0x00	; 0
   1891c:	d1 f2       	breq	.-76     	; 0x188d2 <fdevopen+0x16>
   1891e:	d1 87       	std	Z+9, r29	; 0x09
   18920:	c0 87       	std	Z+8, r28	; 0x08
   18922:	83 81       	ldd	r24, Z+3	; 0x03
   18924:	82 60       	ori	r24, 0x02	; 2
   18926:	83 83       	std	Z+3, r24	; 0x03
   18928:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <__iob+0x2>
   1892c:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <__iob+0x3>
   18930:	89 2b       	or	r24, r25
   18932:	79 f6       	brne	.-98     	; 0x188d2 <fdevopen+0x16>
   18934:	f0 93 b1 13 	sts	0x13B1, r31	; 0x8013b1 <__iob+0x3>
   18938:	e0 93 b0 13 	sts	0x13B0, r30	; 0x8013b0 <__iob+0x2>
   1893c:	80 91 b2 13 	lds	r24, 0x13B2	; 0x8013b2 <__iob+0x4>
   18940:	90 91 b3 13 	lds	r25, 0x13B3	; 0x8013b3 <__iob+0x5>
   18944:	89 2b       	or	r24, r25
   18946:	29 f6       	brne	.-118    	; 0x188d2 <fdevopen+0x16>
   18948:	f0 93 b3 13 	sts	0x13B3, r31	; 0x8013b3 <__iob+0x5>
   1894c:	e0 93 b2 13 	sts	0x13B2, r30	; 0x8013b2 <__iob+0x4>
   18950:	c0 cf       	rjmp	.-128    	; 0x188d2 <fdevopen+0x16>

00018952 <vfprintf>:
vfprintf():
   18952:	2f 92       	push	r2
   18954:	3f 92       	push	r3
   18956:	4f 92       	push	r4
   18958:	5f 92       	push	r5
   1895a:	6f 92       	push	r6
   1895c:	7f 92       	push	r7
   1895e:	8f 92       	push	r8
   18960:	9f 92       	push	r9
   18962:	af 92       	push	r10
   18964:	bf 92       	push	r11
   18966:	cf 92       	push	r12
   18968:	df 92       	push	r13
   1896a:	ef 92       	push	r14
   1896c:	ff 92       	push	r15
   1896e:	0f 93       	push	r16
   18970:	1f 93       	push	r17
   18972:	cf 93       	push	r28
   18974:	df 93       	push	r29
   18976:	00 d0       	rcall	.+0      	; 0x18978 <vfprintf+0x26>
   18978:	00 d0       	rcall	.+0      	; 0x1897a <vfprintf+0x28>
   1897a:	00 d0       	rcall	.+0      	; 0x1897c <vfprintf+0x2a>
   1897c:	1f 92       	push	r1
   1897e:	1f 92       	push	r1
   18980:	cd b7       	in	r28, 0x3d	; 61
   18982:	de b7       	in	r29, 0x3e	; 62
   18984:	7c 01       	movw	r14, r24
   18986:	3b 01       	movw	r6, r22
   18988:	8a 01       	movw	r16, r20
   1898a:	fc 01       	movw	r30, r24
   1898c:	17 82       	std	Z+7, r1	; 0x07
   1898e:	16 82       	std	Z+6, r1	; 0x06
   18990:	83 81       	ldd	r24, Z+3	; 0x03
   18992:	81 ff       	sbrs	r24, 1
   18994:	dd c1       	rjmp	.+954    	; 0x18d50 <vfprintf+0x3fe>
   18996:	ce 01       	movw	r24, r28
   18998:	01 96       	adiw	r24, 0x01	; 1
   1899a:	5c 01       	movw	r10, r24
   1899c:	f7 01       	movw	r30, r14
   1899e:	93 81       	ldd	r25, Z+3	; 0x03
   189a0:	f3 01       	movw	r30, r6
   189a2:	93 fd       	sbrc	r25, 3
   189a4:	85 91       	lpm	r24, Z+
   189a6:	93 ff       	sbrs	r25, 3
   189a8:	81 91       	ld	r24, Z+
   189aa:	3f 01       	movw	r6, r30
   189ac:	88 23       	and	r24, r24
   189ae:	09 f4       	brne	.+2      	; 0x189b2 <vfprintf+0x60>
   189b0:	53 c1       	rjmp	.+678    	; 0x18c58 <vfprintf+0x306>
   189b2:	85 32       	cpi	r24, 0x25	; 37
   189b4:	39 f4       	brne	.+14     	; 0x189c4 <vfprintf+0x72>
   189b6:	93 fd       	sbrc	r25, 3
   189b8:	85 91       	lpm	r24, Z+
   189ba:	93 ff       	sbrs	r25, 3
   189bc:	81 91       	ld	r24, Z+
   189be:	3f 01       	movw	r6, r30
   189c0:	85 32       	cpi	r24, 0x25	; 37
   189c2:	29 f4       	brne	.+10     	; 0x189ce <vfprintf+0x7c>
   189c4:	b7 01       	movw	r22, r14
   189c6:	90 e0       	ldi	r25, 0x00	; 0
   189c8:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   189cc:	e7 cf       	rjmp	.-50     	; 0x1899c <vfprintf+0x4a>
   189ce:	91 2c       	mov	r9, r1
   189d0:	21 2c       	mov	r2, r1
   189d2:	31 2c       	mov	r3, r1
   189d4:	ff e1       	ldi	r31, 0x1F	; 31
   189d6:	f3 15       	cp	r31, r3
   189d8:	38 f0       	brcs	.+14     	; 0x189e8 <vfprintf+0x96>
   189da:	8b 32       	cpi	r24, 0x2B	; 43
   189dc:	11 f1       	breq	.+68     	; 0x18a22 <vfprintf+0xd0>
   189de:	90 f4       	brcc	.+36     	; 0x18a04 <vfprintf+0xb2>
   189e0:	80 32       	cpi	r24, 0x20	; 32
   189e2:	09 f1       	breq	.+66     	; 0x18a26 <vfprintf+0xd4>
   189e4:	83 32       	cpi	r24, 0x23	; 35
   189e6:	29 f1       	breq	.+74     	; 0x18a32 <vfprintf+0xe0>
   189e8:	37 fc       	sbrc	r3, 7
   189ea:	3c c0       	rjmp	.+120    	; 0x18a64 <vfprintf+0x112>
   189ec:	20 ed       	ldi	r18, 0xD0	; 208
   189ee:	28 0f       	add	r18, r24
   189f0:	2a 30       	cpi	r18, 0x0A	; 10
   189f2:	50 f5       	brcc	.+84     	; 0x18a48 <vfprintf+0xf6>
   189f4:	36 fe       	sbrs	r3, 6
   189f6:	20 c0       	rjmp	.+64     	; 0x18a38 <vfprintf+0xe6>
   189f8:	8a e0       	ldi	r24, 0x0A	; 10
   189fa:	98 9e       	mul	r9, r24
   189fc:	20 0d       	add	r18, r0
   189fe:	11 24       	eor	r1, r1
   18a00:	92 2e       	mov	r9, r18
   18a02:	06 c0       	rjmp	.+12     	; 0x18a10 <vfprintf+0xbe>
   18a04:	8d 32       	cpi	r24, 0x2D	; 45
   18a06:	91 f0       	breq	.+36     	; 0x18a2c <vfprintf+0xda>
   18a08:	80 33       	cpi	r24, 0x30	; 48
   18a0a:	71 f7       	brne	.-36     	; 0x189e8 <vfprintf+0x96>
   18a0c:	68 94       	set
   18a0e:	30 f8       	bld	r3, 0
   18a10:	f3 01       	movw	r30, r6
   18a12:	93 fd       	sbrc	r25, 3
   18a14:	85 91       	lpm	r24, Z+
   18a16:	93 ff       	sbrs	r25, 3
   18a18:	81 91       	ld	r24, Z+
   18a1a:	3f 01       	movw	r6, r30
   18a1c:	81 11       	cpse	r24, r1
   18a1e:	da cf       	rjmp	.-76     	; 0x189d4 <vfprintf+0x82>
   18a20:	21 c0       	rjmp	.+66     	; 0x18a64 <vfprintf+0x112>
   18a22:	68 94       	set
   18a24:	31 f8       	bld	r3, 1
   18a26:	68 94       	set
   18a28:	32 f8       	bld	r3, 2
   18a2a:	f2 cf       	rjmp	.-28     	; 0x18a10 <vfprintf+0xbe>
   18a2c:	68 94       	set
   18a2e:	33 f8       	bld	r3, 3
   18a30:	ef cf       	rjmp	.-34     	; 0x18a10 <vfprintf+0xbe>
   18a32:	68 94       	set
   18a34:	34 f8       	bld	r3, 4
   18a36:	ec cf       	rjmp	.-40     	; 0x18a10 <vfprintf+0xbe>
   18a38:	ea e0       	ldi	r30, 0x0A	; 10
   18a3a:	2e 9e       	mul	r2, r30
   18a3c:	20 0d       	add	r18, r0
   18a3e:	11 24       	eor	r1, r1
   18a40:	22 2e       	mov	r2, r18
   18a42:	68 94       	set
   18a44:	35 f8       	bld	r3, 5
   18a46:	e4 cf       	rjmp	.-56     	; 0x18a10 <vfprintf+0xbe>
   18a48:	8e 32       	cpi	r24, 0x2E	; 46
   18a4a:	29 f4       	brne	.+10     	; 0x18a56 <vfprintf+0x104>
   18a4c:	36 fc       	sbrc	r3, 6
   18a4e:	04 c1       	rjmp	.+520    	; 0x18c58 <vfprintf+0x306>
   18a50:	68 94       	set
   18a52:	36 f8       	bld	r3, 6
   18a54:	dd cf       	rjmp	.-70     	; 0x18a10 <vfprintf+0xbe>
   18a56:	8c 36       	cpi	r24, 0x6C	; 108
   18a58:	19 f4       	brne	.+6      	; 0x18a60 <vfprintf+0x10e>
   18a5a:	68 94       	set
   18a5c:	37 f8       	bld	r3, 7
   18a5e:	d8 cf       	rjmp	.-80     	; 0x18a10 <vfprintf+0xbe>
   18a60:	88 36       	cpi	r24, 0x68	; 104
   18a62:	b1 f2       	breq	.-84     	; 0x18a10 <vfprintf+0xbe>
   18a64:	98 2f       	mov	r25, r24
   18a66:	9f 7d       	andi	r25, 0xDF	; 223
   18a68:	95 54       	subi	r25, 0x45	; 69
   18a6a:	93 30       	cpi	r25, 0x03	; 3
   18a6c:	e0 f0       	brcs	.+56     	; 0x18aa6 <vfprintf+0x154>
   18a6e:	83 36       	cpi	r24, 0x63	; 99
   18a70:	a1 f1       	breq	.+104    	; 0x18ada <vfprintf+0x188>
   18a72:	83 37       	cpi	r24, 0x73	; 115
   18a74:	c1 f1       	breq	.+112    	; 0x18ae6 <vfprintf+0x194>
   18a76:	83 35       	cpi	r24, 0x53	; 83
   18a78:	09 f0       	breq	.+2      	; 0x18a7c <vfprintf+0x12a>
   18a7a:	63 c0       	rjmp	.+198    	; 0x18b42 <vfprintf+0x1f0>
   18a7c:	28 01       	movw	r4, r16
   18a7e:	f2 e0       	ldi	r31, 0x02	; 2
   18a80:	4f 0e       	add	r4, r31
   18a82:	51 1c       	adc	r5, r1
   18a84:	f8 01       	movw	r30, r16
   18a86:	c0 80       	ld	r12, Z
   18a88:	d1 80       	ldd	r13, Z+1	; 0x01
   18a8a:	69 2d       	mov	r22, r9
   18a8c:	70 e0       	ldi	r23, 0x00	; 0
   18a8e:	36 fc       	sbrc	r3, 6
   18a90:	02 c0       	rjmp	.+4      	; 0x18a96 <vfprintf+0x144>
   18a92:	6f ef       	ldi	r22, 0xFF	; 255
   18a94:	7f ef       	ldi	r23, 0xFF	; 255
   18a96:	c6 01       	movw	r24, r12
   18a98:	0e 94 b6 cb 	call	0x1976c	; 0x1976c <strnlen_P>
   18a9c:	4c 01       	movw	r8, r24
   18a9e:	68 94       	set
   18aa0:	37 f8       	bld	r3, 7
   18aa2:	82 01       	movw	r16, r4
   18aa4:	0a c0       	rjmp	.+20     	; 0x18aba <vfprintf+0x168>
   18aa6:	0c 5f       	subi	r16, 0xFC	; 252
   18aa8:	1f 4f       	sbci	r17, 0xFF	; 255
   18aaa:	ff e3       	ldi	r31, 0x3F	; 63
   18aac:	f9 83       	std	Y+1, r31	; 0x01
   18aae:	88 24       	eor	r8, r8
   18ab0:	83 94       	inc	r8
   18ab2:	91 2c       	mov	r9, r1
   18ab4:	65 01       	movw	r12, r10
   18ab6:	e8 94       	clt
   18ab8:	37 f8       	bld	r3, 7
   18aba:	33 fe       	sbrs	r3, 3
   18abc:	2d c0       	rjmp	.+90     	; 0x18b18 <vfprintf+0x1c6>
   18abe:	52 2c       	mov	r5, r2
   18ac0:	81 14       	cp	r8, r1
   18ac2:	91 04       	cpc	r9, r1
   18ac4:	71 f5       	brne	.+92     	; 0x18b22 <vfprintf+0x1d0>
   18ac6:	55 20       	and	r5, r5
   18ac8:	09 f4       	brne	.+2      	; 0x18acc <vfprintf+0x17a>
   18aca:	68 cf       	rjmp	.-304    	; 0x1899c <vfprintf+0x4a>
   18acc:	b7 01       	movw	r22, r14
   18ace:	80 e2       	ldi	r24, 0x20	; 32
   18ad0:	90 e0       	ldi	r25, 0x00	; 0
   18ad2:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18ad6:	5a 94       	dec	r5
   18ad8:	f6 cf       	rjmp	.-20     	; 0x18ac6 <vfprintf+0x174>
   18ada:	f8 01       	movw	r30, r16
   18adc:	80 81       	ld	r24, Z
   18ade:	89 83       	std	Y+1, r24	; 0x01
   18ae0:	0e 5f       	subi	r16, 0xFE	; 254
   18ae2:	1f 4f       	sbci	r17, 0xFF	; 255
   18ae4:	e4 cf       	rjmp	.-56     	; 0x18aae <vfprintf+0x15c>
   18ae6:	28 01       	movw	r4, r16
   18ae8:	f2 e0       	ldi	r31, 0x02	; 2
   18aea:	4f 0e       	add	r4, r31
   18aec:	51 1c       	adc	r5, r1
   18aee:	f8 01       	movw	r30, r16
   18af0:	c0 80       	ld	r12, Z
   18af2:	d1 80       	ldd	r13, Z+1	; 0x01
   18af4:	69 2d       	mov	r22, r9
   18af6:	70 e0       	ldi	r23, 0x00	; 0
   18af8:	36 fc       	sbrc	r3, 6
   18afa:	02 c0       	rjmp	.+4      	; 0x18b00 <vfprintf+0x1ae>
   18afc:	6f ef       	ldi	r22, 0xFF	; 255
   18afe:	7f ef       	ldi	r23, 0xFF	; 255
   18b00:	c6 01       	movw	r24, r12
   18b02:	0e 94 c8 cb 	call	0x19790	; 0x19790 <strnlen>
   18b06:	4c 01       	movw	r8, r24
   18b08:	82 01       	movw	r16, r4
   18b0a:	d5 cf       	rjmp	.-86     	; 0x18ab6 <vfprintf+0x164>
   18b0c:	b7 01       	movw	r22, r14
   18b0e:	80 e2       	ldi	r24, 0x20	; 32
   18b10:	90 e0       	ldi	r25, 0x00	; 0
   18b12:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18b16:	2a 94       	dec	r2
   18b18:	28 14       	cp	r2, r8
   18b1a:	19 04       	cpc	r1, r9
   18b1c:	09 f0       	breq	.+2      	; 0x18b20 <vfprintf+0x1ce>
   18b1e:	b0 f7       	brcc	.-20     	; 0x18b0c <vfprintf+0x1ba>
   18b20:	ce cf       	rjmp	.-100    	; 0x18abe <vfprintf+0x16c>
   18b22:	f6 01       	movw	r30, r12
   18b24:	37 fc       	sbrc	r3, 7
   18b26:	85 91       	lpm	r24, Z+
   18b28:	37 fe       	sbrs	r3, 7
   18b2a:	81 91       	ld	r24, Z+
   18b2c:	6f 01       	movw	r12, r30
   18b2e:	b7 01       	movw	r22, r14
   18b30:	90 e0       	ldi	r25, 0x00	; 0
   18b32:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18b36:	51 10       	cpse	r5, r1
   18b38:	5a 94       	dec	r5
   18b3a:	f1 e0       	ldi	r31, 0x01	; 1
   18b3c:	8f 1a       	sub	r8, r31
   18b3e:	91 08       	sbc	r9, r1
   18b40:	bf cf       	rjmp	.-130    	; 0x18ac0 <vfprintf+0x16e>
   18b42:	84 36       	cpi	r24, 0x64	; 100
   18b44:	19 f0       	breq	.+6      	; 0x18b4c <vfprintf+0x1fa>
   18b46:	89 36       	cpi	r24, 0x69	; 105
   18b48:	09 f0       	breq	.+2      	; 0x18b4c <vfprintf+0x1fa>
   18b4a:	77 c0       	rjmp	.+238    	; 0x18c3a <vfprintf+0x2e8>
   18b4c:	f8 01       	movw	r30, r16
   18b4e:	37 fe       	sbrs	r3, 7
   18b50:	6b c0       	rjmp	.+214    	; 0x18c28 <vfprintf+0x2d6>
   18b52:	60 81       	ld	r22, Z
   18b54:	71 81       	ldd	r23, Z+1	; 0x01
   18b56:	82 81       	ldd	r24, Z+2	; 0x02
   18b58:	93 81       	ldd	r25, Z+3	; 0x03
   18b5a:	0c 5f       	subi	r16, 0xFC	; 252
   18b5c:	1f 4f       	sbci	r17, 0xFF	; 255
   18b5e:	f3 2d       	mov	r31, r3
   18b60:	ff 76       	andi	r31, 0x6F	; 111
   18b62:	3f 2e       	mov	r3, r31
   18b64:	97 ff       	sbrs	r25, 7
   18b66:	09 c0       	rjmp	.+18     	; 0x18b7a <vfprintf+0x228>
   18b68:	90 95       	com	r25
   18b6a:	80 95       	com	r24
   18b6c:	70 95       	com	r23
   18b6e:	61 95       	neg	r22
   18b70:	7f 4f       	sbci	r23, 0xFF	; 255
   18b72:	8f 4f       	sbci	r24, 0xFF	; 255
   18b74:	9f 4f       	sbci	r25, 0xFF	; 255
   18b76:	68 94       	set
   18b78:	37 f8       	bld	r3, 7
   18b7a:	2a e0       	ldi	r18, 0x0A	; 10
   18b7c:	30 e0       	ldi	r19, 0x00	; 0
   18b7e:	a5 01       	movw	r20, r10
   18b80:	0e 94 13 cc 	call	0x19826	; 0x19826 <__ultoa_invert>
   18b84:	c8 2e       	mov	r12, r24
   18b86:	ca 18       	sub	r12, r10
   18b88:	8c 2c       	mov	r8, r12
   18b8a:	43 2c       	mov	r4, r3
   18b8c:	36 fe       	sbrs	r3, 6
   18b8e:	0c c0       	rjmp	.+24     	; 0x18ba8 <vfprintf+0x256>
   18b90:	e8 94       	clt
   18b92:	40 f8       	bld	r4, 0
   18b94:	c9 14       	cp	r12, r9
   18b96:	40 f4       	brcc	.+16     	; 0x18ba8 <vfprintf+0x256>
   18b98:	34 fe       	sbrs	r3, 4
   18b9a:	05 c0       	rjmp	.+10     	; 0x18ba6 <vfprintf+0x254>
   18b9c:	32 fc       	sbrc	r3, 2
   18b9e:	03 c0       	rjmp	.+6      	; 0x18ba6 <vfprintf+0x254>
   18ba0:	f3 2d       	mov	r31, r3
   18ba2:	fe 7e       	andi	r31, 0xEE	; 238
   18ba4:	4f 2e       	mov	r4, r31
   18ba6:	89 2c       	mov	r8, r9
   18ba8:	44 fe       	sbrs	r4, 4
   18baa:	aa c0       	rjmp	.+340    	; 0x18d00 <vfprintf+0x3ae>
   18bac:	fe 01       	movw	r30, r28
   18bae:	ec 0d       	add	r30, r12
   18bb0:	f1 1d       	adc	r31, r1
   18bb2:	80 81       	ld	r24, Z
   18bb4:	80 33       	cpi	r24, 0x30	; 48
   18bb6:	09 f0       	breq	.+2      	; 0x18bba <vfprintf+0x268>
   18bb8:	9c c0       	rjmp	.+312    	; 0x18cf2 <vfprintf+0x3a0>
   18bba:	24 2d       	mov	r18, r4
   18bbc:	29 7e       	andi	r18, 0xE9	; 233
   18bbe:	42 2e       	mov	r4, r18
   18bc0:	84 2d       	mov	r24, r4
   18bc2:	88 70       	andi	r24, 0x08	; 8
   18bc4:	58 2e       	mov	r5, r24
   18bc6:	43 fc       	sbrc	r4, 3
   18bc8:	aa c0       	rjmp	.+340    	; 0x18d1e <vfprintf+0x3cc>
   18bca:	40 fe       	sbrs	r4, 0
   18bcc:	a4 c0       	rjmp	.+328    	; 0x18d16 <vfprintf+0x3c4>
   18bce:	9c 2c       	mov	r9, r12
   18bd0:	82 14       	cp	r8, r2
   18bd2:	18 f4       	brcc	.+6      	; 0x18bda <vfprintf+0x288>
   18bd4:	2c 0c       	add	r2, r12
   18bd6:	92 2c       	mov	r9, r2
   18bd8:	98 18       	sub	r9, r8
   18bda:	44 fe       	sbrs	r4, 4
   18bdc:	a6 c0       	rjmp	.+332    	; 0x18d2a <vfprintf+0x3d8>
   18bde:	b7 01       	movw	r22, r14
   18be0:	80 e3       	ldi	r24, 0x30	; 48
   18be2:	90 e0       	ldi	r25, 0x00	; 0
   18be4:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18be8:	42 fe       	sbrs	r4, 2
   18bea:	09 c0       	rjmp	.+18     	; 0x18bfe <vfprintf+0x2ac>
   18bec:	88 e7       	ldi	r24, 0x78	; 120
   18bee:	90 e0       	ldi	r25, 0x00	; 0
   18bf0:	41 fe       	sbrs	r4, 1
   18bf2:	02 c0       	rjmp	.+4      	; 0x18bf8 <vfprintf+0x2a6>
   18bf4:	88 e5       	ldi	r24, 0x58	; 88
   18bf6:	90 e0       	ldi	r25, 0x00	; 0
   18bf8:	b7 01       	movw	r22, r14
   18bfa:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18bfe:	c9 14       	cp	r12, r9
   18c00:	08 f4       	brcc	.+2      	; 0x18c04 <vfprintf+0x2b2>
   18c02:	9f c0       	rjmp	.+318    	; 0x18d42 <vfprintf+0x3f0>
   18c04:	ca 94       	dec	r12
   18c06:	d1 2c       	mov	r13, r1
   18c08:	9f ef       	ldi	r25, 0xFF	; 255
   18c0a:	c9 1a       	sub	r12, r25
   18c0c:	d9 0a       	sbc	r13, r25
   18c0e:	ca 0c       	add	r12, r10
   18c10:	db 1c       	adc	r13, r11
   18c12:	f6 01       	movw	r30, r12
   18c14:	82 91       	ld	r24, -Z
   18c16:	6f 01       	movw	r12, r30
   18c18:	b7 01       	movw	r22, r14
   18c1a:	90 e0       	ldi	r25, 0x00	; 0
   18c1c:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18c20:	ac 14       	cp	r10, r12
   18c22:	bd 04       	cpc	r11, r13
   18c24:	b1 f7       	brne	.-20     	; 0x18c12 <vfprintf+0x2c0>
   18c26:	4f cf       	rjmp	.-354    	; 0x18ac6 <vfprintf+0x174>
   18c28:	60 81       	ld	r22, Z
   18c2a:	71 81       	ldd	r23, Z+1	; 0x01
   18c2c:	07 2e       	mov	r0, r23
   18c2e:	00 0c       	add	r0, r0
   18c30:	88 0b       	sbc	r24, r24
   18c32:	99 0b       	sbc	r25, r25
   18c34:	0e 5f       	subi	r16, 0xFE	; 254
   18c36:	1f 4f       	sbci	r17, 0xFF	; 255
   18c38:	92 cf       	rjmp	.-220    	; 0x18b5e <vfprintf+0x20c>
   18c3a:	d3 2c       	mov	r13, r3
   18c3c:	e8 94       	clt
   18c3e:	d4 f8       	bld	r13, 4
   18c40:	2a e0       	ldi	r18, 0x0A	; 10
   18c42:	30 e0       	ldi	r19, 0x00	; 0
   18c44:	85 37       	cpi	r24, 0x75	; 117
   18c46:	e1 f1       	breq	.+120    	; 0x18cc0 <vfprintf+0x36e>
   18c48:	23 2d       	mov	r18, r3
   18c4a:	29 7f       	andi	r18, 0xF9	; 249
   18c4c:	d2 2e       	mov	r13, r18
   18c4e:	8f 36       	cpi	r24, 0x6F	; 111
   18c50:	a9 f1       	breq	.+106    	; 0x18cbc <vfprintf+0x36a>
   18c52:	f0 f4       	brcc	.+60     	; 0x18c90 <vfprintf+0x33e>
   18c54:	88 35       	cpi	r24, 0x58	; 88
   18c56:	51 f1       	breq	.+84     	; 0x18cac <vfprintf+0x35a>
   18c58:	f7 01       	movw	r30, r14
   18c5a:	86 81       	ldd	r24, Z+6	; 0x06
   18c5c:	97 81       	ldd	r25, Z+7	; 0x07
   18c5e:	2b 96       	adiw	r28, 0x0b	; 11
   18c60:	0f b6       	in	r0, 0x3f	; 63
   18c62:	f8 94       	cli
   18c64:	de bf       	out	0x3e, r29	; 62
   18c66:	0f be       	out	0x3f, r0	; 63
   18c68:	cd bf       	out	0x3d, r28	; 61
   18c6a:	df 91       	pop	r29
   18c6c:	cf 91       	pop	r28
   18c6e:	1f 91       	pop	r17
   18c70:	0f 91       	pop	r16
   18c72:	ff 90       	pop	r15
   18c74:	ef 90       	pop	r14
   18c76:	df 90       	pop	r13
   18c78:	cf 90       	pop	r12
   18c7a:	bf 90       	pop	r11
   18c7c:	af 90       	pop	r10
   18c7e:	9f 90       	pop	r9
   18c80:	8f 90       	pop	r8
   18c82:	7f 90       	pop	r7
   18c84:	6f 90       	pop	r6
   18c86:	5f 90       	pop	r5
   18c88:	4f 90       	pop	r4
   18c8a:	3f 90       	pop	r3
   18c8c:	2f 90       	pop	r2
   18c8e:	08 95       	ret
   18c90:	80 37       	cpi	r24, 0x70	; 112
   18c92:	49 f0       	breq	.+18     	; 0x18ca6 <vfprintf+0x354>
   18c94:	88 37       	cpi	r24, 0x78	; 120
   18c96:	01 f7       	brne	.-64     	; 0x18c58 <vfprintf+0x306>
   18c98:	d4 fe       	sbrs	r13, 4
   18c9a:	02 c0       	rjmp	.+4      	; 0x18ca0 <vfprintf+0x34e>
   18c9c:	68 94       	set
   18c9e:	d2 f8       	bld	r13, 2
   18ca0:	20 e1       	ldi	r18, 0x10	; 16
   18ca2:	30 e0       	ldi	r19, 0x00	; 0
   18ca4:	0d c0       	rjmp	.+26     	; 0x18cc0 <vfprintf+0x36e>
   18ca6:	68 94       	set
   18ca8:	d4 f8       	bld	r13, 4
   18caa:	f6 cf       	rjmp	.-20     	; 0x18c98 <vfprintf+0x346>
   18cac:	34 fe       	sbrs	r3, 4
   18cae:	03 c0       	rjmp	.+6      	; 0x18cb6 <vfprintf+0x364>
   18cb0:	82 2f       	mov	r24, r18
   18cb2:	86 60       	ori	r24, 0x06	; 6
   18cb4:	d8 2e       	mov	r13, r24
   18cb6:	20 e1       	ldi	r18, 0x10	; 16
   18cb8:	32 e0       	ldi	r19, 0x02	; 2
   18cba:	02 c0       	rjmp	.+4      	; 0x18cc0 <vfprintf+0x36e>
   18cbc:	28 e0       	ldi	r18, 0x08	; 8
   18cbe:	30 e0       	ldi	r19, 0x00	; 0
   18cc0:	f8 01       	movw	r30, r16
   18cc2:	d7 fe       	sbrs	r13, 7
   18cc4:	0f c0       	rjmp	.+30     	; 0x18ce4 <vfprintf+0x392>
   18cc6:	60 81       	ld	r22, Z
   18cc8:	71 81       	ldd	r23, Z+1	; 0x01
   18cca:	82 81       	ldd	r24, Z+2	; 0x02
   18ccc:	93 81       	ldd	r25, Z+3	; 0x03
   18cce:	0c 5f       	subi	r16, 0xFC	; 252
   18cd0:	1f 4f       	sbci	r17, 0xFF	; 255
   18cd2:	a5 01       	movw	r20, r10
   18cd4:	0e 94 13 cc 	call	0x19826	; 0x19826 <__ultoa_invert>
   18cd8:	c8 2e       	mov	r12, r24
   18cda:	ca 18       	sub	r12, r10
   18cdc:	3d 2c       	mov	r3, r13
   18cde:	e8 94       	clt
   18ce0:	37 f8       	bld	r3, 7
   18ce2:	52 cf       	rjmp	.-348    	; 0x18b88 <vfprintf+0x236>
   18ce4:	60 81       	ld	r22, Z
   18ce6:	71 81       	ldd	r23, Z+1	; 0x01
   18ce8:	90 e0       	ldi	r25, 0x00	; 0
   18cea:	80 e0       	ldi	r24, 0x00	; 0
   18cec:	0e 5f       	subi	r16, 0xFE	; 254
   18cee:	1f 4f       	sbci	r17, 0xFF	; 255
   18cf0:	f0 cf       	rjmp	.-32     	; 0x18cd2 <vfprintf+0x380>
   18cf2:	42 fc       	sbrc	r4, 2
   18cf4:	02 c0       	rjmp	.+4      	; 0x18cfa <vfprintf+0x3a8>
   18cf6:	83 94       	inc	r8
   18cf8:	63 cf       	rjmp	.-314    	; 0x18bc0 <vfprintf+0x26e>
   18cfa:	83 94       	inc	r8
   18cfc:	83 94       	inc	r8
   18cfe:	60 cf       	rjmp	.-320    	; 0x18bc0 <vfprintf+0x26e>
   18d00:	84 2d       	mov	r24, r4
   18d02:	86 78       	andi	r24, 0x86	; 134
   18d04:	09 f4       	brne	.+2      	; 0x18d08 <vfprintf+0x3b6>
   18d06:	5c cf       	rjmp	.-328    	; 0x18bc0 <vfprintf+0x26e>
   18d08:	f6 cf       	rjmp	.-20     	; 0x18cf6 <vfprintf+0x3a4>
   18d0a:	b7 01       	movw	r22, r14
   18d0c:	80 e2       	ldi	r24, 0x20	; 32
   18d0e:	90 e0       	ldi	r25, 0x00	; 0
   18d10:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18d14:	83 94       	inc	r8
   18d16:	82 14       	cp	r8, r2
   18d18:	c0 f3       	brcs	.-16     	; 0x18d0a <vfprintf+0x3b8>
   18d1a:	51 2c       	mov	r5, r1
   18d1c:	5e cf       	rjmp	.-324    	; 0x18bda <vfprintf+0x288>
   18d1e:	52 2c       	mov	r5, r2
   18d20:	58 18       	sub	r5, r8
   18d22:	82 14       	cp	r8, r2
   18d24:	08 f4       	brcc	.+2      	; 0x18d28 <vfprintf+0x3d6>
   18d26:	59 cf       	rjmp	.-334    	; 0x18bda <vfprintf+0x288>
   18d28:	f8 cf       	rjmp	.-16     	; 0x18d1a <vfprintf+0x3c8>
   18d2a:	84 2d       	mov	r24, r4
   18d2c:	86 78       	andi	r24, 0x86	; 134
   18d2e:	09 f4       	brne	.+2      	; 0x18d32 <vfprintf+0x3e0>
   18d30:	66 cf       	rjmp	.-308    	; 0x18bfe <vfprintf+0x2ac>
   18d32:	8b e2       	ldi	r24, 0x2B	; 43
   18d34:	41 fe       	sbrs	r4, 1
   18d36:	80 e2       	ldi	r24, 0x20	; 32
   18d38:	47 fc       	sbrc	r4, 7
   18d3a:	8d e2       	ldi	r24, 0x2D	; 45
   18d3c:	b7 01       	movw	r22, r14
   18d3e:	90 e0       	ldi	r25, 0x00	; 0
   18d40:	5c cf       	rjmp	.-328    	; 0x18bfa <vfprintf+0x2a8>
   18d42:	b7 01       	movw	r22, r14
   18d44:	80 e3       	ldi	r24, 0x30	; 48
   18d46:	90 e0       	ldi	r25, 0x00	; 0
   18d48:	0e 94 e3 cb 	call	0x197c6	; 0x197c6 <fputc>
   18d4c:	9a 94       	dec	r9
   18d4e:	57 cf       	rjmp	.-338    	; 0x18bfe <vfprintf+0x2ac>
   18d50:	8f ef       	ldi	r24, 0xFF	; 255
   18d52:	9f ef       	ldi	r25, 0xFF	; 255
   18d54:	84 cf       	rjmp	.-248    	; 0x18c5e <vfprintf+0x30c>

00018d56 <calloc>:
calloc():
   18d56:	0f 93       	push	r16
   18d58:	1f 93       	push	r17
   18d5a:	cf 93       	push	r28
   18d5c:	df 93       	push	r29
   18d5e:	86 9f       	mul	r24, r22
   18d60:	80 01       	movw	r16, r0
   18d62:	87 9f       	mul	r24, r23
   18d64:	10 0d       	add	r17, r0
   18d66:	96 9f       	mul	r25, r22
   18d68:	10 0d       	add	r17, r0
   18d6a:	11 24       	eor	r1, r1
   18d6c:	c8 01       	movw	r24, r16
   18d6e:	0e 94 40 c8 	call	0x19080	; 0x19080 <malloc>
   18d72:	ec 01       	movw	r28, r24
   18d74:	00 97       	sbiw	r24, 0x00	; 0
   18d76:	29 f0       	breq	.+10     	; 0x18d82 <calloc+0x2c>
   18d78:	a8 01       	movw	r20, r16
   18d7a:	70 e0       	ldi	r23, 0x00	; 0
   18d7c:	60 e0       	ldi	r22, 0x00	; 0
   18d7e:	0e 94 c1 cb 	call	0x19782	; 0x19782 <memset>
   18d82:	ce 01       	movw	r24, r28
   18d84:	df 91       	pop	r29
   18d86:	cf 91       	pop	r28
   18d88:	1f 91       	pop	r17
   18d8a:	0f 91       	pop	r16
   18d8c:	08 95       	ret

00018d8e <dtoa_prf>:
dtoa_prf():
   18d8e:	8f 92       	push	r8
   18d90:	9f 92       	push	r9
   18d92:	af 92       	push	r10
   18d94:	bf 92       	push	r11
   18d96:	cf 92       	push	r12
   18d98:	df 92       	push	r13
   18d9a:	ef 92       	push	r14
   18d9c:	ff 92       	push	r15
   18d9e:	0f 93       	push	r16
   18da0:	1f 93       	push	r17
   18da2:	cf 93       	push	r28
   18da4:	df 93       	push	r29
   18da6:	00 d0       	rcall	.+0      	; 0x18da8 <dtoa_prf+0x1a>
   18da8:	00 d0       	rcall	.+0      	; 0x18daa <dtoa_prf+0x1c>
   18daa:	00 d0       	rcall	.+0      	; 0x18dac <dtoa_prf+0x1e>
   18dac:	cd b7       	in	r28, 0x3d	; 61
   18dae:	de b7       	in	r29, 0x3e	; 62
   18db0:	6a 01       	movw	r12, r20
   18db2:	f2 2e       	mov	r15, r18
   18db4:	b0 2e       	mov	r11, r16
   18db6:	10 2f       	mov	r17, r16
   18db8:	fb e3       	ldi	r31, 0x3B	; 59
   18dba:	af 2e       	mov	r10, r31
   18dbc:	a0 16       	cp	r10, r16
   18dbe:	08 f4       	brcc	.+2      	; 0x18dc2 <dtoa_prf+0x34>
   18dc0:	1b e3       	ldi	r17, 0x3B	; 59
   18dc2:	1f 5f       	subi	r17, 0xFF	; 255
   18dc4:	01 2f       	mov	r16, r17
   18dc6:	27 e0       	ldi	r18, 0x07	; 7
   18dc8:	ae 01       	movw	r20, r28
   18dca:	4f 5f       	subi	r20, 0xFF	; 255
   18dcc:	5f 4f       	sbci	r21, 0xFF	; 255
   18dce:	0e 94 c3 ca 	call	0x19586	; 0x19586 <__ftoa_engine>
   18dd2:	bc 01       	movw	r22, r24
   18dd4:	89 81       	ldd	r24, Y+1	; 0x01
   18dd6:	98 2f       	mov	r25, r24
   18dd8:	99 70       	andi	r25, 0x09	; 9
   18dda:	91 30       	cpi	r25, 0x01	; 1
   18ddc:	09 f4       	brne	.+2      	; 0x18de0 <dtoa_prf+0x52>
   18dde:	4e c0       	rjmp	.+156    	; 0x18e7c <dtoa_prf+0xee>
   18de0:	9b e2       	ldi	r25, 0x2B	; 43
   18de2:	e1 fc       	sbrc	r14, 1
   18de4:	04 c0       	rjmp	.+8      	; 0x18dee <dtoa_prf+0x60>
   18de6:	9e 2d       	mov	r25, r14
   18de8:	91 70       	andi	r25, 0x01	; 1
   18dea:	e0 fc       	sbrc	r14, 0
   18dec:	49 c0       	rjmp	.+146    	; 0x18e80 <dtoa_prf+0xf2>
   18dee:	5e 2d       	mov	r21, r14
   18df0:	50 71       	andi	r21, 0x10	; 16
   18df2:	e8 2f       	mov	r30, r24
   18df4:	e8 70       	andi	r30, 0x08	; 8
   18df6:	83 ff       	sbrs	r24, 3
   18df8:	55 c0       	rjmp	.+170    	; 0x18ea4 <dtoa_prf+0x116>
   18dfa:	84 e0       	ldi	r24, 0x04	; 4
   18dfc:	91 11       	cpse	r25, r1
   18dfe:	01 c0       	rjmp	.+2      	; 0x18e02 <dtoa_prf+0x74>
   18e00:	83 e0       	ldi	r24, 0x03	; 3
   18e02:	ef 2d       	mov	r30, r15
   18e04:	e8 1b       	sub	r30, r24
   18e06:	8f 15       	cp	r24, r15
   18e08:	08 f0       	brcs	.+2      	; 0x18e0c <dtoa_prf+0x7e>
   18e0a:	e0 e0       	ldi	r30, 0x00	; 0
   18e0c:	d6 01       	movw	r26, r12
   18e0e:	8e 2f       	mov	r24, r30
   18e10:	20 e2       	ldi	r18, 0x20	; 32
   18e12:	55 23       	and	r21, r21
   18e14:	c9 f1       	breq	.+114    	; 0x18e88 <dtoa_prf+0xfa>
   18e16:	99 23       	and	r25, r25
   18e18:	29 f0       	breq	.+10     	; 0x18e24 <dtoa_prf+0x96>
   18e1a:	d6 01       	movw	r26, r12
   18e1c:	9c 93       	st	X, r25
   18e1e:	c6 01       	movw	r24, r12
   18e20:	01 96       	adiw	r24, 0x01	; 1
   18e22:	6c 01       	movw	r12, r24
   18e24:	96 01       	movw	r18, r12
   18e26:	2d 5f       	subi	r18, 0xFD	; 253
   18e28:	3f 4f       	sbci	r19, 0xFF	; 255
   18e2a:	e2 fe       	sbrs	r14, 2
   18e2c:	33 c0       	rjmp	.+102    	; 0x18e94 <dtoa_prf+0x106>
   18e2e:	8e e4       	ldi	r24, 0x4E	; 78
   18e30:	d6 01       	movw	r26, r12
   18e32:	8c 93       	st	X, r24
   18e34:	91 e4       	ldi	r25, 0x41	; 65
   18e36:	11 96       	adiw	r26, 0x01	; 1
   18e38:	9c 93       	st	X, r25
   18e3a:	11 97       	sbiw	r26, 0x01	; 1
   18e3c:	12 96       	adiw	r26, 0x02	; 2
   18e3e:	8c 93       	st	X, r24
   18e40:	d9 01       	movw	r26, r18
   18e42:	8e 2f       	mov	r24, r30
   18e44:	90 e2       	ldi	r25, 0x20	; 32
   18e46:	81 11       	cpse	r24, r1
   18e48:	2a c0       	rjmp	.+84     	; 0x18e9e <dtoa_prf+0x110>
   18e4a:	e2 0f       	add	r30, r18
   18e4c:	f3 2f       	mov	r31, r19
   18e4e:	f1 1d       	adc	r31, r1
   18e50:	10 82       	st	Z, r1
   18e52:	8e ef       	ldi	r24, 0xFE	; 254
   18e54:	9f ef       	ldi	r25, 0xFF	; 255
   18e56:	29 96       	adiw	r28, 0x09	; 9
   18e58:	0f b6       	in	r0, 0x3f	; 63
   18e5a:	f8 94       	cli
   18e5c:	de bf       	out	0x3e, r29	; 62
   18e5e:	0f be       	out	0x3f, r0	; 63
   18e60:	cd bf       	out	0x3d, r28	; 61
   18e62:	df 91       	pop	r29
   18e64:	cf 91       	pop	r28
   18e66:	1f 91       	pop	r17
   18e68:	0f 91       	pop	r16
   18e6a:	ff 90       	pop	r15
   18e6c:	ef 90       	pop	r14
   18e6e:	df 90       	pop	r13
   18e70:	cf 90       	pop	r12
   18e72:	bf 90       	pop	r11
   18e74:	af 90       	pop	r10
   18e76:	9f 90       	pop	r9
   18e78:	8f 90       	pop	r8
   18e7a:	08 95       	ret
   18e7c:	9d e2       	ldi	r25, 0x2D	; 45
   18e7e:	b7 cf       	rjmp	.-146    	; 0x18dee <dtoa_prf+0x60>
   18e80:	90 e2       	ldi	r25, 0x20	; 32
   18e82:	b5 cf       	rjmp	.-150    	; 0x18dee <dtoa_prf+0x60>
   18e84:	2d 93       	st	X+, r18
   18e86:	81 50       	subi	r24, 0x01	; 1
   18e88:	81 11       	cpse	r24, r1
   18e8a:	fc cf       	rjmp	.-8      	; 0x18e84 <dtoa_prf+0xf6>
   18e8c:	ce 0e       	add	r12, r30
   18e8e:	d1 1c       	adc	r13, r1
   18e90:	e0 e0       	ldi	r30, 0x00	; 0
   18e92:	c1 cf       	rjmp	.-126    	; 0x18e16 <dtoa_prf+0x88>
   18e94:	8e e6       	ldi	r24, 0x6E	; 110
   18e96:	d6 01       	movw	r26, r12
   18e98:	8c 93       	st	X, r24
   18e9a:	91 e6       	ldi	r25, 0x61	; 97
   18e9c:	cc cf       	rjmp	.-104    	; 0x18e36 <dtoa_prf+0xa8>
   18e9e:	9d 93       	st	X+, r25
   18ea0:	81 50       	subi	r24, 0x01	; 1
   18ea2:	d1 cf       	rjmp	.-94     	; 0x18e46 <dtoa_prf+0xb8>
   18ea4:	48 2f       	mov	r20, r24
   18ea6:	44 70       	andi	r20, 0x04	; 4
   18ea8:	82 ff       	sbrs	r24, 2
   18eaa:	3d c0       	rjmp	.+122    	; 0x18f26 <dtoa_prf+0x198>
   18eac:	84 e0       	ldi	r24, 0x04	; 4
   18eae:	91 11       	cpse	r25, r1
   18eb0:	01 c0       	rjmp	.+2      	; 0x18eb4 <dtoa_prf+0x126>
   18eb2:	83 e0       	ldi	r24, 0x03	; 3
   18eb4:	8f 15       	cp	r24, r15
   18eb6:	10 f4       	brcc	.+4      	; 0x18ebc <dtoa_prf+0x12e>
   18eb8:	ef 2d       	mov	r30, r15
   18eba:	e8 1b       	sub	r30, r24
   18ebc:	d6 01       	movw	r26, r12
   18ebe:	8e 2f       	mov	r24, r30
   18ec0:	20 e2       	ldi	r18, 0x20	; 32
   18ec2:	55 23       	and	r21, r21
   18ec4:	09 f1       	breq	.+66     	; 0x18f08 <dtoa_prf+0x17a>
   18ec6:	99 23       	and	r25, r25
   18ec8:	29 f0       	breq	.+10     	; 0x18ed4 <dtoa_prf+0x146>
   18eca:	d6 01       	movw	r26, r12
   18ecc:	9c 93       	st	X, r25
   18ece:	c6 01       	movw	r24, r12
   18ed0:	01 96       	adiw	r24, 0x01	; 1
   18ed2:	6c 01       	movw	r12, r24
   18ed4:	96 01       	movw	r18, r12
   18ed6:	2d 5f       	subi	r18, 0xFD	; 253
   18ed8:	3f 4f       	sbci	r19, 0xFF	; 255
   18eda:	e2 fe       	sbrs	r14, 2
   18edc:	1b c0       	rjmp	.+54     	; 0x18f14 <dtoa_prf+0x186>
   18ede:	89 e4       	ldi	r24, 0x49	; 73
   18ee0:	d6 01       	movw	r26, r12
   18ee2:	8c 93       	st	X, r24
   18ee4:	8e e4       	ldi	r24, 0x4E	; 78
   18ee6:	11 96       	adiw	r26, 0x01	; 1
   18ee8:	8c 93       	st	X, r24
   18eea:	11 97       	sbiw	r26, 0x01	; 1
   18eec:	86 e4       	ldi	r24, 0x46	; 70
   18eee:	12 96       	adiw	r26, 0x02	; 2
   18ef0:	8c 93       	st	X, r24
   18ef2:	d9 01       	movw	r26, r18
   18ef4:	8e 2f       	mov	r24, r30
   18ef6:	90 e2       	ldi	r25, 0x20	; 32
   18ef8:	88 23       	and	r24, r24
   18efa:	09 f4       	brne	.+2      	; 0x18efe <dtoa_prf+0x170>
   18efc:	a6 cf       	rjmp	.-180    	; 0x18e4a <dtoa_prf+0xbc>
   18efe:	9d 93       	st	X+, r25
   18f00:	81 50       	subi	r24, 0x01	; 1
   18f02:	fa cf       	rjmp	.-12     	; 0x18ef8 <dtoa_prf+0x16a>
   18f04:	2d 93       	st	X+, r18
   18f06:	81 50       	subi	r24, 0x01	; 1
   18f08:	81 11       	cpse	r24, r1
   18f0a:	fc cf       	rjmp	.-8      	; 0x18f04 <dtoa_prf+0x176>
   18f0c:	ce 0e       	add	r12, r30
   18f0e:	d1 1c       	adc	r13, r1
   18f10:	e0 e0       	ldi	r30, 0x00	; 0
   18f12:	d9 cf       	rjmp	.-78     	; 0x18ec6 <dtoa_prf+0x138>
   18f14:	89 e6       	ldi	r24, 0x69	; 105
   18f16:	d6 01       	movw	r26, r12
   18f18:	8c 93       	st	X, r24
   18f1a:	8e e6       	ldi	r24, 0x6E	; 110
   18f1c:	11 96       	adiw	r26, 0x01	; 1
   18f1e:	8c 93       	st	X, r24
   18f20:	11 97       	sbiw	r26, 0x01	; 1
   18f22:	86 e6       	ldi	r24, 0x66	; 102
   18f24:	e4 cf       	rjmp	.-56     	; 0x18eee <dtoa_prf+0x160>
   18f26:	9b 01       	movw	r18, r22
   18f28:	77 ff       	sbrs	r23, 7
   18f2a:	02 c0       	rjmp	.+4      	; 0x18f30 <dtoa_prf+0x1a2>
   18f2c:	30 e0       	ldi	r19, 0x00	; 0
   18f2e:	20 e0       	ldi	r18, 0x00	; 0
   18f30:	a1 e0       	ldi	r26, 0x01	; 1
   18f32:	b0 e0       	ldi	r27, 0x00	; 0
   18f34:	91 11       	cpse	r25, r1
   18f36:	02 c0       	rjmp	.+4      	; 0x18f3c <dtoa_prf+0x1ae>
   18f38:	b0 e0       	ldi	r27, 0x00	; 0
   18f3a:	a0 e0       	ldi	r26, 0x00	; 0
   18f3c:	f9 01       	movw	r30, r18
   18f3e:	31 96       	adiw	r30, 0x01	; 1
   18f40:	ae 0f       	add	r26, r30
   18f42:	bf 1f       	adc	r27, r31
   18f44:	8b 2c       	mov	r8, r11
   18f46:	91 2c       	mov	r9, r1
   18f48:	bb 20       	and	r11, r11
   18f4a:	09 f4       	brne	.+2      	; 0x18f4e <dtoa_prf+0x1c0>
   18f4c:	61 c0       	rjmp	.+194    	; 0x19010 <dtoa_prf+0x282>
   18f4e:	54 01       	movw	r10, r8
   18f50:	ef ef       	ldi	r30, 0xFF	; 255
   18f52:	ae 1a       	sub	r10, r30
   18f54:	be 0a       	sbc	r11, r30
   18f56:	aa 0d       	add	r26, r10
   18f58:	bb 1d       	adc	r27, r11
   18f5a:	fa 16       	cp	r15, r26
   18f5c:	1b 06       	cpc	r1, r27
   18f5e:	19 f0       	breq	.+6      	; 0x18f66 <dtoa_prf+0x1d8>
   18f60:	14 f0       	brlt	.+4      	; 0x18f66 <dtoa_prf+0x1d8>
   18f62:	4f 2d       	mov	r20, r15
   18f64:	4a 1b       	sub	r20, r26
   18f66:	51 11       	cpse	r21, r1
   18f68:	88 c0       	rjmp	.+272    	; 0x1907a <dtoa_prf+0x2ec>
   18f6a:	e3 fc       	sbrc	r14, 3
   18f6c:	59 c0       	rjmp	.+178    	; 0x19020 <dtoa_prf+0x292>
   18f6e:	76 01       	movw	r14, r12
   18f70:	a4 2f       	mov	r26, r20
   18f72:	b0 e2       	ldi	r27, 0x20	; 32
   18f74:	a1 11       	cpse	r26, r1
   18f76:	4f c0       	rjmp	.+158    	; 0x19016 <dtoa_prf+0x288>
   18f78:	c4 0e       	add	r12, r20
   18f7a:	d1 1c       	adc	r13, r1
   18f7c:	99 23       	and	r25, r25
   18f7e:	09 f4       	brne	.+2      	; 0x18f82 <dtoa_prf+0x1f4>
   18f80:	5b c0       	rjmp	.+182    	; 0x19038 <dtoa_prf+0x2aa>
   18f82:	40 e0       	ldi	r20, 0x00	; 0
   18f84:	d6 01       	movw	r26, r12
   18f86:	11 96       	adiw	r26, 0x01	; 1
   18f88:	f6 01       	movw	r30, r12
   18f8a:	90 83       	st	Z, r25
   18f8c:	6d 01       	movw	r12, r26
   18f8e:	55 23       	and	r21, r21
   18f90:	09 f4       	brne	.+2      	; 0x18f94 <dtoa_prf+0x206>
   18f92:	48 c0       	rjmp	.+144    	; 0x19024 <dtoa_prf+0x296>
   18f94:	01 2f       	mov	r16, r17
   18f96:	06 0f       	add	r16, r22
   18f98:	9a 81       	ldd	r25, Y+2	; 0x02
   18f9a:	58 2f       	mov	r21, r24
   18f9c:	50 71       	andi	r21, 0x10	; 16
   18f9e:	84 ff       	sbrs	r24, 4
   18fa0:	03 c0       	rjmp	.+6      	; 0x18fa8 <dtoa_prf+0x21a>
   18fa2:	91 33       	cpi	r25, 0x31	; 49
   18fa4:	09 f4       	brne	.+2      	; 0x18fa8 <dtoa_prf+0x21a>
   18fa6:	01 50       	subi	r16, 0x01	; 1
   18fa8:	10 16       	cp	r1, r16
   18faa:	0c f0       	brlt	.+2      	; 0x18fae <dtoa_prf+0x220>
   18fac:	47 c0       	rjmp	.+142    	; 0x1903c <dtoa_prf+0x2ae>
   18fae:	09 30       	cpi	r16, 0x09	; 9
   18fb0:	08 f0       	brcs	.+2      	; 0x18fb4 <dtoa_prf+0x226>
   18fb2:	08 e0       	ldi	r16, 0x08	; 8
   18fb4:	ee e2       	ldi	r30, 0x2E	; 46
   18fb6:	fe 2e       	mov	r15, r30
   18fb8:	5b 01       	movw	r10, r22
   18fba:	a0 1a       	sub	r10, r16
   18fbc:	b1 08       	sbc	r11, r1
   18fbe:	85 01       	movw	r16, r10
   18fc0:	91 94       	neg	r9
   18fc2:	81 94       	neg	r8
   18fc4:	91 08       	sbc	r9, r1
   18fc6:	2f 3f       	cpi	r18, 0xFF	; 255
   18fc8:	32 07       	cpc	r19, r18
   18fca:	29 f4       	brne	.+10     	; 0x18fd6 <dtoa_prf+0x248>
   18fcc:	d6 01       	movw	r26, r12
   18fce:	fc 92       	st	X, r15
   18fd0:	f6 01       	movw	r30, r12
   18fd2:	31 96       	adiw	r30, 0x01	; 1
   18fd4:	6f 01       	movw	r12, r30
   18fd6:	62 17       	cp	r22, r18
   18fd8:	73 07       	cpc	r23, r19
   18fda:	94 f1       	brlt	.+100    	; 0x19040 <dtoa_prf+0x2b2>
   18fdc:	02 17       	cp	r16, r18
   18fde:	13 07       	cpc	r17, r19
   18fe0:	7c f5       	brge	.+94     	; 0x19040 <dtoa_prf+0x2b2>
   18fe2:	db 01       	movw	r26, r22
   18fe4:	a2 1b       	sub	r26, r18
   18fe6:	b3 0b       	sbc	r27, r19
   18fe8:	aa 24       	eor	r10, r10
   18fea:	a3 94       	inc	r10
   18fec:	b1 2c       	mov	r11, r1
   18fee:	ac 0e       	add	r10, r28
   18ff0:	bd 1e       	adc	r11, r29
   18ff2:	aa 0d       	add	r26, r10
   18ff4:	bb 1d       	adc	r27, r11
   18ff6:	11 96       	adiw	r26, 0x01	; 1
   18ff8:	8c 91       	ld	r24, X
   18ffa:	21 50       	subi	r18, 0x01	; 1
   18ffc:	31 09       	sbc	r19, r1
   18ffe:	d6 01       	movw	r26, r12
   19000:	11 96       	adiw	r26, 0x01	; 1
   19002:	28 15       	cp	r18, r8
   19004:	39 05       	cpc	r19, r9
   19006:	f4 f0       	brlt	.+60     	; 0x19044 <dtoa_prf+0x2b6>
   19008:	f6 01       	movw	r30, r12
   1900a:	80 83       	st	Z, r24
   1900c:	6d 01       	movw	r12, r26
   1900e:	db cf       	rjmp	.-74     	; 0x18fc6 <dtoa_prf+0x238>
   19010:	b1 2c       	mov	r11, r1
   19012:	a1 2c       	mov	r10, r1
   19014:	a0 cf       	rjmp	.-192    	; 0x18f56 <dtoa_prf+0x1c8>
   19016:	f7 01       	movw	r30, r14
   19018:	b1 93       	st	Z+, r27
   1901a:	7f 01       	movw	r14, r30
   1901c:	a1 50       	subi	r26, 0x01	; 1
   1901e:	aa cf       	rjmp	.-172    	; 0x18f74 <dtoa_prf+0x1e6>
   19020:	91 11       	cpse	r25, r1
   19022:	b0 cf       	rjmp	.-160    	; 0x18f84 <dtoa_prf+0x1f6>
   19024:	d6 01       	movw	r26, r12
   19026:	94 2f       	mov	r25, r20
   19028:	50 e3       	ldi	r21, 0x30	; 48
   1902a:	02 c0       	rjmp	.+4      	; 0x19030 <dtoa_prf+0x2a2>
   1902c:	5d 93       	st	X+, r21
   1902e:	91 50       	subi	r25, 0x01	; 1
   19030:	91 11       	cpse	r25, r1
   19032:	fc cf       	rjmp	.-8      	; 0x1902c <dtoa_prf+0x29e>
   19034:	c4 0e       	add	r12, r20
   19036:	d1 1c       	adc	r13, r1
   19038:	40 e0       	ldi	r20, 0x00	; 0
   1903a:	ac cf       	rjmp	.-168    	; 0x18f94 <dtoa_prf+0x206>
   1903c:	01 e0       	ldi	r16, 0x01	; 1
   1903e:	ba cf       	rjmp	.-140    	; 0x18fb4 <dtoa_prf+0x226>
   19040:	80 e3       	ldi	r24, 0x30	; 48
   19042:	db cf       	rjmp	.-74     	; 0x18ffa <dtoa_prf+0x26c>
   19044:	62 17       	cp	r22, r18
   19046:	73 07       	cpc	r23, r19
   19048:	31 f4       	brne	.+12     	; 0x19056 <dtoa_prf+0x2c8>
   1904a:	96 33       	cpi	r25, 0x36	; 54
   1904c:	88 f4       	brcc	.+34     	; 0x19070 <dtoa_prf+0x2e2>
   1904e:	95 33       	cpi	r25, 0x35	; 53
   19050:	11 f4       	brne	.+4      	; 0x19056 <dtoa_prf+0x2c8>
   19052:	55 23       	and	r21, r21
   19054:	69 f0       	breq	.+26     	; 0x19070 <dtoa_prf+0x2e2>
   19056:	f6 01       	movw	r30, r12
   19058:	80 83       	st	Z, r24
   1905a:	fd 01       	movw	r30, r26
   1905c:	84 2f       	mov	r24, r20
   1905e:	90 e2       	ldi	r25, 0x20	; 32
   19060:	81 11       	cpse	r24, r1
   19062:	08 c0       	rjmp	.+16     	; 0x19074 <dtoa_prf+0x2e6>
   19064:	a4 0f       	add	r26, r20
   19066:	b1 1d       	adc	r27, r1
   19068:	1c 92       	st	X, r1
   1906a:	90 e0       	ldi	r25, 0x00	; 0
   1906c:	80 e0       	ldi	r24, 0x00	; 0
   1906e:	f3 ce       	rjmp	.-538    	; 0x18e56 <dtoa_prf+0xc8>
   19070:	81 e3       	ldi	r24, 0x31	; 49
   19072:	f1 cf       	rjmp	.-30     	; 0x19056 <dtoa_prf+0x2c8>
   19074:	91 93       	st	Z+, r25
   19076:	81 50       	subi	r24, 0x01	; 1
   19078:	f3 cf       	rjmp	.-26     	; 0x19060 <dtoa_prf+0x2d2>
   1907a:	91 11       	cpse	r25, r1
   1907c:	83 cf       	rjmp	.-250    	; 0x18f84 <dtoa_prf+0x1f6>
   1907e:	8a cf       	rjmp	.-236    	; 0x18f94 <dtoa_prf+0x206>

00019080 <malloc>:
malloc():
   19080:	0f 93       	push	r16
   19082:	1f 93       	push	r17
   19084:	cf 93       	push	r28
   19086:	df 93       	push	r29
   19088:	82 30       	cpi	r24, 0x02	; 2
   1908a:	91 05       	cpc	r25, r1
   1908c:	10 f4       	brcc	.+4      	; 0x19092 <malloc+0x12>
   1908e:	82 e0       	ldi	r24, 0x02	; 2
   19090:	90 e0       	ldi	r25, 0x00	; 0
   19092:	e0 91 c8 13 	lds	r30, 0x13C8	; 0x8013c8 <__flp>
   19096:	f0 91 c9 13 	lds	r31, 0x13C9	; 0x8013c9 <__flp+0x1>
   1909a:	30 e0       	ldi	r19, 0x00	; 0
   1909c:	20 e0       	ldi	r18, 0x00	; 0
   1909e:	b0 e0       	ldi	r27, 0x00	; 0
   190a0:	a0 e0       	ldi	r26, 0x00	; 0
   190a2:	30 97       	sbiw	r30, 0x00	; 0
   190a4:	99 f4       	brne	.+38     	; 0x190cc <malloc+0x4c>
   190a6:	21 15       	cp	r18, r1
   190a8:	31 05       	cpc	r19, r1
   190aa:	09 f4       	brne	.+2      	; 0x190ae <malloc+0x2e>
   190ac:	4a c0       	rjmp	.+148    	; 0x19142 <malloc+0xc2>
   190ae:	28 1b       	sub	r18, r24
   190b0:	39 0b       	sbc	r19, r25
   190b2:	24 30       	cpi	r18, 0x04	; 4
   190b4:	31 05       	cpc	r19, r1
   190b6:	d8 f5       	brcc	.+118    	; 0x1912e <malloc+0xae>
   190b8:	8a 81       	ldd	r24, Y+2	; 0x02
   190ba:	9b 81       	ldd	r25, Y+3	; 0x03
   190bc:	61 15       	cp	r22, r1
   190be:	71 05       	cpc	r23, r1
   190c0:	89 f1       	breq	.+98     	; 0x19124 <malloc+0xa4>
   190c2:	fb 01       	movw	r30, r22
   190c4:	93 83       	std	Z+3, r25	; 0x03
   190c6:	82 83       	std	Z+2, r24	; 0x02
   190c8:	fe 01       	movw	r30, r28
   190ca:	11 c0       	rjmp	.+34     	; 0x190ee <malloc+0x6e>
   190cc:	40 81       	ld	r20, Z
   190ce:	51 81       	ldd	r21, Z+1	; 0x01
   190d0:	02 81       	ldd	r16, Z+2	; 0x02
   190d2:	13 81       	ldd	r17, Z+3	; 0x03
   190d4:	48 17       	cp	r20, r24
   190d6:	59 07       	cpc	r21, r25
   190d8:	e0 f0       	brcs	.+56     	; 0x19112 <malloc+0x92>
   190da:	48 17       	cp	r20, r24
   190dc:	59 07       	cpc	r21, r25
   190de:	99 f4       	brne	.+38     	; 0x19106 <malloc+0x86>
   190e0:	10 97       	sbiw	r26, 0x00	; 0
   190e2:	61 f0       	breq	.+24     	; 0x190fc <malloc+0x7c>
   190e4:	12 96       	adiw	r26, 0x02	; 2
   190e6:	0c 93       	st	X, r16
   190e8:	12 97       	sbiw	r26, 0x02	; 2
   190ea:	13 96       	adiw	r26, 0x03	; 3
   190ec:	1c 93       	st	X, r17
   190ee:	32 96       	adiw	r30, 0x02	; 2
   190f0:	cf 01       	movw	r24, r30
   190f2:	df 91       	pop	r29
   190f4:	cf 91       	pop	r28
   190f6:	1f 91       	pop	r17
   190f8:	0f 91       	pop	r16
   190fa:	08 95       	ret
   190fc:	00 93 c8 13 	sts	0x13C8, r16	; 0x8013c8 <__flp>
   19100:	10 93 c9 13 	sts	0x13C9, r17	; 0x8013c9 <__flp+0x1>
   19104:	f4 cf       	rjmp	.-24     	; 0x190ee <malloc+0x6e>
   19106:	21 15       	cp	r18, r1
   19108:	31 05       	cpc	r19, r1
   1910a:	51 f0       	breq	.+20     	; 0x19120 <malloc+0xa0>
   1910c:	42 17       	cp	r20, r18
   1910e:	53 07       	cpc	r21, r19
   19110:	38 f0       	brcs	.+14     	; 0x19120 <malloc+0xa0>
   19112:	a9 01       	movw	r20, r18
   19114:	db 01       	movw	r26, r22
   19116:	9a 01       	movw	r18, r20
   19118:	bd 01       	movw	r22, r26
   1911a:	df 01       	movw	r26, r30
   1911c:	f8 01       	movw	r30, r16
   1911e:	c1 cf       	rjmp	.-126    	; 0x190a2 <malloc+0x22>
   19120:	ef 01       	movw	r28, r30
   19122:	f9 cf       	rjmp	.-14     	; 0x19116 <malloc+0x96>
   19124:	90 93 c9 13 	sts	0x13C9, r25	; 0x8013c9 <__flp+0x1>
   19128:	80 93 c8 13 	sts	0x13C8, r24	; 0x8013c8 <__flp>
   1912c:	cd cf       	rjmp	.-102    	; 0x190c8 <malloc+0x48>
   1912e:	fe 01       	movw	r30, r28
   19130:	e2 0f       	add	r30, r18
   19132:	f3 1f       	adc	r31, r19
   19134:	81 93       	st	Z+, r24
   19136:	91 93       	st	Z+, r25
   19138:	22 50       	subi	r18, 0x02	; 2
   1913a:	31 09       	sbc	r19, r1
   1913c:	39 83       	std	Y+1, r19	; 0x01
   1913e:	28 83       	st	Y, r18
   19140:	d7 cf       	rjmp	.-82     	; 0x190f0 <malloc+0x70>
   19142:	20 91 c6 13 	lds	r18, 0x13C6	; 0x8013c6 <__brkval>
   19146:	30 91 c7 13 	lds	r19, 0x13C7	; 0x8013c7 <__brkval+0x1>
   1914a:	23 2b       	or	r18, r19
   1914c:	41 f4       	brne	.+16     	; 0x1915e <malloc+0xde>
   1914e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   19152:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   19156:	30 93 c7 13 	sts	0x13C7, r19	; 0x8013c7 <__brkval+0x1>
   1915a:	20 93 c6 13 	sts	0x13C6, r18	; 0x8013c6 <__brkval>
   1915e:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   19162:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   19166:	21 15       	cp	r18, r1
   19168:	31 05       	cpc	r19, r1
   1916a:	41 f4       	brne	.+16     	; 0x1917c <malloc+0xfc>
   1916c:	2d b7       	in	r18, 0x3d	; 61
   1916e:	3e b7       	in	r19, 0x3e	; 62
   19170:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   19174:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   19178:	24 1b       	sub	r18, r20
   1917a:	35 0b       	sbc	r19, r21
   1917c:	e0 91 c6 13 	lds	r30, 0x13C6	; 0x8013c6 <__brkval>
   19180:	f0 91 c7 13 	lds	r31, 0x13C7	; 0x8013c7 <__brkval+0x1>
   19184:	e2 17       	cp	r30, r18
   19186:	f3 07       	cpc	r31, r19
   19188:	a0 f4       	brcc	.+40     	; 0x191b2 <malloc+0x132>
   1918a:	2e 1b       	sub	r18, r30
   1918c:	3f 0b       	sbc	r19, r31
   1918e:	28 17       	cp	r18, r24
   19190:	39 07       	cpc	r19, r25
   19192:	78 f0       	brcs	.+30     	; 0x191b2 <malloc+0x132>
   19194:	ac 01       	movw	r20, r24
   19196:	4e 5f       	subi	r20, 0xFE	; 254
   19198:	5f 4f       	sbci	r21, 0xFF	; 255
   1919a:	24 17       	cp	r18, r20
   1919c:	35 07       	cpc	r19, r21
   1919e:	48 f0       	brcs	.+18     	; 0x191b2 <malloc+0x132>
   191a0:	4e 0f       	add	r20, r30
   191a2:	5f 1f       	adc	r21, r31
   191a4:	50 93 c7 13 	sts	0x13C7, r21	; 0x8013c7 <__brkval+0x1>
   191a8:	40 93 c6 13 	sts	0x13C6, r20	; 0x8013c6 <__brkval>
   191ac:	81 93       	st	Z+, r24
   191ae:	91 93       	st	Z+, r25
   191b0:	9f cf       	rjmp	.-194    	; 0x190f0 <malloc+0x70>
   191b2:	f0 e0       	ldi	r31, 0x00	; 0
   191b4:	e0 e0       	ldi	r30, 0x00	; 0
   191b6:	9c cf       	rjmp	.-200    	; 0x190f0 <malloc+0x70>

000191b8 <free>:
free():
   191b8:	cf 93       	push	r28
   191ba:	df 93       	push	r29
   191bc:	00 97       	sbiw	r24, 0x00	; 0
   191be:	e9 f0       	breq	.+58     	; 0x191fa <free+0x42>
   191c0:	fc 01       	movw	r30, r24
   191c2:	32 97       	sbiw	r30, 0x02	; 2
   191c4:	13 82       	std	Z+3, r1	; 0x03
   191c6:	12 82       	std	Z+2, r1	; 0x02
   191c8:	a0 91 c8 13 	lds	r26, 0x13C8	; 0x8013c8 <__flp>
   191cc:	b0 91 c9 13 	lds	r27, 0x13C9	; 0x8013c9 <__flp+0x1>
   191d0:	ed 01       	movw	r28, r26
   191d2:	30 e0       	ldi	r19, 0x00	; 0
   191d4:	20 e0       	ldi	r18, 0x00	; 0
   191d6:	10 97       	sbiw	r26, 0x00	; 0
   191d8:	a1 f4       	brne	.+40     	; 0x19202 <free+0x4a>
   191da:	20 81       	ld	r18, Z
   191dc:	31 81       	ldd	r19, Z+1	; 0x01
   191de:	82 0f       	add	r24, r18
   191e0:	93 1f       	adc	r25, r19
   191e2:	20 91 c6 13 	lds	r18, 0x13C6	; 0x8013c6 <__brkval>
   191e6:	30 91 c7 13 	lds	r19, 0x13C7	; 0x8013c7 <__brkval+0x1>
   191ea:	28 17       	cp	r18, r24
   191ec:	39 07       	cpc	r19, r25
   191ee:	09 f0       	breq	.+2      	; 0x191f2 <free+0x3a>
   191f0:	61 c0       	rjmp	.+194    	; 0x192b4 <free+0xfc>
   191f2:	f0 93 c7 13 	sts	0x13C7, r31	; 0x8013c7 <__brkval+0x1>
   191f6:	e0 93 c6 13 	sts	0x13C6, r30	; 0x8013c6 <__brkval>
   191fa:	df 91       	pop	r29
   191fc:	cf 91       	pop	r28
   191fe:	08 95       	ret
   19200:	ea 01       	movw	r28, r20
   19202:	ce 17       	cp	r28, r30
   19204:	df 07       	cpc	r29, r31
   19206:	e8 f5       	brcc	.+122    	; 0x19282 <free+0xca>
   19208:	4a 81       	ldd	r20, Y+2	; 0x02
   1920a:	5b 81       	ldd	r21, Y+3	; 0x03
   1920c:	9e 01       	movw	r18, r28
   1920e:	41 15       	cp	r20, r1
   19210:	51 05       	cpc	r21, r1
   19212:	b1 f7       	brne	.-20     	; 0x19200 <free+0x48>
   19214:	e9 01       	movw	r28, r18
   19216:	fb 83       	std	Y+3, r31	; 0x03
   19218:	ea 83       	std	Y+2, r30	; 0x02
   1921a:	49 91       	ld	r20, Y+
   1921c:	59 91       	ld	r21, Y+
   1921e:	c4 0f       	add	r28, r20
   19220:	d5 1f       	adc	r29, r21
   19222:	ec 17       	cp	r30, r28
   19224:	fd 07       	cpc	r31, r29
   19226:	61 f4       	brne	.+24     	; 0x19240 <free+0x88>
   19228:	80 81       	ld	r24, Z
   1922a:	91 81       	ldd	r25, Z+1	; 0x01
   1922c:	02 96       	adiw	r24, 0x02	; 2
   1922e:	84 0f       	add	r24, r20
   19230:	95 1f       	adc	r25, r21
   19232:	e9 01       	movw	r28, r18
   19234:	99 83       	std	Y+1, r25	; 0x01
   19236:	88 83       	st	Y, r24
   19238:	82 81       	ldd	r24, Z+2	; 0x02
   1923a:	93 81       	ldd	r25, Z+3	; 0x03
   1923c:	9b 83       	std	Y+3, r25	; 0x03
   1923e:	8a 83       	std	Y+2, r24	; 0x02
   19240:	f0 e0       	ldi	r31, 0x00	; 0
   19242:	e0 e0       	ldi	r30, 0x00	; 0
   19244:	12 96       	adiw	r26, 0x02	; 2
   19246:	8d 91       	ld	r24, X+
   19248:	9c 91       	ld	r25, X
   1924a:	13 97       	sbiw	r26, 0x03	; 3
   1924c:	00 97       	sbiw	r24, 0x00	; 0
   1924e:	b9 f5       	brne	.+110    	; 0x192be <free+0x106>
   19250:	2d 91       	ld	r18, X+
   19252:	3c 91       	ld	r19, X
   19254:	11 97       	sbiw	r26, 0x01	; 1
   19256:	cd 01       	movw	r24, r26
   19258:	02 96       	adiw	r24, 0x02	; 2
   1925a:	82 0f       	add	r24, r18
   1925c:	93 1f       	adc	r25, r19
   1925e:	20 91 c6 13 	lds	r18, 0x13C6	; 0x8013c6 <__brkval>
   19262:	30 91 c7 13 	lds	r19, 0x13C7	; 0x8013c7 <__brkval+0x1>
   19266:	28 17       	cp	r18, r24
   19268:	39 07       	cpc	r19, r25
   1926a:	39 f6       	brne	.-114    	; 0x191fa <free+0x42>
   1926c:	30 97       	sbiw	r30, 0x00	; 0
   1926e:	51 f5       	brne	.+84     	; 0x192c4 <free+0x10c>
   19270:	10 92 c9 13 	sts	0x13C9, r1	; 0x8013c9 <__flp+0x1>
   19274:	10 92 c8 13 	sts	0x13C8, r1	; 0x8013c8 <__flp>
   19278:	b0 93 c7 13 	sts	0x13C7, r27	; 0x8013c7 <__brkval+0x1>
   1927c:	a0 93 c6 13 	sts	0x13C6, r26	; 0x8013c6 <__brkval>
   19280:	bc cf       	rjmp	.-136    	; 0x191fa <free+0x42>
   19282:	d3 83       	std	Z+3, r29	; 0x03
   19284:	c2 83       	std	Z+2, r28	; 0x02
   19286:	40 81       	ld	r20, Z
   19288:	51 81       	ldd	r21, Z+1	; 0x01
   1928a:	84 0f       	add	r24, r20
   1928c:	95 1f       	adc	r25, r21
   1928e:	c8 17       	cp	r28, r24
   19290:	d9 07       	cpc	r29, r25
   19292:	61 f4       	brne	.+24     	; 0x192ac <free+0xf4>
   19294:	4e 5f       	subi	r20, 0xFE	; 254
   19296:	5f 4f       	sbci	r21, 0xFF	; 255
   19298:	88 81       	ld	r24, Y
   1929a:	99 81       	ldd	r25, Y+1	; 0x01
   1929c:	48 0f       	add	r20, r24
   1929e:	59 1f       	adc	r21, r25
   192a0:	51 83       	std	Z+1, r21	; 0x01
   192a2:	40 83       	st	Z, r20
   192a4:	8a 81       	ldd	r24, Y+2	; 0x02
   192a6:	9b 81       	ldd	r25, Y+3	; 0x03
   192a8:	93 83       	std	Z+3, r25	; 0x03
   192aa:	82 83       	std	Z+2, r24	; 0x02
   192ac:	21 15       	cp	r18, r1
   192ae:	31 05       	cpc	r19, r1
   192b0:	09 f0       	breq	.+2      	; 0x192b4 <free+0xfc>
   192b2:	b0 cf       	rjmp	.-160    	; 0x19214 <free+0x5c>
   192b4:	f0 93 c9 13 	sts	0x13C9, r31	; 0x8013c9 <__flp+0x1>
   192b8:	e0 93 c8 13 	sts	0x13C8, r30	; 0x8013c8 <__flp>
   192bc:	9e cf       	rjmp	.-196    	; 0x191fa <free+0x42>
   192be:	fd 01       	movw	r30, r26
   192c0:	dc 01       	movw	r26, r24
   192c2:	c0 cf       	rjmp	.-128    	; 0x19244 <free+0x8c>
   192c4:	13 82       	std	Z+3, r1	; 0x03
   192c6:	12 82       	std	Z+2, r1	; 0x02
   192c8:	d7 cf       	rjmp	.-82     	; 0x19278 <free+0xc0>

000192ca <strtod>:
strtod():
   192ca:	8f 92       	push	r8
   192cc:	9f 92       	push	r9
   192ce:	af 92       	push	r10
   192d0:	bf 92       	push	r11
   192d2:	cf 92       	push	r12
   192d4:	df 92       	push	r13
   192d6:	ef 92       	push	r14
   192d8:	ff 92       	push	r15
   192da:	0f 93       	push	r16
   192dc:	1f 93       	push	r17
   192de:	cf 93       	push	r28
   192e0:	df 93       	push	r29
   192e2:	5c 01       	movw	r10, r24
   192e4:	7b 01       	movw	r14, r22
   192e6:	61 15       	cp	r22, r1
   192e8:	71 05       	cpc	r23, r1
   192ea:	19 f0       	breq	.+6      	; 0x192f2 <strtod+0x28>
   192ec:	db 01       	movw	r26, r22
   192ee:	8d 93       	st	X+, r24
   192f0:	9c 93       	st	X, r25
   192f2:	85 01       	movw	r16, r10
   192f4:	0f 5f       	subi	r16, 0xFF	; 255
   192f6:	1f 4f       	sbci	r17, 0xFF	; 255
   192f8:	f5 01       	movw	r30, r10
   192fa:	d0 81       	ld	r29, Z
   192fc:	8d 2f       	mov	r24, r29
   192fe:	90 e0       	ldi	r25, 0x00	; 0
   19300:	0e 94 e0 c3 	call	0x187c0	; 0x187c0 <isspace>
   19304:	6c 01       	movw	r12, r24
   19306:	89 2b       	or	r24, r25
   19308:	b9 f5       	brne	.+110    	; 0x19378 <strtod+0xae>
   1930a:	dd 32       	cpi	r29, 0x2D	; 45
   1930c:	b9 f5       	brne	.+110    	; 0x1937c <strtod+0xb2>
   1930e:	0f 5f       	subi	r16, 0xFF	; 255
   19310:	1f 4f       	sbci	r17, 0xFF	; 255
   19312:	d5 01       	movw	r26, r10
   19314:	11 96       	adiw	r26, 0x01	; 1
   19316:	dc 91       	ld	r29, X
   19318:	c1 e0       	ldi	r28, 0x01	; 1
   1931a:	58 01       	movw	r10, r16
   1931c:	f1 e0       	ldi	r31, 0x01	; 1
   1931e:	af 1a       	sub	r10, r31
   19320:	b1 08       	sbc	r11, r1
   19322:	43 e0       	ldi	r20, 0x03	; 3
   19324:	50 e0       	ldi	r21, 0x00	; 0
   19326:	6c e9       	ldi	r22, 0x9C	; 156
   19328:	73 e0       	ldi	r23, 0x03	; 3
   1932a:	c5 01       	movw	r24, r10
   1932c:	0e 94 9e cb 	call	0x1973c	; 0x1973c <strncasecmp_P>
   19330:	89 2b       	or	r24, r25
   19332:	69 f5       	brne	.+90     	; 0x1938e <strtod+0xc4>
   19334:	68 01       	movw	r12, r16
   19336:	82 e0       	ldi	r24, 0x02	; 2
   19338:	c8 0e       	add	r12, r24
   1933a:	d1 1c       	adc	r13, r1
   1933c:	45 e0       	ldi	r20, 0x05	; 5
   1933e:	50 e0       	ldi	r21, 0x00	; 0
   19340:	67 e9       	ldi	r22, 0x97	; 151
   19342:	73 e0       	ldi	r23, 0x03	; 3
   19344:	c6 01       	movw	r24, r12
   19346:	0e 94 9e cb 	call	0x1973c	; 0x1973c <strncasecmp_P>
   1934a:	89 2b       	or	r24, r25
   1934c:	21 f4       	brne	.+8      	; 0x19356 <strtod+0x8c>
   1934e:	68 01       	movw	r12, r16
   19350:	97 e0       	ldi	r25, 0x07	; 7
   19352:	c9 0e       	add	r12, r25
   19354:	d1 1c       	adc	r13, r1
   19356:	e1 14       	cp	r14, r1
   19358:	f1 04       	cpc	r15, r1
   1935a:	19 f0       	breq	.+6      	; 0x19362 <strtod+0x98>
   1935c:	d7 01       	movw	r26, r14
   1935e:	cd 92       	st	X+, r12
   19360:	dc 92       	st	X, r13
   19362:	60 e0       	ldi	r22, 0x00	; 0
   19364:	70 e0       	ldi	r23, 0x00	; 0
   19366:	80 e8       	ldi	r24, 0x80	; 128
   19368:	9f ef       	ldi	r25, 0xFF	; 255
   1936a:	c1 11       	cpse	r28, r1
   1936c:	ff c0       	rjmp	.+510    	; 0x1956c <strtod+0x2a2>
   1936e:	60 e0       	ldi	r22, 0x00	; 0
   19370:	70 e0       	ldi	r23, 0x00	; 0
   19372:	80 e8       	ldi	r24, 0x80	; 128
   19374:	9f e7       	ldi	r25, 0x7F	; 127
   19376:	fa c0       	rjmp	.+500    	; 0x1956c <strtod+0x2a2>
   19378:	58 01       	movw	r10, r16
   1937a:	bb cf       	rjmp	.-138    	; 0x192f2 <strtod+0x28>
   1937c:	db 32       	cpi	r29, 0x2B	; 43
   1937e:	29 f4       	brne	.+10     	; 0x1938a <strtod+0xc0>
   19380:	85 01       	movw	r16, r10
   19382:	0e 5f       	subi	r16, 0xFE	; 254
   19384:	1f 4f       	sbci	r17, 0xFF	; 255
   19386:	f5 01       	movw	r30, r10
   19388:	d1 81       	ldd	r29, Z+1	; 0x01
   1938a:	c0 e0       	ldi	r28, 0x00	; 0
   1938c:	c6 cf       	rjmp	.-116    	; 0x1931a <strtod+0x50>
   1938e:	43 e0       	ldi	r20, 0x03	; 3
   19390:	50 e0       	ldi	r21, 0x00	; 0
   19392:	64 e9       	ldi	r22, 0x94	; 148
   19394:	73 e0       	ldi	r23, 0x03	; 3
   19396:	c5 01       	movw	r24, r10
   19398:	0e 94 9e cb 	call	0x1973c	; 0x1973c <strncasecmp_P>
   1939c:	89 2b       	or	r24, r25
   1939e:	e9 f0       	breq	.+58     	; 0x193da <strtod+0x110>
   193a0:	f8 01       	movw	r30, r16
   193a2:	10 e0       	ldi	r17, 0x00	; 0
   193a4:	00 e0       	ldi	r16, 0x00	; 0
   193a6:	20 e0       	ldi	r18, 0x00	; 0
   193a8:	30 e0       	ldi	r19, 0x00	; 0
   193aa:	a9 01       	movw	r20, r18
   193ac:	5f 01       	movw	r10, r30
   193ae:	b0 ed       	ldi	r27, 0xD0	; 208
   193b0:	8b 2e       	mov	r8, r27
   193b2:	8d 0e       	add	r8, r29
   193b4:	89 e0       	ldi	r24, 0x09	; 9
   193b6:	88 15       	cp	r24, r8
   193b8:	c8 f1       	brcs	.+114    	; 0x1942c <strtod+0x162>
   193ba:	9c 2e       	mov	r9, r28
   193bc:	68 94       	set
   193be:	91 f8       	bld	r9, 1
   193c0:	8c 2f       	mov	r24, r28
   193c2:	88 70       	andi	r24, 0x08	; 8
   193c4:	c2 ff       	sbrs	r28, 2
   193c6:	16 c0       	rjmp	.+44     	; 0x193f4 <strtod+0x12a>
   193c8:	81 11       	cpse	r24, r1
   193ca:	02 c0       	rjmp	.+4      	; 0x193d0 <strtod+0x106>
   193cc:	0f 5f       	subi	r16, 0xFF	; 255
   193ce:	1f 4f       	sbci	r17, 0xFF	; 255
   193d0:	31 96       	adiw	r30, 0x01	; 1
   193d2:	d5 01       	movw	r26, r10
   193d4:	dc 91       	ld	r29, X
   193d6:	c9 2d       	mov	r28, r9
   193d8:	e9 cf       	rjmp	.-46     	; 0x193ac <strtod+0xe2>
   193da:	e1 14       	cp	r14, r1
   193dc:	f1 04       	cpc	r15, r1
   193de:	29 f0       	breq	.+10     	; 0x193ea <strtod+0x120>
   193e0:	0e 5f       	subi	r16, 0xFE	; 254
   193e2:	1f 4f       	sbci	r17, 0xFF	; 255
   193e4:	f7 01       	movw	r30, r14
   193e6:	11 83       	std	Z+1, r17	; 0x01
   193e8:	00 83       	st	Z, r16
   193ea:	60 e0       	ldi	r22, 0x00	; 0
   193ec:	70 e0       	ldi	r23, 0x00	; 0
   193ee:	80 ec       	ldi	r24, 0xC0	; 192
   193f0:	9f e7       	ldi	r25, 0x7F	; 127
   193f2:	bc c0       	rjmp	.+376    	; 0x1956c <strtod+0x2a2>
   193f4:	88 23       	and	r24, r24
   193f6:	11 f0       	breq	.+4      	; 0x193fc <strtod+0x132>
   193f8:	01 50       	subi	r16, 0x01	; 1
   193fa:	11 09       	sbc	r17, r1
   193fc:	a5 e0       	ldi	r26, 0x05	; 5
   193fe:	b0 e0       	ldi	r27, 0x00	; 0
   19400:	0e 94 24 ce 	call	0x19c48	; 0x19c48 <__muluhisi3>
   19404:	9b 01       	movw	r18, r22
   19406:	ac 01       	movw	r20, r24
   19408:	22 0f       	add	r18, r18
   1940a:	33 1f       	adc	r19, r19
   1940c:	44 1f       	adc	r20, r20
   1940e:	55 1f       	adc	r21, r21
   19410:	28 0d       	add	r18, r8
   19412:	31 1d       	adc	r19, r1
   19414:	41 1d       	adc	r20, r1
   19416:	51 1d       	adc	r21, r1
   19418:	28 39       	cpi	r18, 0x98	; 152
   1941a:	99 e9       	ldi	r25, 0x99	; 153
   1941c:	39 07       	cpc	r19, r25
   1941e:	49 07       	cpc	r20, r25
   19420:	99 e1       	ldi	r25, 0x19	; 25
   19422:	59 07       	cpc	r21, r25
   19424:	a8 f2       	brcs	.-86     	; 0x193d0 <strtod+0x106>
   19426:	c6 60       	ori	r28, 0x06	; 6
   19428:	9c 2e       	mov	r9, r28
   1942a:	d2 cf       	rjmp	.-92     	; 0x193d0 <strtod+0x106>
   1942c:	ae ef       	ldi	r26, 0xFE	; 254
   1942e:	8a 12       	cpse	r8, r26
   19430:	06 c0       	rjmp	.+12     	; 0x1943e <strtod+0x174>
   19432:	c3 fd       	sbrc	r28, 3
   19434:	3c c0       	rjmp	.+120    	; 0x194ae <strtod+0x1e4>
   19436:	9c 2e       	mov	r9, r28
   19438:	68 94       	set
   1943a:	93 f8       	bld	r9, 3
   1943c:	c9 cf       	rjmp	.-110    	; 0x193d0 <strtod+0x106>
   1943e:	df 7d       	andi	r29, 0xDF	; 223
   19440:	d5 34       	cpi	r29, 0x45	; 69
   19442:	a9 f5       	brne	.+106    	; 0x194ae <strtod+0x1e4>
   19444:	80 81       	ld	r24, Z
   19446:	8d 32       	cpi	r24, 0x2D	; 45
   19448:	39 f4       	brne	.+14     	; 0x19458 <strtod+0x18e>
   1944a:	c0 61       	ori	r28, 0x10	; 16
   1944c:	df 01       	movw	r26, r30
   1944e:	12 96       	adiw	r26, 0x02	; 2
   19450:	81 81       	ldd	r24, Z+1	; 0x01
   19452:	62 e0       	ldi	r22, 0x02	; 2
   19454:	70 e0       	ldi	r23, 0x00	; 0
   19456:	06 c0       	rjmp	.+12     	; 0x19464 <strtod+0x19a>
   19458:	df 01       	movw	r26, r30
   1945a:	8b 32       	cpi	r24, 0x2B	; 43
   1945c:	c1 f3       	breq	.-16     	; 0x1944e <strtod+0x184>
   1945e:	11 96       	adiw	r26, 0x01	; 1
   19460:	61 e0       	ldi	r22, 0x01	; 1
   19462:	70 e0       	ldi	r23, 0x00	; 0
   19464:	80 53       	subi	r24, 0x30	; 48
   19466:	5d 01       	movw	r10, r26
   19468:	a6 1a       	sub	r10, r22
   1946a:	b7 0a       	sbc	r11, r23
   1946c:	8a 30       	cpi	r24, 0x0A	; 10
   1946e:	f8 f4       	brcc	.+62     	; 0x194ae <strtod+0x1e4>
   19470:	e0 e8       	ldi	r30, 0x80	; 128
   19472:	ce 16       	cp	r12, r30
   19474:	ec e0       	ldi	r30, 0x0C	; 12
   19476:	de 06       	cpc	r13, r30
   19478:	5c f4       	brge	.+22     	; 0x19490 <strtod+0x1c6>
   1947a:	b6 01       	movw	r22, r12
   1947c:	66 0f       	add	r22, r22
   1947e:	77 1f       	adc	r23, r23
   19480:	66 0f       	add	r22, r22
   19482:	77 1f       	adc	r23, r23
   19484:	c6 0e       	add	r12, r22
   19486:	d7 1e       	adc	r13, r23
   19488:	cc 0c       	add	r12, r12
   1948a:	dd 1c       	adc	r13, r13
   1948c:	c8 0e       	add	r12, r24
   1948e:	d1 1c       	adc	r13, r1
   19490:	5d 01       	movw	r10, r26
   19492:	ff ef       	ldi	r31, 0xFF	; 255
   19494:	af 1a       	sub	r10, r31
   19496:	bf 0a       	sbc	r11, r31
   19498:	8c 91       	ld	r24, X
   1949a:	80 53       	subi	r24, 0x30	; 48
   1949c:	8a 30       	cpi	r24, 0x0A	; 10
   1949e:	a8 f1       	brcs	.+106    	; 0x1950a <strtod+0x240>
   194a0:	c4 ff       	sbrs	r28, 4
   194a2:	03 c0       	rjmp	.+6      	; 0x194aa <strtod+0x1e0>
   194a4:	d1 94       	neg	r13
   194a6:	c1 94       	neg	r12
   194a8:	d1 08       	sbc	r13, r1
   194aa:	0c 0d       	add	r16, r12
   194ac:	1d 1d       	adc	r17, r13
   194ae:	c1 ff       	sbrs	r28, 1
   194b0:	09 c0       	rjmp	.+18     	; 0x194c4 <strtod+0x1fa>
   194b2:	e1 14       	cp	r14, r1
   194b4:	f1 04       	cpc	r15, r1
   194b6:	31 f0       	breq	.+12     	; 0x194c4 <strtod+0x1fa>
   194b8:	81 e0       	ldi	r24, 0x01	; 1
   194ba:	a8 1a       	sub	r10, r24
   194bc:	b1 08       	sbc	r11, r1
   194be:	d7 01       	movw	r26, r14
   194c0:	ad 92       	st	X+, r10
   194c2:	bc 92       	st	X, r11
   194c4:	ca 01       	movw	r24, r20
   194c6:	b9 01       	movw	r22, r18
   194c8:	0e 94 76 cc 	call	0x198ec	; 0x198ec <__floatunsisf>
   194cc:	c3 70       	andi	r28, 0x03	; 3
   194ce:	c3 30       	cpi	r28, 0x03	; 3
   194d0:	09 f4       	brne	.+2      	; 0x194d4 <strtod+0x20a>
   194d2:	90 58       	subi	r25, 0x80	; 128
   194d4:	4b 01       	movw	r8, r22
   194d6:	5c 01       	movw	r10, r24
   194d8:	20 e0       	ldi	r18, 0x00	; 0
   194da:	30 e0       	ldi	r19, 0x00	; 0
   194dc:	a9 01       	movw	r20, r18
   194de:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
   194e2:	88 23       	and	r24, r24
   194e4:	09 f4       	brne	.+2      	; 0x194e8 <strtod+0x21e>
   194e6:	40 c0       	rjmp	.+128    	; 0x19568 <strtod+0x29e>
   194e8:	cb ec       	ldi	r28, 0xCB	; 203
   194ea:	d3 e0       	ldi	r29, 0x03	; 3
   194ec:	17 ff       	sbrs	r17, 7
   194ee:	05 c0       	rjmp	.+10     	; 0x194fa <strtod+0x230>
   194f0:	11 95       	neg	r17
   194f2:	01 95       	neg	r16
   194f4:	11 09       	sbc	r17, r1
   194f6:	c3 eb       	ldi	r28, 0xB3	; 179
   194f8:	d3 e0       	ldi	r29, 0x03	; 3
   194fa:	6e 01       	movw	r12, r28
   194fc:	b8 e1       	ldi	r27, 0x18	; 24
   194fe:	cb 1a       	sub	r12, r27
   19500:	d1 08       	sbc	r13, r1
   19502:	80 e2       	ldi	r24, 0x20	; 32
   19504:	e8 2e       	mov	r14, r24
   19506:	f1 2c       	mov	r15, r1
   19508:	0f c0       	rjmp	.+30     	; 0x19528 <strtod+0x25e>
   1950a:	d5 01       	movw	r26, r10
   1950c:	b1 cf       	rjmp	.-158    	; 0x19470 <strtod+0x1a6>
   1950e:	fe 01       	movw	r30, r28
   19510:	25 91       	lpm	r18, Z+
   19512:	35 91       	lpm	r19, Z+
   19514:	45 91       	lpm	r20, Z+
   19516:	54 91       	lpm	r21, Z
   19518:	0e 19       	sub	r16, r14
   1951a:	1f 09       	sbc	r17, r15
   1951c:	c5 01       	movw	r24, r10
   1951e:	b4 01       	movw	r22, r8
   19520:	0e 94 d7 cc 	call	0x199ae	; 0x199ae <__mulsf3>
   19524:	4b 01       	movw	r8, r22
   19526:	5c 01       	movw	r10, r24
   19528:	d5 01       	movw	r26, r10
   1952a:	c4 01       	movw	r24, r8
   1952c:	0e 15       	cp	r16, r14
   1952e:	1f 05       	cpc	r17, r15
   19530:	74 f7       	brge	.-36     	; 0x1950e <strtod+0x244>
   19532:	24 97       	sbiw	r28, 0x04	; 4
   19534:	f5 94       	asr	r15
   19536:	e7 94       	ror	r14
   19538:	cc 16       	cp	r12, r28
   1953a:	dd 06       	cpc	r13, r29
   1953c:	a9 f7       	brne	.-22     	; 0x19528 <strtod+0x25e>
   1953e:	8a 2f       	mov	r24, r26
   19540:	88 0f       	add	r24, r24
   19542:	8b 2f       	mov	r24, r27
   19544:	88 1f       	adc	r24, r24
   19546:	8f 3f       	cpi	r24, 0xFF	; 255
   19548:	49 f0       	breq	.+18     	; 0x1955c <strtod+0x292>
   1954a:	20 e0       	ldi	r18, 0x00	; 0
   1954c:	30 e0       	ldi	r19, 0x00	; 0
   1954e:	a9 01       	movw	r20, r18
   19550:	c5 01       	movw	r24, r10
   19552:	b4 01       	movw	r22, r8
   19554:	0e 94 71 cc 	call	0x198e2	; 0x198e2 <__cmpsf2>
   19558:	81 11       	cpse	r24, r1
   1955a:	06 c0       	rjmp	.+12     	; 0x19568 <strtod+0x29e>
   1955c:	82 e2       	ldi	r24, 0x22	; 34
   1955e:	90 e0       	ldi	r25, 0x00	; 0
   19560:	90 93 c5 13 	sts	0x13C5, r25	; 0x8013c5 <errno+0x1>
   19564:	80 93 c4 13 	sts	0x13C4, r24	; 0x8013c4 <errno>
   19568:	c5 01       	movw	r24, r10
   1956a:	b4 01       	movw	r22, r8
   1956c:	df 91       	pop	r29
   1956e:	cf 91       	pop	r28
   19570:	1f 91       	pop	r17
   19572:	0f 91       	pop	r16
   19574:	ff 90       	pop	r15
   19576:	ef 90       	pop	r14
   19578:	df 90       	pop	r13
   1957a:	cf 90       	pop	r12
   1957c:	bf 90       	pop	r11
   1957e:	af 90       	pop	r10
   19580:	9f 90       	pop	r9
   19582:	8f 90       	pop	r8
   19584:	08 95       	ret

00019586 <__ftoa_engine>:
__ftoa_engine():
   19586:	28 30       	cpi	r18, 0x08	; 8
   19588:	08 f0       	brcs	.+2      	; 0x1958c <__ftoa_engine+0x6>
   1958a:	27 e0       	ldi	r18, 0x07	; 7
   1958c:	33 27       	eor	r19, r19
   1958e:	da 01       	movw	r26, r20
   19590:	99 0f       	add	r25, r25
   19592:	31 1d       	adc	r19, r1
   19594:	87 fd       	sbrc	r24, 7
   19596:	91 60       	ori	r25, 0x01	; 1
   19598:	00 96       	adiw	r24, 0x00	; 0
   1959a:	61 05       	cpc	r22, r1
   1959c:	71 05       	cpc	r23, r1
   1959e:	39 f4       	brne	.+14     	; 0x195ae <__ftoa_engine+0x28>
   195a0:	32 60       	ori	r19, 0x02	; 2
   195a2:	2e 5f       	subi	r18, 0xFE	; 254
   195a4:	3d 93       	st	X+, r19
   195a6:	30 e3       	ldi	r19, 0x30	; 48
   195a8:	2a 95       	dec	r18
   195aa:	e1 f7       	brne	.-8      	; 0x195a4 <__ftoa_engine+0x1e>
   195ac:	08 95       	ret
   195ae:	9f 3f       	cpi	r25, 0xFF	; 255
   195b0:	30 f0       	brcs	.+12     	; 0x195be <__ftoa_engine+0x38>
   195b2:	80 38       	cpi	r24, 0x80	; 128
   195b4:	71 05       	cpc	r23, r1
   195b6:	61 05       	cpc	r22, r1
   195b8:	09 f0       	breq	.+2      	; 0x195bc <__ftoa_engine+0x36>
   195ba:	3c 5f       	subi	r19, 0xFC	; 252
   195bc:	3c 5f       	subi	r19, 0xFC	; 252
   195be:	3d 93       	st	X+, r19
   195c0:	91 30       	cpi	r25, 0x01	; 1
   195c2:	08 f0       	brcs	.+2      	; 0x195c6 <__ftoa_engine+0x40>
   195c4:	80 68       	ori	r24, 0x80	; 128
   195c6:	91 1d       	adc	r25, r1
   195c8:	df 93       	push	r29
   195ca:	cf 93       	push	r28
   195cc:	1f 93       	push	r17
   195ce:	0f 93       	push	r16
   195d0:	ff 92       	push	r15
   195d2:	ef 92       	push	r14
   195d4:	19 2f       	mov	r17, r25
   195d6:	98 7f       	andi	r25, 0xF8	; 248
   195d8:	96 95       	lsr	r25
   195da:	e9 2f       	mov	r30, r25
   195dc:	96 95       	lsr	r25
   195de:	96 95       	lsr	r25
   195e0:	e9 0f       	add	r30, r25
   195e2:	ff 27       	eor	r31, r31
   195e4:	e7 5d       	subi	r30, 0xD7	; 215
   195e6:	fb 4f       	sbci	r31, 0xFB	; 251
   195e8:	99 27       	eor	r25, r25
   195ea:	33 27       	eor	r19, r19
   195ec:	ee 24       	eor	r14, r14
   195ee:	ff 24       	eor	r15, r15
   195f0:	a7 01       	movw	r20, r14
   195f2:	e7 01       	movw	r28, r14
   195f4:	05 90       	lpm	r0, Z+
   195f6:	08 94       	sec
   195f8:	07 94       	ror	r0
   195fa:	28 f4       	brcc	.+10     	; 0x19606 <__ftoa_engine+0x80>
   195fc:	36 0f       	add	r19, r22
   195fe:	e7 1e       	adc	r14, r23
   19600:	f8 1e       	adc	r15, r24
   19602:	49 1f       	adc	r20, r25
   19604:	51 1d       	adc	r21, r1
   19606:	66 0f       	add	r22, r22
   19608:	77 1f       	adc	r23, r23
   1960a:	88 1f       	adc	r24, r24
   1960c:	99 1f       	adc	r25, r25
   1960e:	06 94       	lsr	r0
   19610:	a1 f7       	brne	.-24     	; 0x195fa <__ftoa_engine+0x74>
   19612:	05 90       	lpm	r0, Z+
   19614:	07 94       	ror	r0
   19616:	28 f4       	brcc	.+10     	; 0x19622 <__ftoa_engine+0x9c>
   19618:	e7 0e       	add	r14, r23
   1961a:	f8 1e       	adc	r15, r24
   1961c:	49 1f       	adc	r20, r25
   1961e:	56 1f       	adc	r21, r22
   19620:	c1 1d       	adc	r28, r1
   19622:	77 0f       	add	r23, r23
   19624:	88 1f       	adc	r24, r24
   19626:	99 1f       	adc	r25, r25
   19628:	66 1f       	adc	r22, r22
   1962a:	06 94       	lsr	r0
   1962c:	a1 f7       	brne	.-24     	; 0x19616 <__ftoa_engine+0x90>
   1962e:	05 90       	lpm	r0, Z+
   19630:	07 94       	ror	r0
   19632:	28 f4       	brcc	.+10     	; 0x1963e <__ftoa_engine+0xb8>
   19634:	f8 0e       	add	r15, r24
   19636:	49 1f       	adc	r20, r25
   19638:	56 1f       	adc	r21, r22
   1963a:	c7 1f       	adc	r28, r23
   1963c:	d1 1d       	adc	r29, r1
   1963e:	88 0f       	add	r24, r24
   19640:	99 1f       	adc	r25, r25
   19642:	66 1f       	adc	r22, r22
   19644:	77 1f       	adc	r23, r23
   19646:	06 94       	lsr	r0
   19648:	a1 f7       	brne	.-24     	; 0x19632 <__ftoa_engine+0xac>
   1964a:	05 90       	lpm	r0, Z+
   1964c:	07 94       	ror	r0
   1964e:	20 f4       	brcc	.+8      	; 0x19658 <__ftoa_engine+0xd2>
   19650:	49 0f       	add	r20, r25
   19652:	56 1f       	adc	r21, r22
   19654:	c7 1f       	adc	r28, r23
   19656:	d8 1f       	adc	r29, r24
   19658:	99 0f       	add	r25, r25
   1965a:	66 1f       	adc	r22, r22
   1965c:	77 1f       	adc	r23, r23
   1965e:	88 1f       	adc	r24, r24
   19660:	06 94       	lsr	r0
   19662:	a9 f7       	brne	.-22     	; 0x1964e <__ftoa_engine+0xc8>
   19664:	84 91       	lpm	r24, Z
   19666:	10 95       	com	r17
   19668:	17 70       	andi	r17, 0x07	; 7
   1966a:	41 f0       	breq	.+16     	; 0x1967c <__ftoa_engine+0xf6>
   1966c:	d6 95       	lsr	r29
   1966e:	c7 95       	ror	r28
   19670:	57 95       	ror	r21
   19672:	47 95       	ror	r20
   19674:	f7 94       	ror	r15
   19676:	e7 94       	ror	r14
   19678:	1a 95       	dec	r17
   1967a:	c1 f7       	brne	.-16     	; 0x1966c <__ftoa_engine+0xe6>
   1967c:	ef ec       	ldi	r30, 0xCF	; 207
   1967e:	f3 e0       	ldi	r31, 0x03	; 3
   19680:	68 94       	set
   19682:	15 90       	lpm	r1, Z+
   19684:	15 91       	lpm	r17, Z+
   19686:	35 91       	lpm	r19, Z+
   19688:	65 91       	lpm	r22, Z+
   1968a:	95 91       	lpm	r25, Z+
   1968c:	05 90       	lpm	r0, Z+
   1968e:	7f e2       	ldi	r23, 0x2F	; 47
   19690:	73 95       	inc	r23
   19692:	e1 18       	sub	r14, r1
   19694:	f1 0a       	sbc	r15, r17
   19696:	43 0b       	sbc	r20, r19
   19698:	56 0b       	sbc	r21, r22
   1969a:	c9 0b       	sbc	r28, r25
   1969c:	d0 09       	sbc	r29, r0
   1969e:	c0 f7       	brcc	.-16     	; 0x19690 <__ftoa_engine+0x10a>
   196a0:	e1 0c       	add	r14, r1
   196a2:	f1 1e       	adc	r15, r17
   196a4:	43 1f       	adc	r20, r19
   196a6:	56 1f       	adc	r21, r22
   196a8:	c9 1f       	adc	r28, r25
   196aa:	d0 1d       	adc	r29, r0
   196ac:	7e f4       	brtc	.+30     	; 0x196cc <__ftoa_engine+0x146>
   196ae:	70 33       	cpi	r23, 0x30	; 48
   196b0:	11 f4       	brne	.+4      	; 0x196b6 <__ftoa_engine+0x130>
   196b2:	8a 95       	dec	r24
   196b4:	e6 cf       	rjmp	.-52     	; 0x19682 <__ftoa_engine+0xfc>
   196b6:	e8 94       	clt
   196b8:	01 50       	subi	r16, 0x01	; 1
   196ba:	30 f0       	brcs	.+12     	; 0x196c8 <__ftoa_engine+0x142>
   196bc:	08 0f       	add	r16, r24
   196be:	0a f4       	brpl	.+2      	; 0x196c2 <__ftoa_engine+0x13c>
   196c0:	00 27       	eor	r16, r16
   196c2:	02 17       	cp	r16, r18
   196c4:	08 f4       	brcc	.+2      	; 0x196c8 <__ftoa_engine+0x142>
   196c6:	20 2f       	mov	r18, r16
   196c8:	23 95       	inc	r18
   196ca:	02 2f       	mov	r16, r18
   196cc:	7a 33       	cpi	r23, 0x3A	; 58
   196ce:	28 f0       	brcs	.+10     	; 0x196da <__ftoa_engine+0x154>
   196d0:	79 e3       	ldi	r23, 0x39	; 57
   196d2:	7d 93       	st	X+, r23
   196d4:	2a 95       	dec	r18
   196d6:	e9 f7       	brne	.-6      	; 0x196d2 <__ftoa_engine+0x14c>
   196d8:	10 c0       	rjmp	.+32     	; 0x196fa <__ftoa_engine+0x174>
   196da:	7d 93       	st	X+, r23
   196dc:	2a 95       	dec	r18
   196de:	89 f6       	brne	.-94     	; 0x19682 <__ftoa_engine+0xfc>
   196e0:	06 94       	lsr	r0
   196e2:	97 95       	ror	r25
   196e4:	67 95       	ror	r22
   196e6:	37 95       	ror	r19
   196e8:	17 95       	ror	r17
   196ea:	17 94       	ror	r1
   196ec:	e1 18       	sub	r14, r1
   196ee:	f1 0a       	sbc	r15, r17
   196f0:	43 0b       	sbc	r20, r19
   196f2:	56 0b       	sbc	r21, r22
   196f4:	c9 0b       	sbc	r28, r25
   196f6:	d0 09       	sbc	r29, r0
   196f8:	98 f0       	brcs	.+38     	; 0x19720 <__ftoa_engine+0x19a>
   196fa:	23 95       	inc	r18
   196fc:	7e 91       	ld	r23, -X
   196fe:	73 95       	inc	r23
   19700:	7a 33       	cpi	r23, 0x3A	; 58
   19702:	08 f0       	brcs	.+2      	; 0x19706 <__ftoa_engine+0x180>
   19704:	70 e3       	ldi	r23, 0x30	; 48
   19706:	7c 93       	st	X, r23
   19708:	20 13       	cpse	r18, r16
   1970a:	b8 f7       	brcc	.-18     	; 0x196fa <__ftoa_engine+0x174>
   1970c:	7e 91       	ld	r23, -X
   1970e:	70 61       	ori	r23, 0x10	; 16
   19710:	7d 93       	st	X+, r23
   19712:	30 f0       	brcs	.+12     	; 0x19720 <__ftoa_engine+0x19a>
   19714:	83 95       	inc	r24
   19716:	71 e3       	ldi	r23, 0x31	; 49
   19718:	7d 93       	st	X+, r23
   1971a:	70 e3       	ldi	r23, 0x30	; 48
   1971c:	2a 95       	dec	r18
   1971e:	e1 f7       	brne	.-8      	; 0x19718 <__ftoa_engine+0x192>
   19720:	11 24       	eor	r1, r1
   19722:	ef 90       	pop	r14
   19724:	ff 90       	pop	r15
   19726:	0f 91       	pop	r16
   19728:	1f 91       	pop	r17
   1972a:	cf 91       	pop	r28
   1972c:	df 91       	pop	r29
   1972e:	99 27       	eor	r25, r25
   19730:	87 fd       	sbrc	r24, 7
   19732:	90 95       	com	r25
   19734:	08 95       	ret

00019736 <__ctype_isfalse>:
__ctype_isfalse():
   19736:	99 27       	eor	r25, r25
   19738:	88 27       	eor	r24, r24

0001973a <__ctype_istrue>:
__ctype_istrue():
   1973a:	08 95       	ret

0001973c <strncasecmp_P>:
strncasecmp_P():
   1973c:	fb 01       	movw	r30, r22
   1973e:	dc 01       	movw	r26, r24
   19740:	41 50       	subi	r20, 0x01	; 1
   19742:	50 40       	sbci	r21, 0x00	; 0
   19744:	88 f0       	brcs	.+34     	; 0x19768 <strncasecmp_P+0x2c>
   19746:	8d 91       	ld	r24, X+
   19748:	81 34       	cpi	r24, 0x41	; 65
   1974a:	1c f0       	brlt	.+6      	; 0x19752 <strncasecmp_P+0x16>
   1974c:	8b 35       	cpi	r24, 0x5B	; 91
   1974e:	0c f4       	brge	.+2      	; 0x19752 <strncasecmp_P+0x16>
   19750:	80 5e       	subi	r24, 0xE0	; 224
   19752:	65 91       	lpm	r22, Z+
   19754:	61 34       	cpi	r22, 0x41	; 65
   19756:	1c f0       	brlt	.+6      	; 0x1975e <strncasecmp_P+0x22>
   19758:	6b 35       	cpi	r22, 0x5B	; 91
   1975a:	0c f4       	brge	.+2      	; 0x1975e <strncasecmp_P+0x22>
   1975c:	60 5e       	subi	r22, 0xE0	; 224
   1975e:	86 1b       	sub	r24, r22
   19760:	61 11       	cpse	r22, r1
   19762:	71 f3       	breq	.-36     	; 0x19740 <strncasecmp_P+0x4>
   19764:	99 0b       	sbc	r25, r25
   19766:	08 95       	ret
   19768:	88 1b       	sub	r24, r24
   1976a:	fc cf       	rjmp	.-8      	; 0x19764 <strncasecmp_P+0x28>

0001976c <strnlen_P>:
strnlen_P():
   1976c:	fc 01       	movw	r30, r24
   1976e:	05 90       	lpm	r0, Z+
   19770:	61 50       	subi	r22, 0x01	; 1
   19772:	70 40       	sbci	r23, 0x00	; 0
   19774:	01 10       	cpse	r0, r1
   19776:	d8 f7       	brcc	.-10     	; 0x1976e <strnlen_P+0x2>
   19778:	80 95       	com	r24
   1977a:	90 95       	com	r25
   1977c:	8e 0f       	add	r24, r30
   1977e:	9f 1f       	adc	r25, r31
   19780:	08 95       	ret

00019782 <memset>:
memset():
   19782:	dc 01       	movw	r26, r24
   19784:	01 c0       	rjmp	.+2      	; 0x19788 <memset+0x6>
   19786:	6d 93       	st	X+, r22
   19788:	41 50       	subi	r20, 0x01	; 1
   1978a:	50 40       	sbci	r21, 0x00	; 0
   1978c:	e0 f7       	brcc	.-8      	; 0x19786 <memset+0x4>
   1978e:	08 95       	ret

00019790 <strnlen>:
strnlen():
   19790:	fc 01       	movw	r30, r24
   19792:	61 50       	subi	r22, 0x01	; 1
   19794:	70 40       	sbci	r23, 0x00	; 0
   19796:	01 90       	ld	r0, Z+
   19798:	01 10       	cpse	r0, r1
   1979a:	d8 f7       	brcc	.-10     	; 0x19792 <strnlen+0x2>
   1979c:	80 95       	com	r24
   1979e:	90 95       	com	r25
   197a0:	8e 0f       	add	r24, r30
   197a2:	9f 1f       	adc	r25, r31
   197a4:	08 95       	ret

000197a6 <strrev>:
strrev():
   197a6:	dc 01       	movw	r26, r24
   197a8:	fc 01       	movw	r30, r24
   197aa:	67 2f       	mov	r22, r23
   197ac:	71 91       	ld	r23, Z+
   197ae:	77 23       	and	r23, r23
   197b0:	e1 f7       	brne	.-8      	; 0x197aa <strrev+0x4>
   197b2:	32 97       	sbiw	r30, 0x02	; 2
   197b4:	04 c0       	rjmp	.+8      	; 0x197be <strrev+0x18>
   197b6:	7c 91       	ld	r23, X
   197b8:	6d 93       	st	X+, r22
   197ba:	70 83       	st	Z, r23
   197bc:	62 91       	ld	r22, -Z
   197be:	ae 17       	cp	r26, r30
   197c0:	bf 07       	cpc	r27, r31
   197c2:	c8 f3       	brcs	.-14     	; 0x197b6 <strrev+0x10>
   197c4:	08 95       	ret

000197c6 <fputc>:
fputc():
   197c6:	0f 93       	push	r16
   197c8:	1f 93       	push	r17
   197ca:	cf 93       	push	r28
   197cc:	df 93       	push	r29
   197ce:	18 2f       	mov	r17, r24
   197d0:	09 2f       	mov	r16, r25
   197d2:	eb 01       	movw	r28, r22
   197d4:	8b 81       	ldd	r24, Y+3	; 0x03
   197d6:	81 fd       	sbrc	r24, 1
   197d8:	09 c0       	rjmp	.+18     	; 0x197ec <fputc+0x26>
   197da:	1f ef       	ldi	r17, 0xFF	; 255
   197dc:	0f ef       	ldi	r16, 0xFF	; 255
   197de:	81 2f       	mov	r24, r17
   197e0:	90 2f       	mov	r25, r16
   197e2:	df 91       	pop	r29
   197e4:	cf 91       	pop	r28
   197e6:	1f 91       	pop	r17
   197e8:	0f 91       	pop	r16
   197ea:	08 95       	ret
   197ec:	82 ff       	sbrs	r24, 2
   197ee:	14 c0       	rjmp	.+40     	; 0x19818 <fputc+0x52>
   197f0:	2e 81       	ldd	r18, Y+6	; 0x06
   197f2:	3f 81       	ldd	r19, Y+7	; 0x07
   197f4:	8c 81       	ldd	r24, Y+4	; 0x04
   197f6:	9d 81       	ldd	r25, Y+5	; 0x05
   197f8:	28 17       	cp	r18, r24
   197fa:	39 07       	cpc	r19, r25
   197fc:	3c f4       	brge	.+14     	; 0x1980c <fputc+0x46>
   197fe:	e8 81       	ld	r30, Y
   19800:	f9 81       	ldd	r31, Y+1	; 0x01
   19802:	cf 01       	movw	r24, r30
   19804:	01 96       	adiw	r24, 0x01	; 1
   19806:	99 83       	std	Y+1, r25	; 0x01
   19808:	88 83       	st	Y, r24
   1980a:	10 83       	st	Z, r17
   1980c:	8e 81       	ldd	r24, Y+6	; 0x06
   1980e:	9f 81       	ldd	r25, Y+7	; 0x07
   19810:	01 96       	adiw	r24, 0x01	; 1
   19812:	9f 83       	std	Y+7, r25	; 0x07
   19814:	8e 83       	std	Y+6, r24	; 0x06
   19816:	e3 cf       	rjmp	.-58     	; 0x197de <fputc+0x18>
   19818:	e8 85       	ldd	r30, Y+8	; 0x08
   1981a:	f9 85       	ldd	r31, Y+9	; 0x09
   1981c:	81 2f       	mov	r24, r17
   1981e:	19 95       	eicall
   19820:	89 2b       	or	r24, r25
   19822:	a1 f3       	breq	.-24     	; 0x1980c <fputc+0x46>
   19824:	da cf       	rjmp	.-76     	; 0x197da <fputc+0x14>

00019826 <__ultoa_invert>:
__ultoa_invert():
   19826:	fa 01       	movw	r30, r20
   19828:	aa 27       	eor	r26, r26
   1982a:	28 30       	cpi	r18, 0x08	; 8
   1982c:	51 f1       	breq	.+84     	; 0x19882 <__ultoa_invert+0x5c>
   1982e:	20 31       	cpi	r18, 0x10	; 16
   19830:	81 f1       	breq	.+96     	; 0x19892 <__ultoa_invert+0x6c>
   19832:	e8 94       	clt
   19834:	6f 93       	push	r22
   19836:	6e 7f       	andi	r22, 0xFE	; 254
   19838:	6e 5f       	subi	r22, 0xFE	; 254
   1983a:	7f 4f       	sbci	r23, 0xFF	; 255
   1983c:	8f 4f       	sbci	r24, 0xFF	; 255
   1983e:	9f 4f       	sbci	r25, 0xFF	; 255
   19840:	af 4f       	sbci	r26, 0xFF	; 255
   19842:	b1 e0       	ldi	r27, 0x01	; 1
   19844:	3e d0       	rcall	.+124    	; 0x198c2 <__ultoa_invert+0x9c>
   19846:	b4 e0       	ldi	r27, 0x04	; 4
   19848:	3c d0       	rcall	.+120    	; 0x198c2 <__ultoa_invert+0x9c>
   1984a:	67 0f       	add	r22, r23
   1984c:	78 1f       	adc	r23, r24
   1984e:	89 1f       	adc	r24, r25
   19850:	9a 1f       	adc	r25, r26
   19852:	a1 1d       	adc	r26, r1
   19854:	68 0f       	add	r22, r24
   19856:	79 1f       	adc	r23, r25
   19858:	8a 1f       	adc	r24, r26
   1985a:	91 1d       	adc	r25, r1
   1985c:	a1 1d       	adc	r26, r1
   1985e:	6a 0f       	add	r22, r26
   19860:	71 1d       	adc	r23, r1
   19862:	81 1d       	adc	r24, r1
   19864:	91 1d       	adc	r25, r1
   19866:	a1 1d       	adc	r26, r1
   19868:	20 d0       	rcall	.+64     	; 0x198aa <__ultoa_invert+0x84>
   1986a:	09 f4       	brne	.+2      	; 0x1986e <__ultoa_invert+0x48>
   1986c:	68 94       	set
   1986e:	3f 91       	pop	r19
   19870:	2a e0       	ldi	r18, 0x0A	; 10
   19872:	26 9f       	mul	r18, r22
   19874:	11 24       	eor	r1, r1
   19876:	30 19       	sub	r19, r0
   19878:	30 5d       	subi	r19, 0xD0	; 208
   1987a:	31 93       	st	Z+, r19
   1987c:	de f6       	brtc	.-74     	; 0x19834 <__ultoa_invert+0xe>
   1987e:	cf 01       	movw	r24, r30
   19880:	08 95       	ret
   19882:	46 2f       	mov	r20, r22
   19884:	47 70       	andi	r20, 0x07	; 7
   19886:	40 5d       	subi	r20, 0xD0	; 208
   19888:	41 93       	st	Z+, r20
   1988a:	b3 e0       	ldi	r27, 0x03	; 3
   1988c:	0f d0       	rcall	.+30     	; 0x198ac <__ultoa_invert+0x86>
   1988e:	c9 f7       	brne	.-14     	; 0x19882 <__ultoa_invert+0x5c>
   19890:	f6 cf       	rjmp	.-20     	; 0x1987e <__ultoa_invert+0x58>
   19892:	46 2f       	mov	r20, r22
   19894:	4f 70       	andi	r20, 0x0F	; 15
   19896:	40 5d       	subi	r20, 0xD0	; 208
   19898:	4a 33       	cpi	r20, 0x3A	; 58
   1989a:	18 f0       	brcs	.+6      	; 0x198a2 <__ultoa_invert+0x7c>
   1989c:	49 5d       	subi	r20, 0xD9	; 217
   1989e:	31 fd       	sbrc	r19, 1
   198a0:	40 52       	subi	r20, 0x20	; 32
   198a2:	41 93       	st	Z+, r20
   198a4:	02 d0       	rcall	.+4      	; 0x198aa <__ultoa_invert+0x84>
   198a6:	a9 f7       	brne	.-22     	; 0x19892 <__ultoa_invert+0x6c>
   198a8:	ea cf       	rjmp	.-44     	; 0x1987e <__ultoa_invert+0x58>
   198aa:	b4 e0       	ldi	r27, 0x04	; 4
   198ac:	a6 95       	lsr	r26
   198ae:	97 95       	ror	r25
   198b0:	87 95       	ror	r24
   198b2:	77 95       	ror	r23
   198b4:	67 95       	ror	r22
   198b6:	ba 95       	dec	r27
   198b8:	c9 f7       	brne	.-14     	; 0x198ac <__ultoa_invert+0x86>
   198ba:	00 97       	sbiw	r24, 0x00	; 0
   198bc:	61 05       	cpc	r22, r1
   198be:	71 05       	cpc	r23, r1
   198c0:	08 95       	ret
   198c2:	9b 01       	movw	r18, r22
   198c4:	ac 01       	movw	r20, r24
   198c6:	0a 2e       	mov	r0, r26
   198c8:	06 94       	lsr	r0
   198ca:	57 95       	ror	r21
   198cc:	47 95       	ror	r20
   198ce:	37 95       	ror	r19
   198d0:	27 95       	ror	r18
   198d2:	ba 95       	dec	r27
   198d4:	c9 f7       	brne	.-14     	; 0x198c8 <__ultoa_invert+0xa2>
   198d6:	62 0f       	add	r22, r18
   198d8:	73 1f       	adc	r23, r19
   198da:	84 1f       	adc	r24, r20
   198dc:	95 1f       	adc	r25, r21
   198de:	a0 1d       	adc	r26, r0
   198e0:	08 95       	ret

000198e2 <__cmpsf2>:
__cmpsf2():
   198e2:	0e 94 b3 cc 	call	0x19966	; 0x19966 <__fp_cmp>
   198e6:	08 f4       	brcc	.+2      	; 0x198ea <__cmpsf2+0x8>
   198e8:	81 e0       	ldi	r24, 0x01	; 1
   198ea:	08 95       	ret

000198ec <__floatunsisf>:
__floatunsisf():
   198ec:	e8 94       	clt
   198ee:	09 c0       	rjmp	.+18     	; 0x19902 <__floatsisf+0x12>

000198f0 <__floatsisf>:
   198f0:	97 fb       	bst	r25, 7
   198f2:	3e f4       	brtc	.+14     	; 0x19902 <__floatsisf+0x12>
   198f4:	90 95       	com	r25
   198f6:	80 95       	com	r24
   198f8:	70 95       	com	r23
   198fa:	61 95       	neg	r22
   198fc:	7f 4f       	sbci	r23, 0xFF	; 255
   198fe:	8f 4f       	sbci	r24, 0xFF	; 255
   19900:	9f 4f       	sbci	r25, 0xFF	; 255
   19902:	99 23       	and	r25, r25
   19904:	a9 f0       	breq	.+42     	; 0x19930 <__floatsisf+0x40>
   19906:	f9 2f       	mov	r31, r25
   19908:	96 e9       	ldi	r25, 0x96	; 150
   1990a:	bb 27       	eor	r27, r27
   1990c:	93 95       	inc	r25
   1990e:	f6 95       	lsr	r31
   19910:	87 95       	ror	r24
   19912:	77 95       	ror	r23
   19914:	67 95       	ror	r22
   19916:	b7 95       	ror	r27
   19918:	f1 11       	cpse	r31, r1
   1991a:	f8 cf       	rjmp	.-16     	; 0x1990c <__floatsisf+0x1c>
   1991c:	fa f4       	brpl	.+62     	; 0x1995c <__floatsisf+0x6c>
   1991e:	bb 0f       	add	r27, r27
   19920:	11 f4       	brne	.+4      	; 0x19926 <__floatsisf+0x36>
   19922:	60 ff       	sbrs	r22, 0
   19924:	1b c0       	rjmp	.+54     	; 0x1995c <__floatsisf+0x6c>
   19926:	6f 5f       	subi	r22, 0xFF	; 255
   19928:	7f 4f       	sbci	r23, 0xFF	; 255
   1992a:	8f 4f       	sbci	r24, 0xFF	; 255
   1992c:	9f 4f       	sbci	r25, 0xFF	; 255
   1992e:	16 c0       	rjmp	.+44     	; 0x1995c <__floatsisf+0x6c>
   19930:	88 23       	and	r24, r24
   19932:	11 f0       	breq	.+4      	; 0x19938 <__floatsisf+0x48>
   19934:	96 e9       	ldi	r25, 0x96	; 150
   19936:	11 c0       	rjmp	.+34     	; 0x1995a <__floatsisf+0x6a>
   19938:	77 23       	and	r23, r23
   1993a:	21 f0       	breq	.+8      	; 0x19944 <__floatsisf+0x54>
   1993c:	9e e8       	ldi	r25, 0x8E	; 142
   1993e:	87 2f       	mov	r24, r23
   19940:	76 2f       	mov	r23, r22
   19942:	05 c0       	rjmp	.+10     	; 0x1994e <__floatsisf+0x5e>
   19944:	66 23       	and	r22, r22
   19946:	71 f0       	breq	.+28     	; 0x19964 <__floatsisf+0x74>
   19948:	96 e8       	ldi	r25, 0x86	; 134
   1994a:	86 2f       	mov	r24, r22
   1994c:	70 e0       	ldi	r23, 0x00	; 0
   1994e:	60 e0       	ldi	r22, 0x00	; 0
   19950:	2a f0       	brmi	.+10     	; 0x1995c <__floatsisf+0x6c>
   19952:	9a 95       	dec	r25
   19954:	66 0f       	add	r22, r22
   19956:	77 1f       	adc	r23, r23
   19958:	88 1f       	adc	r24, r24
   1995a:	da f7       	brpl	.-10     	; 0x19952 <__floatsisf+0x62>
   1995c:	88 0f       	add	r24, r24
   1995e:	96 95       	lsr	r25
   19960:	87 95       	ror	r24
   19962:	97 f9       	bld	r25, 7
   19964:	08 95       	ret

00019966 <__fp_cmp>:
__fp_cmp():
   19966:	99 0f       	add	r25, r25
   19968:	00 08       	sbc	r0, r0
   1996a:	55 0f       	add	r21, r21
   1996c:	aa 0b       	sbc	r26, r26
   1996e:	e0 e8       	ldi	r30, 0x80	; 128
   19970:	fe ef       	ldi	r31, 0xFE	; 254
   19972:	16 16       	cp	r1, r22
   19974:	17 06       	cpc	r1, r23
   19976:	e8 07       	cpc	r30, r24
   19978:	f9 07       	cpc	r31, r25
   1997a:	c0 f0       	brcs	.+48     	; 0x199ac <__fp_cmp+0x46>
   1997c:	12 16       	cp	r1, r18
   1997e:	13 06       	cpc	r1, r19
   19980:	e4 07       	cpc	r30, r20
   19982:	f5 07       	cpc	r31, r21
   19984:	98 f0       	brcs	.+38     	; 0x199ac <__fp_cmp+0x46>
   19986:	62 1b       	sub	r22, r18
   19988:	73 0b       	sbc	r23, r19
   1998a:	84 0b       	sbc	r24, r20
   1998c:	95 0b       	sbc	r25, r21
   1998e:	39 f4       	brne	.+14     	; 0x1999e <__fp_cmp+0x38>
   19990:	0a 26       	eor	r0, r26
   19992:	61 f0       	breq	.+24     	; 0x199ac <__fp_cmp+0x46>
   19994:	23 2b       	or	r18, r19
   19996:	24 2b       	or	r18, r20
   19998:	25 2b       	or	r18, r21
   1999a:	21 f4       	brne	.+8      	; 0x199a4 <__fp_cmp+0x3e>
   1999c:	08 95       	ret
   1999e:	0a 26       	eor	r0, r26
   199a0:	09 f4       	brne	.+2      	; 0x199a4 <__fp_cmp+0x3e>
   199a2:	a1 40       	sbci	r26, 0x01	; 1
   199a4:	a6 95       	lsr	r26
   199a6:	8f ef       	ldi	r24, 0xFF	; 255
   199a8:	81 1d       	adc	r24, r1
   199aa:	81 1d       	adc	r24, r1
   199ac:	08 95       	ret

000199ae <__mulsf3>:
__mulsf3():
   199ae:	0e 94 ea cc 	call	0x199d4	; 0x199d4 <__mulsf3x>
   199b2:	0c 94 5b cd 	jmp	0x19ab6	; 0x19ab6 <__fp_round>
   199b6:	0e 94 4d cd 	call	0x19a9a	; 0x19a9a <__fp_pscA>
   199ba:	38 f0       	brcs	.+14     	; 0x199ca <__mulsf3+0x1c>
   199bc:	0e 94 54 cd 	call	0x19aa8	; 0x19aa8 <__fp_pscB>
   199c0:	20 f0       	brcs	.+8      	; 0x199ca <__mulsf3+0x1c>
   199c2:	95 23       	and	r25, r21
   199c4:	11 f0       	breq	.+4      	; 0x199ca <__mulsf3+0x1c>
   199c6:	0c 94 44 cd 	jmp	0x19a88	; 0x19a88 <__fp_inf>
   199ca:	0c 94 4a cd 	jmp	0x19a94	; 0x19a94 <__fp_nan>
   199ce:	11 24       	eor	r1, r1
   199d0:	0c 94 8f cd 	jmp	0x19b1e	; 0x19b1e <__fp_szero>

000199d4 <__mulsf3x>:
__mulsf3x():
   199d4:	0e 94 6c cd 	call	0x19ad8	; 0x19ad8 <__fp_split3>
   199d8:	70 f3       	brcs	.-36     	; 0x199b6 <__mulsf3+0x8>

000199da <__mulsf3_pse>:
   199da:	95 9f       	mul	r25, r21
   199dc:	c1 f3       	breq	.-16     	; 0x199ce <__mulsf3+0x20>
   199de:	95 0f       	add	r25, r21
   199e0:	50 e0       	ldi	r21, 0x00	; 0
   199e2:	55 1f       	adc	r21, r21
   199e4:	62 9f       	mul	r22, r18
   199e6:	f0 01       	movw	r30, r0
   199e8:	72 9f       	mul	r23, r18
   199ea:	bb 27       	eor	r27, r27
   199ec:	f0 0d       	add	r31, r0
   199ee:	b1 1d       	adc	r27, r1
   199f0:	63 9f       	mul	r22, r19
   199f2:	aa 27       	eor	r26, r26
   199f4:	f0 0d       	add	r31, r0
   199f6:	b1 1d       	adc	r27, r1
   199f8:	aa 1f       	adc	r26, r26
   199fa:	64 9f       	mul	r22, r20
   199fc:	66 27       	eor	r22, r22
   199fe:	b0 0d       	add	r27, r0
   19a00:	a1 1d       	adc	r26, r1
   19a02:	66 1f       	adc	r22, r22
   19a04:	82 9f       	mul	r24, r18
   19a06:	22 27       	eor	r18, r18
   19a08:	b0 0d       	add	r27, r0
   19a0a:	a1 1d       	adc	r26, r1
   19a0c:	62 1f       	adc	r22, r18
   19a0e:	73 9f       	mul	r23, r19
   19a10:	b0 0d       	add	r27, r0
   19a12:	a1 1d       	adc	r26, r1
   19a14:	62 1f       	adc	r22, r18
   19a16:	83 9f       	mul	r24, r19
   19a18:	a0 0d       	add	r26, r0
   19a1a:	61 1d       	adc	r22, r1
   19a1c:	22 1f       	adc	r18, r18
   19a1e:	74 9f       	mul	r23, r20
   19a20:	33 27       	eor	r19, r19
   19a22:	a0 0d       	add	r26, r0
   19a24:	61 1d       	adc	r22, r1
   19a26:	23 1f       	adc	r18, r19
   19a28:	84 9f       	mul	r24, r20
   19a2a:	60 0d       	add	r22, r0
   19a2c:	21 1d       	adc	r18, r1
   19a2e:	82 2f       	mov	r24, r18
   19a30:	76 2f       	mov	r23, r22
   19a32:	6a 2f       	mov	r22, r26
   19a34:	11 24       	eor	r1, r1
   19a36:	9f 57       	subi	r25, 0x7F	; 127
   19a38:	50 40       	sbci	r21, 0x00	; 0
   19a3a:	9a f0       	brmi	.+38     	; 0x19a62 <__mulsf3_pse+0x88>
   19a3c:	f1 f0       	breq	.+60     	; 0x19a7a <__mulsf3_pse+0xa0>
   19a3e:	88 23       	and	r24, r24
   19a40:	4a f0       	brmi	.+18     	; 0x19a54 <__mulsf3_pse+0x7a>
   19a42:	ee 0f       	add	r30, r30
   19a44:	ff 1f       	adc	r31, r31
   19a46:	bb 1f       	adc	r27, r27
   19a48:	66 1f       	adc	r22, r22
   19a4a:	77 1f       	adc	r23, r23
   19a4c:	88 1f       	adc	r24, r24
   19a4e:	91 50       	subi	r25, 0x01	; 1
   19a50:	50 40       	sbci	r21, 0x00	; 0
   19a52:	a9 f7       	brne	.-22     	; 0x19a3e <__mulsf3_pse+0x64>
   19a54:	9e 3f       	cpi	r25, 0xFE	; 254
   19a56:	51 05       	cpc	r21, r1
   19a58:	80 f0       	brcs	.+32     	; 0x19a7a <__mulsf3_pse+0xa0>
   19a5a:	0c 94 44 cd 	jmp	0x19a88	; 0x19a88 <__fp_inf>
   19a5e:	0c 94 8f cd 	jmp	0x19b1e	; 0x19b1e <__fp_szero>
   19a62:	5f 3f       	cpi	r21, 0xFF	; 255
   19a64:	e4 f3       	brlt	.-8      	; 0x19a5e <__mulsf3_pse+0x84>
   19a66:	98 3e       	cpi	r25, 0xE8	; 232
   19a68:	d4 f3       	brlt	.-12     	; 0x19a5e <__mulsf3_pse+0x84>
   19a6a:	86 95       	lsr	r24
   19a6c:	77 95       	ror	r23
   19a6e:	67 95       	ror	r22
   19a70:	b7 95       	ror	r27
   19a72:	f7 95       	ror	r31
   19a74:	e7 95       	ror	r30
   19a76:	9f 5f       	subi	r25, 0xFF	; 255
   19a78:	c1 f7       	brne	.-16     	; 0x19a6a <__mulsf3_pse+0x90>
   19a7a:	fe 2b       	or	r31, r30
   19a7c:	88 0f       	add	r24, r24
   19a7e:	91 1d       	adc	r25, r1
   19a80:	96 95       	lsr	r25
   19a82:	87 95       	ror	r24
   19a84:	97 f9       	bld	r25, 7
   19a86:	08 95       	ret

00019a88 <__fp_inf>:
   19a88:	97 f9       	bld	r25, 7
   19a8a:	9f 67       	ori	r25, 0x7F	; 127
   19a8c:	80 e8       	ldi	r24, 0x80	; 128
   19a8e:	70 e0       	ldi	r23, 0x00	; 0
   19a90:	60 e0       	ldi	r22, 0x00	; 0
   19a92:	08 95       	ret

00019a94 <__fp_nan>:
   19a94:	9f ef       	ldi	r25, 0xFF	; 255
   19a96:	80 ec       	ldi	r24, 0xC0	; 192
   19a98:	08 95       	ret

00019a9a <__fp_pscA>:
   19a9a:	00 24       	eor	r0, r0
   19a9c:	0a 94       	dec	r0
   19a9e:	16 16       	cp	r1, r22
   19aa0:	17 06       	cpc	r1, r23
   19aa2:	18 06       	cpc	r1, r24
   19aa4:	09 06       	cpc	r0, r25
__fp_pscA():
   19aa6:	08 95       	ret

00019aa8 <__fp_pscB>:
__fp_pscB():
   19aa8:	00 24       	eor	r0, r0
   19aaa:	0a 94       	dec	r0
   19aac:	12 16       	cp	r1, r18
   19aae:	13 06       	cpc	r1, r19
   19ab0:	14 06       	cpc	r1, r20
   19ab2:	05 06       	cpc	r0, r21
   19ab4:	08 95       	ret

00019ab6 <__fp_round>:
__fp_round():
   19ab6:	09 2e       	mov	r0, r25
   19ab8:	03 94       	inc	r0
   19aba:	00 0c       	add	r0, r0
   19abc:	11 f4       	brne	.+4      	; 0x19ac2 <__fp_round+0xc>
   19abe:	88 23       	and	r24, r24
   19ac0:	52 f0       	brmi	.+20     	; 0x19ad6 <__fp_round+0x20>
   19ac2:	bb 0f       	add	r27, r27
   19ac4:	40 f4       	brcc	.+16     	; 0x19ad6 <__fp_round+0x20>
   19ac6:	bf 2b       	or	r27, r31
   19ac8:	11 f4       	brne	.+4      	; 0x19ace <__fp_round+0x18>
   19aca:	60 ff       	sbrs	r22, 0
   19acc:	04 c0       	rjmp	.+8      	; 0x19ad6 <__fp_round+0x20>
   19ace:	6f 5f       	subi	r22, 0xFF	; 255
   19ad0:	7f 4f       	sbci	r23, 0xFF	; 255
   19ad2:	8f 4f       	sbci	r24, 0xFF	; 255
   19ad4:	9f 4f       	sbci	r25, 0xFF	; 255
   19ad6:	08 95       	ret

00019ad8 <__fp_split3>:
__fp_split3():
   19ad8:	57 fd       	sbrc	r21, 7
   19ada:	90 58       	subi	r25, 0x80	; 128
   19adc:	44 0f       	add	r20, r20
   19ade:	55 1f       	adc	r21, r21
   19ae0:	59 f0       	breq	.+22     	; 0x19af8 <__fp_splitA+0x10>
   19ae2:	5f 3f       	cpi	r21, 0xFF	; 255
   19ae4:	71 f0       	breq	.+28     	; 0x19b02 <__fp_splitA+0x1a>
   19ae6:	47 95       	ror	r20

00019ae8 <__fp_splitA>:
   19ae8:	88 0f       	add	r24, r24
   19aea:	97 fb       	bst	r25, 7
   19aec:	99 1f       	adc	r25, r25
   19aee:	61 f0       	breq	.+24     	; 0x19b08 <__fp_splitA+0x20>
   19af0:	9f 3f       	cpi	r25, 0xFF	; 255
   19af2:	79 f0       	breq	.+30     	; 0x19b12 <__fp_splitA+0x2a>
   19af4:	87 95       	ror	r24
   19af6:	08 95       	ret
   19af8:	12 16       	cp	r1, r18
   19afa:	13 06       	cpc	r1, r19
   19afc:	14 06       	cpc	r1, r20
   19afe:	55 1f       	adc	r21, r21
   19b00:	f2 cf       	rjmp	.-28     	; 0x19ae6 <__fp_split3+0xe>
   19b02:	46 95       	lsr	r20
   19b04:	f1 df       	rcall	.-30     	; 0x19ae8 <__fp_splitA>
   19b06:	08 c0       	rjmp	.+16     	; 0x19b18 <__fp_splitA+0x30>
   19b08:	16 16       	cp	r1, r22
   19b0a:	17 06       	cpc	r1, r23
   19b0c:	18 06       	cpc	r1, r24
   19b0e:	99 1f       	adc	r25, r25
   19b10:	f1 cf       	rjmp	.-30     	; 0x19af4 <__fp_splitA+0xc>
   19b12:	86 95       	lsr	r24
   19b14:	71 05       	cpc	r23, r1
   19b16:	61 05       	cpc	r22, r1
   19b18:	08 94       	sec
   19b1a:	08 95       	ret

00019b1c <__fp_zero>:
__fp_zero():
   19b1c:	e8 94       	clt

00019b1e <__fp_szero>:
   19b1e:	bb 27       	eor	r27, r27
   19b20:	66 27       	eor	r22, r22
   19b22:	77 27       	eor	r23, r23
   19b24:	cb 01       	movw	r24, r22
   19b26:	97 f9       	bld	r25, 7
   19b28:	08 95       	ret

00019b2a <eeprom_read_byte>:
eeprom_read_byte():
   19b2a:	f9 99       	sbic	0x1f, 1	; 31
   19b2c:	fe cf       	rjmp	.-4      	; 0x19b2a <eeprom_read_byte>
   19b2e:	92 bd       	out	0x22, r25	; 34
   19b30:	81 bd       	out	0x21, r24	; 33
   19b32:	f8 9a       	sbi	0x1f, 0	; 31
   19b34:	99 27       	eor	r25, r25
   19b36:	80 b5       	in	r24, 0x20	; 32
   19b38:	08 95       	ret

00019b3a <eeprom_write_byte>:
eeprom_write_byte():
   19b3a:	26 2f       	mov	r18, r22

00019b3c <eeprom_write_r18>:
   19b3c:	f9 99       	sbic	0x1f, 1	; 31
   19b3e:	fe cf       	rjmp	.-4      	; 0x19b3c <eeprom_write_r18>
   19b40:	1f ba       	out	0x1f, r1	; 31
   19b42:	92 bd       	out	0x22, r25	; 34
   19b44:	81 bd       	out	0x21, r24	; 33
   19b46:	20 bd       	out	0x20, r18	; 32
   19b48:	0f b6       	in	r0, 0x3f	; 63
   19b4a:	f8 94       	cli
   19b4c:	fa 9a       	sbi	0x1f, 2	; 31
   19b4e:	f9 9a       	sbi	0x1f, 1	; 31
   19b50:	0f be       	out	0x3f, r0	; 63
   19b52:	01 96       	adiw	r24, 0x01	; 1
   19b54:	08 95       	ret

00019b56 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   19b56:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   19b58:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   19b5a:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   19b5c:	0e 94 24 ce 	call	0x19c48	; 0x19c48 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   19b60:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   19b62:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   19b64:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   19b66:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   19b68:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   19b6a:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   19b6c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   19b6e:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   19b70:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   19b72:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   19b74:	08 95       	ret

00019b76 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   19b76:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   19b78:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   19b7a:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   19b7c:	07 c0       	rjmp	.+14     	; 0x19b8c <__udivmodhi4_ep>

00019b7e <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   19b7e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   19b80:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   19b82:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   19b84:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   19b86:	10 f0       	brcs	.+4      	; 0x19b8c <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   19b88:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   19b8a:	b7 0b       	sbc	r27, r23

00019b8c <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   19b8c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   19b8e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   19b90:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   19b92:	a9 f7       	brne	.-22     	; 0x19b7e <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   19b94:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   19b96:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   19b98:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   19b9a:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   19b9c:	08 95       	ret

00019b9e <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   19b9e:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   19ba0:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   19ba2:	16 f4       	brtc	.+4      	; 0x19ba8 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   19ba4:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   19ba6:	07 d0       	rcall	.+14     	; 0x19bb6 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   19ba8:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   19baa:	09 d0       	rcall	.+18     	; 0x19bbe <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   19bac:	0e 94 bb cd 	call	0x19b76	; 0x19b76 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   19bb0:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   19bb2:	05 d0       	rcall	.+10     	; 0x19bbe <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   19bb4:	3e f4       	brtc	.+14     	; 0x19bc4 <__divmodhi4_exit>

00019bb6 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   19bb6:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   19bb8:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   19bba:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   19bbc:	08 95       	ret

00019bbe <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   19bbe:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   19bc0:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   19bc2:	7f 4f       	sbci	r23, 0xFF	; 255

00019bc4 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   19bc4:	08 95       	ret

00019bc6 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   19bc6:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   19bc8:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   19bca:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   19bcc:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   19bce:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   19bd0:	0d c0       	rjmp	.+26     	; 0x19bec <__udivmodsi4_ep>

00019bd2 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   19bd2:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   19bd4:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   19bd6:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   19bd8:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   19bda:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   19bdc:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   19bde:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   19be0:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   19be2:	20 f0       	brcs	.+8      	; 0x19bec <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   19be4:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   19be6:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   19be8:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   19bea:	f5 0b       	sbc	r31, r21

00019bec <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   19bec:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   19bee:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   19bf0:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   19bf2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   19bf4:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   19bf6:	69 f7       	brne	.-38     	; 0x19bd2 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   19bf8:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   19bfa:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   19bfc:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   19bfe:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   19c00:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   19c02:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   19c04:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   19c06:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   19c08:	08 95       	ret

00019c0a <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   19c0a:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   19c0c:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   19c0e:	1e f4       	brtc	.+6      	; 0x19c16 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   19c10:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   19c12:	0e 94 1c ce 	call	0x19c38	; 0x19c38 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   19c16:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   19c18:	07 d0       	rcall	.+14     	; 0x19c28 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   19c1a:	0e 94 e3 cd 	call	0x19bc6	; 0x19bc6 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   19c1e:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   19c20:	03 d0       	rcall	.+6      	; 0x19c28 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   19c22:	4e f4       	brtc	.+18     	; 0x19c36 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   19c24:	0c 94 1c ce 	jmp	0x19c38	; 0x19c38 <__negsi2>

00019c28 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   19c28:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   19c2a:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   19c2c:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   19c2e:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   19c30:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   19c32:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   19c34:	5f 4f       	sbci	r21, 0xFF	; 255

00019c36 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   19c36:	08 95       	ret

00019c38 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   19c38:	90 95       	com	r25
   19c3a:	80 95       	com	r24
   19c3c:	70 95       	com	r23
   19c3e:	61 95       	neg	r22
   19c40:	7f 4f       	sbci	r23, 0xFF	; 255
   19c42:	8f 4f       	sbci	r24, 0xFF	; 255
   19c44:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   19c46:	08 95       	ret

00019c48 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   19c48:	0e 94 2f ce 	call	0x19c5e	; 0x19c5e <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   19c4c:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   19c4e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   19c50:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   19c52:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   19c54:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   19c56:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   19c58:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   19c5a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   19c5c:	08 95       	ret

00019c5e <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   19c5e:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   19c60:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   19c62:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   19c64:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   19c66:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   19c68:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   19c6a:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   19c6c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   19c6e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   19c70:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   19c72:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   19c74:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   19c76:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   19c78:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   19c7a:	08 95       	ret

00019c7c <__subsf3>:
__subsf3():
   19c7c:	50 58       	subi	r21, 0x80	; 128

00019c7e <__addsf3>:
   19c7e:	bb 27       	eor	r27, r27
   19c80:	aa 27       	eor	r26, r26
   19c82:	0e 94 56 ce 	call	0x19cac	; 0x19cac <__addsf3x>
   19c86:	0c 94 5b cd 	jmp	0x19ab6	; 0x19ab6 <__fp_round>
__addsf3():
   19c8a:	0e 94 4d cd 	call	0x19a9a	; 0x19a9a <__fp_pscA>
   19c8e:	38 f0       	brcs	.+14     	; 0x19c9e <__addsf3+0x20>
   19c90:	0e 94 54 cd 	call	0x19aa8	; 0x19aa8 <__fp_pscB>
   19c94:	20 f0       	brcs	.+8      	; 0x19c9e <__addsf3+0x20>
   19c96:	39 f4       	brne	.+14     	; 0x19ca6 <__addsf3+0x28>
   19c98:	9f 3f       	cpi	r25, 0xFF	; 255
   19c9a:	19 f4       	brne	.+6      	; 0x19ca2 <__addsf3+0x24>
   19c9c:	26 f4       	brtc	.+8      	; 0x19ca6 <__addsf3+0x28>
   19c9e:	0c 94 4a cd 	jmp	0x19a94	; 0x19a94 <__fp_nan>
   19ca2:	0e f4       	brtc	.+2      	; 0x19ca6 <__addsf3+0x28>
   19ca4:	e0 95       	com	r30
   19ca6:	e7 fb       	bst	r30, 7
   19ca8:	0c 94 44 cd 	jmp	0x19a88	; 0x19a88 <__fp_inf>

00019cac <__addsf3x>:
__addsf3x():
   19cac:	e9 2f       	mov	r30, r25
   19cae:	0e 94 6c cd 	call	0x19ad8	; 0x19ad8 <__fp_split3>
   19cb2:	58 f3       	brcs	.-42     	; 0x19c8a <__addsf3+0xc>
   19cb4:	ba 17       	cp	r27, r26
   19cb6:	62 07       	cpc	r22, r18
   19cb8:	73 07       	cpc	r23, r19
   19cba:	84 07       	cpc	r24, r20
   19cbc:	95 07       	cpc	r25, r21
   19cbe:	20 f0       	brcs	.+8      	; 0x19cc8 <__addsf3x+0x1c>
   19cc0:	79 f4       	brne	.+30     	; 0x19ce0 <__addsf3x+0x34>
   19cc2:	a6 f5       	brtc	.+104    	; 0x19d2c <__addsf3x+0x80>
   19cc4:	0c 94 8e cd 	jmp	0x19b1c	; 0x19b1c <__fp_zero>
   19cc8:	0e f4       	brtc	.+2      	; 0x19ccc <__addsf3x+0x20>
   19cca:	e0 95       	com	r30
   19ccc:	0b 2e       	mov	r0, r27
   19cce:	ba 2f       	mov	r27, r26
   19cd0:	a0 2d       	mov	r26, r0
   19cd2:	0b 01       	movw	r0, r22
   19cd4:	b9 01       	movw	r22, r18
   19cd6:	90 01       	movw	r18, r0
   19cd8:	0c 01       	movw	r0, r24
   19cda:	ca 01       	movw	r24, r20
   19cdc:	a0 01       	movw	r20, r0
   19cde:	11 24       	eor	r1, r1
   19ce0:	ff 27       	eor	r31, r31
   19ce2:	59 1b       	sub	r21, r25
   19ce4:	99 f0       	breq	.+38     	; 0x19d0c <__addsf3x+0x60>
   19ce6:	59 3f       	cpi	r21, 0xF9	; 249
   19ce8:	50 f4       	brcc	.+20     	; 0x19cfe <__addsf3x+0x52>
   19cea:	50 3e       	cpi	r21, 0xE0	; 224
   19cec:	68 f1       	brcs	.+90     	; 0x19d48 <__addsf3x+0x9c>
   19cee:	1a 16       	cp	r1, r26
   19cf0:	f0 40       	sbci	r31, 0x00	; 0
   19cf2:	a2 2f       	mov	r26, r18
   19cf4:	23 2f       	mov	r18, r19
   19cf6:	34 2f       	mov	r19, r20
   19cf8:	44 27       	eor	r20, r20
   19cfa:	58 5f       	subi	r21, 0xF8	; 248
   19cfc:	f3 cf       	rjmp	.-26     	; 0x19ce4 <__addsf3x+0x38>
   19cfe:	46 95       	lsr	r20
   19d00:	37 95       	ror	r19
   19d02:	27 95       	ror	r18
   19d04:	a7 95       	ror	r26
   19d06:	f0 40       	sbci	r31, 0x00	; 0
   19d08:	53 95       	inc	r21
   19d0a:	c9 f7       	brne	.-14     	; 0x19cfe <__addsf3x+0x52>
   19d0c:	7e f4       	brtc	.+30     	; 0x19d2c <__addsf3x+0x80>
   19d0e:	1f 16       	cp	r1, r31
   19d10:	ba 0b       	sbc	r27, r26
   19d12:	62 0b       	sbc	r22, r18
   19d14:	73 0b       	sbc	r23, r19
   19d16:	84 0b       	sbc	r24, r20
   19d18:	ba f0       	brmi	.+46     	; 0x19d48 <__addsf3x+0x9c>
   19d1a:	91 50       	subi	r25, 0x01	; 1
   19d1c:	a1 f0       	breq	.+40     	; 0x19d46 <__addsf3x+0x9a>
   19d1e:	ff 0f       	add	r31, r31
   19d20:	bb 1f       	adc	r27, r27
   19d22:	66 1f       	adc	r22, r22
   19d24:	77 1f       	adc	r23, r23
   19d26:	88 1f       	adc	r24, r24
   19d28:	c2 f7       	brpl	.-16     	; 0x19d1a <__addsf3x+0x6e>
   19d2a:	0e c0       	rjmp	.+28     	; 0x19d48 <__addsf3x+0x9c>
   19d2c:	ba 0f       	add	r27, r26
   19d2e:	62 1f       	adc	r22, r18
   19d30:	73 1f       	adc	r23, r19
   19d32:	84 1f       	adc	r24, r20
   19d34:	48 f4       	brcc	.+18     	; 0x19d48 <__addsf3x+0x9c>
   19d36:	87 95       	ror	r24
   19d38:	77 95       	ror	r23
   19d3a:	67 95       	ror	r22
   19d3c:	b7 95       	ror	r27
   19d3e:	f7 95       	ror	r31
   19d40:	9e 3f       	cpi	r25, 0xFE	; 254
   19d42:	08 f0       	brcs	.+2      	; 0x19d46 <__addsf3x+0x9a>
   19d44:	b0 cf       	rjmp	.-160    	; 0x19ca6 <__addsf3+0x28>
   19d46:	93 95       	inc	r25
   19d48:	88 0f       	add	r24, r24
   19d4a:	08 f0       	brcs	.+2      	; 0x19d4e <__addsf3x+0xa2>
   19d4c:	99 27       	eor	r25, r25
   19d4e:	ee 0f       	add	r30, r30
   19d50:	97 95       	ror	r25
   19d52:	87 95       	ror	r24
   19d54:	08 95       	ret

00019d56 <__divsf3>:
   19d56:	0e 94 bf ce 	call	0x19d7e	; 0x19d7e <__divsf3x>
   19d5a:	0c 94 5b cd 	jmp	0x19ab6	; 0x19ab6 <__fp_round>
   19d5e:	0e 94 54 cd 	call	0x19aa8	; 0x19aa8 <__fp_pscB>
   19d62:	58 f0       	brcs	.+22     	; 0x19d7a <__divsf3+0x24>
   19d64:	0e 94 4d cd 	call	0x19a9a	; 0x19a9a <__fp_pscA>
   19d68:	40 f0       	brcs	.+16     	; 0x19d7a <__divsf3+0x24>
   19d6a:	29 f4       	brne	.+10     	; 0x19d76 <__divsf3+0x20>
   19d6c:	5f 3f       	cpi	r21, 0xFF	; 255
   19d6e:	29 f0       	breq	.+10     	; 0x19d7a <__divsf3+0x24>
   19d70:	0c 94 44 cd 	jmp	0x19a88	; 0x19a88 <__fp_inf>
   19d74:	51 11       	cpse	r21, r1
   19d76:	0c 94 8f cd 	jmp	0x19b1e	; 0x19b1e <__fp_szero>
__divsf3():
   19d7a:	0c 94 4a cd 	jmp	0x19a94	; 0x19a94 <__fp_nan>

00019d7e <__divsf3x>:
__divsf3x():
   19d7e:	0e 94 6c cd 	call	0x19ad8	; 0x19ad8 <__fp_split3>
   19d82:	68 f3       	brcs	.-38     	; 0x19d5e <__divsf3+0x8>

00019d84 <__divsf3_pse>:
   19d84:	99 23       	and	r25, r25
   19d86:	b1 f3       	breq	.-20     	; 0x19d74 <__divsf3+0x1e>
   19d88:	55 23       	and	r21, r21
   19d8a:	91 f3       	breq	.-28     	; 0x19d70 <__divsf3+0x1a>
   19d8c:	95 1b       	sub	r25, r21
   19d8e:	55 0b       	sbc	r21, r21
   19d90:	bb 27       	eor	r27, r27
   19d92:	aa 27       	eor	r26, r26
   19d94:	62 17       	cp	r22, r18
   19d96:	73 07       	cpc	r23, r19
   19d98:	84 07       	cpc	r24, r20
   19d9a:	38 f0       	brcs	.+14     	; 0x19daa <__divsf3_pse+0x26>
   19d9c:	9f 5f       	subi	r25, 0xFF	; 255
   19d9e:	5f 4f       	sbci	r21, 0xFF	; 255
   19da0:	22 0f       	add	r18, r18
   19da2:	33 1f       	adc	r19, r19
   19da4:	44 1f       	adc	r20, r20
   19da6:	aa 1f       	adc	r26, r26
   19da8:	a9 f3       	breq	.-22     	; 0x19d94 <__divsf3_pse+0x10>
   19daa:	35 d0       	rcall	.+106    	; 0x19e16 <__divsf3_pse+0x92>
   19dac:	0e 2e       	mov	r0, r30
   19dae:	3a f0       	brmi	.+14     	; 0x19dbe <__divsf3_pse+0x3a>
   19db0:	e0 e8       	ldi	r30, 0x80	; 128
   19db2:	32 d0       	rcall	.+100    	; 0x19e18 <__divsf3_pse+0x94>
   19db4:	91 50       	subi	r25, 0x01	; 1
   19db6:	50 40       	sbci	r21, 0x00	; 0
   19db8:	e6 95       	lsr	r30
   19dba:	00 1c       	adc	r0, r0
   19dbc:	ca f7       	brpl	.-14     	; 0x19db0 <__divsf3_pse+0x2c>
   19dbe:	2b d0       	rcall	.+86     	; 0x19e16 <__divsf3_pse+0x92>
   19dc0:	fe 2f       	mov	r31, r30
   19dc2:	29 d0       	rcall	.+82     	; 0x19e16 <__divsf3_pse+0x92>
   19dc4:	66 0f       	add	r22, r22
   19dc6:	77 1f       	adc	r23, r23
   19dc8:	88 1f       	adc	r24, r24
   19dca:	bb 1f       	adc	r27, r27
   19dcc:	26 17       	cp	r18, r22
   19dce:	37 07       	cpc	r19, r23
   19dd0:	48 07       	cpc	r20, r24
   19dd2:	ab 07       	cpc	r26, r27
   19dd4:	b0 e8       	ldi	r27, 0x80	; 128
   19dd6:	09 f0       	breq	.+2      	; 0x19dda <__divsf3_pse+0x56>
   19dd8:	bb 0b       	sbc	r27, r27
   19dda:	80 2d       	mov	r24, r0
   19ddc:	bf 01       	movw	r22, r30
   19dde:	ff 27       	eor	r31, r31
   19de0:	93 58       	subi	r25, 0x83	; 131
   19de2:	5f 4f       	sbci	r21, 0xFF	; 255
   19de4:	3a f0       	brmi	.+14     	; 0x19df4 <__divsf3_pse+0x70>
   19de6:	9e 3f       	cpi	r25, 0xFE	; 254
   19de8:	51 05       	cpc	r21, r1
   19dea:	78 f0       	brcs	.+30     	; 0x19e0a <__divsf3_pse+0x86>
   19dec:	0c 94 44 cd 	jmp	0x19a88	; 0x19a88 <__fp_inf>
   19df0:	0c 94 8f cd 	jmp	0x19b1e	; 0x19b1e <__fp_szero>
   19df4:	5f 3f       	cpi	r21, 0xFF	; 255
   19df6:	e4 f3       	brlt	.-8      	; 0x19df0 <__divsf3_pse+0x6c>
   19df8:	98 3e       	cpi	r25, 0xE8	; 232
   19dfa:	d4 f3       	brlt	.-12     	; 0x19df0 <__divsf3_pse+0x6c>
   19dfc:	86 95       	lsr	r24
   19dfe:	77 95       	ror	r23
   19e00:	67 95       	ror	r22
   19e02:	b7 95       	ror	r27
   19e04:	f7 95       	ror	r31
   19e06:	9f 5f       	subi	r25, 0xFF	; 255
   19e08:	c9 f7       	brne	.-14     	; 0x19dfc <__divsf3_pse+0x78>
   19e0a:	88 0f       	add	r24, r24
   19e0c:	91 1d       	adc	r25, r1
   19e0e:	96 95       	lsr	r25
   19e10:	87 95       	ror	r24
   19e12:	97 f9       	bld	r25, 7
   19e14:	08 95       	ret
   19e16:	e1 e0       	ldi	r30, 0x01	; 1
   19e18:	66 0f       	add	r22, r22
   19e1a:	77 1f       	adc	r23, r23
   19e1c:	88 1f       	adc	r24, r24
   19e1e:	bb 1f       	adc	r27, r27
   19e20:	62 17       	cp	r22, r18
   19e22:	73 07       	cpc	r23, r19
   19e24:	84 07       	cpc	r24, r20
   19e26:	ba 07       	cpc	r27, r26
   19e28:	20 f0       	brcs	.+8      	; 0x19e32 <__divsf3_pse+0xae>
   19e2a:	62 1b       	sub	r22, r18
   19e2c:	73 0b       	sbc	r23, r19
   19e2e:	84 0b       	sbc	r24, r20
   19e30:	ba 0b       	sbc	r27, r26
   19e32:	ee 1f       	adc	r30, r30
   19e34:	88 f7       	brcc	.-30     	; 0x19e18 <__divsf3_pse+0x94>
   19e36:	e0 95       	com	r30
   19e38:	08 95       	ret

00019e3a <__fixsfsi>:
   19e3a:	0e 94 24 cf 	call	0x19e48	; 0x19e48 <__fixunssfsi>
   19e3e:	68 94       	set
   19e40:	b1 11       	cpse	r27, r1
   19e42:	0c 94 8f cd 	jmp	0x19b1e	; 0x19b1e <__fp_szero>
   19e46:	08 95       	ret

00019e48 <__fixunssfsi>:
   19e48:	0e 94 74 cd 	call	0x19ae8	; 0x19ae8 <__fp_splitA>
   19e4c:	88 f0       	brcs	.+34     	; 0x19e70 <__fixunssfsi+0x28>
   19e4e:	9f 57       	subi	r25, 0x7F	; 127
   19e50:	98 f0       	brcs	.+38     	; 0x19e78 <__fixunssfsi+0x30>
   19e52:	b9 2f       	mov	r27, r25
   19e54:	99 27       	eor	r25, r25
   19e56:	b7 51       	subi	r27, 0x17	; 23
   19e58:	b0 f0       	brcs	.+44     	; 0x19e86 <__fixunssfsi+0x3e>
__fixunssfsi():
   19e5a:	e1 f0       	breq	.+56     	; 0x19e94 <__fixunssfsi+0x4c>
   19e5c:	66 0f       	add	r22, r22
   19e5e:	77 1f       	adc	r23, r23
   19e60:	88 1f       	adc	r24, r24
   19e62:	99 1f       	adc	r25, r25
   19e64:	1a f0       	brmi	.+6      	; 0x19e6c <__fixunssfsi+0x24>
   19e66:	ba 95       	dec	r27
   19e68:	c9 f7       	brne	.-14     	; 0x19e5c <__fixunssfsi+0x14>
   19e6a:	14 c0       	rjmp	.+40     	; 0x19e94 <__fixunssfsi+0x4c>
   19e6c:	b1 30       	cpi	r27, 0x01	; 1
   19e6e:	91 f0       	breq	.+36     	; 0x19e94 <__fixunssfsi+0x4c>
   19e70:	0e 94 8e cd 	call	0x19b1c	; 0x19b1c <__fp_zero>
   19e74:	b1 e0       	ldi	r27, 0x01	; 1
   19e76:	08 95       	ret
   19e78:	0c 94 8e cd 	jmp	0x19b1c	; 0x19b1c <__fp_zero>
   19e7c:	67 2f       	mov	r22, r23
   19e7e:	78 2f       	mov	r23, r24
   19e80:	88 27       	eor	r24, r24
   19e82:	b8 5f       	subi	r27, 0xF8	; 248
   19e84:	39 f0       	breq	.+14     	; 0x19e94 <__fixunssfsi+0x4c>
   19e86:	b9 3f       	cpi	r27, 0xF9	; 249
   19e88:	cc f3       	brlt	.-14     	; 0x19e7c <__fixunssfsi+0x34>
   19e8a:	86 95       	lsr	r24
   19e8c:	77 95       	ror	r23
   19e8e:	67 95       	ror	r22
   19e90:	b3 95       	inc	r27
   19e92:	d9 f7       	brne	.-10     	; 0x19e8a <__fixunssfsi+0x42>
   19e94:	3e f4       	brtc	.+14     	; 0x19ea4 <__fixunssfsi+0x5c>
   19e96:	90 95       	com	r25
   19e98:	80 95       	com	r24
   19e9a:	70 95       	com	r23
   19e9c:	61 95       	neg	r22
   19e9e:	7f 4f       	sbci	r23, 0xFF	; 255
   19ea0:	8f 4f       	sbci	r24, 0xFF	; 255
   19ea2:	9f 4f       	sbci	r25, 0xFF	; 255
   19ea4:	08 95       	ret

00019ea6 <__gesf2>:
__gesf2():
   19ea6:	0e 94 b3 cc 	call	0x19966	; 0x19966 <__fp_cmp>
   19eaa:	08 f4       	brcc	.+2      	; 0x19eae <__gesf2+0x8>
   19eac:	8f ef       	ldi	r24, 0xFF	; 255
   19eae:	08 95       	ret

00019eb0 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   19eb0:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   19eb2:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   19eb4:	04 c0       	rjmp	.+8      	; 0x19ebe <__udivmodqi4_ep>

00019eb6 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   19eb6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   19eb8:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   19eba:	08 f0       	brcs	.+2      	; 0x19ebe <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   19ebc:	96 1b       	sub	r25, r22

00019ebe <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   19ebe:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   19ec0:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   19ec2:	c9 f7       	brne	.-14     	; 0x19eb6 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   19ec4:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   19ec6:	08 95       	ret

00019ec8 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   19ec8:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   19eca:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   19ecc:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   19ece:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   19ed0:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   19ed2:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   19ed4:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   19ed6:	19 94       	eijmp

00019ed8 <realloc>:
realloc():
   19ed8:	4f 92       	push	r4
   19eda:	5f 92       	push	r5
   19edc:	6f 92       	push	r6
   19ede:	7f 92       	push	r7
   19ee0:	8f 92       	push	r8
   19ee2:	9f 92       	push	r9
   19ee4:	af 92       	push	r10
   19ee6:	bf 92       	push	r11
   19ee8:	cf 92       	push	r12
   19eea:	df 92       	push	r13
   19eec:	ef 92       	push	r14
   19eee:	ff 92       	push	r15
   19ef0:	0f 93       	push	r16
   19ef2:	1f 93       	push	r17
   19ef4:	cf 93       	push	r28
   19ef6:	df 93       	push	r29
   19ef8:	8c 01       	movw	r16, r24
   19efa:	00 97       	sbiw	r24, 0x00	; 0
   19efc:	99 f4       	brne	.+38     	; 0x19f24 <realloc+0x4c>
   19efe:	cb 01       	movw	r24, r22
   19f00:	df 91       	pop	r29
   19f02:	cf 91       	pop	r28
   19f04:	1f 91       	pop	r17
   19f06:	0f 91       	pop	r16
   19f08:	ff 90       	pop	r15
   19f0a:	ef 90       	pop	r14
   19f0c:	df 90       	pop	r13
   19f0e:	cf 90       	pop	r12
   19f10:	bf 90       	pop	r11
   19f12:	af 90       	pop	r10
   19f14:	9f 90       	pop	r9
   19f16:	8f 90       	pop	r8
   19f18:	7f 90       	pop	r7
   19f1a:	6f 90       	pop	r6
   19f1c:	5f 90       	pop	r5
   19f1e:	4f 90       	pop	r4
   19f20:	0c 94 40 c8 	jmp	0x19080	; 0x19080 <malloc>
   19f24:	fc 01       	movw	r30, r24
   19f26:	e6 0f       	add	r30, r22
   19f28:	f7 1f       	adc	r31, r23
   19f2a:	9c 01       	movw	r18, r24
   19f2c:	22 50       	subi	r18, 0x02	; 2
   19f2e:	31 09       	sbc	r19, r1
   19f30:	e2 17       	cp	r30, r18
   19f32:	f3 07       	cpc	r31, r19
   19f34:	08 f4       	brcc	.+2      	; 0x19f38 <realloc+0x60>
   19f36:	ae c0       	rjmp	.+348    	; 0x1a094 <realloc+0x1bc>
   19f38:	d9 01       	movw	r26, r18
   19f3a:	cd 91       	ld	r28, X+
   19f3c:	dc 91       	ld	r29, X
   19f3e:	11 97       	sbiw	r26, 0x01	; 1
   19f40:	c6 17       	cp	r28, r22
   19f42:	d7 07       	cpc	r29, r23
   19f44:	20 f1       	brcs	.+72     	; 0x19f8e <realloc+0xb6>
   19f46:	c5 30       	cpi	r28, 0x05	; 5
   19f48:	d1 05       	cpc	r29, r1
   19f4a:	78 f0       	brcs	.+30     	; 0x19f6a <realloc+0x92>
   19f4c:	ce 01       	movw	r24, r28
   19f4e:	04 97       	sbiw	r24, 0x04	; 4
   19f50:	86 17       	cp	r24, r22
   19f52:	97 07       	cpc	r25, r23
   19f54:	50 f0       	brcs	.+20     	; 0x19f6a <realloc+0x92>
   19f56:	c6 1b       	sub	r28, r22
   19f58:	d7 0b       	sbc	r29, r23
   19f5a:	22 97       	sbiw	r28, 0x02	; 2
   19f5c:	c1 93       	st	Z+, r28
   19f5e:	d1 93       	st	Z+, r29
   19f60:	6d 93       	st	X+, r22
   19f62:	7c 93       	st	X, r23
   19f64:	cf 01       	movw	r24, r30
   19f66:	0e 94 dc c8 	call	0x191b8	; 0x191b8 <free>
   19f6a:	c8 01       	movw	r24, r16
   19f6c:	df 91       	pop	r29
   19f6e:	cf 91       	pop	r28
   19f70:	1f 91       	pop	r17
   19f72:	0f 91       	pop	r16
   19f74:	ff 90       	pop	r15
   19f76:	ef 90       	pop	r14
   19f78:	df 90       	pop	r13
   19f7a:	cf 90       	pop	r12
   19f7c:	bf 90       	pop	r11
   19f7e:	af 90       	pop	r10
   19f80:	9f 90       	pop	r9
   19f82:	8f 90       	pop	r8
   19f84:	7f 90       	pop	r7
   19f86:	6f 90       	pop	r6
   19f88:	5f 90       	pop	r5
   19f8a:	4f 90       	pop	r4
   19f8c:	08 95       	ret
   19f8e:	5b 01       	movw	r10, r22
   19f90:	ac 1a       	sub	r10, r28
   19f92:	bd 0a       	sbc	r11, r29
   19f94:	4c 01       	movw	r8, r24
   19f96:	8c 0e       	add	r8, r28
   19f98:	9d 1e       	adc	r9, r29
   19f9a:	a0 91 c8 13 	lds	r26, 0x13C8	; 0x8013c8 <__flp>
   19f9e:	b0 91 c9 13 	lds	r27, 0x13C9	; 0x8013c9 <__flp+0x1>
   19fa2:	51 2c       	mov	r5, r1
   19fa4:	41 2c       	mov	r4, r1
   19fa6:	f1 2c       	mov	r15, r1
   19fa8:	e1 2c       	mov	r14, r1
   19faa:	10 97       	sbiw	r26, 0x00	; 0
   19fac:	31 f5       	brne	.+76     	; 0x19ffa <realloc+0x122>
   19fae:	80 91 c6 13 	lds	r24, 0x13C6	; 0x8013c6 <__brkval>
   19fb2:	90 91 c7 13 	lds	r25, 0x13C7	; 0x8013c7 <__brkval+0x1>
   19fb6:	88 15       	cp	r24, r8
   19fb8:	99 05       	cpc	r25, r9
   19fba:	09 f0       	breq	.+2      	; 0x19fbe <realloc+0xe6>
   19fbc:	5c c0       	rjmp	.+184    	; 0x1a076 <realloc+0x19e>
   19fbe:	46 16       	cp	r4, r22
   19fc0:	57 06       	cpc	r5, r23
   19fc2:	08 f0       	brcs	.+2      	; 0x19fc6 <realloc+0xee>
   19fc4:	58 c0       	rjmp	.+176    	; 0x1a076 <realloc+0x19e>
   19fc6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   19fca:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   19fce:	00 97       	sbiw	r24, 0x00	; 0
   19fd0:	41 f4       	brne	.+16     	; 0x19fe2 <realloc+0x10a>
   19fd2:	8d b7       	in	r24, 0x3d	; 61
   19fd4:	9e b7       	in	r25, 0x3e	; 62
   19fd6:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   19fda:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   19fde:	84 1b       	sub	r24, r20
   19fe0:	95 0b       	sbc	r25, r21
   19fe2:	e8 17       	cp	r30, r24
   19fe4:	f9 07       	cpc	r31, r25
   19fe6:	08 f0       	brcs	.+2      	; 0x19fea <realloc+0x112>
   19fe8:	55 c0       	rjmp	.+170    	; 0x1a094 <realloc+0x1bc>
   19fea:	f0 93 c7 13 	sts	0x13C7, r31	; 0x8013c7 <__brkval+0x1>
   19fee:	e0 93 c6 13 	sts	0x13C6, r30	; 0x8013c6 <__brkval>
   19ff2:	f9 01       	movw	r30, r18
   19ff4:	71 83       	std	Z+1, r23	; 0x01
   19ff6:	60 83       	st	Z, r22
   19ff8:	b8 cf       	rjmp	.-144    	; 0x19f6a <realloc+0x92>
   19ffa:	8d 91       	ld	r24, X+
   19ffc:	9c 91       	ld	r25, X
   19ffe:	11 97       	sbiw	r26, 0x01	; 1
   1a000:	12 96       	adiw	r26, 0x02	; 2
   1a002:	6c 90       	ld	r6, X
   1a004:	12 97       	sbiw	r26, 0x02	; 2
   1a006:	13 96       	adiw	r26, 0x03	; 3
   1a008:	7c 90       	ld	r7, X
   1a00a:	13 97       	sbiw	r26, 0x03	; 3
   1a00c:	a8 15       	cp	r26, r8
   1a00e:	b9 05       	cpc	r27, r9
   1a010:	59 f5       	brne	.+86     	; 0x1a068 <realloc+0x190>
   1a012:	6c 01       	movw	r12, r24
   1a014:	42 e0       	ldi	r20, 0x02	; 2
   1a016:	c4 0e       	add	r12, r20
   1a018:	d1 1c       	adc	r13, r1
   1a01a:	ca 14       	cp	r12, r10
   1a01c:	db 04       	cpc	r13, r11
   1a01e:	20 f1       	brcs	.+72     	; 0x1a068 <realloc+0x190>
   1a020:	ac 01       	movw	r20, r24
   1a022:	4a 19       	sub	r20, r10
   1a024:	5b 09       	sbc	r21, r11
   1a026:	da 01       	movw	r26, r20
   1a028:	12 96       	adiw	r26, 0x02	; 2
   1a02a:	15 97       	sbiw	r26, 0x05	; 5
   1a02c:	80 f0       	brcs	.+32     	; 0x1a04e <realloc+0x176>
   1a02e:	62 82       	std	Z+2, r6	; 0x02
   1a030:	73 82       	std	Z+3, r7	; 0x03
   1a032:	51 83       	std	Z+1, r21	; 0x01
   1a034:	40 83       	st	Z, r20
   1a036:	d9 01       	movw	r26, r18
   1a038:	6d 93       	st	X+, r22
   1a03a:	7c 93       	st	X, r23
   1a03c:	e1 14       	cp	r14, r1
   1a03e:	f1 04       	cpc	r15, r1
   1a040:	71 f0       	breq	.+28     	; 0x1a05e <realloc+0x186>
   1a042:	d7 01       	movw	r26, r14
   1a044:	13 96       	adiw	r26, 0x03	; 3
   1a046:	fc 93       	st	X, r31
   1a048:	ee 93       	st	-X, r30
   1a04a:	12 97       	sbiw	r26, 0x02	; 2
   1a04c:	8e cf       	rjmp	.-228    	; 0x19f6a <realloc+0x92>
   1a04e:	22 96       	adiw	r28, 0x02	; 2
   1a050:	8c 0f       	add	r24, r28
   1a052:	9d 1f       	adc	r25, r29
   1a054:	f9 01       	movw	r30, r18
   1a056:	91 83       	std	Z+1, r25	; 0x01
   1a058:	80 83       	st	Z, r24
   1a05a:	f3 01       	movw	r30, r6
   1a05c:	ef cf       	rjmp	.-34     	; 0x1a03c <realloc+0x164>
   1a05e:	f0 93 c9 13 	sts	0x13C9, r31	; 0x8013c9 <__flp+0x1>
   1a062:	e0 93 c8 13 	sts	0x13C8, r30	; 0x8013c8 <__flp>
   1a066:	81 cf       	rjmp	.-254    	; 0x19f6a <realloc+0x92>
   1a068:	48 16       	cp	r4, r24
   1a06a:	59 06       	cpc	r5, r25
   1a06c:	08 f4       	brcc	.+2      	; 0x1a070 <realloc+0x198>
   1a06e:	2c 01       	movw	r4, r24
   1a070:	7d 01       	movw	r14, r26
   1a072:	d3 01       	movw	r26, r6
   1a074:	9a cf       	rjmp	.-204    	; 0x19faa <realloc+0xd2>
   1a076:	cb 01       	movw	r24, r22
   1a078:	0e 94 40 c8 	call	0x19080	; 0x19080 <malloc>
   1a07c:	7c 01       	movw	r14, r24
   1a07e:	00 97       	sbiw	r24, 0x00	; 0
   1a080:	49 f0       	breq	.+18     	; 0x1a094 <realloc+0x1bc>
   1a082:	ae 01       	movw	r20, r28
   1a084:	b8 01       	movw	r22, r16
   1a086:	0e 94 52 d0 	call	0x1a0a4	; 0x1a0a4 <memcpy>
   1a08a:	c8 01       	movw	r24, r16
   1a08c:	0e 94 dc c8 	call	0x191b8	; 0x191b8 <free>
   1a090:	87 01       	movw	r16, r14
   1a092:	6b cf       	rjmp	.-298    	; 0x19f6a <realloc+0x92>
   1a094:	10 e0       	ldi	r17, 0x00	; 0
   1a096:	00 e0       	ldi	r16, 0x00	; 0
   1a098:	68 cf       	rjmp	.-304    	; 0x19f6a <realloc+0x92>

0001a09a <abort>:
abort():
   1a09a:	81 e0       	ldi	r24, 0x01	; 1
   1a09c:	90 e0       	ldi	r25, 0x00	; 0
   1a09e:	f8 94       	cli
   1a0a0:	0c 94 0d d1 	jmp	0x1a21a	; 0x1a21a <_exit>

0001a0a4 <memcpy>:
memcpy():
   1a0a4:	fb 01       	movw	r30, r22
   1a0a6:	dc 01       	movw	r26, r24
   1a0a8:	02 c0       	rjmp	.+4      	; 0x1a0ae <memcpy+0xa>
   1a0aa:	01 90       	ld	r0, Z+
   1a0ac:	0d 92       	st	X+, r0
   1a0ae:	41 50       	subi	r20, 0x01	; 1
   1a0b0:	50 40       	sbci	r21, 0x00	; 0
   1a0b2:	d8 f7       	brcc	.-10     	; 0x1a0aa <memcpy+0x6>
   1a0b4:	08 95       	ret

0001a0b6 <strcat>:
strcat():
   1a0b6:	fb 01       	movw	r30, r22
   1a0b8:	dc 01       	movw	r26, r24
   1a0ba:	0d 90       	ld	r0, X+
   1a0bc:	00 20       	and	r0, r0
   1a0be:	e9 f7       	brne	.-6      	; 0x1a0ba <strcat+0x4>
   1a0c0:	11 97       	sbiw	r26, 0x01	; 1
   1a0c2:	01 90       	ld	r0, Z+
   1a0c4:	0d 92       	st	X+, r0
   1a0c6:	00 20       	and	r0, r0
   1a0c8:	e1 f7       	brne	.-8      	; 0x1a0c2 <strcat+0xc>
   1a0ca:	08 95       	ret

0001a0cc <strchr>:
strchr():
   1a0cc:	fc 01       	movw	r30, r24
   1a0ce:	81 91       	ld	r24, Z+
   1a0d0:	86 17       	cp	r24, r22
   1a0d2:	21 f0       	breq	.+8      	; 0x1a0dc <strchr+0x10>
   1a0d4:	88 23       	and	r24, r24
   1a0d6:	d9 f7       	brne	.-10     	; 0x1a0ce <strchr+0x2>
   1a0d8:	99 27       	eor	r25, r25
   1a0da:	08 95       	ret
   1a0dc:	31 97       	sbiw	r30, 0x01	; 1
   1a0de:	cf 01       	movw	r24, r30
   1a0e0:	08 95       	ret

0001a0e2 <strcmp>:
strcmp():
   1a0e2:	fb 01       	movw	r30, r22
   1a0e4:	dc 01       	movw	r26, r24
   1a0e6:	8d 91       	ld	r24, X+
   1a0e8:	01 90       	ld	r0, Z+
   1a0ea:	80 19       	sub	r24, r0
   1a0ec:	01 10       	cpse	r0, r1
   1a0ee:	d9 f3       	breq	.-10     	; 0x1a0e6 <strcmp+0x4>
   1a0f0:	99 0b       	sbc	r25, r25
   1a0f2:	08 95       	ret

0001a0f4 <strcpy>:
strcpy():
   1a0f4:	fb 01       	movw	r30, r22
   1a0f6:	dc 01       	movw	r26, r24
   1a0f8:	01 90       	ld	r0, Z+
   1a0fa:	0d 92       	st	X+, r0
   1a0fc:	00 20       	and	r0, r0
   1a0fe:	e1 f7       	brne	.-8      	; 0x1a0f8 <strcpy+0x4>
   1a100:	08 95       	ret

0001a102 <strncmp>:
strncmp():
   1a102:	fb 01       	movw	r30, r22
   1a104:	dc 01       	movw	r26, r24
   1a106:	41 50       	subi	r20, 0x01	; 1
   1a108:	50 40       	sbci	r21, 0x00	; 0
   1a10a:	30 f0       	brcs	.+12     	; 0x1a118 <strncmp+0x16>
   1a10c:	8d 91       	ld	r24, X+
   1a10e:	01 90       	ld	r0, Z+
   1a110:	80 19       	sub	r24, r0
   1a112:	19 f4       	brne	.+6      	; 0x1a11a <strncmp+0x18>
   1a114:	00 20       	and	r0, r0
   1a116:	b9 f7       	brne	.-18     	; 0x1a106 <strncmp+0x4>
   1a118:	88 1b       	sub	r24, r24
   1a11a:	99 0b       	sbc	r25, r25
   1a11c:	08 95       	ret

0001a11e <strncpy>:
strncpy():
   1a11e:	fb 01       	movw	r30, r22
   1a120:	dc 01       	movw	r26, r24
   1a122:	41 50       	subi	r20, 0x01	; 1
   1a124:	50 40       	sbci	r21, 0x00	; 0
   1a126:	48 f0       	brcs	.+18     	; 0x1a13a <strncpy+0x1c>
   1a128:	01 90       	ld	r0, Z+
   1a12a:	0d 92       	st	X+, r0
   1a12c:	00 20       	and	r0, r0
   1a12e:	c9 f7       	brne	.-14     	; 0x1a122 <strncpy+0x4>
   1a130:	01 c0       	rjmp	.+2      	; 0x1a134 <strncpy+0x16>
   1a132:	1d 92       	st	X+, r1
   1a134:	41 50       	subi	r20, 0x01	; 1
   1a136:	50 40       	sbci	r21, 0x00	; 0
   1a138:	e0 f7       	brcc	.-8      	; 0x1a132 <strncpy+0x14>
   1a13a:	08 95       	ret

0001a13c <printf>:
printf():
   1a13c:	cf 93       	push	r28
   1a13e:	df 93       	push	r29
   1a140:	cd b7       	in	r28, 0x3d	; 61
   1a142:	de b7       	in	r29, 0x3e	; 62
   1a144:	ae 01       	movw	r20, r28
   1a146:	4a 5f       	subi	r20, 0xFA	; 250
   1a148:	5f 4f       	sbci	r21, 0xFF	; 255
   1a14a:	fa 01       	movw	r30, r20
   1a14c:	61 91       	ld	r22, Z+
   1a14e:	71 91       	ld	r23, Z+
   1a150:	af 01       	movw	r20, r30
   1a152:	80 91 b0 13 	lds	r24, 0x13B0	; 0x8013b0 <__iob+0x2>
   1a156:	90 91 b1 13 	lds	r25, 0x13B1	; 0x8013b1 <__iob+0x3>
   1a15a:	0e 94 a9 c4 	call	0x18952	; 0x18952 <vfprintf>
   1a15e:	df 91       	pop	r29
   1a160:	cf 91       	pop	r28
   1a162:	08 95       	ret

0001a164 <puts>:
puts():
   1a164:	0f 93       	push	r16
   1a166:	1f 93       	push	r17
   1a168:	cf 93       	push	r28
   1a16a:	df 93       	push	r29
   1a16c:	e0 91 b0 13 	lds	r30, 0x13B0	; 0x8013b0 <__iob+0x2>
   1a170:	f0 91 b1 13 	lds	r31, 0x13B1	; 0x8013b1 <__iob+0x3>
   1a174:	23 81       	ldd	r18, Z+3	; 0x03
   1a176:	ec 01       	movw	r28, r24
   1a178:	10 e0       	ldi	r17, 0x00	; 0
   1a17a:	00 e0       	ldi	r16, 0x00	; 0
   1a17c:	21 fd       	sbrc	r18, 1
   1a17e:	08 c0       	rjmp	.+16     	; 0x1a190 <puts+0x2c>
   1a180:	0f ef       	ldi	r16, 0xFF	; 255
   1a182:	1f ef       	ldi	r17, 0xFF	; 255
   1a184:	14 c0       	rjmp	.+40     	; 0x1a1ae <puts+0x4a>
   1a186:	19 95       	eicall
   1a188:	89 2b       	or	r24, r25
   1a18a:	11 f0       	breq	.+4      	; 0x1a190 <puts+0x2c>
   1a18c:	0f ef       	ldi	r16, 0xFF	; 255
   1a18e:	1f ef       	ldi	r17, 0xFF	; 255
   1a190:	89 91       	ld	r24, Y+
   1a192:	60 91 b0 13 	lds	r22, 0x13B0	; 0x8013b0 <__iob+0x2>
   1a196:	70 91 b1 13 	lds	r23, 0x13B1	; 0x8013b1 <__iob+0x3>
   1a19a:	db 01       	movw	r26, r22
   1a19c:	18 96       	adiw	r26, 0x08	; 8
   1a19e:	ed 91       	ld	r30, X+
   1a1a0:	fc 91       	ld	r31, X
   1a1a2:	81 11       	cpse	r24, r1
   1a1a4:	f0 cf       	rjmp	.-32     	; 0x1a186 <puts+0x22>
   1a1a6:	8a e0       	ldi	r24, 0x0A	; 10
   1a1a8:	19 95       	eicall
   1a1aa:	89 2b       	or	r24, r25
   1a1ac:	49 f7       	brne	.-46     	; 0x1a180 <puts+0x1c>
   1a1ae:	c8 01       	movw	r24, r16
   1a1b0:	df 91       	pop	r29
   1a1b2:	cf 91       	pop	r28
   1a1b4:	1f 91       	pop	r17
   1a1b6:	0f 91       	pop	r16
   1a1b8:	08 95       	ret

0001a1ba <sprintf>:
sprintf():
   1a1ba:	0f 93       	push	r16
   1a1bc:	1f 93       	push	r17
   1a1be:	cf 93       	push	r28
   1a1c0:	df 93       	push	r29
   1a1c2:	cd b7       	in	r28, 0x3d	; 61
   1a1c4:	de b7       	in	r29, 0x3e	; 62
   1a1c6:	2e 97       	sbiw	r28, 0x0e	; 14
   1a1c8:	0f b6       	in	r0, 0x3f	; 63
   1a1ca:	f8 94       	cli
   1a1cc:	de bf       	out	0x3e, r29	; 62
   1a1ce:	0f be       	out	0x3f, r0	; 63
   1a1d0:	cd bf       	out	0x3d, r28	; 61
   1a1d2:	0e 89       	ldd	r16, Y+22	; 0x16
   1a1d4:	1f 89       	ldd	r17, Y+23	; 0x17
   1a1d6:	86 e0       	ldi	r24, 0x06	; 6
   1a1d8:	8c 83       	std	Y+4, r24	; 0x04
   1a1da:	1a 83       	std	Y+2, r17	; 0x02
   1a1dc:	09 83       	std	Y+1, r16	; 0x01
   1a1de:	8f ef       	ldi	r24, 0xFF	; 255
   1a1e0:	9f e7       	ldi	r25, 0x7F	; 127
   1a1e2:	9e 83       	std	Y+6, r25	; 0x06
   1a1e4:	8d 83       	std	Y+5, r24	; 0x05
   1a1e6:	ae 01       	movw	r20, r28
   1a1e8:	46 5e       	subi	r20, 0xE6	; 230
   1a1ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1a1ec:	68 8d       	ldd	r22, Y+24	; 0x18
   1a1ee:	79 8d       	ldd	r23, Y+25	; 0x19
   1a1f0:	ce 01       	movw	r24, r28
   1a1f2:	01 96       	adiw	r24, 0x01	; 1
   1a1f4:	0e 94 a9 c4 	call	0x18952	; 0x18952 <vfprintf>
   1a1f8:	2f 81       	ldd	r18, Y+7	; 0x07
   1a1fa:	38 85       	ldd	r19, Y+8	; 0x08
   1a1fc:	02 0f       	add	r16, r18
   1a1fe:	13 1f       	adc	r17, r19
   1a200:	f8 01       	movw	r30, r16
   1a202:	10 82       	st	Z, r1
   1a204:	2e 96       	adiw	r28, 0x0e	; 14
   1a206:	0f b6       	in	r0, 0x3f	; 63
   1a208:	f8 94       	cli
   1a20a:	de bf       	out	0x3e, r29	; 62
   1a20c:	0f be       	out	0x3f, r0	; 63
   1a20e:	cd bf       	out	0x3d, r28	; 61
   1a210:	df 91       	pop	r29
   1a212:	cf 91       	pop	r28
   1a214:	1f 91       	pop	r17
   1a216:	0f 91       	pop	r16
   1a218:	08 95       	ret

0001a21a <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1a21a:	f8 94       	cli

0001a21c <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1a21c:	ff cf       	rjmp	.-2      	; 0x1a21c <__stop_program>
